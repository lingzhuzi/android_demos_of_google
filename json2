{"Background":{"RepeatingAlarm":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com/samples/RepeatingAlarm/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com/samples/RepeatingAlarm/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com/samples/RepeatingAlarm/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com/samples/RepeatingAlarm/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com/samples/RepeatingAlarm/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n        android:orientation=\"vertical\"\n\n        android:layout_width=\"fill_parent\"\n\n        android:layout_height=\"fill_parent\"\n\n        android:id=\"@+id/sample_main_layout\">\n\n    <TextView android:id=\"@+id/sample_output\"\n\n              style=\"@style/Widget.SampleMessage\"\n\n              android:layout_weight=\"1\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\"\n\n              android:text=\"@string/intro_message\"\n\n              android:padding=\"16dp\" />\n\n    <View\n\n            android:layout_width=\"fill_parent\"\n\n            android:layout_height=\"1dp\"\n\n            android:background=\"@android:color/darker_gray\"/>\n\n    <fragment\n\n            android:name=\"com.example.android.common.logger.LogFragment\"\n\n            android:id=\"@+id/log_fragment\"\n\n            android:layout_weight=\"1\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"match_parent\" />\n\n</LinearLayout>\n  "},"layout-sw600dp":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:orientation=\"vertical\"\n\n    android:layout_width=\"fill_parent\"\n\n    android:layout_height=\"fill_parent\"\n\n    android:id=\"@+id/sample_main_layout\" >\n\n \n\n    <TextView android:id=\"@+id/sample_output\"\n\n        style=\"@style/Widget.SampleMessage\"\n\n        android:background=\"@android:color/white\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:text=\"@string/intro_message\"\n\n        android:padding=\"16dp\"\n\n        android:layout_margin=\"16dp\"/>\n\n    <fragment\n\n        android:name=\"com.example.android.common.logger.LogFragment\"\n\n        android:id=\"@+id/log_fragment\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"match_parent\"\n\n        android:layout_margin=\"16dp\" />\n\n</LinearLayout>\n  "},"layout-sw600dp-land":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n        android:orientation=\"horizontal\"\n\n        android:layout_width=\"fill_parent\"\n\n        android:layout_height=\"fill_parent\"\n\n        android:id=\"@+id/sample_main_layout\">\n\n    <TextView android:id=\"@+id/sample_output\"\n\n              style=\"@style/Widget.SampleMessage\"\n\n              android:background=\"@android:color/white\"\n\n              android:layout_weight=\"1\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\"\n\n              android:text=\"@string/intro_message\"\n\n              android:layout_margin=\"16dp\" />\n\n    <fragment\n\n            android:name=\"com.example.android.common.logger.LogFragment\"\n\n            android:id=\"@+id/log_fragment\"\n\n            android:layout_weight=\"1\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"match_parent\"\n\n            android:layout_margin=\"16dp\" />\n\n</LinearLayout>\n  "},"menu":{"main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:id=\"@+id/sample_action\"\n\n          android:showAsAction=\"ifRoom|withText\"\n\n          android:title=\"@string/sample_action\" />\n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">RepeatingAlarm</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n                Introductory text that explains what the sample is intended to demonstrate. Edit\n\n                in template-params.xml.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n        <string name=\"sample_action\">Set Alarm</string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Base\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n \n\n    <style name=\"Widget.SampleOutput\">\n\n        <item name=\"android:padding\">@dimen/margin_medium</item>\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Log\" parent=\"Widget.SampleOutput\">\n\n        <item name=\"android:typeface\">monospace</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:padding\">@dimen/margin_medium</item>\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n \n\n        <item name=\"android:layout_margin\">16dp</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n    <style name=\"Log\" parent=\"Widget.SampleOutput\">\n\n        <item name=\"android:typeface\">monospace</item>\n\n    </style>\n\n \n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.common":{"activities":{"SampleActivityBase.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\npackage com.example.android.common.activities;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentActivity;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogWrapper;\n\n \n\n/**\n\n * Base launcher activity, to handle most of the common plumbing for samples.\n\n */\n\npublic class SampleActivityBase extends FragmentActivity {\n\n \n\n    public static final String TAG = \"SampleActivityBase\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n    }\n\n \n\n    @Override\n\n    protected  void onStart() {\n\n        super.onStart();\n\n        initializeLogging();\n\n    }\n\n \n\n    /** Set up targets to receive log data */\n\n    public void initializeLogging() {\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        // Wraps Android's native log framework\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        Log.setLogNode(logWrapper);\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "},"logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "}},"com.example.android.repeatingalarm":{"MainActivity.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.repeatingalarm;\n\n \n\nimport android.graphics.Color;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentTransaction;\n\nimport android.view.Menu;\n\n \n\nimport com.example.android.common.activities.SampleActivityBase;\n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogFragment;\n\nimport com.example.android.common.logger.LogWrapper;\n\nimport com.example.android.common.logger.MessageOnlyLogFilter;\n\n \n\n/**\n\n * A simple launcher activity containing a summary sample description\n\n * and a few action bar buttons.\n\n */\n\npublic class MainActivity extends SampleActivityBase {\n\n \n\n    public static final String TAG = \"MainActivity\";\n\n \n\n    public static final String FRAGTAG = \"RepeatingAlarmFragment\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_main);\n\n \n\n        if (getSupportFragmentManager().findFragmentByTag(FRAGTAG) == null ) {\n\n            FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n\n            RepeatingAlarmFragment fragment = new RepeatingAlarmFragment();\n\n            transaction.add(fragment, FRAGTAG);\n\n            transaction.commit();\n\n        }\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        getMenuInflater().inflate(R.menu.main, menu);\n\n        return true;\n\n    }\n\n \n\n    /** Create a chain of targets that will receive log data */\n\n    @Override\n\n    public void initializeLogging() {\n\n        // Wraps Android's native log framework.\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        Log.setLogNode(logWrapper);\n\n \n\n        // Filter strips out everything except the message text.\n\n        MessageOnlyLogFilter msgFilter = new MessageOnlyLogFilter();\n\n        logWrapper.setNext(msgFilter);\n\n \n\n        // On screen logging via a fragment with a TextView.\n\n        LogFragment logFragment = (LogFragment) getSupportFragmentManager()\n\n                .findFragmentById(R.id.log_fragment);\n\n        msgFilter.setNext(logFragment.getLogView());\n\n        logFragment.getLogView().setTextAppearance(this, R.style.Log);\n\n        logFragment.getLogView().setBackgroundColor(Color.WHITE);\n\n \n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  ","RepeatingAlarmFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\npackage com.example.android.repeatingalarm;\n\n \n\nimport android.app.AlarmManager;\n\nimport android.app.PendingIntent;\n\nimport android.content.Intent;\n\nimport android.os.Bundle;\n\nimport android.os.SystemClock;\n\nimport android.support.v4.app.Fragment;\n\nimport android.view.MenuItem;\n\nimport com.example.android.common.logger.*;\n\n \n\n \n\npublic class RepeatingAlarmFragment extends Fragment {\n\n \n\n    // This value is defined and consumed by app code, so any value will work.\n\n    // There's no significance to this sample using 0.\n\n    public static final int REQUEST_CODE = 0;\n\n \n\n    @Override\n\n    public void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setHasOptionsMenu(true);\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        if(item.getItemId() == R.id.sample_action) {\n\n \n\n            // First create an intent for the alarm to activate.\n\n            // This code simply starts an Activity, or brings it to the front if it has already\n\n            // been created.\n\n            Intent intent = new Intent(getActivity(), MainActivity.class);\n\n            intent.setAction(Intent.ACTION_MAIN);\n\n            intent.setFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);\n\n \n\n            // Because the intent must be fired by a system service from outside the application,\n\n            // it's necessary to wrap it in a PendingIntent.  Providing a different process with\n\n            // a PendingIntent gives that other process permission to fire the intent that this\n\n            // application has created.\n\n            // Also, this code creates a PendingIntent to start an Activity.  To create a\n\n            // BroadcastIntent instead, simply call getBroadcast instead of getIntent.\n\n            PendingIntent pendingIntent = PendingIntent.getActivity(getActivity(), REQUEST_CODE,\n\n                    intent, 0);\n\n \n\n \n\n            // There are two clock types for alarms, ELAPSED_REALTIME and RTC.\n\n            // ELAPSED_REALTIME uses time since system boot as a reference, and RTC uses UTC (wall\n\n            // clock) time.  This means ELAPSED_REALTIME is suited to setting an alarm according to\n\n            // passage of time (every 15 seconds, 15 minutes, etc), since it isn't affected by\n\n            // timezone/locale.  RTC is better suited for alarms that should be dependant on current\n\n            // locale.\n\n \n\n            // Both types have a WAKEUP version, which says to wake up the device if the screen is\n\n            // off.  This is useful for situations such as alarm clocks.  Abuse of this flag is an\n\n            // efficient way to skyrocket the uninstall rate of an application, so use with care.\n\n            // For most situations, ELAPSED_REALTIME will suffice.\n\n            int alarmType = AlarmManager.ELAPSED_REALTIME;\n\n            final int FIFTEEN_SEC_MILLIS = 15000;\n\n \n\n            // The AlarmManager, like most system services, isn't created by application code, but\n\n            // requested from the system.\n\n            AlarmManager alarmManager = (AlarmManager)\n\n                    getActivity().getSystemService(getActivity().ALARM_SERVICE);\n\n \n\n            // setRepeating takes a start delay and period between alarms as arguments.\n\n            // The below code fires after 15 seconds, and repeats every 15 seconds.  This is very\n\n            // useful for demonstration purposes, but horrendous for production.  Don't be that dev.\n\n            alarmManager.setRepeating(alarmType, SystemClock.elapsedRealtime() + FIFTEEN_SEC_MILLIS,\n\n                    FIFTEEN_SEC_MILLIS, pendingIntent);\n\n            Log.i(\"RepeatingAlarmFragment\", \"Alarm set.\");\n\n        }\n\n        return true;\n\n    }\n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.repeatingalarm\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk android:minSdkVersion=\"4\" android:targetSdkVersion=\"17\" />\n\n \n\n    <application android:allowBackup=\"true\"\n\n        android:label=\"@string/app_name\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:theme=\"@style/AppTheme\">\n\n \n\n        <activity android:name=\".MainActivity\"\n\n                  android:label=\"@string/app_name\"\n\n                  android:uiOptions=\"splitActionBarWhenNarrow\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n \n\n</manifest>\n  "}},"Connectivity":{"BasicNetworking":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicNetworking/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com/samples/BasicNetworking/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicNetworking/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicNetworking/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicNetworking/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleMessageTile\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n            android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n            android:text=\"@string/intro_message\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n  ","sample_main.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:orientation=\"vertical\"\n\n    android:layout_width=\"fill_parent\"\n\n    android:layout_height=\"fill_parent\">\n\n    <fragment\n\n        android:name=\"com.example.android.basicnetworking.SimpleTextFragment\"\n\n        android:id=\"@+id/intro_fragment\"\n\n        android:layout_weight=\"1\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"match_parent\" />\n\n    <View\n\n        android:layout_width=\"fill_parent\"\n\n        android:layout_height=\"1dp\"\n\n        android:background=\"@android:color/darker_gray\"/>\n\n    <fragment\n\n        android:name=\"com.example.android.common.logger.LogFragment\"\n\n        android:id=\"@+id/log_fragment\"\n\n        android:layout_weight=\"1\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"match_parent\" />\n\n</LinearLayout>\n  "},"menu":{"main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:id=\"@+id/test_action\"\n\n        android:showAsAction=\"ifRoom|withText\"\n\n        android:title=\"@string/test_text\" />\n\n    <item android:id=\"@+id/clear_action\"\n\n        android:showAsAction=\"ifRoom|withText\"\n\n        android:title=\"@string/clear_text\" />\n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">BasicNetworking</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n                This sample demonstrates how to use the ConnectivityManager to determine if you have\n\n                a network connection, and if so, what type of connection it is.\n\n                \\n\\nA \"NetworkInfo\" object is retrieved from the ConnectivityManager, which contains information\n\n                on the active connection, and then the connection type is printed to an on-screen console.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","strings.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n    <string name=\"test_text\">Test</string>\n\n    <string name=\"clear_text\">Clear</string>\n\n    <string name=\"wifi_connection\">The active connection is wifi.</string>\n\n    <string name=\"mobile_connection\">The active connection is mobile.</string>\n\n    <string name=\"no_wifi_or_mobile\">No wireless or mobile connection.</string>\n\n</resources>\n  ","styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under thegi License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget.SampleOutput\">\n\n        <item name=\"android:padding\">@dimen/margin_medium</item>\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Log\" parent=\"Widget.SampleOutput\">\n\n        <item name=\"android:typeface\">monospace</item>\n\n    </style>\n\n \n\n \n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.basicnetworking":{"MainActivity.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.basicnetworking;\n\n \n\nimport android.content.Context;\n\nimport android.net.ConnectivityManager;\n\nimport android.net.NetworkInfo;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentActivity;\n\nimport android.util.TypedValue;\n\nimport android.view.Menu;\n\nimport android.view.MenuItem;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogFragment;\n\nimport com.example.android.common.logger.LogWrapper;\n\nimport com.example.android.common.logger.MessageOnlyLogFilter;\n\n \n\n/**\n\n * Sample application demonstrating how to test whether a device is connected,\n\n * and if so, whether the connection happens to be wifi or mobile (it could be\n\n * something else).\n\n *\n\n * This sample uses the logging framework to display log output in the log\n\n * fragment (LogFragment).\n\n */\n\npublic class MainActivity extends FragmentActivity {\n\n \n\n    public static final String TAG = \"Basic Network Demo\";\n\n    // Whether there is a Wi-Fi connection.\n\n    private static boolean wifiConnected = false;\n\n    // Whether there is a mobile connection.\n\n    private static boolean mobileConnected = false;\n\n \n\n    // Reference to the fragment showing events, so we can clear it with a button\n\n    // as necessary.\n\n    private LogFragment mLogFragment;\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.sample_main);\n\n \n\n        // Initialize text fragment that displays intro text.\n\n        SimpleTextFragment introFragment = (SimpleTextFragment)\n\n                    getSupportFragmentManager().findFragmentById(R.id.intro_fragment);\n\n        introFragment.setText(R.string.intro_message);\n\n        introFragment.getTextView().setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16.0f);\n\n \n\n        // Initialize the logging framework.\n\n        initializeLogging();\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        getMenuInflater().inflate(R.menu.main, menu);\n\n        return true;\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch (item.getItemId()) {\n\n            // When the user clicks TEST, display the connection status.\n\n            case R.id.test_action:\n\n                checkNetworkConnection();\n\n                return true;\n\n            // Clear the log view fragment.\n\n            case R.id.clear_action:\n\n                mLogFragment.getLogView().setText(\"\");\n\n                return true;\n\n        }\n\n        return false;\n\n    }\n\n \n\n    /**\n\n     * Check whether the device is connected, and if so, whether the connection\n\n     * is wifi or mobile (it could be something else).\n\n     */\n\n    private void checkNetworkConnection() {\n\n      ConnectivityManager connMgr =\n\n          (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n\n      NetworkInfo activeInfo = connMgr.getActiveNetworkInfo();\n\n      if (activeInfo != null && activeInfo.isConnected()) {\n\n          wifiConnected = activeInfo.getType() == ConnectivityManager.TYPE_WIFI;\n\n          mobileConnected = activeInfo.getType() == ConnectivityManager.TYPE_MOBILE;\n\n          if(wifiConnected) {\n\n              Log.i(TAG, getString(R.string.wifi_connection));\n\n          } else if (mobileConnected){\n\n              Log.i(TAG, getString(R.string.mobile_connection));\n\n          }\n\n      } else {\n\n          Log.i(TAG, getString(R.string.no_wifi_or_mobile));\n\n      }\n\n    }\n\n \n\n    /** Create a chain of targets that will receive log data */\n\n    public void initializeLogging() {\n\n \n\n        // Using Log, front-end to the logging chain, emulates\n\n        // android.util.log method signatures.\n\n \n\n        // Wraps Android's native log framework\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        Log.setLogNode(logWrapper);\n\n \n\n        // A filter that strips out everything except the message text.\n\n        MessageOnlyLogFilter msgFilter = new MessageOnlyLogFilter();\n\n        logWrapper.setNext(msgFilter);\n\n \n\n        // On screen logging via a fragment with a TextView.\n\n        mLogFragment =\n\n                (LogFragment) getSupportFragmentManager().findFragmentById(R.id.log_fragment);\n\n        msgFilter.setNext(mLogFragment.getLogView());\n\n    }\n\n}\n  ","SimpleTextFragment.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.basicnetworking;\n\n \n\nimport android.os.Bundle;\n\n \n\nimport android.support.v4.app.Fragment;\n\nimport android.util.Log;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.TextView;\n\n \n\n/**\n\n * Simple fragment containing only a TextView. Used by TextPagerAdapter to create\n\n * tutorial-style pages for apps.\n\n */\n\npublic class SimpleTextFragment extends Fragment {\n\n \n\n    // Contains the text that will be displayed by this Fragment\n\n    String mText;\n\n \n\n    // Contains a resource ID for the text that will be displayed by this fragment.\n\n    int mTextId = -1;\n\n \n\n    // Keys which will be used to store/retrieve text passed in via setArguments.\n\n    public static final String TEXT_KEY = \"text\";\n\n    public static final String TEXT_ID_KEY = \"text_id\";\n\n \n\n    // For situations where the app wants to modify text at Runtime, exposing the TextView.\n\n    private TextView mTextView;\n\n \n\n    public SimpleTextFragment() {\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n            Bundle savedInstanceState) {\n\n        // Before initializing the textView, check if any arguments were provided via setArguments.\n\n        processArguments();\n\n \n\n        // Create a new TextView and set its text to whatever was provided.\n\n        mTextView = new TextView(getActivity());\n\n        mTextView.setGravity(Gravity.CENTER);\n\n \n\n        if (mText != null) {\n\n            mTextView.setText(mText);\n\n            Log.i(\"SimpleTextFragment\", mText);\n\n        }\n\n        return mTextView;\n\n    }\n\n \n\n    public TextView getTextView() {\n\n        return mTextView;\n\n    }\n\n \n\n    /**\n\n     * Changes the text for this TextView, according to the resource ID provided.\n\n     * @param stringId A resource ID representing the text content for this Fragment's TextView.\n\n     */\n\n    public void setText(int stringId) {\n\n        getTextView().setText(getActivity().getString(stringId));\n\n    }\n\n \n\n    /**\n\n     * Processes the arguments passed into this Fragment via setArguments method.\n\n     * Currently the method only looks for text or a textID, nothing else.\n\n     */\n\n    public void processArguments() {\n\n        // For most objects we'd handle the multiple possibilities for initialization variables\n\n        // as multiple constructors.  For Fragments, however, it's customary to use\n\n        // setArguments / getArguments.\n\n        if (getArguments() != null) {\n\n            Bundle args = getArguments();\n\n            if (args.containsKey(TEXT_KEY)) {\n\n                mText = args.getString(TEXT_KEY);\n\n                Log.d(\"Constructor\", \"Added Text.\");\n\n            } else if (args.containsKey(TEXT_ID_KEY)) {\n\n                mTextId = args.getInt(TEXT_ID_KEY);\n\n                mText = getString(mTextId);\n\n            }\n\n        }\n\n    }\n\n}\n  "},"com.example.android.common.logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<manifest\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.basicnetworking\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk android:minSdkVersion=\"8\" android:targetSdkVersion=\"17\" />\n\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n\n \n\n    <application\n\n        android:label=\"@string/app_name\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:theme=\"@style/Theme.Sample\"\n\n        android:allowBackup=\"true\">\n\n \n\n        <activity\n\n            android:name=\"com.example.android.basicnetworking.MainActivity\"\n\n            android:label=\"@string/app_name\"\n\n            android:uiOptions=\"splitActionBarWhenNarrow\">\n\n \n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n</manifest>\n  "},"BasicSyncAdapter":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicSyncAdapter/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com/samples/BasicSyncAdapter/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicSyncAdapter/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_action_refresh.png":"http://developer.android.com/samples/BasicSyncAdapter/res/drawable-xhdpi/ic_action_refresh.png","ic_launcher.png":"http://developer.android.com/samples/BasicSyncAdapter/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicSyncAdapter/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"actionbar_indeterminate_progress.xml":"\n    \n\n<!--\n\n  Copyright 2012 Google Inc.\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n             android:layout_height=\"wrap_content\"\n\n             android:layout_width=\"@dimen/action_button_min_width\"\n\n             android:minWidth=\"@dimen/action_button_min_width\">\n\n \n\n    <ProgressBar android:layout_width=\"@dimen/indeterminate_progress_size\"\n\n                 android:layout_height=\"@dimen/indeterminate_progress_size\"\n\n                 android:layout_gravity=\"center\"\n\n                 style=\"?indeterminateProgressStyle\" />\n\n</FrameLayout>\n  ","activity_entry_list.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n \n\n<fragment xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n          xmlns:tools=\"http://schemas.android.com/tools\"\n\n          android:id=\"@+id/entry_list\"\n\n          android:name=\"com.example.android.basicsyncadapter.EntryListFragment\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"match_parent\"\n\n          android:layout_marginLeft=\"16dp\"\n\n          android:layout_marginRight=\"16dp\"\n\n          tools:context=\".EntryListActivity\"\n\n          tools:layout=\"@android:layout/list_content\" />\n  ","activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleMessageTile\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n            android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n            android:text=\"@string/intro_message\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n  "},"menu":{"main.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\nCopyright 2013 The Android Open Source Project\n\n \n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n-->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:id=\"@+id/menu_refresh\"\n\n          android:icon=\"@drawable/ic_action_refresh\"\n\n          android:title=\"@string/description_refresh\"\n\n          android:orderInCategory=\"1\"\n\n          android:showAsAction=\"always\" />\n\n</menu>\n  "},"values":{"attrs.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\nCopyright 2013 The Android Open Source Project\n\n \n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n-->\n\n \n\n<resources>\n\n    <!-- Specifies a style resource to use for an indeterminate progress spinner. -->\n\n    <attr name=\"indeterminateProgressStyle\" format=\"reference\"/>\n\n</resources>\n  ","base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">BasicSyncAdapter</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            This sample demonstrates using SyncAdapter to fetch background data for an app that\n\n            doesn\\'t require a user-visible account type or 2-way synchronization.\n\n \n\n            \\n\\nThis sample periodically downloads the feed from the Android Developer Blog and\n\n            caches the data in a content provider. At runtime, the cached feed data is displayed\n\n            inside a ListView.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","dimen.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\nCopyright 2013 The Android Open Source Project\n\n \n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n-->\n\n \n\n<resources>\n\n    <dimen name=\"action_button_min_width\">56dp</dimen>\n\n    <dimen name=\"indeterminate_progress_size\">32dp</dimen>\n\n</resources>\n  ","strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\nCopyright 2013 The Android Open Source Project\n\n \n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n-->\n\n \n\n<resources>\n\n    <string name=\"account_name\">FeedSync Service</string>\n\n    <string name=\"title_entry_detail\">Entry Detail</string>\n\n    <string name=\"loading\">Waiting for sync...</string>\n\n    <string name=\"description_refresh\">Refresh</string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "},"xml":{"authenticator.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\nCopyright 2013 The Android Open Source Project\n\n \n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n-->\n\n \n\n<account-authenticator xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n                       android:accountType=\"com.example.android.basicsyncadapter.account\"\n\n                       android:icon=\"@drawable/ic_launcher\"\n\n                       android:smallIcon=\"@drawable/ic_launcher\"\n\n                       android:label=\"@string/app_name\"\n\n        />\n  ","syncadapter.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\nCopyright 2013 The Android Open Source Project\n\n \n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n-->\n\n \n\n<sync-adapter xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n              android:contentAuthority=\"com.example.android.basicsyncadapter\"\n\n              android:accountType=\"com.example.android.basicsyncadapter.account\"\n\n              android:userVisible=\"false\"\n\n              android:supportsUploading=\"false\"\n\n              android:allowParallelSyncs=\"false\"\n\n              android:isAlwaysSyncable=\"true\"\n\n        />\n  "}},"src":{"com.example.android.basicsyncadapter":{"net":{"FeedParser.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.basicsyncadapter.net;\n\n \n\nimport android.text.format.Time;\n\nimport android.util.Xml;\n\n \n\nimport org.xmlpull.v1.XmlPullParser;\n\nimport org.xmlpull.v1.XmlPullParserException;\n\n \n\nimport java.io.IOException;\n\nimport java.io.InputStream;\n\nimport java.text.ParseException;\n\nimport java.util.ArrayList;\n\nimport java.util.List;\n\n \n\n/**\n\n * This class parses generic Atom feeds.\n\n *\n\n * <p>Given an InputStream representation of a feed, it returns a List of entries,\n\n * where each list element represents a single entry (post) in the XML feed.\n\n *\n\n * <p>An example of an Atom feed can be found at:\n\n * http://en.wikipedia.org/w/index.php?title=Atom_(standard)&oldid=560239173#Example_of_an_Atom_1.0_feed\n\n */\n\npublic class FeedParser {\n\n \n\n    // Constants indicting XML element names that we're interested in\n\n    private static final int TAG_ID = 1;\n\n    private static final int TAG_TITLE = 2;\n\n    private static final int TAG_PUBLISHED = 3;\n\n    private static final int TAG_LINK = 4;\n\n \n\n    // We don't use XML namespaces\n\n    private static final String ns = null;\n\n \n\n    /** Parse an Atom feed, returning a collection of Entry objects.\n\n     *\n\n     * @param in Atom feed, as a stream.\n\n     * @return List of {@link com.example.android.basicsyncadapter.net.FeedParser.Entry} objects.\n\n     * @throws org.xmlpull.v1.XmlPullParserException on error parsing feed.\n\n     * @throws java.io.IOException on I/O error.\n\n     */\n\n    public List<Entry> parse(InputStream in)\n\n            throws XmlPullParserException, IOException, ParseException {\n\n        try {\n\n            XmlPullParser parser = Xml.newPullParser();\n\n            parser.setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES, false);\n\n            parser.setInput(in, null);\n\n            parser.nextTag();\n\n            return readFeed(parser);\n\n        } finally {\n\n            in.close();\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Decode a feed attached to an XmlPullParser.\n\n     *\n\n     * @param parser Incoming XMl\n\n     * @return List of {@link com.example.android.basicsyncadapter.net.FeedParser.Entry} objects.\n\n     * @throws org.xmlpull.v1.XmlPullParserException on error parsing feed.\n\n     * @throws java.io.IOException on I/O error.\n\n     */\n\n    private List<Entry> readFeed(XmlPullParser parser)\n\n            throws XmlPullParserException, IOException, ParseException {\n\n        List<Entry> entries = new ArrayList<Entry>();\n\n \n\n        // Search for <feed> tags. These wrap the beginning/end of an Atom document.\n\n        //\n\n        // Example:\n\n        // <?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n        // <feed xmlns=\"http://www.w3.org/2005/Atom\">\n\n        // ...\n\n        // </feed>\n\n        parser.require(XmlPullParser.START_TAG, ns, \"feed\");\n\n        while (parser.next() != XmlPullParser.END_TAG) {\n\n            if (parser.getEventType() != XmlPullParser.START_TAG) {\n\n                continue;\n\n            }\n\n            String name = parser.getName();\n\n            // Starts by looking for the <entry> tag. This tag repeates inside of <feed> for each\n\n            // article in the feed.\n\n            //\n\n            // Example:\n\n            // <entry>\n\n            //   <title>Article title</title>\n\n            //   <link rel=\"alternate\" type=\"text/html\" href=\"http://example.com/article/1234\"/>\n\n            //   <link rel=\"edit\" href=\"http://example.com/admin/article/1234\"/>\n\n            //   <id>urn:uuid:218AC159-7F68-4CC6-873F-22AE6017390D</id>\n\n            //   <published>2003-06-27T12:00:00Z</published>\n\n            //   <updated>2003-06-28T12:00:00Z</updated>\n\n            //   <summary>Article summary goes here.</summary>\n\n            //   <author>\n\n            //     <name>Rick Deckard</name>\n\n            //     <email>deckard@example.com</email>\n\n            //   </author>\n\n            // </entry>\n\n            if (name.equals(\"entry\")) {\n\n                entries.add(readEntry(parser));\n\n            } else {\n\n                skip(parser);\n\n            }\n\n        }\n\n        return entries;\n\n    }\n\n \n\n    /**\n\n     * Parses the contents of an entry. If it encounters a title, summary, or link tag, hands them\n\n     * off to their respective \"read\" methods for processing. Otherwise, skips the tag.\n\n     */\n\n    private Entry readEntry(XmlPullParser parser)\n\n            throws XmlPullParserException, IOException, ParseException {\n\n        parser.require(XmlPullParser.START_TAG, ns, \"entry\");\n\n        String id = null;\n\n        String title = null;\n\n        String link = null;\n\n        long publishedOn = 0;\n\n \n\n        while (parser.next() != XmlPullParser.END_TAG) {\n\n            if (parser.getEventType() != XmlPullParser.START_TAG) {\n\n                continue;\n\n            }\n\n            String name = parser.getName();\n\n            if (name.equals(\"id\")){\n\n                // Example: <id>urn:uuid:218AC159-7F68-4CC6-873F-22AE6017390D</id>\n\n                id = readTag(parser, TAG_ID);\n\n            } else if (name.equals(\"title\")) {\n\n                // Example: <title>Article title</title>\n\n                title = readTag(parser, TAG_TITLE);\n\n            } else if (name.equals(\"link\")) {\n\n                // Example: <link rel=\"alternate\" type=\"text/html\" href=\"http://example.com/article/1234\"/>\n\n                //\n\n                // Multiple link types can be included. readAlternateLink() will only return\n\n                // non-null when reading an \"alternate\"-type link. Ignore other responses.\n\n                String tempLink = readTag(parser, TAG_LINK);\n\n                if (tempLink != null) {\n\n                    link = tempLink;\n\n                }\n\n            } else if (name.equals(\"published\")) {\n\n                // Example: <published>2003-06-27T12:00:00Z</published>\n\n                Time t = new Time();\n\n                t.parse3339(readTag(parser, TAG_PUBLISHED));\n\n                publishedOn = t.toMillis(false);\n\n            } else {\n\n                skip(parser);\n\n            }\n\n        }\n\n        return new Entry(id, title, link, publishedOn);\n\n    }\n\n \n\n    /**\n\n     * Process an incoming tag and read the selected value from it.\n\n     */\n\n    private String readTag(XmlPullParser parser, int tagType)\n\n            throws IOException, XmlPullParserException {\n\n        String tag = null;\n\n        String endTag = null;\n\n \n\n        switch (tagType) {\n\n            case TAG_ID:\n\n                return readBasicTag(parser, \"id\");\n\n            case TAG_TITLE:\n\n                return readBasicTag(parser, \"title\");\n\n            case TAG_PUBLISHED:\n\n                return readBasicTag(parser, \"published\");\n\n            case TAG_LINK:\n\n                return readAlternateLink(parser);\n\n            default:\n\n                throw new IllegalArgumentException(\"Unknown tag type: \" + tagType);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Reads the body of a basic XML tag, which is guaranteed not to contain any nested elements.\n\n     *\n\n     * <p>You probably want to call readTag().\n\n     *\n\n     * @param parser Current parser object\n\n     * @param tag XML element tag name to parse\n\n     * @return Body of the specified tag\n\n     * @throws java.io.IOException\n\n     * @throws org.xmlpull.v1.XmlPullParserException\n\n     */\n\n    private String readBasicTag(XmlPullParser parser, String tag)\n\n            throws IOException, XmlPullParserException {\n\n        parser.require(XmlPullParser.START_TAG, ns, tag);\n\n        String result = readText(parser);\n\n        parser.require(XmlPullParser.END_TAG, ns, tag);\n\n        return result;\n\n    }\n\n \n\n    /**\n\n     * Processes link tags in the feed.\n\n     */\n\n    private String readAlternateLink(XmlPullParser parser)\n\n            throws IOException, XmlPullParserException {\n\n        String link = null;\n\n        parser.require(XmlPullParser.START_TAG, ns, \"link\");\n\n        String tag = parser.getName();\n\n        String relType = parser.getAttributeValue(null, \"rel\");\n\n        if (relType.equals(\"alternate\")) {\n\n            link = parser.getAttributeValue(null, \"href\");\n\n        }\n\n        while (true) {\n\n            if (parser.nextTag() == XmlPullParser.END_TAG) break;\n\n            // Intentionally break; consumes any remaining sub-tags.\n\n        }\n\n        return link;\n\n    }\n\n \n\n    /**\n\n     * For the tags title and summary, extracts their text values.\n\n     */\n\n    private String readText(XmlPullParser parser) throws IOException, XmlPullParserException {\n\n        String result = null;\n\n        if (parser.next() == XmlPullParser.TEXT) {\n\n            result = parser.getText();\n\n            parser.nextTag();\n\n        }\n\n        return result;\n\n    }\n\n \n\n    /**\n\n     * Skips tags the parser isn't interested in. Uses depth to handle nested tags. i.e.,\n\n     * if the next tag after a START_TAG isn't a matching END_TAG, it keeps going until it\n\n     * finds the matching END_TAG (as indicated by the value of \"depth\" being 0).\n\n     */\n\n    private void skip(XmlPullParser parser) throws XmlPullParserException, IOException {\n\n        if (parser.getEventType() != XmlPullParser.START_TAG) {\n\n            throw new IllegalStateException();\n\n        }\n\n        int depth = 1;\n\n        while (depth != 0) {\n\n            switch (parser.next()) {\n\n                case XmlPullParser.END_TAG:\n\n                    depth--;\n\n                    break;\n\n                case XmlPullParser.START_TAG:\n\n                    depth++;\n\n                    break;\n\n            }\n\n        }\n\n    }\n\n \n\n    /**\n\n     * This class represents a single entry (post) in the XML feed.\n\n     *\n\n     * <p>It includes the data members \"title,\" \"link,\" and \"summary.\"\n\n     */\n\n    public static class Entry {\n\n        public final String id;\n\n        public final String title;\n\n        public final String link;\n\n        public final long published;\n\n \n\n        Entry(String id, String title, String link, long published) {\n\n            this.id = id;\n\n            this.title = title;\n\n            this.link = link;\n\n            this.published = published;\n\n        }\n\n    }\n\n}\n  "},"provider":{"FeedContract.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.basicsyncadapter.provider;\n\n \n\nimport android.content.ContentResolver;\n\nimport android.net.Uri;\n\nimport android.provider.BaseColumns;\n\n \n\n/**\n\n * Field and table name constants for\n\n * {@link com.example.android.basicsyncadapter.provider.FeedProvider}.\n\n */\n\npublic class FeedContract {\n\n    private FeedContract() {\n\n    }\n\n \n\n    /**\n\n     * Content provider authority.\n\n     */\n\n    public static final String CONTENT_AUTHORITY = \"com.example.android.basicsyncadapter\";\n\n \n\n    /**\n\n     * Base URI. (content://com.example.android.basicsyncadapter)\n\n     */\n\n    public static final Uri BASE_CONTENT_URI = Uri.parse(\"content://\" + CONTENT_AUTHORITY);\n\n \n\n    /**\n\n     * Path component for \"entry\"-type resources..\n\n     */\n\n    private static final String PATH_ENTRIES = \"entries\";\n\n \n\n    /**\n\n     * Columns supported by \"entries\" records.\n\n     */\n\n    public static class Entry implements BaseColumns {\n\n        /**\n\n         * MIME type for lists of entries.\n\n         */\n\n        public static final String CONTENT_TYPE =\n\n                ContentResolver.CURSOR_DIR_BASE_TYPE + \"/vnd.basicsyncadapter.entries\";\n\n        /**\n\n         * MIME type for individual entries.\n\n         */\n\n        public static final String CONTENT_ITEM_TYPE =\n\n                ContentResolver.CURSOR_ITEM_BASE_TYPE + \"/vnd.basicsyncadapter.entry\";\n\n \n\n        /**\n\n         * Fully qualified URI for \"entry\" resources.\n\n         */\n\n        public static final Uri CONTENT_URI =\n\n                BASE_CONTENT_URI.buildUpon().appendPath(PATH_ENTRIES).build();\n\n \n\n        /**\n\n         * Table name where records are stored for \"entry\" resources.\n\n         */\n\n        public static final String TABLE_NAME = \"entry\";\n\n        /**\n\n         * Atom ID. (Note: Not to be confused with the database primary key, which is _ID.\n\n         */\n\n        public static final String COLUMN_NAME_ENTRY_ID = \"entry_id\";\n\n        /**\n\n         * Article title\n\n         */\n\n        public static final String COLUMN_NAME_TITLE = \"title\";\n\n        /**\n\n         * Article hyperlink. Corresponds to the rel=\"alternate\" link in the\n\n         * Atom spec.\n\n         */\n\n        public static final String COLUMN_NAME_LINK = \"link\";\n\n        /**\n\n         * Date article was published.\n\n         */\n\n        public static final String COLUMN_NAME_PUBLISHED = \"published\";\n\n    }\n\n}\n  ","FeedProvider.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.basicsyncadapter.provider;\n\n \n\nimport android.content.ContentProvider;\n\nimport android.content.ContentValues;\n\nimport android.content.Context;\n\nimport android.content.UriMatcher;\n\nimport android.database.Cursor;\n\nimport android.database.sqlite.SQLiteDatabase;\n\nimport android.database.sqlite.SQLiteOpenHelper;\n\nimport android.net.Uri;\n\n \n\nimport com.example.android.common.db.SelectionBuilder;\n\n \n\npublic class FeedProvider extends ContentProvider {\n\n    FeedDatabase mDatabaseHelper;\n\n \n\n    /**\n\n     * Content authority for this provider.\n\n     */\n\n    private static final String AUTHORITY = FeedContract.CONTENT_AUTHORITY;\n\n \n\n    // The constants below represent individual URI routes, as IDs. Every URI pattern recognized by\n\n    // this ContentProvider is defined using sUriMatcher.addURI(), and associated with one of these\n\n    // IDs.\n\n    //\n\n    // When a incoming URI is run through sUriMatcher, it will be tested against the defined\n\n    // URI patterns, and the corresponding route ID will be returned.\n\n    /**\n\n     * URI ID for route: /entries\n\n     */\n\n    public static final int ROUTE_ENTRIES = 1;\n\n \n\n    /**\n\n     * URI ID for route: /entries/{ID}\n\n     */\n\n    public static final int ROUTE_ENTRIES_ID = 2;\n\n \n\n    /**\n\n     * UriMatcher, used to decode incoming URIs.\n\n     */\n\n    private static final UriMatcher sUriMatcher = new UriMatcher(UriMatcher.NO_MATCH);\n\n    static {\n\n        sUriMatcher.addURI(AUTHORITY, \"entries\", ROUTE_ENTRIES);\n\n        sUriMatcher.addURI(AUTHORITY, \"entries/*\", ROUTE_ENTRIES_ID);\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreate() {\n\n        mDatabaseHelper = new FeedDatabase(getContext());\n\n        return true;\n\n    }\n\n \n\n    /**\n\n     * Determine the mime type for entries returned by a given URI.\n\n     */\n\n    @Override\n\n    public String getType(Uri uri) {\n\n        final int match = sUriMatcher.match(uri);\n\n        switch (match) {\n\n            case ROUTE_ENTRIES:\n\n                return FeedContract.Entry.CONTENT_TYPE;\n\n            case ROUTE_ENTRIES_ID:\n\n                return FeedContract.Entry.CONTENT_ITEM_TYPE;\n\n            default:\n\n                throw new UnsupportedOperationException(\"Unknown uri: \" + uri);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Perform a database query by URI.\n\n     *\n\n     * <p>Currently supports returning all entries (/entries) and individual entries by ID\n\n     * (/entries/{ID}).\n\n     */\n\n    @Override\n\n    public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs,\n\n                        String sortOrder) {\n\n        SQLiteDatabase db = mDatabaseHelper.getReadableDatabase();\n\n        SelectionBuilder builder = new SelectionBuilder();\n\n        int uriMatch = sUriMatcher.match(uri);\n\n        switch (uriMatch) {\n\n            case ROUTE_ENTRIES_ID:\n\n                // Return a single entry, by ID.\n\n                String id = uri.getLastPathSegment();\n\n                builder.where(FeedContract.Entry._ID + \"=?\", id);\n\n            case ROUTE_ENTRIES:\n\n                // Return all known entries.\n\n                builder.table(FeedContract.Entry.TABLE_NAME)\n\n                       .where(selection, selectionArgs);\n\n                Cursor c = builder.query(db, projection, sortOrder);\n\n                // Note: Notification URI must be manually set here for loaders to correctly\n\n                // register ContentObservers.\n\n                Context ctx = getContext();\n\n                assert ctx != null;\n\n                c.setNotificationUri(ctx.getContentResolver(), uri);\n\n                return c;\n\n            default:\n\n                throw new UnsupportedOperationException(\"Unknown uri: \" + uri);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Insert a new entry into the database.\n\n     */\n\n    @Override\n\n    public Uri insert(Uri uri, ContentValues values) {\n\n        final SQLiteDatabase db = mDatabaseHelper.getWritableDatabase();\n\n        assert db != null;\n\n        final int match = sUriMatcher.match(uri);\n\n        Uri result;\n\n        switch (match) {\n\n            case ROUTE_ENTRIES:\n\n                long id = db.insertOrThrow(FeedContract.Entry.TABLE_NAME, null, values);\n\n                result = Uri.parse(FeedContract.Entry.CONTENT_URI + \"/\" + id);\n\n                break;\n\n            case ROUTE_ENTRIES_ID:\n\n                throw new UnsupportedOperationException(\"Insert not supported on URI: \" + uri);\n\n            default:\n\n                throw new UnsupportedOperationException(\"Unknown uri: \" + uri);\n\n        }\n\n        // Send broadcast to registered ContentObservers, to refresh UI.\n\n        Context ctx = getContext();\n\n        assert ctx != null;\n\n        ctx.getContentResolver().notifyChange(uri, null, false);\n\n        return result;\n\n    }\n\n \n\n    /**\n\n     * Delete an entry by database by URI.\n\n     */\n\n    @Override\n\n    public int delete(Uri uri, String selection, String[] selectionArgs) {\n\n        SelectionBuilder builder = new SelectionBuilder();\n\n        final SQLiteDatabase db = mDatabaseHelper.getWritableDatabase();\n\n        final int match = sUriMatcher.match(uri);\n\n        int count;\n\n        switch (match) {\n\n            case ROUTE_ENTRIES:\n\n                count = builder.table(FeedContract.Entry.TABLE_NAME)\n\n                        .where(selection, selectionArgs)\n\n                        .delete(db);\n\n                break;\n\n            case ROUTE_ENTRIES_ID:\n\n                String id = uri.getLastPathSegment();\n\n                count = builder.table(FeedContract.Entry.TABLE_NAME)\n\n                       .where(FeedContract.Entry._ID + \"=?\", id)\n\n                       .where(selection, selectionArgs)\n\n                       .delete(db);\n\n                break;\n\n            default:\n\n                throw new UnsupportedOperationException(\"Unknown uri: \" + uri);\n\n        }\n\n        // Send broadcast to registered ContentObservers, to refresh UI.\n\n        Context ctx = getContext();\n\n        assert ctx != null;\n\n        ctx.getContentResolver().notifyChange(uri, null, false);\n\n        return count;\n\n    }\n\n \n\n    /**\n\n     * Update an etry in the database by URI.\n\n     */\n\n    @Override\n\n    public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {\n\n        SelectionBuilder builder = new SelectionBuilder();\n\n        final SQLiteDatabase db = mDatabaseHelper.getWritableDatabase();\n\n        final int match = sUriMatcher.match(uri);\n\n        int count;\n\n        switch (match) {\n\n            case ROUTE_ENTRIES:\n\n                count = builder.table(FeedContract.Entry.TABLE_NAME)\n\n                        .where(selection, selectionArgs)\n\n                        .update(db, values);\n\n                break;\n\n            case ROUTE_ENTRIES_ID:\n\n                String id = uri.getLastPathSegment();\n\n                count = builder.table(FeedContract.Entry.TABLE_NAME)\n\n                        .where(FeedContract.Entry._ID + \"=?\", id)\n\n                        .where(selection, selectionArgs)\n\n                        .update(db, values);\n\n                break;\n\n            default:\n\n                throw new UnsupportedOperationException(\"Unknown uri: \" + uri);\n\n        }\n\n        Context ctx = getContext();\n\n        assert ctx != null;\n\n        ctx.getContentResolver().notifyChange(uri, null, false);\n\n        return count;\n\n    }\n\n \n\n    /**\n\n     * SQLite backend for @{link FeedProvider}.\n\n     *\n\n     * Provides access to an disk-backed, SQLite datastore which is utilized by FeedProvider. This\n\n     * database should never be accessed by other parts of the application directly.\n\n     */\n\n    static class FeedDatabase extends SQLiteOpenHelper {\n\n        /** Schema version. */\n\n        public static final int DATABASE_VERSION = 1;\n\n        /** Filename for SQLite file. */\n\n        public static final String DATABASE_NAME = \"feed.db\";\n\n \n\n        private static final String TYPE_TEXT = \" TEXT\";\n\n        private static final String TYPE_INTEGER = \" INTEGER\";\n\n        private static final String COMMA_SEP = \",\";\n\n        /** SQL statement to create \"entry\" table. */\n\n        private static final String SQL_CREATE_ENTRIES =\n\n                \"CREATE TABLE \" + FeedContract.Entry.TABLE_NAME + \" (\" +\n\n                        FeedContract.Entry._ID + \" INTEGER PRIMARY KEY,\" +\n\n                        FeedContract.Entry.COLUMN_NAME_ENTRY_ID + TYPE_TEXT + COMMA_SEP +\n\n                        FeedContract.Entry.COLUMN_NAME_TITLE    + TYPE_TEXT + COMMA_SEP +\n\n                        FeedContract.Entry.COLUMN_NAME_LINK + TYPE_TEXT + COMMA_SEP +\n\n                        FeedContract.Entry.COLUMN_NAME_PUBLISHED + TYPE_INTEGER + \")\";\n\n \n\n        /** SQL statement to drop \"entry\" table. */\n\n        private static final String SQL_DELETE_ENTRIES =\n\n                \"DROP TABLE IF EXISTS \" + FeedContract.Entry.TABLE_NAME;\n\n \n\n        public FeedDatabase(Context context) {\n\n            super(context, DATABASE_NAME, null, DATABASE_VERSION);\n\n        }\n\n \n\n        @Override\n\n        public void onCreate(SQLiteDatabase db) {\n\n            db.execSQL(SQL_CREATE_ENTRIES);\n\n        }\n\n \n\n        @Override\n\n        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n\n            // This database is only a cache for online data, so its upgrade policy is\n\n            // to simply to discard the data and start over\n\n            db.execSQL(SQL_DELETE_ENTRIES);\n\n            onCreate(db);\n\n        }\n\n    }\n\n}\n  "},"EntryListActivity.java":"\n    \n\npackage com.example.android.basicsyncadapter;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentActivity;\n\n \n\n/**\n\n * Activity for holding EntryListFragment.\n\n */\n\npublic class EntryListActivity extends FragmentActivity {\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_entry_list);\n\n    }\n\n}\n  ","EntryListFragment.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.basicsyncadapter;\n\n \n\nimport android.accounts.Account;\n\nimport android.annotation.TargetApi;\n\nimport android.app.Activity;\n\nimport android.content.ContentResolver;\n\nimport android.content.Intent;\n\nimport android.content.SyncStatusObserver;\n\nimport android.database.Cursor;\n\nimport android.net.Uri;\n\nimport android.os.Build;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.ListFragment;\n\nimport android.support.v4.app.LoaderManager;\n\nimport android.support.v4.content.CursorLoader;\n\nimport android.support.v4.content.Loader;\n\nimport android.support.v4.widget.SimpleCursorAdapter;\n\nimport android.text.format.Time;\n\nimport android.util.Log;\n\nimport android.view.Menu;\n\nimport android.view.MenuInflater;\n\nimport android.view.MenuItem;\n\nimport android.view.View;\n\nimport android.widget.ListView;\n\nimport android.widget.TextView;\n\n \n\nimport com.example.android.common.accounts.GenericAccountService;\n\nimport com.example.android.basicsyncadapter.provider.FeedContract;\n\n \n\n/**\n\n * List fragment containing a list of Atom entry objects (articles) stored in the local database.\n\n *\n\n * <p>Database access is mediated by a content provider, specified in\n\n * {@link com.example.android.basicsyncadapter.provider.FeedProvider}. This content\n\n * provider is\n\n * automatically populated by  {@link SyncService}.\n\n *\n\n * <p>Selecting an item from the displayed list displays the article in the default browser.\n\n *\n\n * <p>If the content provider doesn't return any data, then the first sync hasn't run yet. This sync\n\n * adapter assumes data exists in the provider once a sync has run. If your app doesn't work like\n\n * this, you should add a flag that notes if a sync has run, so you can differentiate between \"no\n\n * available data\" and \"no initial sync\", and display this in the UI.\n\n *\n\n * <p>The ActionBar displays a \"Refresh\" button. When the user clicks \"Refresh\", the sync adapter\n\n * runs immediately. An indeterminate ProgressBar element is displayed, showing that the sync is\n\n * occurring.\n\n */\n\npublic class EntryListFragment extends ListFragment\n\n        implements LoaderManager.LoaderCallbacks<Cursor> {\n\n \n\n    private static final String TAG = \"EntryListFragment\";\n\n \n\n    /**\n\n     * Cursor adapter for controlling ListView results.\n\n     */\n\n    private SimpleCursorAdapter mAdapter;\n\n \n\n    /**\n\n     * Handle to a SyncObserver. The ProgressBar element is visible until the SyncObserver reports\n\n     * that the sync is complete.\n\n     *\n\n     * <p>This allows us to delete our SyncObserver once the application is no longer in the\n\n     * foreground.\n\n     */\n\n    private Object mSyncObserverHandle;\n\n \n\n    /**\n\n     * Options menu used to populate ActionBar.\n\n     */\n\n    private Menu mOptionsMenu;\n\n \n\n    /**\n\n     * Projection for querying the content provider.\n\n     */\n\n    private static final String[] PROJECTION = new String[]{\n\n            FeedContract.Entry._ID,\n\n            FeedContract.Entry.COLUMN_NAME_TITLE,\n\n            FeedContract.Entry.COLUMN_NAME_LINK,\n\n            FeedContract.Entry.COLUMN_NAME_PUBLISHED\n\n    };\n\n \n\n    // Column indexes. The index of a column in the Cursor is the same as its relative position in\n\n    // the projection.\n\n    /** Column index for _ID */\n\n    private static final int COLUMN_ID = 0;\n\n    /** Column index for title */\n\n    private static final int COLUMN_TITLE = 1;\n\n    /** Column index for link */\n\n    private static final int COLUMN_URL_STRING = 2;\n\n    /** Column index for published */\n\n    private static final int COLUMN_PUBLISHED = 3;\n\n \n\n    /**\n\n     * List of Cursor columns to read from when preparing an adapter to populate the ListView.\n\n     */\n\n    private static final String[] FROM_COLUMNS = new String[]{\n\n            FeedContract.Entry.COLUMN_NAME_TITLE,\n\n            FeedContract.Entry.COLUMN_NAME_PUBLISHED\n\n    };\n\n \n\n    /**\n\n     * List of Views which will be populated by Cursor data.\n\n     */\n\n    private static final int[] TO_FIELDS = new int[]{\n\n            android.R.id.text1,\n\n            android.R.id.text2};\n\n \n\n    /**\n\n     * Mandatory empty constructor for the fragment manager to instantiate the\n\n     * fragment (e.g. upon screen orientation changes).\n\n     */\n\n    public EntryListFragment() {}\n\n \n\n    @Override\n\n    public void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setHasOptionsMenu(true);\n\n    }\n\n \n\n    /**\n\n     * Create SyncAccount at launch, if needed.\n\n     *\n\n     * <p>This will create a new account with the system for our application, register our\n\n     * {@link SyncService} with it, and establish a sync schedule.\n\n     */\n\n    @Override\n\n    public void onAttach(Activity activity) {\n\n        super.onAttach(activity);\n\n \n\n        // Create account, if needed\n\n        SyncUtils.CreateSyncAccount(activity);\n\n    }\n\n \n\n    @Override\n\n    public void onViewCreated(View view, Bundle savedInstanceState) {\n\n        super.onViewCreated(view, savedInstanceState);\n\n \n\n        mAdapter = new SimpleCursorAdapter(\n\n                getActivity(),       // Current context\n\n                android.R.layout.simple_list_item_activated_2,  // Layout for individual rows\n\n                null,                // Cursor\n\n                FROM_COLUMNS,        // Cursor columns to use\n\n                TO_FIELDS,           // Layout fields to use\n\n                0                    // No flags\n\n        );\n\n        mAdapter.setViewBinder(new SimpleCursorAdapter.ViewBinder() {\n\n            @Override\n\n            public boolean setViewValue(View view, Cursor cursor, int i) {\n\n                if (i == COLUMN_PUBLISHED) {\n\n                    // Convert timestamp to human-readable date\n\n                    Time t = new Time();\n\n                    t.set(cursor.getLong(i));\n\n                    ((TextView) view).setText(t.format(\"%Y-%m-%d %H:%M\"));\n\n                    return true;\n\n                } else {\n\n                    // Let SimpleCursorAdapter handle other fields automatically\n\n                    return false;\n\n                }\n\n            }\n\n        });\n\n        setListAdapter(mAdapter);\n\n        setEmptyText(getText(R.string.loading));\n\n        getLoaderManager().initLoader(0, null, this);\n\n    }\n\n \n\n    @Override\n\n    public void onResume() {\n\n        super.onResume();\n\n        mSyncStatusObserver.onStatusChanged(0);\n\n \n\n        // Watch for sync state changes\n\n        final int mask = ContentResolver.SYNC_OBSERVER_TYPE_PENDING |\n\n                ContentResolver.SYNC_OBSERVER_TYPE_ACTIVE;\n\n        mSyncObserverHandle = ContentResolver.addStatusChangeListener(mask, mSyncStatusObserver);\n\n    }\n\n \n\n    @Override\n\n    public void onPause() {\n\n        super.onPause();\n\n        if (mSyncObserverHandle != null) {\n\n            ContentResolver.removeStatusChangeListener(mSyncObserverHandle);\n\n            mSyncObserverHandle = null;\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Query the content provider for data.\n\n     *\n\n     * <p>Loaders do queries in a background thread. They also provide a ContentObserver that is\n\n     * triggered when data in the content provider changes. When the sync adapter updates the\n\n     * content provider, the ContentObserver responds by resetting the loader and then reloading\n\n     * it.\n\n     */\n\n    @Override\n\n    public Loader<Cursor> onCreateLoader(int i, Bundle bundle) {\n\n        // We only have one loader, so we can ignore the value of i.\n\n        // (It'll be '0', as set in onCreate().)\n\n        return new CursorLoader(getActivity(),  // Context\n\n                FeedContract.Entry.CONTENT_URI, // URI\n\n                PROJECTION,                // Projection\n\n                null,                           // Selection\n\n                null,                           // Selection args\n\n                FeedContract.Entry.COLUMN_NAME_PUBLISHED + \" desc\"); // Sort\n\n    }\n\n \n\n    /**\n\n     * Move the Cursor returned by the query into the ListView adapter. This refreshes the existing\n\n     * UI with the data in the Cursor.\n\n     */\n\n    @Override\n\n    public void onLoadFinished(Loader<Cursor> cursorLoader, Cursor cursor) {\n\n        mAdapter.changeCursor(cursor);\n\n    }\n\n \n\n    /**\n\n     * Called when the ContentObserver defined for the content provider detects that data has\n\n     * changed. The ContentObserver resets the loader, and then re-runs the loader. In the adapter,\n\n     * set the Cursor value to null. This removes the reference to the Cursor, allowing it to be\n\n     * garbage-collected.\n\n     */\n\n    @Override\n\n    public void onLoaderReset(Loader<Cursor> cursorLoader) {\n\n        mAdapter.changeCursor(null);\n\n    }\n\n \n\n    /**\n\n     * Create the ActionBar.\n\n     */\n\n    @Override\n\n    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {\n\n        super.onCreateOptionsMenu(menu, inflater);\n\n        mOptionsMenu = menu;\n\n        inflater.inflate(R.menu.main, menu);\n\n    }\n\n \n\n    /**\n\n     * Respond to user gestures on the ActionBar.\n\n     */\n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch (item.getItemId()) {\n\n            // If the user clicks the \"Refresh\" button.\n\n            case R.id.menu_refresh:\n\n                SyncUtils.TriggerRefresh();\n\n                return true;\n\n        }\n\n        return super.onOptionsItemSelected(item);\n\n    }\n\n \n\n    /**\n\n     * Load an article in the default browser when selected by the user.\n\n     */\n\n    @Override\n\n    public void onListItemClick(ListView listView, View view, int position, long id) {\n\n        super.onListItemClick(listView, view, position, id);\n\n \n\n        // Get a URI for the selected item, then start an Activity that displays the URI. Any\n\n        // Activity that filters for ACTION_VIEW and a URI can accept this. In most cases, this will\n\n        // be a browser.\n\n \n\n        // Get the item at the selected position, in the form of a Cursor.\n\n        Cursor c = (Cursor) mAdapter.getItem(position);\n\n        // Get the link to the article represented by the item.\n\n        String articleUrlString = c.getString(COLUMN_URL_STRING);\n\n        if (articleUrlString == null) {\n\n            Log.e(TAG, \"Attempt to launch entry with null link\");\n\n            return;\n\n        }\n\n \n\n        Log.i(TAG, \"Opening URL: \" + articleUrlString);\n\n        // Get a Uri object for the URL string\n\n        Uri articleURL = Uri.parse(articleUrlString);\n\n        Intent i = new Intent(Intent.ACTION_VIEW, articleURL);\n\n        startActivity(i);\n\n    }\n\n \n\n    /**\n\n     * Set the state of the Refresh button. If a sync is active, turn on the ProgressBar widget.\n\n     * Otherwise, turn it off.\n\n     *\n\n     * @param refreshing True if an active sync is occuring, false otherwise\n\n     */\n\n    @TargetApi(Build.VERSION_CODES.HONEYCOMB)\n\n    public void setRefreshActionButtonState(boolean refreshing) {\n\n        if (mOptionsMenu == null || Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {\n\n            return;\n\n        }\n\n \n\n        final MenuItem refreshItem = mOptionsMenu.findItem(R.id.menu_refresh);\n\n        if (refreshItem != null) {\n\n            if (refreshing) {\n\n                refreshItem.setActionView(R.layout.actionbar_indeterminate_progress);\n\n            } else {\n\n                refreshItem.setActionView(null);\n\n            }\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Crfate a new anonymous SyncStatusObserver. It's attached to the app's ContentResolver in\n\n     * onResume(), and removed in onPause(). If status changes, it sets the state of the Refresh\n\n     * button. If a sync is active or pending, the Refresh button is replaced by an indeterminate\n\n     * ProgressBar; otherwise, the button itself is displayed.\n\n     */\n\n    private SyncStatusObserver mSyncStatusObserver = new SyncStatusObserver() {\n\n        /** Callback invoked with the sync adapter status changes. */\n\n        @Override\n\n        public void onStatusChanged(int which) {\n\n            getActivity().runOnUiThread(new Runnable() {\n\n                /**\n\n                 * The SyncAdapter runs on a background thread. To update the UI, onStatusChanged()\n\n                 * runs on the UI thread.\n\n                 */\n\n                @Override\n\n                public void run() {\n\n                    // Create a handle to the account that was created by\n\n                    // SyncService.CreateSyncAccount(). This will be used to query the system to\n\n                    // see how the sync status has changed.\n\n                    Account account = GenericAccountService.GetAccount(SyncUtils.ACCOUNT_TYPE);\n\n                    if (account == null) {\n\n                        // GetAccount() returned an invalid value. This shouldn't happen, but\n\n                        // we'll set the status to \"not refreshing\".\n\n                        setRefreshActionButtonState(false);\n\n                        return;\n\n                    }\n\n \n\n                    // Test the ContentResolver to see if the sync adapter is active or pending.\n\n                    // Set the state of the refresh button accordingly.\n\n                    boolean syncActive = ContentResolver.isSyncActive(\n\n                            account, FeedContract.CONTENT_AUTHORITY);\n\n                    boolean syncPending = ContentResolver.isSyncPending(\n\n                            account, FeedContract.CONTENT_AUTHORITY);\n\n                    setRefreshActionButtonState(syncActive || syncPending);\n\n                }\n\n            });\n\n        }\n\n    };\n\n \n\n}\n  ","SyncAdapter.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.basicsyncadapter;\n\n \n\nimport android.accounts.Account;\n\nimport android.annotation.TargetApi;\n\nimport android.content.AbstractThreadedSyncAdapter;\n\nimport android.content.ContentProviderClient;\n\nimport android.content.ContentProviderOperation;\n\nimport android.content.ContentResolver;\n\nimport android.content.Context;\n\nimport android.content.OperationApplicationException;\n\nimport android.content.SyncResult;\n\nimport android.database.Cursor;\n\nimport android.net.Uri;\n\nimport android.os.Build;\n\nimport android.os.Bundle;\n\nimport android.os.RemoteException;\n\nimport android.util.Log;\n\n \n\nimport com.example.android.basicsyncadapter.net.FeedParser;\n\nimport com.example.android.basicsyncadapter.provider.FeedContract;\n\n \n\nimport org.xmlpull.v1.XmlPullParserException;\n\n \n\nimport java.io.IOException;\n\nimport java.io.InputStream;\n\nimport java.net.HttpURLConnection;\n\nimport java.net.MalformedURLException;\n\nimport java.net.URL;\n\nimport java.text.ParseException;\n\nimport java.util.ArrayList;\n\nimport java.util.HashMap;\n\nimport java.util.List;\n\n \n\n/**\n\n * Define a sync adapter for the app.\n\n *\n\n * <p>This class is instantiated in {@link SyncService}, which also binds SyncAdapter to the system.\n\n * SyncAdapter should only be initialized in SyncService, never anywhere else.\n\n *\n\n * <p>The system calls onPerformSync() via an RPC call through the IBinder object supplied by\n\n * SyncService.\n\n */\n\nclass SyncAdapter extends AbstractThreadedSyncAdapter {\n\n    public static final String TAG = \"SyncAdapter\";\n\n \n\n    /**\n\n     * URL to fetch content from during a sync.\n\n     *\n\n     * <p>This points to the Android Developers Blog. (Side note: We highly recommend reading the\n\n     * Android Developer Blog to stay up to date on the latest Android platform developments!)\n\n     */\n\n    private static final String FEED_URL = \"http://android-developers.blogspot.com/atom.xml\";\n\n \n\n    /**\n\n     * Network connection timeout, in milliseconds.\n\n     */\n\n    private static final int NET_CONNECT_TIMEOUT_MILLIS = 15000;  // 15 seconds\n\n \n\n    /**\n\n     * Network read timeout, in milliseconds.\n\n     */\n\n    private static final int NET_READ_TIMEOUT_MILLIS = 10000;  // 10 seconds\n\n \n\n    /**\n\n     * Content resolver, for performing database operations.\n\n     */\n\n    private final ContentResolver mContentResolver;\n\n \n\n    /**\n\n     * Project used when querying content provider. Returns all known fields.\n\n     */\n\n    private static final String[] PROJECTION = new String[] {\n\n            FeedContract.Entry._ID,\n\n            FeedContract.Entry.COLUMN_NAME_ENTRY_ID,\n\n            FeedContract.Entry.COLUMN_NAME_TITLE,\n\n            FeedContract.Entry.COLUMN_NAME_LINK,\n\n            FeedContract.Entry.COLUMN_NAME_PUBLISHED};\n\n \n\n    // Constants representing column positions from PROJECTION.\n\n    public static final int COLUMN_ID = 0;\n\n    public static final int COLUMN_ENTRY_ID = 1;\n\n    public static final int COLUMN_TITLE = 2;\n\n    public static final int COLUMN_LINK = 3;\n\n    public static final int COLUMN_PUBLISHED = 4;\n\n \n\n    /**\n\n     * Constructor. Obtains handle to content resolver for later use.\n\n     */\n\n    public SyncAdapter(Context context, boolean autoInitialize) {\n\n        super(context, autoInitialize);\n\n        mContentResolver = context.getContentResolver();\n\n    }\n\n \n\n    /**\n\n     * Constructor. Obtains handle to content resolver for later use.\n\n     */\n\n    @TargetApi(Build.VERSION_CODES.HONEYCOMB)\n\n    public SyncAdapter(Context context, boolean autoInitialize, boolean allowParallelSyncs) {\n\n        super(context, autoInitialize, allowParallelSyncs);\n\n        mContentResolver = context.getContentResolver();\n\n    }\n\n \n\n    /**\n\n     * Called by the Android system in response to a request to run the sync adapter. The work\n\n     * required to read data from the network, parse it, and store it in the content provider is\n\n     * done here. Extending AbstractThreadedSyncAdapter ensures that all methods within SyncAdapter\n\n     * run on a background thread. For this reason, blocking I/O and other long-running tasks can be\n\n     * run <em>in situ</em>, and you don't have to set up a separate thread for them.\n\n     .\n\n     *\n\n     * <p>This is where we actually perform any work required to perform a sync.\n\n     * {@link android.content.AbstractThreadedSyncAdapter} guarantees that this will be called on a non-UI thread,\n\n     * so it is safe to peform blocking I/O here.\n\n     *\n\n     * <p>The syncResult argument allows you to pass information back to the method that triggered\n\n     * the sync.\n\n     */\n\n    @Override\n\n    public void onPerformSync(Account account, Bundle extras, String authority,\n\n                              ContentProviderClient provider, SyncResult syncResult) {\n\n        Log.i(TAG, \"Beginning network synchronization\");\n\n        try {\n\n            final URL location = new URL(FEED_URL);\n\n            InputStream stream = null;\n\n \n\n            try {\n\n                Log.i(TAG, \"Streaming data from network: \" + location);\n\n                stream = downloadUrl(location);\n\n                updateLocalFeedData(stream, syncResult);\n\n                // Makes sure that the InputStream is closed after the app is\n\n                // finished using it.\n\n            } finally {\n\n                if (stream != null) {\n\n                    stream.close();\n\n                }\n\n            }\n\n        } catch (MalformedURLException e) {\n\n            Log.e(TAG, \"Feed URL is malformed\", e);\n\n            syncResult.stats.numParseExceptions++;\n\n            return;\n\n        } catch (IOException e) {\n\n            Log.e(TAG, \"Error reading from network: \" + e.toString());\n\n            syncResult.stats.numIoExceptions++;\n\n            return;\n\n        } catch (XmlPullParserException e) {\n\n            Log.e(TAG, \"Error parsing feed: \" + e.toString());\n\n            syncResult.stats.numParseExceptions++;\n\n            return;\n\n        } catch (ParseException e) {\n\n            Log.e(TAG, \"Error parsing feed: \" + e.toString());\n\n            syncResult.stats.numParseExceptions++;\n\n            return;\n\n        } catch (RemoteException e) {\n\n            Log.e(TAG, \"Error updating database: \" + e.toString());\n\n            syncResult.databaseError = true;\n\n            return;\n\n        } catch (OperationApplicationException e) {\n\n            Log.e(TAG, \"Error updating database: \" + e.toString());\n\n            syncResult.databaseError = true;\n\n            return;\n\n        }\n\n        Log.i(TAG, \"Network synchronization complete\");\n\n    }\n\n \n\n    /**\n\n     * Read XML from an input stream, storing it into the content provider.\n\n     *\n\n     * <p>This is where incoming data is persisted, committing the results of a sync. In order to\n\n     * minimize (expensive) disk operations, we compare incoming data with what's already in our\n\n     * database, and compute a merge. Only changes (insert/update/delete) will result in a database\n\n     * write.\n\n     *\n\n     * <p>As an additional optimization, we use a batch operation to perform all database writes at\n\n     * once.\n\n     *\n\n     * <p>Merge strategy:\n\n     * 1. Get cursor to all items in feed<br/>\n\n     * 2. For each item, check if it's in the incoming data.<br/>\n\n     *    a. YES: Remove from \"incoming\" list. Check if data has mutated, if so, perform\n\n     *            database UPDATE.<br/>\n\n     *    b. NO: Schedule DELETE from database.<br/>\n\n     * (At this point, incoming database only contains missing items.)<br/>\n\n     * 3. For any items remaining in incoming list, ADD to database.\n\n     */\n\n    public void updateLocalFeedData(final InputStream stream, final SyncResult syncResult)\n\n            throws IOException, XmlPullParserException, RemoteException,\n\n            OperationApplicationException, ParseException {\n\n        final FeedParser feedParser = new FeedParser();\n\n        final ContentResolver contentResolver = getContext().getContentResolver();\n\n \n\n        Log.i(TAG, \"Parsing stream as Atom feed\");\n\n        final List<FeedParser.Entry> entries = feedParser.parse(stream);\n\n        Log.i(TAG, \"Parsing complete. Found \" + entries.size() + \" entries\");\n\n \n\n \n\n        ArrayList<ContentProviderOperation> batch = new ArrayList<ContentProviderOperation>();\n\n \n\n        // Build hash table of incoming entries\n\n        HashMap<String, FeedParser.Entry> entryMap = new HashMap<String, FeedParser.Entry>();\n\n        for (FeedParser.Entry e : entries) {\n\n            entryMap.put(e.id, e);\n\n        }\n\n \n\n        // Get list of all items\n\n        Log.i(TAG, \"Fetching local entries for merge\");\n\n        Uri uri = FeedContract.Entry.CONTENT_URI; // Get all entries\n\n        Cursor c = contentResolver.query(uri, PROJECTION, null, null, null);\n\n        assert c != null;\n\n        Log.i(TAG, \"Found \" + c.getCount() + \" local entries. Computing merge solution...\");\n\n \n\n        // Find stale data\n\n        int id;\n\n        String entryId;\n\n        String title;\n\n        String link;\n\n        long published;\n\n        while (c.moveToNext()) {\n\n            syncResult.stats.numEntries++;\n\n            id = c.getInt(COLUMN_ID);\n\n            entryId = c.getString(COLUMN_ENTRY_ID);\n\n            title = c.getString(COLUMN_TITLE);\n\n            link = c.getString(COLUMN_LINK);\n\n            published = c.getLong(COLUMN_PUBLISHED);\n\n            FeedParser.Entry match = entryMap.get(entryId);\n\n            if (match != null) {\n\n                // Entry exists. Remove from entry map to prevent insert later.\n\n                entryMap.remove(entryId);\n\n                // Check to see if the entry needs to be updated\n\n                Uri existingUri = FeedContract.Entry.CONTENT_URI.buildUpon()\n\n                        .appendPath(Integer.toString(id)).build();\n\n                if ((match.title != null && !match.title.equals(title)) ||\n\n                        (match.link != null && !match.link.equals(link)) ||\n\n                        (match.published != published)) {\n\n                    // Update existing record\n\n                    Log.i(TAG, \"Scheduling update: \" + existingUri);\n\n                    batch.add(ContentProviderOperation.newUpdate(existingUri)\n\n                            .withValue(FeedContract.Entry.COLUMN_NAME_TITLE, title)\n\n                            .withValue(FeedContract.Entry.COLUMN_NAME_LINK, link)\n\n                            .withValue(FeedContract.Entry.COLUMN_NAME_PUBLISHED, published)\n\n                            .build());\n\n                    syncResult.stats.numUpdates++;\n\n                } else {\n\n                    Log.i(TAG, \"No action: \" + existingUri);\n\n                }\n\n            } else {\n\n                // Entry doesn't exist. Remove it from the database.\n\n                Uri deleteUri = FeedContract.Entry.CONTENT_URI.buildUpon()\n\n                        .appendPath(Integer.toString(id)).build();\n\n                Log.i(TAG, \"Scheduling delete: \" + deleteUri);\n\n                batch.add(ContentProviderOperation.newDelete(deleteUri).build());\n\n                syncResult.stats.numDeletes++;\n\n            }\n\n        }\n\n        c.close();\n\n \n\n        // Add new items\n\n        for (FeedParser.Entry e : entryMap.values()) {\n\n            Log.i(TAG, \"Scheduling insert: entry_id=\" + e.id);\n\n            batch.add(ContentProviderOperation.newInsert(FeedContract.Entry.CONTENT_URI)\n\n                    .withValue(FeedContract.Entry.COLUMN_NAME_ENTRY_ID, e.id)\n\n                    .withValue(FeedContract.Entry.COLUMN_NAME_TITLE, e.title)\n\n                    .withValue(FeedContract.Entry.COLUMN_NAME_LINK, e.link)\n\n                    .withValue(FeedContract.Entry.COLUMN_NAME_PUBLISHED, e.published)\n\n                    .build());\n\n            syncResult.stats.numInserts++;\n\n        }\n\n        Log.i(TAG, \"Merge solution ready. Applying batch update\");\n\n        mContentResolver.applyBatch(FeedContract.CONTENT_AUTHORITY, batch);\n\n        mContentResolver.notifyChange(\n\n                FeedContract.Entry.CONTENT_URI, // URI where data was modified\n\n                null,                           // No local observer\n\n                false);                         // IMPORTANT: Do not sync to network\n\n        // This sample doesn't support uploads, but if *your* code does, make sure you set\n\n        // syncToNetwork=false in the line above to prevent duplicate syncs.\n\n    }\n\n \n\n    /**\n\n     * Given a string representation of a URL, sets up a connection and gets an input stream.\n\n     */\n\n    private InputStream downloadUrl(final URL url) throws IOException {\n\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n\n        conn.setReadTimeout(NET_READ_TIMEOUT_MILLIS /* milliseconds */);\n\n        conn.setConnectTimeout(NET_CONNECT_TIMEOUT_MILLIS /* milliseconds */);\n\n        conn.setRequestMethod(\"GET\");\n\n        conn.setDoInput(true);\n\n        // Starts the query\n\n        conn.connect();\n\n        return conn.getInputStream();\n\n    }\n\n}\n  ","SyncService.java":"\n    \n\n/*\n\n * Copyright 2013 Google Inc.\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.basicsyncadapter;\n\n \n\nimport android.app.Service;\n\nimport android.content.Intent;\n\nimport android.os.IBinder;\n\nimport android.util.Log;\n\n \n\n/** Service to handle sync requests.\n\n *\n\n * <p>This service is invoked in response to Intents with action android.content.SyncAdapter, and\n\n * returns a Binder connection to SyncAdapter.\n\n *\n\n * <p>For performance, only one sync adapter will be initialized within this application's context.\n\n *\n\n * <p>Note: The SyncService itself is not notified when a new sync occurs. It's role is to\n\n * manage the lifecycle of our {@link SyncAdapter} and provide a handle to said SyncAdapter to the\n\n * OS on request.\n\n */\n\npublic class SyncService extends Service {\n\n    private static final String TAG = \"SyncService\";\n\n \n\n    private static final Object sSyncAdapterLock = new Object();\n\n    private static SyncAdapter sSyncAdapter = null;\n\n \n\n    /**\n\n     * Thread-safe constructor, creates static {@link SyncAdapter} instance.\n\n     */\n\n    @Override\n\n    public void onCreate() {\n\n        super.onCreate();\n\n        Log.i(TAG, \"Service created\");\n\n        synchronized (sSyncAdapterLock) {\n\n            if (sSyncAdapter == null) {\n\n                sSyncAdapter = new SyncAdapter(getApplicationContext(), true);\n\n            }\n\n        }\n\n    }\n\n \n\n    @Override\n\n    /**\n\n     * Logging-only destructor.\n\n     */\n\n    public void onDestroy() {\n\n        super.onDestroy();\n\n        Log.i(TAG, \"Service destroyed\");\n\n    }\n\n \n\n    /**\n\n     * Return Binder handle for IPC communication with {@link SyncAdapter}.\n\n     *\n\n     * <p>New sync requests will be sent directly to the SyncAdapter using this channel.\n\n     *\n\n     * @param intent Calling intent\n\n     * @return Binder handle for {@link SyncAdapter}\n\n     */\n\n    @Override\n\n    public IBinder onBind(Intent intent) {\n\n        return sSyncAdapter.getSyncAdapterBinder();\n\n    }\n\n}\n  ","SyncUtils.java":"\n    \n\n/*\n\n * Copyright 2013 Google Inc.\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.basicsyncadapter;\n\n \n\nimport android.accounts.Account;\n\nimport android.accounts.AccountManager;\n\nimport android.annotation.TargetApi;\n\nimport android.content.ContentResolver;\n\nimport android.content.Context;\n\nimport android.os.Build;\n\nimport android.os.Bundle;\n\nimport android.preference.PreferenceManager;\n\n \n\nimport com.example.android.common.accounts.GenericAccountService;\n\nimport com.example.android.basicsyncadapter.provider.FeedContract;\n\n \n\n/**\n\n * Static helper methods for working with the sync framework.\n\n */\n\npublic class SyncUtils {\n\n    private static final long SYNC_FREQUENCY = 60 * 60;  // 1 hour (in seconds)\n\n    private static final String CONTENT_AUTHORITY = FeedContract.CONTENT_AUTHORITY;\n\n    private static final String PREF_SETUP_COMPLETE = \"setup_complete\";\n\n    // Value below must match the account type specified in res/xml/syncadapter.xml\n\n    public static final String ACCOUNT_TYPE = \"com.example.android.basicsyncadapter.account\";\n\n \n\n    /**\n\n     * Create an entry for this application in the system account list, if it isn't already there.\n\n     *\n\n     * @param context Context\n\n     */\n\n    @TargetApi(Build.VERSION_CODES.FROYO)\n\n    public static void CreateSyncAccount(Context context) {\n\n        boolean newAccount = false;\n\n        boolean setupComplete = PreferenceManager\n\n                .getDefaultSharedPreferences(context).getBoolean(PREF_SETUP_COMPLETE, false);\n\n \n\n        // Create account, if it's missing. (Either first run, or user has deleted account.)\n\n        Account account = GenericAccountService.GetAccount(ACCOUNT_TYPE);\n\n        AccountManager accountManager =\n\n                (AccountManager) context.getSystemService(Context.ACCOUNT_SERVICE);\n\n        if (accountManager.addAccountExplicitly(account, null, null)) {\n\n            // Inform the system that this account supports sync\n\n            ContentResolver.setIsSyncable(account, CONTENT_AUTHORITY, 1);\n\n            // Inform the system that this account is eligible for auto sync when the network is up\n\n            ContentResolver.setSyncAutomatically(account, CONTENT_AUTHORITY, true);\n\n            // Recommend a schedule for automatic synchronization. The system may modify this based\n\n            // on other scheduled syncs and network utilization.\n\n            ContentResolver.addPeriodicSync(\n\n                    account, CONTENT_AUTHORITY, new Bundle(),SYNC_FREQUENCY);\n\n            newAccount = true;\n\n        }\n\n \n\n        // Schedule an initial sync if we detect problems with either our account or our local\n\n        // data has been deleted. (Note that it's possible to clear app data WITHOUT affecting\n\n        // the account list, so wee need to check both.)\n\n        if (newAccount || !setupComplete) {\n\n            TriggerRefresh();\n\n            PreferenceManager.getDefaultSharedPreferences(context).edit()\n\n                    .putBoolean(PREF_SETUP_COMPLETE, true).commit();\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Helper method to trigger an immediate sync (\"refresh\").\n\n     *\n\n     * <p>This should only be used when we need to preempt the normal sync schedule. Typically, this\n\n     * means the user has pressed the \"refresh\" button.\n\n     *\n\n     * Note that SYNC_EXTRAS_MANUAL will cause an immediate sync, without any optimization to\n\n     * preserve battery life. If you know new data is available (perhaps via a GCM notification),\n\n     * but the user is not actively waiting for that data, you should omit this flag; this will give\n\n     * the OS additional freedom in scheduling your sync request.\n\n     */\n\n    public static void TriggerRefresh() {\n\n        Bundle b = new Bundle();\n\n        // Disable sync backoff and ignore sync preferences. In other words...perform sync NOW!\n\n        b.putBoolean(ContentResolver.SYNC_EXTRAS_MANUAL, true);\n\n        b.putBoolean(ContentResolver.SYNC_EXTRAS_EXPEDITED, true);\n\n        ContentResolver.requestSync(\n\n                GenericAccountService.GetAccount(ACCOUNT_TYPE), // Sync account\n\n                FeedContract.CONTENT_AUTHORITY,                 // Content authority\n\n                b);                                             // Extras\n\n    }\n\n}\n  "},"com.example.android.common":{"accounts":{"GenericAccountService.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.accounts;\n\n \n\nimport android.accounts.AbstractAccountAuthenticator;\n\nimport android.accounts.Account;\n\nimport android.accounts.AccountAuthenticatorResponse;\n\nimport android.accounts.NetworkErrorException;\n\nimport android.app.Service;\n\nimport android.content.Context;\n\nimport android.content.Intent;\n\nimport android.os.Bundle;\n\nimport android.os.IBinder;\n\nimport android.util.Log;\n\n \n\npublic class GenericAccountService extends Service {\n\n    private static final String TAG = \"GenericAccountService\";\n\n    public static final String ACCOUNT_NAME = \"Account\";\n\n    private Authenticator mAuthenticator;\n\n \n\n    /**\n\n     * Obtain a handle to the {@link android.accounts.Account} used for sync in this application.\n\n     *\n\n     * <p>It is important that the accountType specified here matches the value in your sync adapter\n\n     * configuration XML file for android.accounts.AccountAuthenticator (often saved in\n\n     * res/xml/syncadapter.xml). If this is not set correctly, you'll receive an error indicating\n\n     * that \"caller uid XXXXX is different than the authenticator's uid\".\n\n     *\n\n     * @param accountType AccountType defined in the configuration XML file for\n\n     *                    android.accounts.AccountAuthenticator (e.g. res/xml/syncadapter.xml).\n\n     * @return Handle to application's account (not guaranteed to resolve unless CreateSyncAccount()\n\n     *         has been called)\n\n     */\n\n    public static Account GetAccount(String accountType) {\n\n        // Note: Normally the account name is set to the user's identity (username or email\n\n        // address). However, since we aren't actually using any user accounts, it makes more sense\n\n        // to use a generic string in this case.\n\n        //\n\n        // This string should *not* be localized. If the user switches locale, we would not be\n\n        // able to locate the old account, and may erroneously register multiple accounts.\n\n        final String accountName = ACCOUNT_NAME;\n\n        return new Account(accountName, accountType);\n\n    }\n\n \n\n    @Override\n\n    public void onCreate() {\n\n        Log.i(TAG, \"Service created\");\n\n        mAuthenticator = new Authenticator(this);\n\n    }\n\n \n\n    @Override\n\n    public void onDestroy() {\n\n        Log.i(TAG, \"Service destroyed\");\n\n    }\n\n \n\n    @Override\n\n    public IBinder onBind(Intent intent) {\n\n        return mAuthenticator.getIBinder();\n\n    }\n\n \n\n    public class Authenticator extends AbstractAccountAuthenticator {\n\n        public Authenticator(Context context) {\n\n            super(context);\n\n        }\n\n \n\n        @Override\n\n        public Bundle editProperties(AccountAuthenticatorResponse accountAuthenticatorResponse,\n\n                                     String s) {\n\n            throw new UnsupportedOperationException();\n\n        }\n\n \n\n        @Override\n\n        public Bundle addAccount(AccountAuthenticatorResponse accountAuthenticatorResponse,\n\n                                 String s, String s2, String[] strings, Bundle bundle)\n\n                throws NetworkErrorException {\n\n            return null;\n\n        }\n\n \n\n        @Override\n\n        public Bundle confirmCredentials(AccountAuthenticatorResponse accountAuthenticatorResponse,\n\n                                         Account account, Bundle bundle)\n\n                throws NetworkErrorException {\n\n            return null;\n\n        }\n\n \n\n        @Override\n\n        public Bundle getAuthToken(AccountAuthenticatorResponse accountAuthenticatorResponse,\n\n                                   Account account, String s, Bundle bundle)\n\n                throws NetworkErrorException {\n\n            throw new UnsupportedOperationException();\n\n        }\n\n \n\n        @Override\n\n        public String getAuthTokenLabel(String s) {\n\n            throw new UnsupportedOperationException();\n\n        }\n\n \n\n        @Override\n\n        public Bundle updateCredentials(AccountAuthenticatorResponse accountAuthenticatorResponse,\n\n                                        Account account, String s, Bundle bundle)\n\n                throws NetworkErrorException {\n\n            throw new UnsupportedOperationException();\n\n        }\n\n \n\n        @Override\n\n        public Bundle hasFeatures(AccountAuthenticatorResponse accountAuthenticatorResponse,\n\n                                  Account account, String[] strings)\n\n                throws NetworkErrorException {\n\n            throw new UnsupportedOperationException();\n\n        }\n\n    }\n\n \n\n}\n\n \n  "},"db":{"SelectionBuilder.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\n/*\n\n * Modifications:\n\n * -Imported from AOSP frameworks/base/core/java/com/android/internal/content\n\n * -Changed package name\n\n */\n\n \n\npackage com.example.android.common.db;\n\n \n\nimport android.content.ContentValues;\n\nimport android.database.Cursor;\n\nimport android.database.sqlite.SQLiteDatabase;\n\nimport android.text.TextUtils;\n\nimport android.util.Log;\n\n \n\nimport java.util.ArrayList;\n\nimport java.util.Arrays;\n\nimport java.util.Collections;\n\nimport java.util.HashMap;\n\nimport java.util.Map;\n\n \n\n/**\n\n * Helper for building selection clauses for {@link SQLiteDatabase}.\n\n *\n\n * <p>This class provides a convenient frontend for working with SQL. Instead of composing statements\n\n * manually using string concatenation, method calls are used to construct the statement one\n\n * clause at a time. These methods can be chained together.\n\n *\n\n * <p>If multiple where() statements are provided, they're combined using {@code AND}.\n\n *\n\n * <p>Example:\n\n *\n\n * <pre>\n\n *     SelectionBuilder builder = new SelectionBuilder();\n\n *     Cursor c = builder.table(FeedContract.Entry.TABLE_NAME)       // String TABLE_NAME = \"entry\"\n\n *                       .where(FeedContract.Entry._ID + \"=?\", id);  // String _ID = \"_ID\"\n\n *                       .query(db, projection, sortOrder)\n\n *\n\n * </pre>\n\n *\n\n * <p>In this example, the table name and filters ({@code WHERE} clauses) are both explicitly\n\n * specified via method call. SelectionBuilder takes care of issuing a \"query\" command to the\n\n * database, and returns the resulting {@link Cursor} object.\n\n *\n\n * <p>Inner {@code JOIN}s can be accomplished using the mapToTable() function. The map() function\n\n * can be used to create new columns based on arbitrary (SQL-based) criteria. In advanced usage,\n\n * entire subqueries can be passed into the map() function.\n\n *\n\n * <p>Advanced example:\n\n *\n\n * <pre>\n\n *     // String SESSIONS_JOIN_BLOCKS_ROOMS = \"sessions \"\n\n *     //        + \"LEFT OUTER JOIN blocks ON sessions.block_id=blocks.block_id \"\n\n *     //        + \"LEFT OUTER JOIN rooms ON sessions.room_id=rooms.room_id\";\n\n *\n\n *     // String Subquery.BLOCK_NUM_STARRED_SESSIONS =\n\n *     //       \"(SELECT COUNT(1) FROM \"\n\n *     //        + Tables.SESSIONS + \" WHERE \" + Qualified.SESSIONS_BLOCK_ID + \"=\"\n\n *     //        + Qualified.BLOCKS_BLOCK_ID + \" AND \" + Qualified.SESSIONS_STARRED + \"=1)\";\n\n *\n\n *     String Subqery.BLOCK_SESSIONS_COUNT =\n\n *     Cursor c = builder.table(Tables.SESSIONS_JOIN_BLOCKS_ROOMS)\n\n *               .map(Blocks.NUM_STARRED_SESSIONS, Subquery.BLOCK_NUM_STARRED_SESSIONS)\n\n *               .mapToTable(Sessions._ID, Tables.SESSIONS)\n\n *               .mapToTable(Sessions.SESSION_ID, Tables.SESSIONS)\n\n *               .mapToTable(Sessions.BLOCK_ID, Tables.SESSIONS)\n\n *               .mapToTable(Sessions.ROOM_ID, Tables.SESSIONS)\n\n *               .where(Qualified.SESSIONS_BLOCK_ID + \"=?\", blockId);\n\n * </pre>\n\n *\n\n * <p>In this example, we have two different types of {@code JOIN}s: a left outer join using a\n\n * modified table name (since this class doesn't directly support these), and an inner join using\n\n * the mapToTable() function. The map() function is used to insert a count based on specific\n\n * criteria, executed as a sub-query.\n\n *\n\n * This class is <em>not</em> thread safe.\n\n */\n\npublic class SelectionBuilder {\n\n    private static final String TAG = \"basicsyncadapter\";\n\n \n\n    private String mTable = null;\n\n    private Map<String, String> mProjectionMap = new HashMap<String, String>();\n\n    private StringBuilder mSelection = new StringBuilder();\n\n    private ArrayList<String> mSelectionArgs = new ArrayList<String>();\n\n \n\n    /**\n\n     * Reset any internal state, allowing this builder to be recycled.\n\n     *\n\n     * <p>Calling this method is more efficient than creating a new SelectionBuilder object.\n\n     *\n\n     * @return Fluent interface\n\n     */\n\n    public SelectionBuilder reset() {\n\n        mTable = null;\n\n        mSelection.setLength(0);\n\n        mSelectionArgs.clear();\n\n        return this;\n\n    }\n\n \n\n    /**\n\n     * Append the given selection clause to the internal state. Each clause is\n\n     * surrounded with parenthesis and combined using {@code AND}.\n\n     *\n\n     * <p>In the most basic usage, simply provide a selection in SQL {@code WHERE} statement format.\n\n     *\n\n     * <p>Example:\n\n     *\n\n     * <pre>\n\n     *     .where(\"blog_posts.category = 'PROGRAMMING');\n\n     * </pre>\n\n     *\n\n     * <p>User input should never be directly supplied as as part of the selection statement.\n\n     * Instead, use positional parameters in your selection statement, then pass the user input\n\n     * in via the selectionArgs parameter. This prevents SQL escape characters in user input from\n\n     * causing unwanted side effects. (Failure to follow this convention may have security\n\n     * implications.)\n\n     *\n\n     * <p>Positional parameters are specified using the '?' character.\n\n     *\n\n     * <p>Example:\n\n     * <pre>\n\n     *     .where(\"blog_posts.title contains ?, userSearchString);\n\n     * </pre>\n\n     *\n\n     * @param selection SQL where statement\n\n     * @param selectionArgs Values to substitute for positional parameters ('?' characters in\n\n     *                      {@code selection} statement. Will be automatically escaped.\n\n     * @return Fluent interface\n\n     */\n\n    public SelectionBuilder where(String selection, String... selectionArgs) {\n\n        if (TextUtils.isEmpty(selection)) {\n\n            if (selectionArgs != null && selectionArgs.length > 0) {\n\n                throw new IllegalArgumentException(\n\n                        \"Valid selection required when including arguments=\");\n\n            }\n\n \n\n            // Shortcut when clause is empty\n\n            return this;\n\n        }\n\n \n\n        if (mSelection.length() > 0) {\n\n            mSelection.append(\" AND \");\n\n        }\n\n \n\n        mSelection.append(\"(\").append(selection).append(\")\");\n\n        if (selectionArgs != null) {\n\n            Collections.addAll(mSelectionArgs, selectionArgs);\n\n        }\n\n \n\n        return this;\n\n    }\n\n \n\n    /**\n\n     * Table name to use for SQL {@code FROM} statement.\n\n     *\n\n     * <p>This method may only be called once. If multiple tables are required, concatenate them\n\n     * in SQL-format (typically comma-separated).\n\n     *\n\n     * <p>If you need to do advanced {@code JOIN}s, they can also be specified here.\n\n     *\n\n     * See also: mapToTable()\n\n     *\n\n     * @param table Table name\n\n     * @return Fluent interface\n\n     */\n\n    public SelectionBuilder table(String table) {\n\n        mTable = table;\n\n        return this;\n\n    }\n\n \n\n    /**\n\n     * Verify that a table name has been supplied using table().\n\n     *\n\n     * @throws IllegalStateException if table not set\n\n     */\n\n    private void assertTable() {\n\n        if (mTable == null) {\n\n            throw new IllegalStateException(\"Table not specified\");\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Perform an inner join.\n\n     *\n\n     * <p>Map columns from a secondary table onto the current result set. References to the column\n\n     * specified in {@code column} will be replaced with {@code table.column} in the SQL {@code\n\n     * SELECT} clause.\n\n     *\n\n     * @param column Column name to join on. Must be the same in both tables.\n\n     * @param table Secondary table to join.\n\n     * @return Fluent interface\n\n     */\n\n    public SelectionBuilder mapToTable(String column, String table) {\n\n        mProjectionMap.put(column, table + \".\" + column);\n\n        return this;\n\n    }\n\n \n\n    /**\n\n     * Create a new column based on custom criteria (such as aggregate functions).\n\n     *\n\n     * <p>This adds a new column to the result set, based upon custom criteria in SQL format. This\n\n     * is equivalent to the SQL statement: {@code SELECT toClause AS fromColumn}\n\n     *\n\n     * <p>This method is useful for executing SQL sub-queries.\n\n     *\n\n     * @param fromColumn Name of column for mapping\n\n     * @param toClause SQL string representing data to be mapped\n\n     * @return Fluent interface\n\n     */\n\n    public SelectionBuilder map(String fromColumn, String toClause) {\n\n        mProjectionMap.put(fromColumn, toClause + \" AS \" + fromColumn);\n\n        return this;\n\n    }\n\n \n\n    /**\n\n     * Return selection string based on current internal state.\n\n     *\n\n     * @return Current selection as a SQL statement\n\n     * @see #getSelectionArgs()\n\n     */\n\n    public String getSelection() {\n\n        return mSelection.toString();\n\n \n\n    }\n\n \n\n    /**\n\n     * Return selection arguments based on current internal state.\n\n     *\n\n     * @see #getSelection()\n\n     */\n\n    public String[] getSelectionArgs() {\n\n        return mSelectionArgs.toArray(new String[mSelectionArgs.size()]);\n\n    }\n\n \n\n    /**\n\n     * Process user-supplied projection (column list).\n\n     *\n\n     * <p>In cases where a column is mapped to another data source (either another table, or an\n\n     * SQL sub-query), the column name will be replaced with a more specific, SQL-compatible\n\n     * representation.\n\n     *\n\n     * Assumes that incoming columns are non-null.\n\n     *\n\n     * <p>See also: map(), mapToTable()\n\n     *\n\n     * @param columns User supplied projection (column list).\n\n     */\n\n    private void mapColumns(String[] columns) {\n\n        for (int i = 0; i < columns.length; i++) {\n\n            final String target = mProjectionMap.get(columns[i]);\n\n            if (target != null) {\n\n                columns[i] = target;\n\n            }\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Return a description of this builder's state. Does NOT output SQL.\n\n     *\n\n     * @return Human-readable internal state\n\n     */\n\n    @Override\n\n    public String toString() {\n\n        return \"SelectionBuilder[table=\" + mTable + \", selection=\" + getSelection()\n\n                + \", selectionArgs=\" + Arrays.toString(getSelectionArgs()) + \"]\";\n\n    }\n\n \n\n    /**\n\n     * Execute query (SQL {@code SELECT}) against specified database.\n\n     *\n\n     * <p>Using a null projection (column list) is not supported.\n\n     *\n\n     * @param db Database to query.\n\n     * @param columns Database projection (column list) to return, must be non-NULL.\n\n     * @param orderBy How to order the rows, formatted as an SQL ORDER BY clause (excluding the\n\n     *                ORDER BY itself). Passing null will use the default sort order, which may be\n\n     *                unordered.\n\n     * @return A {@link Cursor} object, which is positioned before the first entry. Note that\n\n     *         {@link Cursor}s are not synchronized, see the documentation for more details.\n\n     */\n\n    public Cursor query(SQLiteDatabase db, String[] columns, String orderBy) {\n\n        return query(db, columns, null, null, orderBy, null);\n\n    }\n\n \n\n    /**\n\n     * Execute query ({@code SELECT}) against database.\n\n     *\n\n     * <p>Using a null projection (column list) is not supported.\n\n     *\n\n     * @param db Database to query.\n\n     * @param columns Database projection (column list) to return, must be non-null.\n\n     * @param groupBy A filter declaring how to group rows, formatted as an SQL GROUP BY clause\n\n     *                (excluding the GROUP BY itself). Passing null will cause the rows to not be\n\n     *                grouped.\n\n     * @param having A filter declare which row groups to include in the cursor, if row grouping is\n\n     *               being used, formatted as an SQL HAVING clause (excluding the HAVING itself).\n\n     *               Passing null will cause all row groups to be included, and is required when\n\n     *               row grouping is not being used.\n\n     * @param orderBy How to order the rows, formatted as an SQL ORDER BY clause (excluding the\n\n     *                ORDER BY itself). Passing null will use the default sort order, which may be\n\n     *                unordered.\n\n     * @param limit Limits the number of rows returned by the query, formatted as LIMIT clause.\n\n     *              Passing null denotes no LIMIT clause.\n\n     * @return A {@link Cursor} object, which is positioned before the first entry. Note that\n\n     *         {@link Cursor}s are not synchronized, see the documentation for more details.\n\n     */\n\n    public Cursor query(SQLiteDatabase db, String[] columns, String groupBy,\n\n                        String having, String orderBy, String limit) {\n\n        assertTable();\n\n        if (columns != null) mapColumns(columns);\n\n        Log.v(TAG, \"query(columns=\" + Arrays.toString(columns) + \") \" + this);\n\n        return db.query(mTable, columns, getSelection(), getSelectionArgs(), groupBy, having,\n\n                orderBy, limit);\n\n    }\n\n \n\n    /**\n\n     * Execute an {@code UPDATE} against database.\n\n     *\n\n     * @param db Database to query.\n\n     * @param values A map from column names to new column values. null is a valid value that will\n\n     *               be translated to NULL\n\n     * @return The number of rows affected.\n\n     */\n\n    public int update(SQLiteDatabase db, ContentValues values) {\n\n        assertTable();\n\n        Log.v(TAG, \"update() \" + this);\n\n        return db.update(mTable, values, getSelection(), getSelectionArgs());\n\n    }\n\n \n\n    /**\n\n     * Execute {@code DELETE} against database.\n\n     *\n\n     * @param db Database to query.\n\n     * @return The number of rows affected.\n\n     */\n\n    public int delete(SQLiteDatabase db) {\n\n        assertTable();\n\n        Log.v(TAG, \"delete() \" + this);\n\n        return db.delete(mTable, getSelection(), getSelectionArgs());\n\n    }\n\n}\n  "},"logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "}}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.basicsyncadapter\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <!-- SyncAdapters are available in API 5 and above. We use API 7 as a baseline for samples. -->\n\n    <uses-sdk\n\n        android:minSdkVersion=\"7\"\n\n        android:targetSdkVersion=\"17\" />\n\n \n\n    <!-- Required for fetching feed data. -->\n\n    <uses-permission android:name=\"android.permission.INTERNET\"/>\n\n    <!-- Required to register a SyncStatusObserver to display a \"syncing...\" progress indicator. -->\n\n    <uses-permission android:name=\"android.permission.READ_SYNC_STATS\"/>\n\n    <!-- Required to enable our SyncAdapter after it's created. -->\n\n    <uses-permission android:name=\"android.permission.WRITE_SYNC_SETTINGS\"/>\n\n    <!-- Required because we're manually creating a new account. -->\n\n    <uses-permission android:name=\"android.permission.AUTHENTICATE_ACCOUNTS\"/>\n\n \n\n \n\n    <application\n\n        android:allowBackup=\"true\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:label=\"@string/app_name\"\n\n        android:theme=\"@style/AppTheme\" >\n\n \n\n        <!-- Main activity, responsible for showing a list of feed entries. -->\n\n        <activity\n\n            android:name=\".EntryListActivity\"\n\n            android:label=\"@string/app_name\" >\n\n            <!-- This intent filter places this activity in the system's app launcher. -->\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n \n\n        <!-- ContentProvider to store feed data.\n\n \n\n        The \"authorities\" here are defined as part of a ContentProvider interface. It's used here\n\n        as an attachment point for the SyncAdapter. See res/xml/syncadapter.xml and\n\n        SyncService.java.\n\n \n\n        Since this ContentProvider is not exported, it will not be accessible outside of this app's\n\n        package. -->\n\n        <provider\n\n            android:name=\".provider.FeedProvider\"\n\n            android:authorities=\"com.example.android.basicsyncadapter\"\n\n            android:exported=\"false\" />\n\n \n\n        <!-- This service implements our SyncAdapter. It needs to be exported, so that the system\n\n        sync framework can access it. -->\n\n        <service android:name=\".SyncService\"\n\n            android:exported=\"true\">\n\n            <!-- This intent filter is required. It allows the system to launch our sync service\n\n            as needed. -->\n\n            <intent-filter>\n\n                <action android:name=\"android.content.SyncAdapter\" />\n\n            </intent-filter>\n\n            <!-- This points to a required XML file which describes our SyncAdapter. -->\n\n            <meta-data android:name=\"android.content.SyncAdapter\"\n\n                android:resource=\"@xml/syncadapter\" />\n\n        </service>\n\n \n\n        <!-- This implements the account we'll use as an attachment point for our SyncAdapter. Since\n\n        our SyncAdapter doesn't need to authenticate the current user (it just fetches a public RSS\n\n        feed), this account's implementation is largely empty.\n\n \n\n        It's also possible to attach a SyncAdapter to an existing account provided by another\n\n        package. In that case, this element could be omitted here. -->\n\n        <service android:name=\"com.example.android.common.accounts.GenericAccountService\">\n\n            <!-- Required filter used by the system to launch our account service. -->\n\n            <intent-filter>\n\n                <action android:name=\"android.accounts.AccountAuthenticator\" />\n\n            </intent-filter>\n\n            <!-- This points to an XMLf ile which describes our account service. -->\n\n            <meta-data android:name=\"android.accounts.AccountAuthenticator\"\n\n                android:resource=\"@xml/authenticator\" />\n\n        </service>\n\n \n\n    </application>\n\n \n\n</manifest>\n  "},"BluetoothLeGatt":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com/samples/BluetoothLeGatt/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com/samples/BluetoothLeGatt/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com/samples/BluetoothLeGatt/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com/samples/BluetoothLeGatt/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com/samples/BluetoothLeGatt/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"actionbar_indeterminate_progress.xml":"\n    \n\n<!--\n\n  Copyright 2013 Google Inc.\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n             android:layout_height=\"wrap_content\"\n\n             android:layout_width=\"56dp\"\n\n             android:minWidth=\"56dp\">\n\n    <ProgressBar android:layout_width=\"32dp\"\n\n                 android:layout_height=\"32dp\"\n\n                 android:layout_gravity=\"center\"/>\n\n</FrameLayout>\n  ","activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleMessageTile\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n            android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n            android:text=\"@string/intro_message\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n  ","gatt_services_characteristics.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!-- Copyright (C) 2013 The Android Open Source Project\n\n \n\n     Licensed under the Apache License, Version 2.0 (the \"License\");\n\n     you may not use this file except in compliance with the License.\n\n     You may obtain a copy of the License at\n\n \n\n          http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n     Unless required by applicable law or agreed to in writing, software\n\n     distributed under the License is distributed on an \"AS IS\" BASIS,\n\n     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n     See the License for the specific language governing permissions and\n\n     limitations under the License.\n\n-->\n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n        android:orientation=\"vertical\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:layout_margin=\"10dp\">\n\n    <LinearLayout android:orientation=\"horizontal\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:layout_margin=\"10dp\">\n\n        <TextView android:layout_width=\"wrap_content\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:text=\"@string/label_device_address\"\n\n                  android:textSize=\"18sp\"/>\n\n        <Space android:layout_width=\"5dp\"\n\n               android:layout_height=\"wrap_content\"/>\n\n        <TextView android:id=\"@+id/device_address\"\n\n                android:layout_width=\"match_parent\"\n\n                android:layout_height=\"wrap_content\"\n\n                android:textSize=\"18sp\"/>\n\n    </LinearLayout>\n\n    <LinearLayout android:orientation=\"horizontal\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:layout_margin=\"10dp\">\n\n        <TextView android:layout_width=\"wrap_content\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:text=\"@string/label_state\"\n\n                  android:textSize=\"18sp\"/>\n\n        <Space android:layout_width=\"5dp\"\n\n               android:layout_height=\"wrap_content\"/>\n\n        <TextView android:id=\"@+id/connection_state\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:text=\"@string/disconnected\"\n\n                  android:textSize=\"18sp\"/>\n\n    </LinearLayout>\n\n    <LinearLayout android:orientation=\"horizontal\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:layout_margin=\"10dp\">\n\n        <TextView android:layout_width=\"wrap_content\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:text=\"@string/label_data\"\n\n                  android:textSize=\"18sp\"/>\n\n        <Space android:layout_width=\"5dp\"\n\n               android:layout_height=\"wrap_content\"/>\n\n        <TextView android:id=\"@+id/data_value\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:text=\"@string/no_data\"\n\n                  android:textSize=\"18sp\"/>\n\n    </LinearLayout>\n\n    <ExpandableListView android:id=\"@+id/gatt_services_list\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"/>\n\n</LinearLayout>\n  ","listitem_device.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!-- Copyright (C) 2013 The Android Open Source Project\n\n \n\n     Licensed under the Apache License, Version 2.0 (the \"License\");\n\n     you may not use this file except in compliance with the License.\n\n     You may obtain a copy of the License at\n\n \n\n          http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n     Unless required by applicable law or agreed to in writing, software\n\n     distributed under the License is distributed on an \"AS IS\" BASIS,\n\n     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n     See the License for the specific language governing permissions and\n\n     limitations under the License.\n\n-->\n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n              android:orientation=\"vertical\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"wrap_content\">\n\n    <TextView android:id=\"@+id/device_name\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:textSize=\"24dp\"/>\n\n    <TextView android:id=\"@+id/device_address\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:textSize=\"12dp\"/>\n\n</LinearLayout>\n  "},"menu":{"gatt_services.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!-- Copyright (C) 2013 The Android Open Source Project\n\n \n\n     Licensed under the Apache License, Version 2.0 (the \"License\");\n\n     you may not use this file except in compliance with the License.\n\n     You may obtain a copy of the License at\n\n \n\n          http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n     Unless required by applicable law or agreed to in writing, software\n\n     distributed under the License is distributed on an \"AS IS\" BASIS,\n\n     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n     See the License for the specific language governing permissions and\n\n     limitations under the License.\n\n-->\n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:id=\"@+id/menu_refresh\"\n\n          android:checkable=\"false\"\n\n          android:orderInCategory=\"1\"\n\n          android:showAsAction=\"ifRoom\"/>\n\n    <item android:id=\"@+id/menu_connect\"\n\n          android:title=\"@string/menu_connect\"\n\n          android:orderInCategory=\"100\"\n\n          android:showAsAction=\"ifRoom|withText\"/>\n\n    <item android:id=\"@+id/menu_disconnect\"\n\n          android:title=\"@string/menu_disconnect\"\n\n          android:orderInCategory=\"101\"\n\n          android:showAsAction=\"ifRoom|withText\"/>\n\n</menu>\n  ","main.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!-- Copyright (C) 2013 The Android Open Source Project\n\n \n\n     Licensed under the Apache License, Version 2.0 (the \"License\");\n\n     you may not use this file except in compliance with the License.\n\n     You may obtain a copy of the License at\n\n \n\n          http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n     Unless required by applicable law or agreed to in writing, software\n\n     distributed under the License is distributed on an \"AS IS\" BASIS,\n\n     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n     See the License for the specific language governing permissions and\n\n     limitations under the License.\n\n-->\n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:id=\"@+id/menu_refresh\"\n\n          android:checkable=\"false\"\n\n          android:orderInCategory=\"1\"\n\n          android:showAsAction=\"ifRoom\"/>\n\n    <item android:id=\"@+id/menu_scan\"\n\n          android:title=\"@string/menu_scan\"\n\n          android:orderInCategory=\"100\"\n\n          android:showAsAction=\"ifRoom|withText\"/>\n\n    <item android:id=\"@+id/menu_stop\"\n\n          android:title=\"@string/menu_stop\"\n\n          android:orderInCategory=\"101\"\n\n          android:showAsAction=\"ifRoom|withText\"/>\n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">BluetoothLeGatt</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            This sample demonstrates how to use the Bluetooth LE Generic Attribute Profile (GATT)\n\n            to transmit arbitrary data between devices.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!-- Copyright (C) 2013 The Android Open Source Project\n\n \n\n     Licensed under the Apache License, Version 2.0 (the \"License\");\n\n     you may not use this file except in compliance with the License.\n\n     You may obtain a copy of the License at\n\n \n\n          http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n     Unless required by applicable law or agreed to in writing, software\n\n     distributed under the License is distributed on an \"AS IS\" BASIS,\n\n     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n     See the License for the specific language governing permissions and\n\n     limitations under the License.\n\n-->\n\n<resources>\n\n    <string name=\"ble_not_supported\">BLE is not supported</string>\n\n    <string name=\"label_data\">Data:</string>\n\n    <string name=\"label_device_address\">Device address:</string>\n\n    <string name=\"label_state\">State:</string>\n\n    <string name=\"no_data\">No data</string>\n\n    <string name=\"connected\">Connected</string>\n\n    <string name=\"disconnected\">Disconnected</string>\n\n    <string name=\"title_devices\">BLE Device Scan</string>\n\n    <string name=\"error_bluetooth_not_supported\">Bluetooth not supported.</string>\n\n \n\n    <string name=\"unknown_device\">Unknown device</string>\n\n    <string name=\"unknown_characteristic\">Unknown characteristic</string>\n\n    <string name=\"unknown_service\">Unknown service</string>\n\n \n\n    <!-- Menu items -->\n\n    <string name=\"menu_connect\">Connect</string>\n\n    <string name=\"menu_disconnect\">Disconnect</string>\n\n    <string name=\"menu_scan\">Scan</string>\n\n    <string name=\"menu_stop\">Stop</string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.bluetoothlegatt":{"BluetoothLeService.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.bluetoothlegatt;\n\n \n\nimport android.app.Service;\n\nimport android.bluetooth.BluetoothAdapter;\n\nimport android.bluetooth.BluetoothDevice;\n\nimport android.bluetooth.BluetoothGatt;\n\nimport android.bluetooth.BluetoothGattCallback;\n\nimport android.bluetooth.BluetoothGattCharacteristic;\n\nimport android.bluetooth.BluetoothGattDescriptor;\n\nimport android.bluetooth.BluetoothGattService;\n\nimport android.bluetooth.BluetoothManager;\n\nimport android.bluetooth.BluetoothProfile;\n\nimport android.content.Context;\n\nimport android.content.Intent;\n\nimport android.os.Binder;\n\nimport android.os.IBinder;\n\nimport android.util.Log;\n\n \n\nimport java.util.List;\n\nimport java.util.UUID;\n\n \n\n/**\n\n * Service for managing connection and data communication with a GATT server hosted on a\n\n * given Bluetooth LE device.\n\n */\n\npublic class BluetoothLeService extends Service {\n\n    private final static String TAG = BluetoothLeService.class.getSimpleName();\n\n \n\n    private BluetoothManager mBluetoothManager;\n\n    private BluetoothAdapter mBluetoothAdapter;\n\n    private String mBluetoothDeviceAddress;\n\n    private BluetoothGatt mBluetoothGatt;\n\n    private int mConnectionState = STATE_DISCONNECTED;\n\n \n\n    private static final int STATE_DISCONNECTED = 0;\n\n    private static final int STATE_CONNECTING = 1;\n\n    private static final int STATE_CONNECTED = 2;\n\n \n\n    public final static String ACTION_GATT_CONNECTED =\n\n            \"com.example.bluetooth.le.ACTION_GATT_CONNECTED\";\n\n    public final static String ACTION_GATT_DISCONNECTED =\n\n            \"com.example.bluetooth.le.ACTION_GATT_DISCONNECTED\";\n\n    public final static String ACTION_GATT_SERVICES_DISCOVERED =\n\n            \"com.example.bluetooth.le.ACTION_GATT_SERVICES_DISCOVERED\";\n\n    public final static String ACTION_DATA_AVAILABLE =\n\n            \"com.example.bluetooth.le.ACTION_DATA_AVAILABLE\";\n\n    public final static String EXTRA_DATA =\n\n            \"com.example.bluetooth.le.EXTRA_DATA\";\n\n \n\n    public final static UUID UUID_HEART_RATE_MEASUREMENT =\n\n            UUID.fromString(SampleGattAttributes.HEART_RATE_MEASUREMENT);\n\n \n\n    // Implements callback methods for GATT events that the app cares about.  For example,\n\n    // connection change and services discovered.\n\n    private final BluetoothGattCallback mGattCallback = new BluetoothGattCallback() {\n\n        @Override\n\n        public void onConnectionStateChange(BluetoothGatt gatt, int status, int newState) {\n\n            String intentAction;\n\n            if (newState == BluetoothProfile.STATE_CONNECTED) {\n\n                intentAction = ACTION_GATT_CONNECTED;\n\n                mConnectionState = STATE_CONNECTED;\n\n                broadcastUpdate(intentAction);\n\n                Log.i(TAG, \"Connected to GATT server.\");\n\n                // Attempts to discover services after successful connection.\n\n                Log.i(TAG, \"Attempting to start service discovery:\" +\n\n                        mBluetoothGatt.discoverServices());\n\n \n\n            } else if (newState == BluetoothProfile.STATE_DISCONNECTED) {\n\n                intentAction = ACTION_GATT_DISCONNECTED;\n\n                mConnectionState = STATE_DISCONNECTED;\n\n                Log.i(TAG, \"Disconnected from GATT server.\");\n\n                broadcastUpdate(intentAction);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void onServicesDiscovered(BluetoothGatt gatt, int status) {\n\n            if (status == BluetoothGatt.GATT_SUCCESS) {\n\n                broadcastUpdate(ACTION_GATT_SERVICES_DISCOVERED);\n\n            } else {\n\n                Log.w(TAG, \"onServicesDiscovered received: \" + status);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void onCharacteristicRead(BluetoothGatt gatt,\n\n                                         BluetoothGattCharacteristic characteristic,\n\n                                         int status) {\n\n            if (status == BluetoothGatt.GATT_SUCCESS) {\n\n                broadcastUpdate(ACTION_DATA_AVAILABLE, characteristic);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void onCharacteristicChanged(BluetoothGatt gatt,\n\n                                            BluetoothGattCharacteristic characteristic) {\n\n            broadcastUpdate(ACTION_DATA_AVAILABLE, characteristic);\n\n        }\n\n    };\n\n \n\n    private void broadcastUpdate(final String action) {\n\n        final Intent intent = new Intent(action);\n\n        sendBroadcast(intent);\n\n    }\n\n \n\n    private void broadcastUpdate(final String action,\n\n                                 final BluetoothGattCharacteristic characteristic) {\n\n        final Intent intent = new Intent(action);\n\n \n\n        // This is special handling for the Heart Rate Measurement profile.  Data parsing is\n\n        // carried out as per profile specifications:\n\n        // http://developer.bluetooth.org/gatt/characteristics/Pages/CharacteristicViewer.aspx?u=org.bluetooth.characteristic.heart_rate_measurement.xml\n\n        if (UUID_HEART_RATE_MEASUREMENT.equals(characteristic.getUuid())) {\n\n            int flag = characteristic.getProperties();\n\n            int format = -1;\n\n            if ((flag & 0x01) != 0) {\n\n                format = BluetoothGattCharacteristic.FORMAT_UINT16;\n\n                Log.d(TAG, \"Heart rate format UINT16.\");\n\n            } else {\n\n                format = BluetoothGattCharacteristic.FORMAT_UINT8;\n\n                Log.d(TAG, \"Heart rate format UINT8.\");\n\n            }\n\n            final int heartRate = characteristic.getIntValue(format, 1);\n\n            Log.d(TAG, String.format(\"Received heart rate: %d\", heartRate));\n\n            intent.putExtra(EXTRA_DATA, String.valueOf(heartRate));\n\n        } else {\n\n            // For all other profiles, writes the data formatted in HEX.\n\n            final byte[] data = characteristic.getValue();\n\n            if (data != null && data.length > 0) {\n\n                final StringBuilder stringBuilder = new StringBuilder(data.length);\n\n                for(byte byteChar : data)\n\n                    stringBuilder.append(String.format(\"%02X \", byteChar));\n\n                intent.putExtra(EXTRA_DATA, new String(data) + \"\\n\" + stringBuilder.toString());\n\n            }\n\n        }\n\n        sendBroadcast(intent);\n\n    }\n\n \n\n    public class LocalBinder extends Binder {\n\n        BluetoothLeService getService() {\n\n            return BluetoothLeService.this;\n\n        }\n\n    }\n\n \n\n    @Override\n\n    public IBinder onBind(Intent intent) {\n\n        return mBinder;\n\n    }\n\n \n\n    @Override\n\n    public boolean onUnbind(Intent intent) {\n\n        // After using a given device, you should make sure that BluetoothGatt.close() is called\n\n        // such that resources are cleaned up properly.  In this particular example, close() is\n\n        // invoked when the UI is disconnected from the Service.\n\n        close();\n\n        return super.onUnbind(intent);\n\n    }\n\n \n\n    private final IBinder mBinder = new LocalBinder();\n\n \n\n    /**\n\n     * Initializes a reference to the local Bluetooth adapter.\n\n     *\n\n     * @return Return true if the initialization is successful.\n\n     */\n\n    public boolean initialize() {\n\n        // For API level 18 and above, get a reference to BluetoothAdapter through\n\n        // BluetoothManager.\n\n        if (mBluetoothManager == null) {\n\n            mBluetoothManager = (BluetoothManager) getSystemService(Context.BLUETOOTH_SERVICE);\n\n            if (mBluetoothManager == null) {\n\n                Log.e(TAG, \"Unable to initialize BluetoothManager.\");\n\n                return false;\n\n            }\n\n        }\n\n \n\n        mBluetoothAdapter = mBluetoothManager.getAdapter();\n\n        if (mBluetoothAdapter == null) {\n\n            Log.e(TAG, \"Unable to obtain a BluetoothAdapter.\");\n\n            return false;\n\n        }\n\n \n\n        return true;\n\n    }\n\n \n\n    /**\n\n     * Connects to the GATT server hosted on the Bluetooth LE device.\n\n     *\n\n     * @param address The device address of the destination device.\n\n     *\n\n     * @return Return true if the connection is initiated successfully. The connection result\n\n     *         is reported asynchronously through the\n\n     *         {@code BluetoothGattCallback#onConnectionStateChange(android.bluetooth.BluetoothGatt, int, int)}\n\n     *         callback.\n\n     */\n\n    public boolean connect(final String address) {\n\n        if (mBluetoothAdapter == null || address == null) {\n\n            Log.w(TAG, \"BluetoothAdapter not initialized or unspecified address.\");\n\n            return false;\n\n        }\n\n \n\n        // Previously connected device.  Try to reconnect.\n\n        if (mBluetoothDeviceAddress != null && address.equals(mBluetoothDeviceAddress)\n\n                && mBluetoothGatt != null) {\n\n            Log.d(TAG, \"Trying to use an existing mBluetoothGatt for connection.\");\n\n            if (mBluetoothGatt.connect()) {\n\n                mConnectionState = STATE_CONNECTING;\n\n                return true;\n\n            } else {\n\n                return false;\n\n            }\n\n        }\n\n \n\n        final BluetoothDevice device = mBluetoothAdapter.getRemoteDevice(address);\n\n        if (device == null) {\n\n            Log.w(TAG, \"Device not found.  Unable to connect.\");\n\n            return false;\n\n        }\n\n        // We want to directly connect to the device, so we are setting the autoConnect\n\n        // parameter to false.\n\n        mBluetoothGatt = device.connectGatt(this, false, mGattCallback);\n\n        Log.d(TAG, \"Trying to create a new connection.\");\n\n        mBluetoothDeviceAddress = address;\n\n        mConnectionState = STATE_CONNECTING;\n\n        return true;\n\n    }\n\n \n\n    /**\n\n     * Disconnects an existing connection or cancel a pending connection. The disconnection result\n\n     * is reported asynchronously through the\n\n     * {@code BluetoothGattCallback#onConnectionStateChange(android.bluetooth.BluetoothGatt, int, int)}\n\n     * callback.\n\n     */\n\n    public void disconnect() {\n\n        if (mBluetoothAdapter == null || mBluetoothGatt == null) {\n\n            Log.w(TAG, \"BluetoothAdapter not initialized\");\n\n            return;\n\n        }\n\n        mBluetoothGatt.disconnect();\n\n    }\n\n \n\n    /**\n\n     * After using a given BLE device, the app must call this method to ensure resources are\n\n     * released properly.\n\n     */\n\n    public void close() {\n\n        if (mBluetoothGatt == null) {\n\n            return;\n\n        }\n\n        mBluetoothGatt.close();\n\n        mBluetoothGatt = null;\n\n    }\n\n \n\n    /**\n\n     * Request a read on a given {@code BluetoothGattCharacteristic}. The read result is reported\n\n     * asynchronously through the {@code BluetoothGattCallback#onCharacteristicRead(android.bluetooth.BluetoothGatt, android.bluetooth.BluetoothGattCharacteristic, int)}\n\n     * callback.\n\n     *\n\n     * @param characteristic The characteristic to read from.\n\n     */\n\n    public void readCharacteristic(BluetoothGattCharacteristic characteristic) {\n\n        if (mBluetoothAdapter == null || mBluetoothGatt == null) {\n\n            Log.w(TAG, \"BluetoothAdapter not initialized\");\n\n            return;\n\n        }\n\n        mBluetoothGatt.readCharacteristic(characteristic);\n\n    }\n\n \n\n    /**\n\n     * Enables or disables notification on a give characteristic.\n\n     *\n\n     * @param characteristic Characteristic to act on.\n\n     * @param enabled If true, enable notification.  False otherwise.\n\n     */\n\n    public void setCharacteristicNotification(BluetoothGattCharacteristic characteristic,\n\n                                              boolean enabled) {\n\n        if (mBluetoothAdapter == null || mBluetoothGatt == null) {\n\n            Log.w(TAG, \"BluetoothAdapter not initialized\");\n\n            return;\n\n        }\n\n        mBluetoothGatt.setCharacteristicNotification(characteristic, enabled);\n\n \n\n        // This is specific to Heart Rate Measurement.\n\n        if (UUID_HEART_RATE_MEASUREMENT.equals(characteristic.getUuid())) {\n\n            BluetoothGattDescriptor descriptor = characteristic.getDescriptor(\n\n                    UUID.fromString(SampleGattAttributes.CLIENT_CHARACTERISTIC_CONFIG));\n\n            descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);\n\n            mBluetoothGatt.writeDescriptor(descriptor);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Retrieves a list of supported GATT services on the connected device. This should be\n\n     * invoked only after {@code BluetoothGatt#discoverServices()} completes successfully.\n\n     *\n\n     * @return A {@code List} of supported services.\n\n     */\n\n    public List<BluetoothGattService> getSupportedGattServices() {\n\n        if (mBluetoothGatt == null) return null;\n\n \n\n        return mBluetoothGatt.getServices();\n\n    }\n\n}\n  ","DeviceControlActivity.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.bluetoothlegatt;\n\n \n\nimport android.app.Activity;\n\nimport android.bluetooth.BluetoothGattCharacteristic;\n\nimport android.bluetooth.BluetoothGattService;\n\nimport android.content.BroadcastReceiver;\n\nimport android.content.ComponentName;\n\nimport android.content.Context;\n\nimport android.content.Intent;\n\nimport android.content.IntentFilter;\n\nimport android.content.ServiceConnection;\n\nimport android.os.Bundle;\n\nimport android.os.IBinder;\n\nimport android.util.Log;\n\nimport android.view.Menu;\n\nimport android.view.MenuItem;\n\nimport android.view.View;\n\nimport android.widget.ExpandableListView;\n\nimport android.widget.SimpleExpandableListAdapter;\n\nimport android.widget.TextView;\n\n \n\nimport java.util.ArrayList;\n\nimport java.util.HashMap;\n\nimport java.util.List;\n\n \n\n/**\n\n * For a given BLE device, this Activity provides the user interface to connect, display data,\n\n * and display GATT services and characteristics supported by the device.  The Activity\n\n * communicates with {@code BluetoothLeService}, which in turn interacts with the\n\n * Bluetooth LE API.\n\n */\n\npublic class DeviceControlActivity extends Activity {\n\n    private final static String TAG = DeviceControlActivity.class.getSimpleName();\n\n \n\n    public static final String EXTRAS_DEVICE_NAME = \"DEVICE_NAME\";\n\n    public static final String EXTRAS_DEVICE_ADDRESS = \"DEVICE_ADDRESS\";\n\n \n\n    private TextView mConnectionState;\n\n    private TextView mDataField;\n\n    private String mDeviceName;\n\n    private String mDeviceAddress;\n\n    private ExpandableListView mGattServicesList;\n\n    private BluetoothLeService mBluetoothLeService;\n\n    private ArrayList<ArrayList<BluetoothGattCharacteristic>> mGattCharacteristics =\n\n            new ArrayList<ArrayList<BluetoothGattCharacteristic>>();\n\n    private boolean mConnected = false;\n\n    private BluetoothGattCharacteristic mNotifyCharacteristic;\n\n \n\n    private final String LIST_NAME = \"NAME\";\n\n    private final String LIST_UUID = \"UUID\";\n\n \n\n    // Code to manage Service lifecycle.\n\n    private final ServiceConnection mServiceConnection = new ServiceConnection() {\n\n \n\n        @Override\n\n        public void onServiceConnected(ComponentName componentName, IBinder service) {\n\n            mBluetoothLeService = ((BluetoothLeService.LocalBinder) service).getService();\n\n            if (!mBluetoothLeService.initialize()) {\n\n                Log.e(TAG, \"Unable to initialize Bluetooth\");\n\n                finish();\n\n            }\n\n            // Automatically connects to the device upon successful start-up initialization.\n\n            mBluetoothLeService.connect(mDeviceAddress);\n\n        }\n\n \n\n        @Override\n\n        public void onServiceDisconnected(ComponentName componentName) {\n\n            mBluetoothLeService = null;\n\n        }\n\n    };\n\n \n\n    // Handles various events fired by the Service.\n\n    // ACTION_GATT_CONNECTED: connected to a GATT server.\n\n    // ACTION_GATT_DISCONNECTED: disconnected from a GATT server.\n\n    // ACTION_GATT_SERVICES_DISCOVERED: discovered GATT services.\n\n    // ACTION_DATA_AVAILABLE: received data from the device.  This can be a result of read\n\n    //                        or notification operations.\n\n    private final BroadcastReceiver mGattUpdateReceiver = new BroadcastReceiver() {\n\n        @Override\n\n        public void onReceive(Context context, Intent intent) {\n\n            final String action = intent.getAction();\n\n            if (BluetoothLeService.ACTION_GATT_CONNECTED.equals(action)) {\n\n                mConnected = true;\n\n                updateConnectionState(R.string.connected);\n\n                invalidateOptionsMenu();\n\n            } else if (BluetoothLeService.ACTION_GATT_DISCONNECTED.equals(action)) {\n\n                mConnected = false;\n\n                updateConnectionState(R.string.disconnected);\n\n                invalidateOptionsMenu();\n\n                clearUI();\n\n            } else if (BluetoothLeService.ACTION_GATT_SERVICES_DISCOVERED.equals(action)) {\n\n                // Show all the supported services and characteristics on the user interface.\n\n                displayGattServices(mBluetoothLeService.getSupportedGattServices());\n\n            } else if (BluetoothLeService.ACTION_DATA_AVAILABLE.equals(action)) {\n\n                displayData(intent.getStringExtra(BluetoothLeService.EXTRA_DATA));\n\n            }\n\n        }\n\n    };\n\n \n\n    // If a given GATT characteristic is selected, check for supported features.  This sample\n\n    // demonstrates 'Read' and 'Notify' features.  See\n\n    // http://d.android.com/reference/android/bluetooth/BluetoothGatt.html for the complete\n\n    // list of supported characteristic features.\n\n    private final ExpandableListView.OnChildClickListener servicesListClickListner =\n\n            new ExpandableListView.OnChildClickListener() {\n\n                @Override\n\n                public boolean onChildClick(ExpandableListView parent, View v, int groupPosition,\n\n                                            int childPosition, long id) {\n\n                    if (mGattCharacteristics != null) {\n\n                        final BluetoothGattCharacteristic characteristic =\n\n                                mGattCharacteristics.get(groupPosition).get(childPosition);\n\n                        final int charaProp = characteristic.getProperties();\n\n                        if ((charaProp | BluetoothGattCharacteristic.PROPERTY_READ) > 0) {\n\n                            // If there is an active notification on a characteristic, clear\n\n                            // it first so it doesn't update the data field on the user interface.\n\n                            if (mNotifyCharacteristic != null) {\n\n                                mBluetoothLeService.setCharacteristicNotification(\n\n                                        mNotifyCharacteristic, false);\n\n                                mNotifyCharacteristic = null;\n\n                            }\n\n                            mBluetoothLeService.readCharacteristic(characteristic);\n\n                        }\n\n                        if ((charaProp | BluetoothGattCharacteristic.PROPERTY_NOTIFY) > 0) {\n\n                            mNotifyCharacteristic = characteristic;\n\n                            mBluetoothLeService.setCharacteristicNotification(\n\n                                    characteristic, true);\n\n                        }\n\n                        return true;\n\n                    }\n\n                    return false;\n\n                }\n\n    };\n\n \n\n    private void clearUI() {\n\n        mGattServicesList.setAdapter((SimpleExpandableListAdapter) null);\n\n        mDataField.setText(R.string.no_data);\n\n    }\n\n \n\n    @Override\n\n    public void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.gatt_services_characteristics);\n\n \n\n        final Intent intent = getIntent();\n\n        mDeviceName = intent.getStringExtra(EXTRAS_DEVICE_NAME);\n\n        mDeviceAddress = intent.getStringExtra(EXTRAS_DEVICE_ADDRESS);\n\n \n\n        // Sets up UI references.\n\n        ((TextView) findViewById(R.id.device_address)).setText(mDeviceAddress);\n\n        mGattServicesList = (ExpandableListView) findViewById(R.id.gatt_services_list);\n\n        mGattServicesList.setOnChildClickListener(servicesListClickListner);\n\n        mConnectionState = (TextView) findViewById(R.id.connection_state);\n\n        mDataField = (TextView) findViewById(R.id.data_value);\n\n \n\n        getActionBar().setTitle(mDeviceName);\n\n        getActionBar().setDisplayHomeAsUpEnabled(true);\n\n        Intent gattServiceIntent = new Intent(this, BluetoothLeService.class);\n\n        bindService(gattServiceIntent, mServiceConnection, BIND_AUTO_CREATE);\n\n    }\n\n \n\n    @Override\n\n    protected void onResume() {\n\n        super.onResume();\n\n        registerReceiver(mGattUpdateReceiver, makeGattUpdateIntentFilter());\n\n        if (mBluetoothLeService != null) {\n\n            final boolean result = mBluetoothLeService.connect(mDeviceAddress);\n\n            Log.d(TAG, \"Connect request result=\" + result);\n\n        }\n\n    }\n\n \n\n    @Override\n\n    protected void onPause() {\n\n        super.onPause();\n\n        unregisterReceiver(mGattUpdateReceiver);\n\n    }\n\n \n\n    @Override\n\n    protected void onDestroy() {\n\n        super.onDestroy();\n\n        unbindService(mServiceConnection);\n\n        mBluetoothLeService = null;\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        getMenuInflater().inflate(R.menu.gatt_services, menu);\n\n        if (mConnected) {\n\n            menu.findItem(R.id.menu_connect).setVisible(false);\n\n            menu.findItem(R.id.menu_disconnect).setVisible(true);\n\n        } else {\n\n            menu.findItem(R.id.menu_connect).setVisible(true);\n\n            menu.findItem(R.id.menu_disconnect).setVisible(false);\n\n        }\n\n        return true;\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch(item.getItemId()) {\n\n            case R.id.menu_connect:\n\n                mBluetoothLeService.connect(mDeviceAddress);\n\n                return true;\n\n            case R.id.menu_disconnect:\n\n                mBluetoothLeService.disconnect();\n\n                return true;\n\n            case android.R.id.home:\n\n                onBackPressed();\n\n                return true;\n\n        }\n\n        return super.onOptionsItemSelected(item);\n\n    }\n\n \n\n    private void updateConnectionState(final int resourceId) {\n\n        runOnUiThread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                mConnectionState.setText(resourceId);\n\n            }\n\n        });\n\n    }\n\n \n\n    private void displayData(String data) {\n\n        if (data != null) {\n\n            mDataField.setText(data);\n\n        }\n\n    }\n\n \n\n    // Demonstrates how to iterate through the supported GATT Services/Characteristics.\n\n    // In this sample, we populate the data structure that is bound to the ExpandableListView\n\n    // on the UI.\n\n    private void displayGattServices(List<BluetoothGattService> gattServices) {\n\n        if (gattServices == null) return;\n\n        String uuid = null;\n\n        String unknownServiceString = getResources().getString(R.string.unknown_service);\n\n        String unknownCharaString = getResources().getString(R.string.unknown_characteristic);\n\n        ArrayList<HashMap<String, String>> gattServiceData = new ArrayList<HashMap<String, String>>();\n\n        ArrayList<ArrayList<HashMap<String, String>>> gattCharacteristicData\n\n                = new ArrayList<ArrayList<HashMap<String, String>>>();\n\n        mGattCharacteristics = new ArrayList<ArrayList<BluetoothGattCharacteristic>>();\n\n \n\n        // Loops through available GATT Services.\n\n        for (BluetoothGattService gattService : gattServices) {\n\n            HashMap<String, String> currentServiceData = new HashMap<String, String>();\n\n            uuid = gattService.getUuid().toString();\n\n            currentServiceData.put(\n\n                    LIST_NAME, SampleGattAttributes.lookup(uuid, unknownServiceString));\n\n            currentServiceData.put(LIST_UUID, uuid);\n\n            gattServiceData.add(currentServiceData);\n\n \n\n            ArrayList<HashMap<String, String>> gattCharacteristicGroupData =\n\n                    new ArrayList<HashMap<String, String>>();\n\n            List<BluetoothGattCharacteristic> gattCharacteristics =\n\n                    gattService.getCharacteristics();\n\n            ArrayList<BluetoothGattCharacteristic> charas =\n\n                    new ArrayList<BluetoothGattCharacteristic>();\n\n \n\n            // Loops through available Characteristics.\n\n            for (BluetoothGattCharacteristic gattCharacteristic : gattCharacteristics) {\n\n                charas.add(gattCharacteristic);\n\n                HashMap<String, String> currentCharaData = new HashMap<String, String>();\n\n                uuid = gattCharacteristic.getUuid().toString();\n\n                currentCharaData.put(\n\n                        LIST_NAME, SampleGattAttributes.lookup(uuid, unknownCharaString));\n\n                currentCharaData.put(LIST_UUID, uuid);\n\n                gattCharacteristicGroupData.add(currentCharaData);\n\n            }\n\n            mGattCharacteristics.add(charas);\n\n            gattCharacteristicData.add(gattCharacteristicGroupData);\n\n        }\n\n \n\n        SimpleExpandableListAdapter gattServiceAdapter = new SimpleExpandableListAdapter(\n\n                this,\n\n                gattServiceData,\n\n                android.R.layout.simple_expandable_list_item_2,\n\n                new String[] {LIST_NAME, LIST_UUID},\n\n                new int[] { android.R.id.text1, android.R.id.text2 },\n\n                gattCharacteristicData,\n\n                android.R.layout.simple_expandable_list_item_2,\n\n                new String[] {LIST_NAME, LIST_UUID},\n\n                new int[] { android.R.id.text1, android.R.id.text2 }\n\n        );\n\n        mGattServicesList.setAdapter(gattServiceAdapter);\n\n    }\n\n \n\n    private static IntentFilter makeGattUpdateIntentFilter() {\n\n        final IntentFilter intentFilter = new IntentFilter();\n\n        intentFilter.addAction(BluetoothLeService.ACTION_GATT_CONNECTED);\n\n        intentFilter.addAction(BluetoothLeService.ACTION_GATT_DISCONNECTED);\n\n        intentFilter.addAction(BluetoothLeService.ACTION_GATT_SERVICES_DISCOVERED);\n\n        intentFilter.addAction(BluetoothLeService.ACTION_DATA_AVAILABLE);\n\n        return intentFilter;\n\n    }\n\n}\n  ","DeviceScanActivity.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.bluetoothlegatt;\n\n \n\nimport android.app.Activity;\n\nimport android.app.ListActivity;\n\nimport android.bluetooth.BluetoothAdapter;\n\nimport android.bluetooth.BluetoothDevice;\n\nimport android.bluetooth.BluetoothManager;\n\nimport android.content.Context;\n\nimport android.content.Intent;\n\nimport android.content.pm.PackageManager;\n\nimport android.os.Bundle;\n\nimport android.os.Handler;\n\nimport android.view.LayoutInflater;\n\nimport android.view.Menu;\n\nimport android.view.MenuItem;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.BaseAdapter;\n\nimport android.widget.ListView;\n\nimport android.widget.TextView;\n\nimport android.widget.Toast;\n\n \n\nimport java.util.ArrayList;\n\n \n\n/**\n\n * Activity for scanning and displaying available Bluetooth LE devices.\n\n */\n\npublic class DeviceScanActivity extends ListActivity {\n\n    private LeDeviceListAdapter mLeDeviceListAdapter;\n\n    private BluetoothAdapter mBluetoothAdapter;\n\n    private boolean mScanning;\n\n    private Handler mHandler;\n\n \n\n    private static final int REQUEST_ENABLE_BT = 1;\n\n    // Stops scanning after 10 seconds.\n\n    private static final long SCAN_PERIOD = 10000;\n\n \n\n    @Override\n\n    public void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        getActionBar().setTitle(R.string.title_devices);\n\n        mHandler = new Handler();\n\n \n\n        // Use this check to determine whether BLE is supported on the device.  Then you can\n\n        // selectively disable BLE-related features.\n\n        if (!getPackageManager().hasSystemFeature(PackageManager.FEATURE_BLUETOOTH_LE)) {\n\n            Toast.makeText(this, R.string.ble_not_supported, Toast.LENGTH_SHORT).show();\n\n            finish();\n\n        }\n\n \n\n        // Initializes a Bluetooth adapter.  For API level 18 and above, get a reference to\n\n        // BluetoothAdapter through BluetoothManager.\n\n        final BluetoothManager bluetoothManager =\n\n                (BluetoothManager) getSystemService(Context.BLUETOOTH_SERVICE);\n\n        mBluetoothAdapter = bluetoothManager.getAdapter();\n\n \n\n        // Checks if Bluetooth is supported on the device.\n\n        if (mBluetoothAdapter == null) {\n\n            Toast.makeText(this, R.string.error_bluetooth_not_supported, Toast.LENGTH_SHORT).show();\n\n            finish();\n\n            return;\n\n        }\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        getMenuInflater().inflate(R.menu.main, menu);\n\n        if (!mScanning) {\n\n            menu.findItem(R.id.menu_stop).setVisible(false);\n\n            menu.findItem(R.id.menu_scan).setVisible(true);\n\n            menu.findItem(R.id.menu_refresh).setActionView(null);\n\n        } else {\n\n            menu.findItem(R.id.menu_stop).setVisible(true);\n\n            menu.findItem(R.id.menu_scan).setVisible(false);\n\n            menu.findItem(R.id.menu_refresh).setActionView(\n\n                    R.layout.actionbar_indeterminate_progress);\n\n        }\n\n        return true;\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch (item.getItemId()) {\n\n            case R.id.menu_scan:\n\n                mLeDeviceListAdapter.clear();\n\n                scanLeDevice(true);\n\n                break;\n\n            case R.id.menu_stop:\n\n                scanLeDevice(false);\n\n                break;\n\n        }\n\n        return true;\n\n    }\n\n \n\n    @Override\n\n    protected void onResume() {\n\n        super.onResume();\n\n \n\n        // Ensures Bluetooth is enabled on the device.  If Bluetooth is not currently enabled,\n\n        // fire an intent to display a dialog asking the user to grant permission to enable it.\n\n        if (!mBluetoothAdapter.isEnabled()) {\n\n            if (!mBluetoothAdapter.isEnabled()) {\n\n                Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);\n\n                startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);\n\n            }\n\n        }\n\n \n\n        // Initializes list view adapter.\n\n        mLeDeviceListAdapter = new LeDeviceListAdapter();\n\n        setListAdapter(mLeDeviceListAdapter);\n\n        scanLeDevice(true);\n\n    }\n\n \n\n    @Override\n\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n\n        // User chose not to enable Bluetooth.\n\n        if (requestCode == REQUEST_ENABLE_BT && resultCode == Activity.RESULT_CANCELED) {\n\n            finish();\n\n            return;\n\n        }\n\n        super.onActivityResult(requestCode, resultCode, data);\n\n    }\n\n \n\n    @Override\n\n    protected void onPause() {\n\n        super.onPause();\n\n        scanLeDevice(false);\n\n        mLeDeviceListAdapter.clear();\n\n    }\n\n \n\n    @Override\n\n    protected void onListItemClick(ListView l, View v, int position, long id) {\n\n        final BluetoothDevice device = mLeDeviceListAdapter.getDevice(position);\n\n        if (device == null) return;\n\n        final Intent intent = new Intent(this, DeviceControlActivity.class);\n\n        intent.putExtra(DeviceControlActivity.EXTRAS_DEVICE_NAME, device.getName());\n\n        intent.putExtra(DeviceControlActivity.EXTRAS_DEVICE_ADDRESS, device.getAddress());\n\n        if (mScanning) {\n\n            mBluetoothAdapter.stopLeScan(mLeScanCallback);\n\n            mScanning = false;\n\n        }\n\n        startActivity(intent);\n\n    }\n\n \n\n    private void scanLeDevice(final boolean enable) {\n\n        if (enable) {\n\n            // Stops scanning after a pre-defined scan period.\n\n            mHandler.postDelayed(new Runnable() {\n\n                @Override\n\n                public void run() {\n\n                    mScanning = false;\n\n                    mBluetoothAdapter.stopLeScan(mLeScanCallback);\n\n                    invalidateOptionsMenu();\n\n                }\n\n            }, SCAN_PERIOD);\n\n \n\n            mScanning = true;\n\n            mBluetoothAdapter.startLeScan(mLeScanCallback);\n\n        } else {\n\n            mScanning = false;\n\n            mBluetoothAdapter.stopLeScan(mLeScanCallback);\n\n        }\n\n        invalidateOptionsMenu();\n\n    }\n\n \n\n    // Adapter for holding devices found through scanning.\n\n    private class LeDeviceListAdapter extends BaseAdapter {\n\n        private ArrayList<BluetoothDevice> mLeDevices;\n\n        private LayoutInflater mInflator;\n\n \n\n        public LeDeviceListAdapter() {\n\n            super();\n\n            mLeDevices = new ArrayList<BluetoothDevice>();\n\n            mInflator = DeviceScanActivity.this.getLayoutInflater();\n\n        }\n\n \n\n        public void addDevice(BluetoothDevice device) {\n\n            if(!mLeDevices.contains(device)) {\n\n                mLeDevices.add(device);\n\n            }\n\n        }\n\n \n\n        public BluetoothDevice getDevice(int position) {\n\n            return mLeDevices.get(position);\n\n        }\n\n \n\n        public void clear() {\n\n            mLeDevices.clear();\n\n        }\n\n \n\n        @Override\n\n        public int getCount() {\n\n            return mLeDevices.size();\n\n        }\n\n \n\n        @Override\n\n        public Object getItem(int i) {\n\n            return mLeDevices.get(i);\n\n        }\n\n \n\n        @Override\n\n        public long getItemId(int i) {\n\n            return i;\n\n        }\n\n \n\n        @Override\n\n        public View getView(int i, View view, ViewGroup viewGroup) {\n\n            ViewHolder viewHolder;\n\n            // General ListView optimization code.\n\n            if (view == null) {\n\n                view = mInflator.inflate(R.layout.listitem_device, null);\n\n                viewHolder = new ViewHolder();\n\n                viewHolder.deviceAddress = (TextView) view.findViewById(R.id.device_address);\n\n                viewHolder.deviceName = (TextView) view.findViewById(R.id.device_name);\n\n                view.setTag(viewHolder);\n\n            } else {\n\n                viewHolder = (ViewHolder) view.getTag();\n\n            }\n\n \n\n            BluetoothDevice device = mLeDevices.get(i);\n\n            final String deviceName = device.getName();\n\n            if (deviceName != null && deviceName.length() > 0)\n\n                viewHolder.deviceName.setText(deviceName);\n\n            else\n\n                viewHolder.deviceName.setText(R.string.unknown_device);\n\n            viewHolder.deviceAddress.setText(device.getAddress());\n\n \n\n            return view;\n\n        }\n\n    }\n\n \n\n    // Device scan callback.\n\n    private BluetoothAdapter.LeScanCallback mLeScanCallback =\n\n            new BluetoothAdapter.LeScanCallback() {\n\n \n\n        @Override\n\n        public void onLeScan(final BluetoothDevice device, int rssi, byte[] scanRecord) {\n\n            runOnUiThread(new Runnable() {\n\n                @Override\n\n                public void run() {\n\n                    mLeDeviceListAdapter.addDevice(device);\n\n                    mLeDeviceListAdapter.notifyDataSetChanged();\n\n                }\n\n            });\n\n        }\n\n    };\n\n \n\n    static class ViewHolder {\n\n        TextView deviceName;\n\n        TextView deviceAddress;\n\n    }\n\n}\n  ","SampleGattAttributes.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.bluetoothlegatt;\n\n \n\nimport java.util.HashMap;\n\n \n\n/**\n\n * This class includes a small subset of standard GATT attributes for demonstration purposes.\n\n */\n\npublic class SampleGattAttributes {\n\n    private static HashMap<String, String> attributes = new HashMap();\n\n    public static String HEART_RATE_MEASUREMENT = \"00002a37-0000-1000-8000-00805f9b34fb\";\n\n    public static String CLIENT_CHARACTERISTIC_CONFIG = \"00002902-0000-1000-8000-00805f9b34fb\";\n\n \n\n    static {\n\n        // Sample Services.\n\n        attributes.put(\"0000180d-0000-1000-8000-00805f9b34fb\", \"Heart Rate Service\");\n\n        attributes.put(\"0000180a-0000-1000-8000-00805f9b34fb\", \"Device Information Service\");\n\n        // Sample Characteristics.\n\n        attributes.put(HEART_RATE_MEASUREMENT, \"Heart Rate Measurement\");\n\n        attributes.put(\"00002a29-0000-1000-8000-00805f9b34fb\", \"Manufacturer Name String\");\n\n    }\n\n \n\n    public static String lookup(String uuid, String defaultName) {\n\n        String name = attributes.get(uuid);\n\n        return name == null ? defaultName : name;\n\n    }\n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.bluetoothlegatt\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk android:minSdkVersion=\"18\"\n\n        android:targetSdkVersion=\"18\"/>\n\n    <!-- Declare this required feature if you want to make the app available to BLE-capable\n\n    devices only.  If you want to make your app available to devices that don't support BLE,\n\n    you should omit this in the manifest.  Instead, determine BLE capability by using\n\n    PackageManager.hasSystemFeature(FEATURE_BLUETOOTH_LE) -->\n\n    <uses-feature android:name=\"android.hardware.bluetooth_le\" android:required=\"true\"/>\n\n \n\n    <uses-permission android:name=\"android.permission.BLUETOOTH\"/>\n\n    <uses-permission android:name=\"android.permission.BLUETOOTH_ADMIN\"/>\n\n \n\n    <application android:label=\"@string/app_name\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:theme=\"@android:style/Theme.Holo.Light\">\n\n        <activity android:name=\".DeviceScanActivity\"\n\n            android:label=\"@string/app_name\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\"/>\n\n                <category android:name=\"android.intent.category.LAUNCHER\"/>\n\n            </intent-filter>\n\n        </activity>\n\n        <activity android:name=\".DeviceControlActivity\"/>\n\n        <service android:name=\".BluetoothLeService\" android:enabled=\"true\"/>\n\n    </application>\n\n \n\n</manifest>\n  "},"CardEmulation":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com/samples/CardEmulation/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com/samples/CardEmulation/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com/samples/CardEmulation/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com/samples/CardEmulation/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"card_background.png":"http://developer.android.com/samples/CardEmulation/res/drawable-xxhdpi/card_background.png","ic_launcher.png":"http://developer.android.com/samples/CardEmulation/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"vertical\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <ViewAnimator\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\"\n\n          android:layout_weight=\"1\">\n\n \n\n        <ScrollView\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingRight=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingTop=\"@dimen/vertical_page_margin\"\n\n                  android:paddingBottom=\"@dimen/vertical_page_margin\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </ScrollView>\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\" />\n\n \n\n    </ViewAnimator>\n\n \n\n    <View\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"1dp\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\" />\n\n \n\n</LinearLayout>\n\n \n  ","main_fragment.xml":"\n    \n\n<!--\n\nCopyright (C) 2013 The Android Open Source Project\n\n \n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n-->\n\n \n\n<FrameLayout\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"380dp\"\n\n    android:layout_height=\"242.25dp\"\n\n    android:layout_gravity=\"center\"\n\n    android:layout_margin=\"20dp\">\n\n    <ImageView\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"match_parent\"\n\n        android:src=\"@drawable/card_background\"\n\n        />\n\n    <LinearLayout\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"match_parent\"\n\n        android:orientation=\"vertical\"\n\n        android:padding=\"20dp\"\n\n        android:layout_gravity=\"center\"\n\n        android:clickable=\"true\">\n\n        <TextView\n\n            android:id=\"@+id/card_title\"\n\n            android:layout_width=\"wrap_content\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:text=\"@string/card_title\"\n\n            android:fontFamily=\"sans-serif-condensed\"\n\n            android:textStyle=\"bold\"\n\n            android:textSize=\"32dp\"\n\n            />\n\n        <TextView\n\n            android:id=\"@+id/card_account_label\"\n\n            android:layout_width=\"wrap_content\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:text=\"@string/account_number\"\n\n            android:fontFamily=\"sans-serif\"\n\n            android:textStyle=\"bold\"\n\n            android:textSize=\"18dp\"\n\n            android:layout_marginTop=\"40dp\"\n\n            />\n\n        <EditText\n\n            android:id=\"@+id/card_account_field\"\n\n            android:width=\"360dp\"\n\n            android:layout_width=\"wrap_content\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:fontFamily=\"sans-serif-condensed\"\n\n            android:textStyle=\"bold\"\n\n            android:textSize=\"42dp\"\n\n            android:singleLine=\"true\"\n\n            android:inputType=\"number\" />\n\n    </LinearLayout>\n\n</FrameLayout>\n  "},"layout-w720dp":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"horizontal\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <LinearLayout\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\"\n\n          android:layout_weight=\"1\"\n\n          android:orientation=\"vertical\">\n\n \n\n        <FrameLayout\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"wrap_content\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/margin_medium\"\n\n                  android:paddingRight=\"@dimen/margin_medium\"\n\n                  android:paddingTop=\"@dimen/margin_large\"\n\n                  android:paddingBottom=\"@dimen/margin_large\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </FrameLayout>\n\n \n\n        <View\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"1dp\"\n\n              android:background=\"@android:color/darker_gray\" />\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"0px\"\n\n              android:layout_weight=\"1\" />\n\n \n\n    </LinearLayout>\n\n \n\n    <View\n\n          android:layout_width=\"1dp\"\n\n          android:layout_height=\"match_parent\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\" />\n\n \n\n</LinearLayout>\n\n \n\n \n  "},"menu":{"main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:id=\"@+id/menu_toggle_log\"\n\n          android:showAsAction=\"always\"\n\n          android:title=\"@string/sample_show_log\" />\n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">CardEmulation</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            This sample demonstrates how to emulate an NFC card, using the \"host card emulation\"\n\n            feature added in Android 4.4. This sample makes the device appear as a loyalty card\n\n            whenever the screen is on and the user taps their device on an appropriately configured\n\n            NFC reader.\n\n \n\n            The \"CardReader\" sample can be used to read the loyalty card implemented in this sample.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","strings.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<resources>\n\n    <string name=\"sample_show_log\">Show Log</string>\n\n    <string name=\"sample_hide_log\">Hide Log</string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "},"xml":{"aid_list.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\nCopyright (C) 2013 The Android Open Source Project\n\n \n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n-->\n\n \n\n<!-- This file defines which AIDs this application should emulate cards for.\n\n \n\n     Vendor-specific AIDs should always start with an \"F\", according to the ISO 7816 spec. We\n\n     recommended vendor-specific AIDs be at least 6 characters long, to provide sufficient\n\n     uniqueness. Note, however, that longer AIDs may impose a burden on non-Android NFC terminals.\n\n     AIDs may not exceed 32 characters (16 bytes).\n\n \n\n     Additionally, AIDs must always contain an even number of characters, in hexadecimal format.\n\n \n\n     In order to avoid prompting the user to select which service they want to use when the device\n\n     is scanned, this app must be selected as the default handler for an AID group by the user, or\n\n     the terminal must select *all* AIDs defined in the category simultaneously (\"exact match\").\n\n-->\n\n<host-apdu-service xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:description=\"@string/service_name\"\n\n    android:requireDeviceUnlock=\"false\">\n\n    <!--\n\n    If category=\"payment\" is used for any aid-groups, you must also add an android:apduServiceBanner\n\n    attribute above, like so:\n\n \n\n    android:apduServiceBanner=\"@drawable/settings_banner\"\n\n \n\n     apduServiceBanner should be 260x96 dp. In pixels, that works out to...\n\n       - drawable-xxhdpi: 780x288 px\n\n       - drawable-xhdpi:  520x192 px\n\n       - drawable-hdpi:   390x144 px\n\n       - drawable-mdpi:   260x96  px\n\n \n\n    The apduServiceBanner is displayed in the \"Tap & Pay\" menu in the system Settings app, and\n\n    is only displayed for apps which implement the \"payment\" AID category.\n\n \n\n    Since this sample is implementing a non-standard card type (a loyalty card, specifically), we\n\n    do not need to define a banner.\n\n \n\n    Important: category=\"payment\" should only be used for industry-standard payment cards. If you are\n\n        implementing a closed-loop payment system (e.g. stored value cards for a specific merchant\n\n        or transit system), use category=\"other\". This is because only one \"payment\" card may be\n\n        active at a time, whereas all \"other\" cards are active simultaneously (subject to AID\n\n        dispatch).\n\n    -->\n\n \n\n    <aid-group android:description=\"@string/card_title\" android:category=\"other\">\n\n        <aid-filter android:name=\"F222222222\"/>\n\n    </aid-group>\n\n</host-apdu-service>\n  "}},"src":{"com.example.android.cardemulation":{"AccountStorage.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.cardemulation;\n\n \n\nimport android.content.Context;\n\nimport android.content.SharedPreferences;\n\nimport android.preference.PreferenceManager;\n\nimport android.util.Log;\n\n \n\n/**\n\n * Utility class for persisting account numbers to disk.\n\n *\n\n * <p>The default SharedPreferences instance is used as the backing storage. Values are cached\n\n * in memory for performance.\n\n *\n\n * <p>This class is thread-safe.\n\n */\n\npublic class AccountStorage {\n\n    private static final String PREF_ACCOUNT_NUMBER = \"account_number\";\n\n    private static final String DEFAULT_ACCOUNT_NUMBER = \"00000000\";\n\n    private static final String TAG = \"AccountStorage\";\n\n    private static String sAccount = null;\n\n    private static final Object sAccountLock = new Object();\n\n \n\n    public static void SetAccount(Context c, String s) {\n\n        synchronized(sAccountLock) {\n\n            Log.i(TAG, \"Setting account number: \" + s);\n\n            SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(c);\n\n            prefs.edit().putString(PREF_ACCOUNT_NUMBER, s).commit();\n\n            sAccount = s;\n\n        }\n\n    }\n\n \n\n    public static String GetAccount(Context c) {\n\n        synchronized (sAccountLock) {\n\n            if (sAccount == null) {\n\n                SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(c);\n\n                String account = prefs.getString(PREF_ACCOUNT_NUMBER, DEFAULT_ACCOUNT_NUMBER);\n\n                sAccount = account;\n\n            }\n\n            return sAccount;\n\n        }\n\n    }\n\n}\n  ","CardEmulationFragment.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.cardemulation;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.EditText;\n\n \n\n/**\n\n * Generic UI for sample discovery.\n\n */\n\npublic class CardEmulationFragment extends Fragment {\n\n \n\n    public static final String TAG = \"CardEmulationFragment\";\n\n \n\n    /** Called when sample is created. Displays generic UI with welcome text. */\n\n    @Override\n\n    public void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n        // Inflate the layout for this fragment\n\n        View v = inflater.inflate(R.layout.main_fragment, container, false);\n\n        EditText account = (EditText) v.findViewById(R.id.card_account_field);\n\n        account.setText(AccountStorage.GetAccount(getActivity()));\n\n        account.addTextChangedListener(new AccountUpdater());\n\n        return v;\n\n    }\n\n \n\n \n\n    private class AccountUpdater implements TextWatcher {\n\n        @Override\n\n        public void beforeTextChanged(CharSequence s, int start, int count, int after) {\n\n            // Not implemented.\n\n        }\n\n \n\n        @Override\n\n        public void onTextChanged(CharSequence s, int start, int before, int count) {\n\n            // Not implemented.\n\n        }\n\n \n\n        @Override\n\n        public void afterTextChanged(Editable s) {\n\n            String account = s.toString();\n\n            AccountStorage.SetAccount(getActivity(), account);\n\n        }\n\n    }\n\n}\n  ","CardService.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.cardemulation;\n\n \n\nimport android.nfc.cardemulation.HostApduService;\n\nimport android.os.Bundle;\n\nimport com.example.android.common.logger.Log;\n\n \n\nimport java.util.Arrays;\n\n \n\n/**\n\n * This is a sample APDU Service which demonstrates how to interface with the card emulation support\n\n * added in Android 4.4, KitKat.\n\n *\n\n * <p>This sample replies to any requests sent with the string \"Hello World\". In real-world\n\n * situations, you would need to modify this code to implement your desired communication\n\n * protocol.\n\n *\n\n * <p>This sample will be invoked for any terminals selecting AIDs of 0xF11111111, 0xF22222222, or\n\n * 0xF33333333. See src/main/res/xml/aid_list.xml for more details.\n\n *\n\n * <p class=\"note\">Note: This is a low-level interface. Unlike the NdefMessage many developers\n\n * are familiar with for implementing Android Beam in apps, card emulation only provides a\n\n * byte-array based communication channel. It is left to developers to implement higher level\n\n * protocol support as needed.\n\n */\n\npublic class CardService extends HostApduService {\n\n    private static final String TAG = \"CardService\";\n\n    // AID for our loyalty card service.\n\n    private static final String SAMPLE_LOYALTY_CARD_AID = \"F222222222\";\n\n    // ISO-DEP command HEADER for selecting an AID.\n\n    // Format: [Class | Instruction | Parameter 1 | Parameter 2]\n\n    private static final String SELECT_APDU_HEADER = \"00A40400\";\n\n    // \"OK\" status word sent in response to SELECT AID command (0x9000)\n\n    private static final byte[] SELECT_OK_SW = HexStringToByteArray(\"9000\");\n\n    // \"UNKNOWN\" status word sent in response to invalid APDU command (0x0000)\n\n    private static final byte[] UNKNOWN_CMD_SW = HexStringToByteArray(\"0000\");\n\n    private static final byte[] SELECT_APDU = BuildSelectApdu(SAMPLE_LOYALTY_CARD_AID);\n\n \n\n    /**\n\n     * Called if the connection to the NFC card is lost, in order to let the application know the\n\n     * cause for the disconnection (either a lost link, or another AID being selected by the\n\n     * reader).\n\n     *\n\n     * @param reason Either DEACTIVATION_LINK_LOSS or DEACTIVATION_DESELECTED\n\n     */\n\n    @Override\n\n    public void onDeactivated(int reason) { }\n\n \n\n    /**\n\n     * This method will be called when a command APDU has been received from a remote device. A\n\n     * response APDU can be provided directly by returning a byte-array in this method. In general\n\n     * response APDUs must be sent as quickly as possible, given the fact that the user is likely\n\n     * holding his device over an NFC reader when this method is called.\n\n     *\n\n     * <p class=\"note\">If there are multiple services that have registered for the same AIDs in\n\n     * their meta-data entry, you will only get called if the user has explicitly selected your\n\n     * service, either as a default or just for the next tap.\n\n     *\n\n     * <p class=\"note\">This method is running on the main thread of your application. If you\n\n     * cannot return a response APDU immediately, return null and use the {@link\n\n     * #sendResponseApdu(byte[])} method later.\n\n     *\n\n     * @param commandApdu The APDU that received from the remote device\n\n     * @param extras A bundle containing extra data. May be null.\n\n     * @return a byte-array containing the response APDU, or null if no response APDU can be sent\n\n     * at this point.\n\n     */\n\n    @Override\n\n    public byte[] processCommandApdu(byte[] commandApdu, Bundle extras) {\n\n        Log.i(TAG, \"Received APDU: \" + ByteArrayToHexString(commandApdu));\n\n        // If the APDU matches the SELECT AID command for this service,\n\n        // send the loyalty card account number, followed by a SELECT_OK status trailer (0x9000).\n\n        if (Arrays.equals(SELECT_APDU, commandApdu)) {\n\n            String account = AccountStorage.GetAccount(this);\n\n            byte[] accountBytes = account.getBytes();\n\n            Log.i(TAG, \"Sending account number: \" + account);\n\n            return ConcatArrays(accountBytes, SELECT_OK_SW);\n\n        } else {\n\n            return UNKNOWN_CMD_SW;\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Build APDU for SELECT AID command. This command indicates which service a reader is\n\n     * interested in communicating with. See ISO 7816-4.\n\n     *\n\n     * @param aid Application ID (AID) to select\n\n     * @return APDU for SELECT AID command\n\n     */\n\n    public static byte[] BuildSelectApdu(String aid) {\n\n        // Format: [CLASS | INSTRUCTION | PARAMETER 1 | PARAMETER 2 | LENGTH | DATA]\n\n        return HexStringToByteArray(SELECT_APDU_HEADER + String.format(\"%02X\",\n\n                aid.length() / 2) + aid);\n\n    }\n\n \n\n    /**\n\n     * Utility method to convert a byte array to a hexadecimal string.\n\n     *\n\n     * @param bytes Bytes to convert\n\n     * @return String, containing hexadecimal representation.\n\n     */\n\n    public static String ByteArrayToHexString(byte[] bytes) {\n\n        final char[] hexArray = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};\n\n        char[] hexChars = new char[bytes.length * 2]; // Each byte has two hex characters (nibbles)\n\n        int v;\n\n        for (int j = 0; j < bytes.length; j++) {\n\n            v = bytes[j] & 0xFF; // Cast bytes[j] to int, treating as unsigned value\n\n            hexChars[j * 2] = hexArray[v >>> 4]; // Select hex character from upper nibble\n\n            hexChars[j * 2 + 1] = hexArray[v & 0x0F]; // Select hex character from lower nibble\n\n        }\n\n        return new String(hexChars);\n\n    }\n\n \n\n    /**\n\n     * Utility method to convert a hexadecimal string to a byte string.\n\n     *\n\n     * <p>Behavior with input strings containing non-hexadecimal characters is undefined.\n\n     *\n\n     * @param s String containing hexadecimal characters to convert\n\n     * @return Byte array generated from input\n\n     * @throws java.lang.IllegalArgumentException if input length is incorrect\n\n     */\n\n    public static byte[] HexStringToByteArray(String s) throws IllegalArgumentException {\n\n        int len = s.length();\n\n        if (len % 2 == 1) {\n\n            throw new IllegalArgumentException(\"Hex string must have even number of characters\");\n\n        }\n\n        byte[] data = new byte[len / 2]; // Allocate 1 byte per 2 hex characters\n\n        for (int i = 0; i < len; i += 2) {\n\n            // Convert each character into a integer (base-16), then bit-shift into place\n\n            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)\n\n                    + Character.digit(s.charAt(i+1), 16));\n\n        }\n\n        return data;\n\n    }\n\n \n\n    /**\n\n     * Utility method to concatenate two byte arrays.\n\n     * @param first First array\n\n     * @param rest Any remaining arrays\n\n     * @return Concatenated copy of input arrays\n\n     */\n\n    public static byte[] ConcatArrays(byte[] first, byte[]... rest) {\n\n        int totalLength = first.length;\n\n        for (byte[] array : rest) {\n\n            totalLength += array.length;\n\n        }\n\n        byte[] result = Arrays.copyOf(first, totalLength);\n\n        int offset = first.length;\n\n        for (byte[] array : rest) {\n\n            System.arraycopy(array, 0, result, offset, array.length);\n\n            offset += array.length;\n\n        }\n\n        return result;\n\n    }\n\n}\n  ","MainActivity.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.cardemulation;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentTransaction;\n\nimport android.view.Menu;\n\nimport android.view.MenuItem;\n\nimport android.widget.ViewAnimator;\n\n \n\nimport com.example.android.common.activities.SampleActivityBase;\n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogFragment;\n\nimport com.example.android.common.logger.LogWrapper;\n\nimport com.example.android.common.logger.MessageOnlyLogFilter;\n\n \n\n/**\n\n * A simple launcher activity containing a summary sample description, sample log and a custom\n\n * {@link android.support.v4.app.Fragment} which can display a view.\n\n * <p>\n\n * For devices with displays with a width of 720dp or greater, the sample log is always visible,\n\n * on other devices it's visibility is controlled by an item on the Action Bar.\n\n */\n\npublic class MainActivity extends SampleActivityBase {\n\n \n\n    public static final String TAG = \"MainActivity\";\n\n \n\n    // Whether the Log Fragment is currently shown\n\n    private boolean mLogShown;\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_main);\n\n \n\n        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n\n        CardEmulationFragment fragment = new CardEmulationFragment();\n\n        transaction.replace(R.id.sample_content_fragment, fragment);\n\n        transaction.commit();\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        getMenuInflater().inflate(R.menu.main, menu);\n\n        return true;\n\n    }\n\n \n\n    @Override\n\n    public boolean onPrepareOptionsMenu(Menu menu) {\n\n        MenuItem logToggle = menu.findItem(R.id.menu_toggle_log);\n\n        logToggle.setVisible(findViewById(R.id.sample_output) instanceof ViewAnimator);\n\n        logToggle.setTitle(mLogShown ? R.string.sample_hide_log : R.string.sample_show_log);\n\n \n\n        return super.onPrepareOptionsMenu(menu);\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch(item.getItemId()) {\n\n            case R.id.menu_toggle_log:\n\n                mLogShown = !mLogShown;\n\n                ViewAnimator output = (ViewAnimator) findViewById(R.id.sample_output);\n\n                if (mLogShown) {\n\n                    output.setDisplayedChild(1);\n\n                } else {\n\n                    output.setDisplayedChild(0);\n\n                }\n\n                supportInvalidateOptionsMenu();\n\n                return true;\n\n        }\n\n        return super.onOptionsItemSelected(item);\n\n    }\n\n \n\n    /** Create a chain of targets that will receive log data */\n\n    @Override\n\n    public void initializeLogging() {\n\n        // Wraps Android's native log framework.\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        Log.setLogNode(logWrapper);\n\n \n\n        // Filter strips out everything except the message text.\n\n        MessageOnlyLogFilter msgFilter = new MessageOnlyLogFilter();\n\n        logWrapper.setNext(msgFilter);\n\n \n\n        // On screen logging via a fragment with a TextView.\n\n        LogFragment logFragment = (LogFragment) getSupportFragmentManager()\n\n                .findFragmentById(R.id.log_fragment);\n\n        msgFilter.setNext(logFragment.getLogView());\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "},"com.example.android.common":{"activities":{"SampleActivityBase.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\npackage com.example.android.common.activities;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentActivity;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogWrapper;\n\n \n\n/**\n\n * Base launcher activity, to handle most of the common plumbing for samples.\n\n */\n\npublic class SampleActivityBase extends FragmentActivity {\n\n \n\n    public static final String TAG = \"SampleActivityBase\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n    }\n\n \n\n    @Override\n\n    protected  void onStart() {\n\n        super.onStart();\n\n        initializeLogging();\n\n    }\n\n \n\n    /** Set up targets to receive log data */\n\n    public void initializeLogging() {\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        // Wraps Android's native log framework\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        Log.setLogNode(logWrapper);\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "},"logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "}}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.cardemulation\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <!-- Card emulation was introduced in API 19. -->\n\n    <uses-sdk android:minSdkVersion=\"19\" android:targetSdkVersion=\"19\" />\n\n    <uses-feature android:name=\"android.hardware.nfc.hce\" android:required=\"true\" />\n\n    <uses-permission android:name=\"android.permission.NFC\" />\n\n \n\n    <application android:allowBackup=\"true\"\n\n        android:label=\"@string/app_name\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:theme=\"@style/AppTheme\">\n\n \n\n        <!-- Basic UI for sample discoverability. -->\n\n        <activity android:name=\".MainActivity\"\n\n                  android:label=\"@string/app_name\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n \n\n        <!-- Service for handling communication with NFC terminal. -->\n\n        <service android:name=\".CardService\"\n\n                 android:exported=\"true\"\n\n                 android:permission=\"android.permission.BIND_NFC_SERVICE\">\n\n            <!-- Intent filter indicating that we support card emulation. -->\n\n            <intent-filter>\n\n                <action android:name=\"android.nfc.cardemulation.action.HOST_APDU_SERVICE\"/>\n\n                <category android:name=\"android.intent.category.DEFAULT\"/>\n\n            </intent-filter>\n\n            <!-- Required XML configuration file, listing the AIDs that we are emulating cards\n\n                 for. This defines what protocols our card emulation service supports. -->\n\n            <meta-data android:name=\"android.nfc.cardemulation.host_apdu_service\"\n\n                       android:resource=\"@xml/aid_list\"/>\n\n        </service>\n\n    </application>\n\n \n\n \n\n</manifest>\n  "},"CardReader":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com/samples/CardReader/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com/samples/CardReader/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com/samples/CardReader/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com/samples/CardReader/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"card_background.png":"http://developer.android.com/samples/CardReader/res/drawable-xxhdpi/card_background.png","ic_launcher.png":"http://developer.android.com/samples/CardReader/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"vertical\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <ViewAnimator\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\"\n\n          android:layout_weight=\"1\">\n\n \n\n        <ScrollView\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingRight=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingTop=\"@dimen/vertical_page_margin\"\n\n                  android:paddingBottom=\"@dimen/vertical_page_margin\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </ScrollView>\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\" />\n\n \n\n    </ViewAnimator>\n\n \n\n    <View\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"1dp\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\" />\n\n \n\n</LinearLayout>\n\n \n  ","main_fragment.xml":"\n    \n\n<!--\n\nCopyright (C) 2013 The Android Open Source Project\n\n \n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n-->\n\n<FrameLayout\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"380dp\"\n\n    android:layout_height=\"242.25dp\"\n\n    android:layout_gravity=\"center\"\n\n    android:layout_margin=\"20dp\">\n\n    <ImageView\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"match_parent\"\n\n        android:src=\"@drawable/card_background\"\n\n        />\n\n    <LinearLayout\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"match_parent\"\n\n        android:orientation=\"vertical\"\n\n        android:padding=\"20dp\"\n\n        android:layout_gravity=\"center\"\n\n        android:clickable=\"true\">\n\n        <TextView\n\n            android:id=\"@+id/card_title\"\n\n            android:layout_width=\"wrap_content\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:text=\"@string/card_title\"\n\n            android:fontFamily=\"sans-serif-condensed\"\n\n            android:textStyle=\"bold\"\n\n            android:textSize=\"32dp\"\n\n            />\n\n        <TextView\n\n            android:id=\"@+id/card_account_label\"\n\n            android:layout_width=\"wrap_content\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:text=\"@string/account_number\"\n\n            android:fontFamily=\"sans-serif\"\n\n            android:textStyle=\"bold\"\n\n            android:textSize=\"18dp\"\n\n            android:layout_marginTop=\"40dp\"\n\n            />\n\n        <TextView\n\n            android:id=\"@+id/card_account_field\"\n\n            android:width=\"360dp\"\n\n            android:layout_width=\"wrap_content\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:fontFamily=\"sans-serif-condensed\"\n\n            android:textStyle=\"bold\"\n\n            android:textSize=\"42dp\"\n\n            android:singleLine=\"true\"\n\n            />\n\n    </LinearLayout>\n\n</FrameLayout>\n  "},"layout-w720dp":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"horizontal\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <LinearLayout\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\"\n\n          android:layout_weight=\"1\"\n\n          android:orientation=\"vertical\">\n\n \n\n        <FrameLayout\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"wrap_content\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/margin_medium\"\n\n                  android:paddingRight=\"@dimen/margin_medium\"\n\n                  android:paddingTop=\"@dimen/margin_large\"\n\n                  android:paddingBottom=\"@dimen/margin_large\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </FrameLayout>\n\n \n\n        <View\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"1dp\"\n\n              android:background=\"@android:color/darker_gray\" />\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"0px\"\n\n              android:layout_weight=\"1\" />\n\n \n\n    </LinearLayout>\n\n \n\n    <View\n\n          android:layout_width=\"1dp\"\n\n          android:layout_height=\"match_parent\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\" />\n\n \n\n</LinearLayout>\n\n \n\n \n  "},"menu":{"main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:id=\"@+id/menu_toggle_log\"\n\n          android:showAsAction=\"always\"\n\n          android:title=\"@string/sample_show_log\" />\n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">CardReader</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            This sample demonstrates how to implement a low-level NFC card reader, for reading cards\n\n            that do not contain NDEF or Android Beam data. This sample is designed to read the virtual\n\n            loyalty card implemented in the \"CardEmulation\" sample.\\n\\n\n\n \n\n            In particular, this sample demonstrates how to disable Android Beam, select which AIDs the\n\n            reader is interested, and establish communication with the card\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","strings.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<resources>\n\n    <string name=\"sample_show_log\">Show Log</string>\n\n    <string name=\"sample_hide_log\">Hide Log</string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "},"xml":{"nfc_tech_filter.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!-- This file is used as part of the filter for incoming NFC TECH_DISCOVERED intents. -->\n\n<resources xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <!-- Android's host card emulation feature only supports the IsoDep protocol. -->\n\n    <tech-list>\n\n        <tech>android.nfc.tech.IsoDep</tech>\n\n    </tech-list>\n\n</resources>\n  "}},"src":{"com.example.android.cardreader":{"CardReaderFragment.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.cardreader;\n\n \n\nimport android.app.Activity;\n\nimport android.nfc.NfcAdapter;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.TextView;\n\n \n\nimport com.example.android.common.logger.Log;\n\n \n\n/**\n\n * Generic UI for sample discovery.\n\n */\n\npublic class CardReaderFragment extends Fragment implements LoyaltyCardReader.AccountCallback {\n\n \n\n    public static final String TAG = \"CardReaderFragment\";\n\n    // Recommend NfcAdapter flags for reading from other Android devices. Indicates that this\n\n    // activity is interested in NFC-A devices (including other Android devices), and that the\n\n    // system should not check for the presence of NDEF-formatted data (e.g. Android Beam).\n\n    public static int READER_FLAGS =\n\n            NfcAdapter.FLAG_READER_NFC_A | NfcAdapter.FLAG_READER_SKIP_NDEF_CHECK;\n\n    public LoyaltyCardReader mLoyaltyCardReader;\n\n    private TextView mAccountField;\n\n \n\n    /** Called when sample is created. Displays generic UI with welcome text. */\n\n    @Override\n\n    public void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n        // Inflate the layout for this fragment\n\n        View v = inflater.inflate(R.layout.main_fragment, container, false);\n\n        if (v != null) {\n\n            mAccountField = (TextView) v.findViewById(R.id.card_account_field);\n\n            mAccountField.setText(\"Waiting...\");\n\n \n\n            mLoyaltyCardReader = new LoyaltyCardReader(this);\n\n \n\n            // Disable Android Beam and register our card reader callback\n\n            enableReaderMode();\n\n        }\n\n \n\n        return v;\n\n    }\n\n \n\n    @Override\n\n    public void onPause() {\n\n        super.onPause();\n\n        disableReaderMode();\n\n    }\n\n \n\n    @Override\n\n    public void onResume() {\n\n        super.onResume();\n\n        enableReaderMode();\n\n    }\n\n \n\n    private void enableReaderMode() {\n\n        Log.i(TAG, \"Enabling reader mode\");\n\n        Activity activity = getActivity();\n\n        NfcAdapter nfc = NfcAdapter.getDefaultAdapter(activity);\n\n        if (nfc != null) {\n\n            nfc.enableReaderMode(activity, mLoyaltyCardReader, READER_FLAGS, null);\n\n        }\n\n    }\n\n \n\n    private void disableReaderMode() {\n\n        Log.i(TAG, \"Disabling reader mode\");\n\n        Activity activity = getActivity();\n\n        NfcAdapter nfc = NfcAdapter.getDefaultAdapter(activity);\n\n        if (nfc != null) {\n\n            nfc.disableReaderMode(activity);\n\n        }\n\n    }\n\n \n\n    @Override\n\n    public void onAccountReceived(final String account) {\n\n        // This callback is run on a background thread, but updates to UI elements must be performed\n\n        // on the UI thread.\n\n        getActivity().runOnUiThread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                mAccountField.setText(account);\n\n            }\n\n        });\n\n    }\n\n}\n  ","LoyaltyCardReader.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.cardreader;\n\n \n\nimport android.nfc.NfcAdapter;\n\nimport android.nfc.Tag;\n\nimport android.nfc.tech.IsoDep;\n\n \n\nimport com.example.android.common.logger.Log;\n\n \n\nimport java.io.IOException;\n\nimport java.lang.ref.WeakReference;\n\nimport java.util.Arrays;\n\n \n\n/**\n\n * Callback class, invoked when an NFC card is scanned while the device is running in reader mode.\n\n *\n\n * Reader mode can be invoked by calling NfcAdapter\n\n */\n\npublic class LoyaltyCardReader implements NfcAdapter.ReaderCallback {\n\n    private static final String TAG = \"LoyaltyCardReader\";\n\n    // AID for our loyalty card service.\n\n    private static final String SAMPLE_LOYALTY_CARD_AID = \"F222222222\";\n\n    // ISO-DEP command HEADER for selecting an AID.\n\n    // Format: [Class | Instruction | Parameter 1 | Parameter 2]\n\n    private static final String SELECT_APDU_HEADER = \"00A40400\";\n\n    // \"OK\" status word sent in response to SELECT AID command (0x9000)\n\n    private static final byte[] SELECT_OK_SW = {(byte) 0x90, (byte) 0x00};\n\n \n\n    // Weak reference to prevent retain loop. mAccountCallback is responsible for exiting\n\n    // foreground mode before it becomes invalid (e.g. during onPause() or onStop()).\n\n    private WeakReference<AccountCallback> mAccountCallback;\n\n \n\n    public interface AccountCallback {\n\n        public void onAccountReceived(String account);\n\n    }\n\n \n\n    public LoyaltyCardReader(AccountCallback accountCallback) {\n\n        mAccountCallback = new WeakReference<AccountCallback>(accountCallback);\n\n    }\n\n \n\n    /**\n\n     * Callback when a new tag is discovered by the system.\n\n     *\n\n     * <p>Communication with the card should take place here.\n\n     *\n\n     * @param tag Discovered tag\n\n     */\n\n    @Override\n\n    public void onTagDiscovered(Tag tag) {\n\n        Log.i(TAG, \"New tag discovered\");\n\n        // Android's Host-based Card Emulation (HCE) feature implements the ISO-DEP (ISO 14443-4)\n\n        // protocol.\n\n        //\n\n        // In order to communicate with a device using HCE, the discovered tag should be processed\n\n        // using the IsoDep class.\n\n        IsoDep isoDep = IsoDep.get(tag);\n\n        if (isoDep != null) {\n\n            try {\n\n                // Connect to the remote NFC device\n\n                isoDep.connect();\n\n                // Build SELECT AID command for our loyalty card service.\n\n                // This command tells the remote device which service we wish to communicate with.\n\n                Log.i(TAG, \"Requesting remote AID: \" + SAMPLE_LOYALTY_CARD_AID);\n\n                byte[] command = BuildSelectApdu(SAMPLE_LOYALTY_CARD_AID);\n\n                // Send command to remote device\n\n                Log.i(TAG, \"Sending: \" + ByteArrayToHexString(command));\n\n                byte[] result = isoDep.transceive(command);\n\n                // If AID is successfully selected, 0x9000 is returned as the status word (last 2\n\n                // bytes of the result) by convention. Everything before the status word is\n\n                // optional payload, which is used here to hold the account number.\n\n                int resultLength = result.length;\n\n                byte[] statusWord = {result[resultLength-2], result[resultLength-1]};\n\n                byte[] payload = Arrays.copyOf(result, resultLength-2);\n\n                if (Arrays.equals(SELECT_OK_SW, statusWord)) {\n\n                    // The remote NFC device will immediately respond with its stored account number\n\n                    String accountNumber = new String(payload, \"UTF-8\");\n\n                    Log.i(TAG, \"Received: \" + accountNumber);\n\n                    // Inform CardReaderFragment of received account number\n\n                    mAccountCallback.get().onAccountReceived(accountNumber);\n\n                }\n\n            } catch (IOException e) {\n\n                Log.e(TAG, \"Error communicating with card: \" + e.toString());\n\n            }\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Build APDU for SELECT AID command. This command indicates which service a reader is\n\n     * interested in communicating with. See ISO 7816-4.\n\n     *\n\n     * @param aid Application ID (AID) to select\n\n     * @return APDU for SELECT AID command\n\n     */\n\n    public static byte[] BuildSelectApdu(String aid) {\n\n        // Format: [CLASS | INSTRUCTION | PARAMETER 1 | PARAMETER 2 | LENGTH | DATA]\n\n        return HexStringToByteArray(SELECT_APDU_HEADER + String.format(\"%02X\", aid.length() / 2) + aid);\n\n    }\n\n \n\n    /**\n\n     * Utility class to convert a byte array to a hexadecimal string.\n\n     *\n\n     * @param bytes Bytes to convert\n\n     * @return String, containing hexadecimal representation.\n\n     */\n\n    public static String ByteArrayToHexString(byte[] bytes) {\n\n        final char[] hexArray = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};\n\n        char[] hexChars = new char[bytes.length * 2];\n\n        int v;\n\n        for ( int j = 0; j < bytes.length; j++ ) {\n\n            v = bytes[j] & 0xFF;\n\n            hexChars[j * 2] = hexArray[v >>> 4];\n\n            hexChars[j * 2 + 1] = hexArray[v & 0x0F];\n\n        }\n\n        return new String(hexChars);\n\n    }\n\n \n\n    /**\n\n     * Utility class to convert a hexadecimal string to a byte string.\n\n     *\n\n     * <p>Behavior with input strings containing non-hexadecimal characters is undefined.\n\n     *\n\n     * @param s String containing hexadecimal characters to convert\n\n     * @return Byte array generated from input\n\n     */\n\n    public static byte[] HexStringToByteArray(String s) {\n\n        int len = s.length();\n\n        byte[] data = new byte[len / 2];\n\n        for (int i = 0; i < len; i += 2) {\n\n            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)\n\n                    + Character.digit(s.charAt(i+1), 16));\n\n        }\n\n        return data;\n\n    }\n\n \n\n}\n  ","MainActivity.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.cardreader;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentTransaction;\n\nimport android.view.Menu;\n\nimport android.view.MenuItem;\n\nimport android.widget.ViewAnimator;\n\n \n\nimport com.example.android.common.activities.SampleActivityBase;\n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogFragment;\n\nimport com.example.android.common.logger.LogWrapper;\n\nimport com.example.android.common.logger.MessageOnlyLogFilter;\n\n \n\n/**\n\n * A simple launcher activity containing a summary sample description, sample log and a custom\n\n * {@link android.support.v4.app.Fragment} which can display a view.\n\n * <p>\n\n * For devices with displays with a width of 720dp or greater, the sample log is always visible,\n\n * on other devices it's visibility is controlled by an item on the Action Bar.\n\n */\n\npublic class MainActivity extends SampleActivityBase {\n\n \n\n    public static final String TAG = \"MainActivity\";\n\n \n\n    // Whether the Log Fragment is currently shown\n\n    private boolean mLogShown;\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_main);\n\n \n\n        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n\n        CardReaderFragment fragment = new CardReaderFragment();\n\n        transaction.replace(R.id.sample_content_fragment, fragment);\n\n        transaction.commit();\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        getMenuInflater().inflate(R.menu.main, menu);\n\n        return true;\n\n    }\n\n \n\n    @Override\n\n    public boolean onPrepareOptionsMenu(Menu menu) {\n\n        MenuItem logToggle = menu.findItem(R.id.menu_toggle_log);\n\n        logToggle.setVisible(findViewById(R.id.sample_output) instanceof ViewAnimator);\n\n        logToggle.setTitle(mLogShown ? R.string.sample_hide_log : R.string.sample_show_log);\n\n \n\n        return super.onPrepareOptionsMenu(menu);\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch(item.getItemId()) {\n\n            case R.id.menu_toggle_log:\n\n                mLogShown = !mLogShown;\n\n                ViewAnimator output = (ViewAnimator) findViewById(R.id.sample_output);\n\n                if (mLogShown) {\n\n                    output.setDisplayedChild(1);\n\n                } else {\n\n                    output.setDisplayedChild(0);\n\n                }\n\n                supportInvalidateOptionsMenu();\n\n                return true;\n\n        }\n\n        return super.onOptionsItemSelected(item);\n\n    }\n\n \n\n    /** Create a chain of targets that will receive log data */\n\n    @Override\n\n    public void initializeLogging() {\n\n        // Wraps Android's native log framework.\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        Log.setLogNode(logWrapper);\n\n \n\n        // Filter strips out everything except the message text.\n\n        MessageOnlyLogFilter msgFilter = new MessageOnlyLogFilter();\n\n        logWrapper.setNext(msgFilter);\n\n \n\n        // On screen logging via a fragment with a TextView.\n\n        LogFragment logFragment = (LogFragment) getSupportFragmentManager()\n\n                .findFragmentById(R.id.log_fragment);\n\n        msgFilter.setNext(logFragment.getLogView());\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "},"com.example.android.common":{"activities":{"SampleActivityBase.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\npackage com.example.android.common.activities;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentActivity;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogWrapper;\n\n \n\n/**\n\n * Base launcher activity, to handle most of the common plumbing for samples.\n\n */\n\npublic class SampleActivityBase extends FragmentActivity {\n\n \n\n    public static final String TAG = \"SampleActivityBase\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n    }\n\n \n\n    @Override\n\n    protected  void onStart() {\n\n        super.onStart();\n\n        initializeLogging();\n\n    }\n\n \n\n    /** Set up targets to receive log data */\n\n    public void initializeLogging() {\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        // Wraps Android's native log framework\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        Log.setLogNode(logWrapper);\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "},"logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "}}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.cardreader\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <!-- NFC Reader Mode was added in API 19. -->\n\n    <uses-sdk android:minSdkVersion=\"19\" android:targetSdkVersion=\"19\" />\n\n    <uses-permission android:name=\"android.permission.NFC\" />\n\n    <uses-feature android:name=\"android.hardware.nfc\" android:required=\"true\" />\n\n \n\n    <application android:allowBackup=\"true\"\n\n        android:label=\"@string/app_name\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:theme=\"@style/AppTheme\">\n\n        <activity android:name=\".MainActivity\"\n\n                  android:label=\"@string/app_name\"\n\n                  android:launchMode=\"singleTop\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n \n\n            <!-- NFC-related intent filter. Allows application to handle messages from any\n\n                 NFC-A devices discovered. Other Android devices are required to support NFC-A.\n\n                 See: res/xml/nfc_tech_filter.xml -->\n\n            <intent-filter>\n\n                <action android:name=\"android.nfc.action.TECH_DISCOVERED\" />\n\n            </intent-filter>\n\n            <meta-data\n\n                android:name=\"android.nfc.action.TECH_DISCOVERED\"\n\n                android:resource=\"@xml/nfc_tech_filter\" />\n\n        </activity>\n\n    </application>\n\n \n\n \n\n</manifest>\n  "},"NetworkConnect":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com/samples/NetworkConnect/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com/samples/NetworkConnect/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com/samples/NetworkConnect/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com/samples/NetworkConnect/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com/samples/NetworkConnect/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleMessageTile\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n            android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n            android:text=\"@string/intro_message\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n  ","sample_main.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:orientation=\"vertical\"\n\n    android:layout_width=\"fill_parent\"\n\n    android:layout_height=\"fill_parent\">\n\n    <fragment\n\n        android:name=\"com.example.android.networkconnect.SimpleTextFragment\"\n\n        android:id=\"@+id/intro_fragment\"\n\n        android:layout_weight=\"1\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"match_parent\" />\n\n    <View\n\n        android:layout_width=\"fill_parent\"\n\n        android:layout_height=\"1dp\"\n\n        android:background=\"@android:color/darker_gray\"/>\n\n    <fragment\n\n        android:name=\"com.example.android.common.logger.LogFragment\"\n\n        android:id=\"@+id/log_fragment\"\n\n        android:layout_weight=\"1\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"match_parent\" />\n\n</LinearLayout>\n  "},"menu":{"main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:id=\"@+id/fetch_action\"\n\n        android:showAsAction=\"ifRoom|withText\"\n\n        android:title=\"@string/fetch_text\" />\n\n    <item android:id=\"@+id/clear_action\"\n\n        android:showAsAction=\"ifRoom|withText\"\n\n        android:title=\"@string/clear_text\" />\n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">NetworkConnect</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            This sample demonstrates how to connect to the network and fetch raw HTML using\n\n            HttpURLConnection. AsyncTask is used to perform the fetch on a background thread.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","strings.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n    <string name=\"welcome_message\">Welcome to Network Connect!\n\n        Click FETCH to fetch the first 500 characters of raw HTML from www.google.com.\n\n    </string>\n\n \n\n    <string name=\"fetch_text\">Fetch</string>\n\n    <string name=\"clear_text\">Clear</string>\n\n    <string name=\"connection_error\">Connection error.</string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.common.logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "},"com.example.android.networkconnect":{"MainActivity.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.networkconnect;\n\n \n\nimport android.os.AsyncTask;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentActivity;\n\nimport android.util.TypedValue;\n\nimport android.view.Menu;\n\nimport android.view.MenuItem;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogFragment;\n\nimport com.example.android.common.logger.LogWrapper;\n\nimport com.example.android.common.logger.MessageOnlyLogFilter;\n\n \n\nimport java.io.IOException;\n\nimport java.io.InputStream;\n\nimport java.io.InputStreamReader;\n\nimport java.io.Reader;\n\nimport java.io.UnsupportedEncodingException;\n\nimport java.net.HttpURLConnection;\n\nimport java.net.URL;\n\n \n\n/**\n\n * Sample application demonstrating how to connect to the network and fetch raw\n\n * HTML. It uses AsyncTask to do the fetch on a background thread. To establish\n\n * the network connection, it uses HttpURLConnection.\n\n *\n\n * This sample uses the logging framework to display log output in the log\n\n * fragment (LogFragment).\n\n */\n\npublic class MainActivity extends FragmentActivity {\n\n \n\n    public static final String TAG = \"Network Connect\";\n\n \n\n    // Reference to the fragment showing events, so we can clear it with a button\n\n    // as necessary.\n\n    private LogFragment mLogFragment;\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.sample_main);\n\n \n\n        // Initialize text fragment that displays intro text.\n\n        SimpleTextFragment introFragment = (SimpleTextFragment)\n\n                    getSupportFragmentManager().findFragmentById(R.id.intro_fragment);\n\n        introFragment.setText(R.string.welcome_message);\n\n        introFragment.getTextView().setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16.0f);\n\n \n\n        // Initialize the logging framework.\n\n        initializeLogging();\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        getMenuInflater().inflate(R.menu.main, menu);\n\n        return true;\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch (item.getItemId()) {\n\n            // When the user clicks FETCH, fetch the first 500 characters of\n\n            // raw HTML from www.google.com.\n\n            case R.id.fetch_action:\n\n                new DownloadTask().execute(\"http://www.google.com\");\n\n                return true;\n\n            // Clear the log view fragment.\n\n            case R.id.clear_action:\n\n              mLogFragment.getLogView().setText(\"\");\n\n              return true;\n\n        }\n\n        return false;\n\n    }\n\n \n\n    /**\n\n     * Implementation of AsyncTask, to fetch the data in the background away from\n\n     * the UI thread.\n\n     */\n\n    private class DownloadTask extends AsyncTask<String, Void, String> {\n\n \n\n        @Override\n\n        protected String doInBackground(String... urls) {\n\n            try {\n\n                return loadFromNetwork(urls[0]);\n\n            } catch (IOException e) {\n\n              return getString(R.string.connection_error);\n\n            }\n\n        }\n\n \n\n        /**\n\n         * Uses the logging framework to display the output of the fetch\n\n         * operation in the log fragment.\n\n         */\n\n        @Override\n\n        protected void onPostExecute(String result) {\n\n          Log.i(TAG, result);\n\n        }\n\n    }\n\n \n\n    /** Initiates the fetch operation. */\n\n    private String loadFromNetwork(String urlString) throws IOException {\n\n        InputStream stream = null;\n\n        String str =\"\";\n\n \n\n        try {\n\n            stream = downloadUrl(urlString);\n\n            str = readIt(stream, 500);\n\n       } finally {\n\n           if (stream != null) {\n\n               stream.close();\n\n            }\n\n        }\n\n        return str;\n\n    }\n\n \n\n    /**\n\n     * Given a string representation of a URL, sets up a connection and gets\n\n     * an input stream.\n\n     * @param urlString A string representation of a URL.\n\n     * @return An InputStream retrieved from a successful HttpURLConnection.\n\n     * @throws java.io.IOException\n\n     */\n\n    private InputStream downloadUrl(String urlString) throws IOException {\n\n        URL url = new URL(urlString);\n\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n\n        conn.setReadTimeout(10000 /* milliseconds */);\n\n        conn.setConnectTimeout(15000 /* milliseconds */);\n\n        conn.setRequestMethod(\"GET\");\n\n        conn.setDoInput(true);\n\n        // Start the query\n\n        conn.connect();\n\n        InputStream stream = conn.getInputStream();\n\n        return stream;\n\n    }\n\n \n\n    /** Reads an InputStream and converts it to a String.\n\n     * @param stream InputStream containing HTML from targeted site.\n\n     * @param len Length of string that this method returns.\n\n     * @return String concatenated according to len parameter.\n\n     * @throws java.io.IOException\n\n     * @throws java.io.UnsupportedEncodingException\n\n     */\n\n    private String readIt(InputStream stream, int len) throws IOException, UnsupportedEncodingException {\n\n        Reader reader = null;\n\n        reader = new InputStreamReader(stream, \"UTF-8\");\n\n        char[] buffer = new char[len];\n\n        reader.read(buffer);\n\n        return new String(buffer);\n\n    }\n\n \n\n    /** Create a chain of targets that will receive log data */\n\n    public void initializeLogging() {\n\n \n\n        // Using Log, front-end to the logging chain, emulates\n\n        // android.util.log method signatures.\n\n \n\n        // Wraps Android's native log framework\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        Log.setLogNode(logWrapper);\n\n \n\n        // A filter that strips out everything except the message text.\n\n        MessageOnlyLogFilter msgFilter = new MessageOnlyLogFilter();\n\n        logWrapper.setNext(msgFilter);\n\n \n\n        // On screen logging via a fragment with a TextView.\n\n        mLogFragment =\n\n                (LogFragment) getSupportFragmentManager().findFragmentById(R.id.log_fragment);\n\n        msgFilter.setNext(mLogFragment.getLogView());\n\n    }\n\n}\n  ","SimpleTextFragment.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.networkconnect;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.util.Log;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.TextView;\n\n \n\n/**\n\n * Simple fragment containing only a TextView. Used by TextPagerAdapter to create\n\n * tutorial-style pages for apps.\n\n */\n\npublic class SimpleTextFragment extends Fragment {\n\n \n\n    // Contains the text that will be displayed by this Fragment\n\n    String mText;\n\n \n\n    // Contains a resource ID for the text that will be displayed by this fragment.\n\n    int mTextId = -1;\n\n \n\n    // Keys which will be used to store/retrieve text passed in via setArguments.\n\n    public static final String TEXT_KEY = \"text\";\n\n    public static final String TEXT_ID_KEY = \"text_id\";\n\n \n\n    // For situations where the app wants to modify text at Runtime, exposing the TextView.\n\n    private TextView mTextView;\n\n \n\n    public SimpleTextFragment() {\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n            Bundle savedInstanceState) {\n\n        // Before initializing the textView, check if any arguments were provided via setArguments.\n\n        processArguments();\n\n \n\n        // Create a new TextView and set its text to whatever was provided.\n\n        mTextView = new TextView(getActivity());\n\n        mTextView.setGravity(Gravity.CENTER);\n\n \n\n        if (mText != null) {\n\n            mTextView.setText(mText);\n\n            Log.i(\"SimpleTextFragment\", mText);\n\n        }\n\n        return mTextView;\n\n    }\n\n \n\n    public TextView getTextView() {\n\n        return mTextView;\n\n    }\n\n \n\n    /**\n\n     * Changes the text for this TextView, according to the resource ID provided.\n\n     * @param stringId A resource ID representing the text content for this Fragment's TextView.\n\n     */\n\n    public void setText(int stringId) {\n\n        getTextView().setText(getActivity().getString(stringId));\n\n    }\n\n \n\n    /**\n\n     * Processes the arguments passed into this Fragment via setArguments method.\n\n     * Currently the method only looks for text or a textID, nothing else.\n\n     */\n\n    public void processArguments() {\n\n        // For most objects we'd handle the multiple possibilities for initialization variables\n\n        // as multiple constructors.  For Fragments, however, it's customary to use\n\n        // setArguments / getArguments.\n\n        if (getArguments() != null) {\n\n            Bundle args = getArguments();\n\n            if (args.containsKey(TEXT_KEY)) {\n\n                mText = args.getString(TEXT_KEY);\n\n                Log.d(\"Constructor\", \"Added Text.\");\n\n            } else if (args.containsKey(TEXT_ID_KEY)) {\n\n                mTextId = args.getInt(TEXT_ID_KEY);\n\n                mText = getString(mTextId);\n\n            }\n\n        }\n\n    }\n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<manifest\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.networkconnect\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk android:minSdkVersion=\"8\" android:targetSdkVersion=\"17\" />\n\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n\n \n\n    <application\n\n        android:label=\"@string/app_name\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:theme=\"@style/Theme.Sample\"\n\n        android:allowBackup=\"true\">\n\n \n\n        <activity\n\n            android:name=\"com.example.android.networkconnect.MainActivity\"\n\n            android:label=\"@string/app_name\"\n\n            android:uiOptions=\"splitActionBarWhenNarrow\">\n\n \n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n</manifest>\n  "}},"Content":{"AppRestrictions":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com/samples/AppRestrictions/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com/samples/AppRestrictions/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com/samples/AppRestrictions/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com/samples/AppRestrictions/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com/samples/AppRestrictions/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleMessageTile\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n            android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n            android:text=\"@string/intro_message\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n  ","main.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!-- Copyright (C) 2013 The Android Open Source Project\n\n \n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n \n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n \n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n-->\n\n<ScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"match_parent\">\n\n    <LinearLayout android:orientation=\"vertical\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"match_parent\"\n\n            android:layout_margin=\"20dp\">\n\n \n\n        <TextView android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:layout_marginBottom=\"10dp\"\n\n                  android:textSize=\"18sp\"\n\n                  android:text=\"@string/sample_app_description\"/>\n\n \n\n        <LinearLayout android:orientation=\"horizontal\"\n\n                      android:layout_width=\"match_parent\"\n\n                      android:layout_height=\"wrap_content\"\n\n                      android:layout_marginBottom=\"15dp\">\n\n            <CheckBox android:id=\"@+id/custom_app_limits\"\n\n                      android:layout_width=\"wrap_content\"\n\n                      android:layout_height=\"wrap_content\"\n\n                      android:onClick=\"onCustomClicked\"/>\n\n            <TextView android:layout_width=\"wrap_content\"\n\n                      android:layout_height=\"wrap_content\"\n\n                      android:textSize=\"18sp\"\n\n                      android:text=\"@string/custom_description\"\n\n                      android:onClick=\"onCustomClicked\"\n\n                      android:layout_weight=\"1\"/>\n\n        </LinearLayout>\n\n \n\n        <!-- Separator -->\n\n        <View android:layout_height=\"1dp\"\n\n               android:background=\"@android:color/white\"\n\n               android:layout_width=\"match_parent\"\n\n               android:layout_margin=\"25dp\"/>\n\n \n\n        <!-- Section to show app restriction settings under a restricted profile. -->\n\n        <TextView android:layout_width=\"wrap_content\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:textSize=\"20sp\"\n\n                  android:text=\"@string/current_app_limits_label\"/>\n\n        <TextView android:layout_width=\"wrap_content\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:textSize=\"18sp\"\n\n                  android:layout_marginBottom=\"10dp\"\n\n                  android:text=\"@string/current_app_limits_description\"/>\n\n \n\n        <LinearLayout android:orientation=\"horizontal\"\n\n                      android:layout_width=\"match_parent\"\n\n                      android:layout_height=\"wrap_content\"\n\n                      android:layout_marginLeft=\"20dp\">\n\n            <TextView android:layout_width=\"210dp\"\n\n                      android:layout_height=\"wrap_content\"\n\n                      android:textSize=\"18sp\"\n\n                      android:text=\"@string/boolean_entry_title\"/>\n\n            <Space android:layout_height=\"1dp\"\n\n                   android:layout_width=\"15dp\"/>\n\n            <TextView android:id=\"@+id/boolean_entry_id\"\n\n                      android:layout_width=\"wrap_content\"\n\n                      android:layout_height=\"wrap_content\"\n\n                      android:textSize=\"18sp\"\n\n                      android:text=\"@string/boolean_entry_title\"/>\n\n        </LinearLayout>\n\n \n\n        <LinearLayout android:orientation=\"horizontal\"\n\n                      android:layout_width=\"match_parent\"\n\n                      android:layout_height=\"wrap_content\"\n\n                      android:layout_marginLeft=\"20dp\">\n\n            <TextView android:layout_width=\"210dp\"\n\n                      android:layout_height=\"wrap_content\"\n\n                      android:textSize=\"18sp\"\n\n                      android:text=\"@string/choice_entry_title\"/>\n\n            <Space android:layout_height=\"1dp\"\n\n                   android:layout_width=\"15dp\"/>\n\n            <TextView android:id=\"@+id/choice_entry_id\"\n\n                      android:layout_width=\"wrap_content\"\n\n                      android:layout_height=\"wrap_content\"\n\n                      android:textSize=\"18sp\"\n\n                      android:text=\"@string/boolean_entry_title\"/>\n\n        </LinearLayout>\n\n \n\n        <LinearLayout android:orientation=\"horizontal\"\n\n                      android:layout_width=\"match_parent\"\n\n                      android:layout_height=\"wrap_content\"\n\n                      android:layout_marginLeft=\"20dp\">\n\n            <TextView android:layout_width=\"210dp\"\n\n                      android:layout_height=\"wrap_content\"\n\n                      android:textSize=\"18sp\"\n\n                      android:text=\"@string/multi_entry_title\"/>\n\n            <Space android:layout_height=\"1dp\"\n\n                   android:layout_width=\"15dp\"/>\n\n            <TextView android:id=\"@+id/multi_entry_id\"\n\n                      android:layout_width=\"wrap_content\"\n\n                      android:layout_height=\"wrap_content\"\n\n                      android:textSize=\"18sp\"\n\n                      android:text=\"@string/multi_entry_title\"/>\n\n        </LinearLayout>\n\n    </LinearLayout>\n\n</ScrollView>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">AppRestrictions</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            This sample demonstrates the use of the App Restriction feature, which is available on\n\n            Android 4.3 and above tablet device with the multiuser feature.\n\n \n\n            When launched under the primary User account, you can toggle between standard app restriction\n\n            types and custom.  When launched under a restricted profile, this activity displays app\n\n            restriction settings, if available.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!-- Copyright (C) 2013 The Android Open Source Project\n\n \n\n     Licensed under the Apache License, Version 2.0 (the \"License\");\n\n     you may not use this file except in compliance with the License.\n\n     You may obtain a copy of the License at\n\n \n\n          http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n     Unless required by applicable law or agreed to in writing, software\n\n     distributed under the License is distributed on an \"AS IS\" BASIS,\n\n     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n     See the License for the specific language governing permissions and\n\n     limitations under the License.\n\n-->\n\n<resources xmlns:xliff=\"urn:oasis:names:tc:xliff:document:1.2\">\n\n    <string name=\"restrictions_activity_label\">Custom app restrictions</string>\n\n    <string name=\"boolean_entry_title\">Test boolean type</string>\n\n    <string name=\"choice_entry_title\">Test choice type</string>\n\n    <string name=\"multi_entry_title\">Test multi-select type</string>\n\n    <string name=\"custom_description\">If checked, use a custom app restriction Activity.  Otherwise,\n\n        use standard restriction types.\n\n    </string>\n\n    <string name=\"sample_app_description\">Note: This sample app requires the restricted profile\n\n        feature.\\n\\n\n\n        1. If this is the primary user, go to Settings &gt; Users.\\n\\n\n\n        2. Create a restricted profile, if one doesn\\'t exist already.\\n\\n\n\n        3. Open the profile settings, locate the sample app, and tap the app restriction settings\n\n        icon. Configure app restrictions for the app.\\n\\n\n\n        4. In the lock screen, switch to the user\\'s restricted profile, launch this sample app,\n\n        and see the configured app restrictions displayed.\\n\n\n    </string>\n\n    <string name=\"settings_button_label\">Go to Settings</string>\n\n    <string name=\"current_app_limits_label\">Current app restriction settings:</string>\n\n    <string name=\"na\">N/A</string>\n\n    <string name=\"current_app_limits_description\">Your app can restrict its content based on these\n\n        settings, which can be configured through the primary user\\'s Users Settings.\n\n    </string>\n\n \n\n    <string-array name=\"multi_entry_entries\">\n\n        <item>Ice Cream</item>\n\n        <item>Jelly Bean</item>\n\n        <item>More Jelly Bean</item>\n\n    </string-array>\n\n \n\n    <string-array name=\"multi_entry_values\" translateable=\"false\">\n\n        <item>1</item>\n\n        <item>2</item>\n\n        <item>3</item>\n\n    </string-array>\n\n \n\n    <string-array name=\"choice_entry_entries\">\n\n        <item>Ice Cream</item>\n\n        <item>Jelly Bean</item>\n\n        <item>More Jelly Bean</item>\n\n    </string-array>\n\n \n\n    <string-array name=\"choice_entry_values\" translateable=\"false\">\n\n        <item>1</item>\n\n        <item>2</item>\n\n        <item>3</item>\n\n    </string-array>\n\n \n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "},"xml":{"custom_prefs.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!-- Copyright (C) 2013 The Android Open Source Project\n\n \n\n     Licensed under the Apache License, Version 2.0 (the \"License\");\n\n     you may not use this file except in compliance with the License.\n\n     You may obtain a copy of the License at\n\n \n\n          http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n     Unless required by applicable law or agreed to in writing, software\n\n     distributed under the License is distributed on an \"AS IS\" BASIS,\n\n     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n     See the License for the specific language governing permissions and\n\n     limitations under the License.\n\n-->\n\n \n\n<PreferenceScreen xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n        android:title=\"@string/restrictions_activity_label\">\n\n \n\n    <CheckBoxPreference android:key=\"pref_boolean\"\n\n        android:title=\"@string/boolean_entry_title\" />\n\n \n\n    <ListPreference android:key=\"pref_choice\"\n\n        android:title=\"@string/choice_entry_title\"\n\n        android:entries=\"@array/choice_entry_entries\"\n\n        android:entryValues=\"@array/choice_entry_values\" />\n\n \n\n    <MultiSelectListPreference android:key=\"pref_multi\"\n\n        android:title=\"@string/multi_entry_title\"\n\n        android:entries=\"@array/multi_entry_entries\"\n\n        android:entryValues=\"@array/multi_entry_values\" />\n\n \n\n</PreferenceScreen>\n  "}},"src":{"com.example.android.apprestrictions":{"CustomRestrictionsActivity.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.apprestrictions;\n\n \n\nimport android.app.Activity;\n\nimport android.os.Bundle;\n\n \n\n/**\n\n * This activity demonstrates how an app can integrate its own custom app restriction settings\n\n * with the restricted profile feature.\n\n *\n\n * This sample app maintains custom app restriction settings in shared preferences.  When\n\n * the activity is invoked (from Settings > Users), the stored settings are used to initialize\n\n * the custom configuration on the user interface.  Three sample input types are\n\n * shown: checkbox, single-choice, and multi-choice.  When the settings are modified by the user,\n\n * the corresponding restriction entries are saved, which are retrievable under a restricted\n\n * profile.\n\n */\n\npublic class CustomRestrictionsActivity extends Activity {\n\n \n\n    @Override\n\n    public void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n \n\n        if (savedInstanceState == null) {\n\n            getFragmentManager().beginTransaction().replace(android.R.id.content,\n\n                    new CustomRestrictionsFragment()).commit();\n\n        }\n\n    }\n\n}\n  ","CustomRestrictionsFragment.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.apprestrictions;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.content.Intent;\n\nimport android.content.RestrictionEntry;\n\nimport android.os.Bundle;\n\nimport android.os.UserManager;\n\nimport android.preference.CheckBoxPreference;\n\nimport android.preference.ListPreference;\n\nimport android.preference.MultiSelectListPreference;\n\nimport android.preference.Preference;\n\nimport android.preference.PreferenceFragment;\n\n \n\nimport java.util.ArrayList;\n\nimport java.util.HashSet;\n\nimport java.util.List;\n\nimport java.util.Set;\n\n \n\n/**\n\n * This fragment is included in {@code CustomRestrictionsActivity}.  It demonstrates how an app\n\n * can integrate its own custom app restriction settings with the restricted profile feature.\n\n *\n\n * This sample app maintains custom app restriction settings in shared preferences.  Your app\n\n * can use other methods to maintain the settings.  When this activity is invoked\n\n * (from Settings > Users > Restricted Profile), the shared preferences are used to initialize\n\n * the custom configuration on the user interface.\n\n *\n\n * Three sample input types are shown: checkbox, single-choice, and multi-choice.  When the\n\n * settings are modified by the user, the corresponding restriction entries are saved in the\n\n * platform.  The saved restriction entries are retrievable when the app is launched under a\n\n * restricted profile.\n\n */\n\npublic class CustomRestrictionsFragment extends PreferenceFragment\n\n        implements Preference.OnPreferenceChangeListener {\n\n \n\n    // Shared preference key for the boolean restriction.\n\n    private static final String KEY_BOOLEAN_PREF = \"pref_boolean\";\n\n    // Shared preference key for the single-select restriction.\n\n    private static final String KEY_CHOICE_PREF = \"pref_choice\";\n\n    // Shared preference key for the multi-select restriction.\n\n    private static final String KEY_MULTI_PREF = \"pref_multi\";\n\n \n\n \n\n    private List<RestrictionEntry> mRestrictions;\n\n    private Bundle mRestrictionsBundle;\n\n \n\n    // Shared preferences for each of the sample input types.\n\n    private CheckBoxPreference mBooleanPref;\n\n    private ListPreference mChoicePref;\n\n    private MultiSelectListPreference mMultiPref;\n\n \n\n    // Restriction entries for each of the sample input types.\n\n    private RestrictionEntry mBooleanEntry;\n\n    private RestrictionEntry mChoiceEntry;\n\n    private RestrictionEntry mMultiEntry;\n\n \n\n    @Override\n\n    public void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        addPreferencesFromResource(R.xml.custom_prefs);\n\n \n\n        // This sample app uses shared preferences to maintain app restriction settings.  Your app\n\n        // can use other methods to maintain the settings.\n\n        mBooleanPref = (CheckBoxPreference) findPreference(KEY_BOOLEAN_PREF);\n\n        mChoicePref = (ListPreference) findPreference(KEY_CHOICE_PREF);\n\n        mMultiPref = (MultiSelectListPreference) findPreference(KEY_MULTI_PREF);\n\n \n\n        mBooleanPref.setOnPreferenceChangeListener(this);\n\n        mChoicePref.setOnPreferenceChangeListener(this);\n\n        mMultiPref.setOnPreferenceChangeListener(this);\n\n \n\n        setRetainInstance(true);\n\n    }\n\n \n\n    @Override\n\n    public void onActivityCreated(Bundle savedInstanceState) {\n\n        super.onActivityCreated(savedInstanceState);\n\n        final Activity activity = getActivity();\n\n \n\n        // Existing app restriction settings, if exist, can be retrieved from the Bundle.\n\n        mRestrictionsBundle =\n\n                activity.getIntent().getBundleExtra(Intent.EXTRA_RESTRICTIONS_BUNDLE);\n\n \n\n        if (mRestrictionsBundle == null) {\n\n            mRestrictionsBundle =\n\n                    ((UserManager) activity.getSystemService(Context.USER_SERVICE))\n\n                            .getApplicationRestrictions(activity.getPackageName());\n\n        }\n\n \n\n        if (mRestrictionsBundle == null) {\n\n            mRestrictionsBundle = new Bundle();\n\n        }\n\n \n\n        mRestrictions = activity.getIntent().getParcelableArrayListExtra(\n\n                Intent.EXTRA_RESTRICTIONS_LIST);\n\n \n\n        // Transfers the saved values into the preference hierarchy.\n\n        if (mRestrictions != null) {\n\n            for (RestrictionEntry entry : mRestrictions) {\n\n                if (entry.getKey().equals(GetRestrictionsReceiver.KEY_BOOLEAN)) {\n\n                    mBooleanPref.setChecked(entry.getSelectedState());\n\n                    mBooleanEntry = entry;\n\n                } else if (entry.getKey().equals(GetRestrictionsReceiver.KEY_CHOICE)) {\n\n                    mChoicePref.setValue(entry.getSelectedString());\n\n                    mChoiceEntry = entry;\n\n                } else if (entry.getKey().equals(GetRestrictionsReceiver.KEY_MULTI_SELECT)) {\n\n                    HashSet<String> set = new HashSet<String>();\n\n                    for (String value : entry.getAllSelectedStrings()) {\n\n                        set.add(value);\n\n                    }\n\n                    mMultiPref.setValues(set);\n\n                    mMultiEntry = entry;\n\n                }\n\n            }\n\n        } else {\n\n            mRestrictions = new ArrayList<RestrictionEntry>();\n\n \n\n            // Initializes the boolean restriction entry and updates its corresponding shared\n\n            // preference value.\n\n            mBooleanEntry = new RestrictionEntry(GetRestrictionsReceiver.KEY_BOOLEAN,\n\n                    mRestrictionsBundle.getBoolean(GetRestrictionsReceiver.KEY_BOOLEAN, false));\n\n            mBooleanEntry.setType(RestrictionEntry.TYPE_BOOLEAN);\n\n            mBooleanPref.setChecked(mBooleanEntry.getSelectedState());\n\n \n\n            // Initializes the single choice restriction entry and updates its corresponding\n\n            // shared preference value.\n\n            mChoiceEntry = new RestrictionEntry(GetRestrictionsReceiver.KEY_CHOICE,\n\n                    mRestrictionsBundle.getString(GetRestrictionsReceiver.KEY_CHOICE));\n\n            mChoiceEntry.setType(RestrictionEntry.TYPE_CHOICE);\n\n            mChoicePref.setValue(mChoiceEntry.getSelectedString());\n\n \n\n            // Initializes the multi-select restriction entry and updates its corresponding\n\n            // shared preference value.\n\n            mMultiEntry = new RestrictionEntry(GetRestrictionsReceiver.KEY_MULTI_SELECT,\n\n                    mRestrictionsBundle.getStringArray(\n\n                            GetRestrictionsReceiver.KEY_MULTI_SELECT));\n\n            mMultiEntry.setType(RestrictionEntry.TYPE_MULTI_SELECT);\n\n            if (mMultiEntry.getAllSelectedStrings() != null) {\n\n                HashSet<String> set = new HashSet<String>();\n\n                final String[] values = mRestrictionsBundle.getStringArray(\n\n                        GetRestrictionsReceiver.KEY_MULTI_SELECT);\n\n                if (values != null) {\n\n                    for (String value : values) {\n\n                        set.add(value);\n\n                    }\n\n                }\n\n                mMultiPref.setValues(set);\n\n            }\n\n            mRestrictions.add(mBooleanEntry);\n\n            mRestrictions.add(mChoiceEntry);\n\n            mRestrictions.add(mMultiEntry);\n\n        }\n\n        // Prepares result to be passed back to the Settings app when the custom restrictions\n\n        // activity finishes.\n\n        Intent intent = new Intent(getActivity().getIntent());\n\n        intent.putParcelableArrayListExtra(Intent.EXTRA_RESTRICTIONS_LIST,\n\n                new ArrayList<RestrictionEntry>(mRestrictions));\n\n        getActivity().setResult(Activity.RESULT_OK, intent);\n\n    }\n\n \n\n    @Override\n\n    public boolean onPreferenceChange(Preference preference, Object newValue) {\n\n        if (preference == mBooleanPref) {\n\n            mBooleanEntry.setSelectedState((Boolean) newValue);\n\n        } else if (preference == mChoicePref) {\n\n            mChoiceEntry.setSelectedString((String) newValue);\n\n        } else if (preference == mMultiPref) {\n\n            String[] selectedStrings = new String[((Set<String>)newValue).size()];\n\n            int i = 0;\n\n            for (String value : (Set<String>) newValue) {\n\n                selectedStrings[i++] = value;\n\n            }\n\n            mMultiEntry.setAllSelectedStrings(selectedStrings);\n\n        }\n\n \n\n        // Saves all the app restriction configuration changes from the custom activity.\n\n        Intent intent = new Intent(getActivity().getIntent());\n\n        intent.putParcelableArrayListExtra(Intent.EXTRA_RESTRICTIONS_LIST,\n\n                new ArrayList<RestrictionEntry>(mRestrictions));\n\n        getActivity().setResult(Activity.RESULT_OK, intent);\n\n        return true;\n\n    }\n\n}\n  ","GetRestrictionsReceiver.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.apprestrictions;\n\n \n\nimport android.app.Activity;\n\nimport android.content.BroadcastReceiver;\n\nimport android.content.Context;\n\nimport android.content.Intent;\n\nimport android.content.RestrictionEntry;\n\nimport android.content.res.Resources;\n\nimport android.os.Bundle;\n\nimport android.preference.PreferenceManager;\n\nimport android.util.Log;\n\n \n\nimport java.util.ArrayList;\n\n \n\npublic class GetRestrictionsReceiver extends BroadcastReceiver {\n\n    private static final String TAG = GetRestrictionsReceiver.class.getSimpleName();\n\n \n\n    // Keys for referencing app restriction settings from the platform.\n\n    public static final String KEY_BOOLEAN = \"boolean_key\";\n\n    public static final String KEY_CHOICE = \"choice_key\";\n\n    public static final String KEY_MULTI_SELECT = \"multi_key\";\n\n \n\n    @Override\n\n    public void onReceive(final Context context, Intent intent) {\n\n        final PendingResult result = goAsync();\n\n \n\n        // If app restriction settings are already created, they will be included in the Bundle\n\n        // as key/value pairs.\n\n        final Bundle existingRestrictions =\n\n                intent.getBundleExtra(Intent.EXTRA_RESTRICTIONS_BUNDLE);\n\n        Log.i(TAG, \"existingRestrictions = \" + existingRestrictions);\n\n \n\n        new Thread() {\n\n            public void run() {\n\n                createRestrictions(context, result, existingRestrictions);\n\n            }\n\n        }.start();\n\n    }\n\n \n\n    // Initializes a boolean type restriction entry.\n\n    public static void populateBooleanEntry(Resources res, RestrictionEntry entry) {\n\n        entry.setType(RestrictionEntry.TYPE_BOOLEAN);\n\n        entry.setTitle(res.getString(R.string.boolean_entry_title));\n\n    }\n\n \n\n    // Initializes a single choice type restriction entry.\n\n    public static void populateChoiceEntry(Resources res, RestrictionEntry reSingleChoice) {\n\n        String[] choiceEntries = res.getStringArray(R.array.choice_entry_entries);\n\n        String[] choiceValues = res.getStringArray(R.array.choice_entry_values);\n\n        if (reSingleChoice.getSelectedString() == null) {\n\n            reSingleChoice.setSelectedString(choiceValues[0]);\n\n        }\n\n        reSingleChoice.setTitle(res.getString(R.string.choice_entry_title));\n\n        reSingleChoice.setChoiceEntries(choiceEntries);\n\n        reSingleChoice.setChoiceValues(choiceValues);\n\n        reSingleChoice.setType(RestrictionEntry.TYPE_CHOICE);\n\n    }\n\n \n\n    // Initializes a multi-select type restriction entry.\n\n    public static void populateMultiEntry(Resources res, RestrictionEntry reMultiSelect) {\n\n        String[] multiEntries = res.getStringArray(R.array.multi_entry_entries);\n\n        String[] multiValues = res.getStringArray(R.array.multi_entry_values);\n\n        if (reMultiSelect.getAllSelectedStrings() == null) {\n\n            reMultiSelect.setAllSelectedStrings(new String[0]);\n\n        }\n\n        reMultiSelect.setTitle(res.getString(R.string.multi_entry_title));\n\n        reMultiSelect.setChoiceEntries(multiEntries);\n\n        reMultiSelect.setChoiceValues(multiValues);\n\n        reMultiSelect.setType(RestrictionEntry.TYPE_MULTI_SELECT);\n\n    }\n\n \n\n    // Demonstrates the creation of standard app restriction types: boolean, single choice, and\n\n    // multi-select.\n\n    private ArrayList<RestrictionEntry> initRestrictions(Context context) {\n\n        ArrayList<RestrictionEntry> newRestrictions = new ArrayList<RestrictionEntry>();\n\n        Resources res = context.getResources();\n\n \n\n        RestrictionEntry reBoolean = new RestrictionEntry(KEY_BOOLEAN, false);\n\n        populateBooleanEntry(res, reBoolean);\n\n        newRestrictions.add(reBoolean);\n\n \n\n        RestrictionEntry reSingleChoice = new RestrictionEntry(KEY_CHOICE, (String) null);\n\n        populateChoiceEntry(res, reSingleChoice);\n\n        newRestrictions.add(reSingleChoice);\n\n \n\n        RestrictionEntry reMultiSelect = new RestrictionEntry(KEY_MULTI_SELECT, (String[]) null);\n\n        populateMultiEntry(res, reMultiSelect);\n\n        newRestrictions.add(reMultiSelect);\n\n \n\n        return newRestrictions;\n\n    }\n\n \n\n    private void createRestrictions(Context context, PendingResult result,\n\n                                    Bundle existingRestrictions) {\n\n        // The incoming restrictions bundle contains key/value pairs representing existing app\n\n        // restrictions for this package. In order to retain existing app restrictions, you need to\n\n        // construct new restriction entries and then copy in any existing values for the new keys.\n\n        ArrayList<RestrictionEntry> newEntries = initRestrictions(context);\n\n \n\n        // If app restrictions were not previously configured for the package, create the default\n\n        // restrictions entries and return them.\n\n        if (existingRestrictions == null) {\n\n            Bundle extras = new Bundle();\n\n            extras.putParcelableArrayList(Intent.EXTRA_RESTRICTIONS_LIST, newEntries);\n\n            result.setResult(Activity.RESULT_OK, null, extras);\n\n            result.finish();\n\n            return;\n\n        }\n\n \n\n        // Retains current restriction settings by transferring existing restriction entries to\n\n        // new ones.\n\n        for (RestrictionEntry entry : newEntries) {\n\n            final String key = entry.getKey();\n\n            if (KEY_BOOLEAN.equals(key)) {\n\n                entry.setSelectedState(existingRestrictions.getBoolean(KEY_BOOLEAN));\n\n            } else if (KEY_CHOICE.equals(key)) {\n\n                if (existingRestrictions.containsKey(KEY_CHOICE)) {\n\n                    entry.setSelectedString(existingRestrictions.getString(KEY_CHOICE));\n\n                }\n\n            } else if (KEY_MULTI_SELECT.equals(key)) {\n\n                if (existingRestrictions.containsKey(KEY_MULTI_SELECT)) {\n\n                    entry.setAllSelectedStrings(existingRestrictions.getStringArray(key));\n\n                }\n\n            }\n\n        }\n\n \n\n        final Bundle extras = new Bundle();\n\n \n\n        // This path demonstrates the use of a custom app restriction activity instead of standard\n\n        // types.  When a custom activity is set, the standard types will not be available under\n\n        // app restriction settings.\n\n        //\n\n        // If your app has an existing activity for app restriction configuration, you can set it\n\n        // up with the intent here.\n\n        if (PreferenceManager.getDefaultSharedPreferences(context)\n\n                .getBoolean(MainActivity.CUSTOM_CONFIG_KEY, false)) {\n\n            final Intent customIntent = new Intent();\n\n            customIntent.setClass(context, CustomRestrictionsActivity.class);\n\n            extras.putParcelable(Intent.EXTRA_RESTRICTIONS_INTENT, customIntent);\n\n        }\n\n \n\n        extras.putParcelableArrayList(Intent.EXTRA_RESTRICTIONS_LIST, newEntries);\n\n        result.setResult(Activity.RESULT_OK, null, extras);\n\n        result.finish();\n\n    }\n\n}\n  ","MainActivity.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.apprestrictions;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.content.SharedPreferences;\n\nimport android.os.Bundle;\n\nimport android.os.UserManager;\n\nimport android.preference.PreferenceManager;\n\nimport android.view.View;\n\nimport android.widget.CheckBox;\n\nimport android.widget.TextView;\n\n \n\n/**\n\n * This is the main user interface of the App Restrictions sample app.  It demonstrates the use\n\n * of the App Restriction feature, which is available on Android 4.3 and above tablet devices\n\n * with the multiuser feature.\n\n *\n\n * When launched under the primary User account, you can toggle between standard app restriction\n\n * types and custom.  When launched under a restricted profile, this activity displays app\n\n * restriction settings, if available.\n\n *\n\n * Follow these steps to exercise the feature:\n\n * 1. If this is the primary user, go to Settings > Users.\n\n * 2. Create a restricted profile, if one doesn't exist already.\n\n * 3. Open the profile settings, locate the sample app, and tap the app restriction settings\n\n *    icon. Configure app restrictions for the app.\n\n * 4. In the lock screen, switch to the user's restricted profile, launch this sample app,\n\n *    and see the configured app restrictions displayed.\n\n */\n\npublic class MainActivity extends Activity {\n\n    private Bundle mRestrictionsBundle;\n\n \n\n    // Checkbox to indicate whether custom or standard app restriction types are selected.\n\n    private CheckBox mCustomConfig;\n\n \n\n    public static final String CUSTOM_CONFIG_KEY = \"custom_config\";\n\n \n\n    private TextView mMultiEntryValue;\n\n    private TextView mChoiceEntryValue;\n\n    private TextView mBooleanEntryValue;\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n \n\n        // Sets up  user interface elements.\n\n        setContentView(R.layout.main);\n\n \n\n        mCustomConfig = (CheckBox) findViewById(R.id.custom_app_limits);\n\n        final boolean customChecked =\n\n                PreferenceManager.getDefaultSharedPreferences(this).getBoolean(\n\n                        CUSTOM_CONFIG_KEY, false);\n\n        if (customChecked) mCustomConfig.setChecked(true);\n\n \n\n        mMultiEntryValue = (TextView) findViewById(R.id.multi_entry_id);\n\n        mChoiceEntryValue = (TextView) findViewById(R.id.choice_entry_id);\n\n        mBooleanEntryValue = (TextView) findViewById(R.id.boolean_entry_id);\n\n    }\n\n \n\n    @Override\n\n    protected void onResume() {\n\n        super.onResume();\n\n \n\n        // If app restrictions are set for this package, when launched from a restricted profile,\n\n        // the settings are available in the returned Bundle as key/value pairs.\n\n        mRestrictionsBundle =\n\n                ((UserManager) getSystemService(Context.USER_SERVICE))\n\n                        .getApplicationRestrictions(getPackageName());\n\n        if (mRestrictionsBundle == null) {\n\n            mRestrictionsBundle = new Bundle();\n\n        }\n\n \n\n        // Reads and displays values from a boolean type restriction entry, if available.\n\n        // An app can utilize these settings to restrict its content under a restricted profile.\n\n        final String booleanRestrictionValue =\n\n                mRestrictionsBundle.containsKey(GetRestrictionsReceiver.KEY_BOOLEAN) ?\n\n                        mRestrictionsBundle.getBoolean(GetRestrictionsReceiver.KEY_BOOLEAN) + \"\":\n\n                        getString(R.string.na);\n\n        mBooleanEntryValue.setText(booleanRestrictionValue);\n\n \n\n        // Reads and displays values from a single choice restriction entry, if available.\n\n        final String singleChoiceRestrictionValue =\n\n                mRestrictionsBundle.containsKey(GetRestrictionsReceiver.KEY_CHOICE) ?\n\n                        mRestrictionsBundle.getString(GetRestrictionsReceiver.KEY_CHOICE) :\n\n                        getString(R.string.na);\n\n        mChoiceEntryValue.setText(singleChoiceRestrictionValue);\n\n \n\n        // Reads and displays values from a multi-select restriction entry, if available.\n\n        final String[] multiSelectValues =\n\n                mRestrictionsBundle.getStringArray(GetRestrictionsReceiver.KEY_MULTI_SELECT);\n\n        if (multiSelectValues == null || multiSelectValues.length == 0) {\n\n            mMultiEntryValue.setText(getString(R.string.na));\n\n        } else {\n\n            String tempValue = \"\";\n\n            for (String value : multiSelectValues) {\n\n                tempValue = tempValue + value + \" \";\n\n            }\n\n            mMultiEntryValue.setText(tempValue);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Saves custom app restriction to the shared preference.\n\n     *\n\n     * This flag is used by {@code GetRestrictionsReceiver} to determine if a custom app\n\n     * restriction activity should be used.\n\n     *\n\n     * @param view\n\n     */\n\n    public void onCustomClicked(View view) {\n\n        final SharedPreferences.Editor editor =\n\n                PreferenceManager.getDefaultSharedPreferences(this).edit();\n\n        editor.putBoolean(CUSTOM_CONFIG_KEY, mCustomConfig.isChecked()).commit();\n\n    }\n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.apprestrictions\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk android:minSdkVersion=\"18\" />\n\n \n\n    <application android:label=\"@string/app_name\"\n\n        android:icon=\"@drawable/ic_launcher\">\n\n \n\n        <activity android:name=\"MainActivity\"\n\n            android:label=\"@string/app_name\" >\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n \n\n        <activity android:name=\"CustomRestrictionsActivity\"\n\n            android:label=\"@string/restrictions_activity_label\" />\n\n \n\n        <receiver android:name=\"GetRestrictionsReceiver\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.GET_RESTRICTION_ENTRIES\" />\n\n            </intent-filter>\n\n        </receiver>\n\n    </application>\n\n \n\n</manifest>\n  "},"BasicContactables":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicContactables/res/drawable-hdpi/ic_launcher.png","ic_search_api_holo_light.png":"http://developer.android.com/samples/BasicContactables/res/drawable-hdpi/ic_search_api_holo_light.png","tile.9.png":"http://developer.android.com/samples/BasicContactables/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicContactables/res/drawable-mdpi/ic_launcher.png","ic_search_api_holo_light.png":"http://developer.android.com/samples/BasicContactables/res/drawable-mdpi/ic_search_api_holo_light.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicContactables/res/drawable-xhdpi/ic_launcher.png","ic_search_api_holo_light.png":"http://developer.android.com/samples/BasicContactables/res/drawable-xhdpi/ic_search_api_holo_light.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicContactables/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleMessageTile\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n            android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n            android:text=\"@string/intro_message\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n  ","sample_main.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<ScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\">\n\n \n\n    <TextView android:id=\"@+id/sample_output\"\n\n        style=\"@style/Widget.SampleOutput\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:text=\"@string/intro_message\" />\n\n \n\n</ScrollView>\n  "},"menu":{"main.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:id=\"@+id/search\"\n\n          android:title=\"@string/search_title\"\n\n          android:icon=\"@drawable/ic_search_api_holo_light\"\n\n          android:showAsAction=\"collapseActionView|ifRoom\"\n\n          android:actionViewClass=\"android.widget.SearchView\" />\n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">BasicContactables</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            This sample demonstrates how to use the Contactables table to search for contacts.\n\n            \\n\\nQuery strings sent to the Contactables table will match both contact names and phone numbers,\n\n            reducing the number of queries your application needs to use when searching the contacts database!\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n    <string name=\"sample_action\">Sample action</string>\n\n    <string name=\"search_title\">Search Contacts</string>\n\n</resources>\n  ","styles.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget.SampleOutput\">\n\n        <item name=\"android:padding\">@dimen/margin_medium</item>\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "},"xml":{"searchable.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n   \n\n<searchable xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n        android:label=\"@string/app_name\"\n\n        android:hint=\"@string/search_title\" />\n  "}},"src":{"com.example.android.basiccontactables":{"ContactablesLoaderCallbacks.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.basiccontactables;\n\n \n\nimport android.app.Activity;\n\nimport android.app.LoaderManager;\n\nimport android.content.Context;\n\nimport android.content.CursorLoader;\n\nimport android.content.Loader;\n\nimport android.database.Cursor;\n\nimport android.net.Uri;\n\nimport android.os.Bundle;\n\nimport android.provider.ContactsContract.CommonDataKinds;\n\nimport android.util.Log;\n\nimport android.widget.TextView;\n\n \n\n/**\n\n * Helper class to handle all the callbacks that occur when interacting with loaders.  Most of the\n\n * interesting code in this sample app will be in this file.\n\n */\n\npublic class ContactablesLoaderCallbacks implements LoaderManager.LoaderCallbacks<Cursor> {\n\n \n\n    Context mContext;\n\n \n\n    public static final String QUERY_KEY = \"query\";\n\n \n\n    public static final String TAG = \"ContactablesLoaderCallbacks\";\n\n \n\n    public ContactablesLoaderCallbacks(Context context) {\n\n        mContext = context;\n\n    }\n\n \n\n    @Override\n\n    public Loader<Cursor> onCreateLoader(int loaderIndex, Bundle args) {\n\n        // Where the Contactables table excels is matching text queries,\n\n        // not just data dumps from Contacts db.  One search term is used to query\n\n        // display name, email address and phone number.  In this case, the query was extracted\n\n        // from an incoming intent in the handleIntent() method, via the\n\n        // intent.getStringExtra() method.\n\n \n\n        String query = args.getString(QUERY_KEY);\n\n        Uri uri = Uri.withAppendedPath(\n\n                CommonDataKinds.Contactables.CONTENT_FILTER_URI, query);\n\n \n\n \n\n        // Easy way to limit the query to contacts with phone numbers.\n\n        String selection =\n\n                CommonDataKinds.Contactables.HAS_PHONE_NUMBER + \" = \" + 1;\n\n \n\n        // Sort results such that rows for the same contact stay together.\n\n        String sortBy = CommonDataKinds.Contactables.LOOKUP_KEY;\n\n \n\n        return new CursorLoader(\n\n                mContext,  // Context\n\n                uri,       // URI representing the table/resource to be queried\n\n                null,      // projection - the list of columns to return.  Null means \"all\"\n\n                selection, // selection - Which rows to return (condition rows must match)\n\n                null,      // selection args - can be provided separately and subbed into selection.\n\n                sortBy);   // string specifying sort order\n\n    }\n\n \n\n    @Override\n\n    public void onLoadFinished(Loader<Cursor> arg0, Cursor cursor) {\n\n        TextView tv  = (TextView) ((Activity)mContext).findViewById(R.id.sample_output);\n\n        if(tv == null) {\n\n            Log.e(TAG, \"TextView is null?!\");\n\n        } else if (mContext == null) {\n\n            Log.e(TAG, \"Context is null?\");\n\n        } else {\n\n            Log.e(TAG, \"Nothing is null?!\");\n\n        }\n\n \n\n        // Reset text in case of a previous query\n\n        tv.setText(mContext.getText(R.string.intro_message) + \"\\n\\n\");\n\n \n\n        if (cursor.getCount() == 0) {\n\n            return;\n\n        }\n\n \n\n        // Pulling the relevant value from the cursor requires knowing the column index to pull\n\n        // it from.\n\n        int phoneColumnIndex = cursor.getColumnIndex(CommonDataKinds.Phone.NUMBER);\n\n        int emailColumnIndex = cursor.getColumnIndex(CommonDataKinds.Email.ADDRESS);\n\n        int nameColumnIndex = cursor.getColumnIndex(CommonDataKinds.Contactables.DISPLAY_NAME);\n\n        int lookupColumnIndex = cursor.getColumnIndex(CommonDataKinds.Contactables.LOOKUP_KEY);\n\n        int typeColumnIndex = cursor.getColumnIndex(CommonDataKinds.Contactables.MIMETYPE);\n\n \n\n        cursor.moveToFirst();\n\n        // Lookup key is the easiest way to verify a row of data is for the same\n\n        // contact as the previous row.\n\n        String lookupKey = \"\";\n\n        do {\n\n            String currentLookupKey = cursor.getString(lookupColumnIndex);\n\n            if (!lookupKey.equals(currentLookupKey)) {\n\n                String displayName = cursor.getString(nameColumnIndex);\n\n                tv.append(displayName + \"\\n\");\n\n                lookupKey = currentLookupKey;\n\n            }\n\n \n\n            // The data type can be determined using the mime type column.\n\n            String mimeType = cursor.getString(typeColumnIndex);\n\n            if (mimeType.equals(CommonDataKinds.Phone.CONTENT_ITEM_TYPE)) {\n\n                tv.append(\"\\tPhone Number: \" + cursor.getString(phoneColumnIndex) + \"\\n\");\n\n            } else if (mimeType.equals(CommonDataKinds.Email.CONTENT_ITEM_TYPE)) {\n\n                tv.append(\"\\tEmail Address: \" + cursor.getString(emailColumnIndex) + \"\\n\");\n\n            }\n\n \n\n            // Look at DDMS to see all the columns returned by a query to Contactables.\n\n            // Behold, the firehose!\n\n            for(String column : cursor.getColumnNames()) {\n\n                Log.d(TAG, column + column + \": \" +\n\n                        cursor.getString(cursor.getColumnIndex(column)) + \"\\n\");\n\n            }\n\n        } while (cursor.moveToNext());\n\n    }\n\n \n\n    @Override\n\n    public void onLoaderReset(Loader<Cursor> cursorLoader) {\n\n    }\n\n}\n  ","MainActivity.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.basiccontactables;\n\n \n\nimport android.app.Activity;\n\nimport android.app.SearchManager;\n\nimport android.content.Context;\n\nimport android.content.Intent;\n\nimport android.os.Bundle;\n\nimport android.view.Menu;\n\nimport android.widget.SearchView;\n\n \n\n/**\n\n * Simple one-activity app that takes a search term via the Action Bar\n\n * and uses it as a query to search the contacts database via the Contactables\n\n * table.\n\n */\n\npublic class MainActivity extends Activity {\n\n \n\n    public static final int CONTACT_QUERY_LOADER = 0;\n\n    public static final String QUERY_KEY = \"query\";\n\n \n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.sample_main);\n\n \n\n        if (getIntent() != null) {\n\n            handleIntent(getIntent());\n\n        }\n\n    }\n\n \n\n    @Override\n\n    protected void onNewIntent(Intent intent) {\n\n        handleIntent(intent);\n\n    }\n\n \n\n    /**\n\n     * Assuming this activity was started with a new intent, process the incoming information and\n\n     * react accordingly.\n\n     * @param intent\n\n     */\n\n    private void handleIntent(Intent intent) {\n\n        // Special processing of the incoming intent only occurs if the if the action specified\n\n        // by the intent is ACTION_SEARCH.\n\n        if (Intent.ACTION_SEARCH.equals(intent.getAction())) {\n\n            // SearchManager.QUERY is the key that a SearchManager will use to send a query string\n\n            // to an Activity.\n\n            String query = intent.getStringExtra(SearchManager.QUERY);\n\n \n\n            // We need to create a bundle containing the query string to send along to the\n\n            // LoaderManager, which will be handling querying the database and returning results.\n\n            Bundle bundle = new Bundle();\n\n            bundle.putString(QUERY_KEY, query);\n\n \n\n            ContactablesLoaderCallbacks loaderCallbacks = new ContactablesLoaderCallbacks(this);\n\n \n\n            // Start the loader with the new query, and an object that will handle all callbacks.\n\n            getLoaderManager().restartLoader(CONTACT_QUERY_LOADER, bundle, loaderCallbacks);\n\n        }\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        // Inflate the menu; this adds items to the action bar if it is present.\n\n        getMenuInflater().inflate(R.menu.main, menu);\n\n \n\n        // Associate searchable configuration with the SearchView\n\n        SearchManager searchManager =\n\n                (SearchManager) getSystemService(Context.SEARCH_SERVICE);\n\n        SearchView searchView =\n\n                (SearchView) menu.findItem(R.id.search).getActionView();\n\n        searchView.setSearchableInfo(\n\n                searchManager.getSearchableInfo(getComponentName()));\n\n \n\n        return true;\n\n    }\n\n}\n  "},"com.example.android.common.logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.basiccontactables\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\" >\n\n \n\n    <uses-permission android:name=\"android.permission.READ_CONTACTS\"/>\n\n    <uses-sdk\n\n        android:minSdkVersion=\"18\"\n\n        android:targetSdkVersion=\"18\" />\n\n    <permission android:name=\"android\"></permission>\n\n \n\n    <application\n\n        android:allowBackup=\"true\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:label=\"@string/app_name\"\n\n        android:theme=\"@style/Theme.Sample\" >\n\n        <activity\n\n            android:name=\"com.example.android.basiccontactables.MainActivity\"\n\n            android:label=\"@string/app_name\"\n\n            android:launchMode=\"singleTop\">\n\n            <meta-data\n\n                android:name=\"android.app.searchable\"\n\n                android:resource=\"@xml/searchable\" />\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.SEARCH\" />\n\n            </intent-filter>\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n</manifest>\n  "},"StorageClient":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com/samples/StorageClient/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com/samples/StorageClient/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com/samples/StorageClient/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com/samples/StorageClient/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com/samples/StorageClient/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n        android:orientation=\"vertical\"\n\n        android:layout_width=\"fill_parent\"\n\n        android:layout_height=\"fill_parent\"\n\n        android:id=\"@+id/sample_main_layout\">\n\n    <TextView android:id=\"@+id/sample_output\"\n\n              style=\"@style/Widget.SampleMessage\"\n\n              android:layout_weight=\"1\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\"\n\n              android:text=\"@string/intro_message\"\n\n              android:padding=\"16dp\" />\n\n    <View\n\n            android:layout_width=\"fill_parent\"\n\n            android:layout_height=\"1dp\"\n\n            android:background=\"@android:color/darker_gray\"/>\n\n    <fragment\n\n            android:name=\"com.example.android.common.logger.LogFragment\"\n\n            android:id=\"@+id/log_fragment\"\n\n            android:layout_weight=\"1\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"match_parent\" />\n\n</LinearLayout>\n  "},"layout-sw600dp":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:orientation=\"vertical\"\n\n    android:layout_width=\"fill_parent\"\n\n    android:layout_height=\"fill_parent\"\n\n    android:id=\"@+id/sample_main_layout\" >\n\n \n\n    <TextView android:id=\"@+id/sample_output\"\n\n        style=\"@style/Widget.SampleMessage\"\n\n        android:background=\"@android:color/white\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:text=\"@string/intro_message\"\n\n        android:padding=\"16dp\"\n\n        android:layout_margin=\"16dp\"/>\n\n    <fragment\n\n        android:name=\"com.example.android.common.logger.LogFragment\"\n\n        android:id=\"@+id/log_fragment\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"match_parent\"\n\n        android:layout_margin=\"16dp\" />\n\n</LinearLayout>\n  "},"layout-sw600dp-land":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n        android:orientation=\"horizontal\"\n\n        android:layout_width=\"fill_parent\"\n\n        android:layout_height=\"fill_parent\"\n\n        android:id=\"@+id/sample_main_layout\">\n\n    <TextView android:id=\"@+id/sample_output\"\n\n              style=\"@style/Widget.SampleMessage\"\n\n              android:background=\"@android:color/white\"\n\n              android:layout_weight=\"1\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\"\n\n              android:text=\"@string/intro_message\"\n\n              android:layout_margin=\"16dp\" />\n\n    <fragment\n\n            android:name=\"com.example.android.common.logger.LogFragment\"\n\n            android:id=\"@+id/log_fragment\"\n\n            android:layout_weight=\"1\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"match_parent\"\n\n            android:layout_margin=\"16dp\" />\n\n</LinearLayout>\n  "},"menu":{"main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:id=\"@+id/sample_action\"\n\n          android:showAsAction=\"ifRoom|withText\"\n\n          android:title=\"@string/sample_action\" />\n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">StorageClient</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            Using the OPEN_DOCUMENT intent, a client app can access a list of Document Providers\n\n            on the device, and choose a file from any of them.\n\n            \\n\\nTo demonstrate this, click the button below to open up the Storage Access Framework\n\n            interface, and choose an image on your device.  It will be displayed in this app.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n        <string name=\"sample_action\">Show Me The Image</string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Base\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n \n\n    <style name=\"Widget.SampleOutput\">\n\n        <item name=\"android:padding\">@dimen/margin_medium</item>\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Log\" parent=\"Widget.SampleOutput\">\n\n        <item name=\"android:typeface\">monospace</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:padding\">@dimen/margin_medium</item>\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n \n\n        <item name=\"android:layout_margin\">16dp</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n    <style name=\"Log\" parent=\"Widget.SampleOutput\">\n\n        <item name=\"android:typeface\">monospace</item>\n\n    </style>\n\n \n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.common":{"activities":{"SampleActivityBase.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\npackage com.example.android.common.activities;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentActivity;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogWrapper;\n\n \n\n/**\n\n * Base launcher activity, to handle most of the common plumbing for samples.\n\n */\n\npublic class SampleActivityBase extends FragmentActivity {\n\n \n\n    public static final String TAG = \"SampleActivityBase\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n    }\n\n \n\n    @Override\n\n    protected  void onStart() {\n\n        super.onStart();\n\n        initializeLogging();\n\n    }\n\n \n\n    /** Set up targets to receive log data */\n\n    public void initializeLogging() {\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        // Wraps Android's native log framework\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        Log.setLogNode(logWrapper);\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "},"logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "}},"com.example.android.storageclient":{"MainActivity.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.storageclient;\n\n \n\nimport android.graphics.Color;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentTransaction;\n\nimport android.view.Menu;\n\n \n\nimport com.example.android.common.activities.SampleActivityBase;\n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogFragment;\n\nimport com.example.android.common.logger.LogWrapper;\n\nimport com.example.android.common.logger.MessageOnlyLogFilter;\n\n \n\n/**\n\n * A simple launcher activity containing a summary sample description\n\n * and a few action bar buttons.\n\n */\n\npublic class MainActivity extends SampleActivityBase {\n\n \n\n    public static final String TAG = \"MainActivity\";\n\n \n\n    public static final String FRAGTAG = \"StorageClientFragment\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_main);\n\n \n\n        if (getSupportFragmentManager().findFragmentByTag(FRAGTAG) == null ) {\n\n            FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n\n            StorageClientFragment fragment = new StorageClientFragment();\n\n            transaction.add(fragment, FRAGTAG);\n\n            transaction.commit();\n\n        }\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        getMenuInflater().inflate(R.menu.main, menu);\n\n        return true;\n\n    }\n\n \n\n    /** Create a chain of targets that will receive log data */\n\n    @Override\n\n    public void initializeLogging() {\n\n        // Wraps Android's native log framework.\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        Log.setLogNode(logWrapper);\n\n \n\n        // Filter strips out everything except the message text.\n\n        MessageOnlyLogFilter msgFilter = new MessageOnlyLogFilter();\n\n        logWrapper.setNext(msgFilter);\n\n \n\n        // On screen logging via a fragment with a TextView.\n\n        LogFragment logFragment = (LogFragment) getSupportFragmentManager()\n\n                .findFragmentById(R.id.log_fragment);\n\n        msgFilter.setNext(logFragment.getLogView());\n\n        logFragment.getLogView().setTextAppearance(this, R.style.Log);\n\n        logFragment.getLogView().setBackgroundColor(Color.WHITE);\n\n \n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  ","StorageClientFragment.java":"\n    \n\n/*\n\n* Copyright (C) 2012 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*      http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\npackage com.example.android.storageclient;\n\n \n\nimport android.app.Activity;\n\nimport android.app.Dialog;\n\nimport android.content.Intent;\n\nimport android.database.Cursor;\n\nimport android.graphics.Bitmap;\n\nimport android.graphics.BitmapFactory;\n\nimport android.net.Uri;\n\nimport android.os.AsyncTask;\n\nimport android.os.Bundle;\n\nimport android.os.ParcelFileDescriptor;\n\nimport android.provider.OpenableColumns;\n\nimport android.support.v4.app.DialogFragment;\n\nimport android.support.v4.app.Fragment;\n\nimport android.support.v4.app.FragmentManager;\n\nimport android.view.MenuItem;\n\nimport android.view.Window;\n\nimport android.widget.ImageView;\n\n \n\nimport com.example.android.common.logger.Log;\n\n \n\nimport java.io.FileDescriptor;\n\nimport java.io.IOException;\n\n \n\npublic class StorageClientFragment extends Fragment {\n\n \n\n    // A request code's purpose is to match the result of a \"startActivityForResult\" with\n\n    // the type of the original request.  Choose any value.\n\n    private static final int READ_REQUEST_CODE = 1337;\n\n \n\n    public static final String TAG = \"StorageClientFragment\";\n\n \n\n    @Override\n\n    public void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setHasOptionsMenu(true);\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        if (item.getItemId() == R.id.sample_action) {\n\n            performFileSearch();\n\n        }\n\n        return true;\n\n    }\n\n \n\n    /**\n\n     * Fires an intent to spin up the \"file chooser\" UI and select an image.\n\n     */\n\n    public void performFileSearch() {\n\n \n\n        // ACTION_OPEN_DOCUMENT is the intent to choose a file via the system's file browser.\n\n        Intent intent = new Intent(Intent.ACTION_OPEN_DOCUMENT);\n\n \n\n        // Filter to only show results that can be \"opened\", such as a file (as opposed to a list\n\n        // of contacts or timezones)\n\n        intent.addCategory(Intent.CATEGORY_OPENABLE);\n\n \n\n        // Filter to show only images, using the image MIME data type.\n\n        // If one wanted to search for ogg vorbis files, the type would be \"audio/ogg\".\n\n        // To search for all documents available via installed storage providers, it would be\n\n        // \"*/*\".\n\n        intent.setType(\"image/*\");\n\n \n\n        startActivityForResult(intent, READ_REQUEST_CODE);\n\n    }\n\n \n\n    @Override\n\n    public void onActivityResult(int requestCode, int resultCode, Intent resultData) {\n\n        Log.i(TAG, \"Received an \\\"Activity Result\\\"\");\n\n        // The ACTION_OPEN_DOCUMENT intent was sent with the request code READ_REQUEST_CODE.\n\n        // If the request code seen here doesn't match, it's the response to some other intent,\n\n        // and the below code shouldn't run at all.\n\n \n\n        if (requestCode == READ_REQUEST_CODE && resultCode == Activity.RESULT_OK) {\n\n            // The document selected by the user won't be returned in the intent.\n\n            // Instead, a URI to that document will be contained in the return intent\n\n            // provided to this method as a parameter.  Pull that uri using \"resultData.getData()\"\n\n            Uri uri = null;\n\n            if (resultData != null) {\n\n                uri = resultData.getData();\n\n                Log.i(TAG, \"Uri: \" + uri.toString());\n\n                showImage(uri);\n\n            }\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Given the URI of an image, shows it on the screen using a DialogFragment.\n\n     *\n\n     * @param uri the Uri of the image to display.\n\n     */\n\n    public void showImage(Uri uri) {\n\n        if (uri != null) {\n\n            // Since the URI is to an image, create and show a DialogFragment to display the\n\n            // image to the user.\n\n            FragmentManager fm = getActivity().getSupportFragmentManager();\n\n            ImageDialogFragment imageDialog = new ImageDialogFragment(uri);\n\n            imageDialog.show(fm, \"image_dialog\");\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Grabs metadata for a document specified by URI, logs it to the screen.\n\n     *\n\n     * @param uri The uri for the document whose metadata should be printed.\n\n     */\n\n    public void dumpImageMetaData(Uri uri) {\n\n \n\n        // The query, since it only applies to a single document, will only return one row.\n\n        // no need to filter, sort, or select fields, since we want all fields for one\n\n        // document.\n\n        Cursor cursor = getActivity().getContentResolver()\n\n                .query(uri, null, null, null, null, null);\n\n \n\n        try {\n\n        // moveToFirst() returns false if the cursor has 0 rows.  Very handy for\n\n        // \"if there's anything to look at, look at it\" conditionals.\n\n            if (cursor != null && cursor.moveToFirst()) {\n\n \n\n                // Note it's called \"Display Name\".  This is provider-specific, and\n\n                // might not necessarily be the file name.\n\n                String displayName = cursor.getString(\n\n                        cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));\n\n                Log.i(TAG, \"Display Name: \" + displayName);\n\n \n\n                int sizeIndex = cursor.getColumnIndex(OpenableColumns.SIZE);\n\n                // If the size is unknown, the value stored is null.  But since an int can't be\n\n                // null in java, the behavior is implementation-specific, which is just a fancy\n\n                // term for \"unpredictable\".  So as a rule, check if it's null before assigning\n\n                // to an int.  This will happen often:  The storage API allows for remote\n\n                // files, whose size might not be locally known.\n\n                String size = null;\n\n                if (!cursor.isNull(sizeIndex)) {\n\n                    // Technically the column stores an int, but cursor.getString will do the\n\n                    // conversion automatically.\n\n                    size = cursor.getString(sizeIndex);\n\n                } else {\n\n                    size = \"Unknown\";\n\n                }\n\n                Log.i(TAG, \"Size: \" + size);\n\n            }\n\n        } finally {\n\n            cursor.close();\n\n        }\n\n    }\n\n \n\n    /**\n\n     * DialogFragment which displays an image, given a URI.\n\n     */\n\n    private class ImageDialogFragment extends DialogFragment {\n\n        private Dialog mDialog;\n\n        private Uri mUri;\n\n \n\n        public ImageDialogFragment(Uri uri) {\n\n            super();\n\n            mUri = uri;\n\n        }\n\n \n\n        /** Create a Bitmap from the URI for that image and return it.\n\n         *\n\n         * @param uri the Uri for the image to return.\n\n         */\n\n        private Bitmap getBitmapFromUri(Uri uri) {\n\n            ParcelFileDescriptor parcelFileDescriptor = null;\n\n            try {\n\n                parcelFileDescriptor =\n\n                        getActivity().getContentResolver().openFileDescriptor(uri, \"r\");\n\n                FileDescriptor fileDescriptor = parcelFileDescriptor.getFileDescriptor();\n\n                Bitmap image = BitmapFactory.decodeFileDescriptor(fileDescriptor);\n\n                parcelFileDescriptor.close();\n\n                return image;\n\n            } catch (Exception e) {\n\n                Log.e(TAG, \"Failed to load image.\", e);\n\n                return null;\n\n            } finally {\n\n                try {\n\n                    if (parcelFileDescriptor != null) {\n\n                        parcelFileDescriptor.close();\n\n                    }\n\n                } catch (IOException e) {\n\n                    e.printStackTrace();\n\n                    Log.e(TAG, \"Error closing ParcelFile Descriptor\");\n\n                }\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public Dialog onCreateDialog(Bundle savedInstanceState) {\n\n            mDialog = super.onCreateDialog(savedInstanceState);\n\n            // To optimize for the \"lightbox\" style layout.  Since we're not actually displaying a\n\n            // title, remove the bar along the top of the fragment where a dialog title would\n\n            // normally go.\n\n            mDialog.getWindow().requestFeature(Window.FEATURE_NO_TITLE);\n\n            final ImageView imageView = new ImageView(getActivity());\n\n            mDialog.setContentView(imageView);\n\n \n\n            // Loading the image is going to require some sort of I/O, which must occur off the UI\n\n            // thread.  Changing the ImageView to display the image must occur ON the UI thread.\n\n            // The easiest way to divide up this labor is with an AsyncTask.  The doInBackground\n\n            // method will run in a separate thread, but onPostExecute will run in the main\n\n            // UI thread.\n\n            AsyncTask<Uri, Void, Bitmap> imageLoadAsyncTask = new AsyncTask<Uri, Void, Bitmap>() {\n\n                @Override\n\n                protected Bitmap doInBackground(Uri... uris) {\n\n                    dumpImageMetaData(uris[0]);\n\n                    return getBitmapFromUri(uris[0]);\n\n                }\n\n \n\n                @Override\n\n                protected void onPostExecute(Bitmap bitmap) {\n\n                    imageView.setImageBitmap(bitmap);\n\n                }\n\n            };\n\n            imageLoadAsyncTask.execute(mUri);\n\n \n\n            return mDialog;\n\n        }\n\n \n\n        @Override\n\n        public void onStop() {\n\n            super.onStop();\n\n            if (getDialog() != null) {\n\n                getDialog().dismiss();\n\n            }\n\n        }\n\n    }\n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.storageclient\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk android:minSdkVersion=\"19\" android:targetSdkVersion=\"19\" />\n\n \n\n    <application android:allowBackup=\"true\"\n\n        android:label=\"@string/app_name\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:theme=\"@style/AppTheme\">\n\n \n\n        <activity android:name=\".MainActivity\"\n\n                  android:label=\"@string/app_name\"\n\n                  android:uiOptions=\"splitActionBarWhenNarrow\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n \n\n</manifest>\n  "},"StorageProvider":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com/samples/StorageProvider/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com/samples/StorageProvider/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com/samples/StorageProvider/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com/samples/StorageProvider/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com/samples/StorageProvider/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n        android:orientation=\"vertical\"\n\n        android:layout_width=\"fill_parent\"\n\n        android:layout_height=\"fill_parent\"\n\n        android:id=\"@+id/sample_main_layout\">\n\n    <TextView android:id=\"@+id/sample_output\"\n\n              style=\"@style/Widget.SampleMessage\"\n\n              android:layout_weight=\"1\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\"\n\n              android:text=\"@string/intro_message\"\n\n              android:padding=\"16dp\" />\n\n    <View\n\n            android:layout_width=\"fill_parent\"\n\n            android:layout_height=\"1dp\"\n\n            android:background=\"@android:color/darker_gray\"/>\n\n    <fragment\n\n            android:name=\"com.example.android.common.logger.LogFragment\"\n\n            android:id=\"@+id/log_fragment\"\n\n            android:layout_weight=\"1\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"match_parent\" />\n\n</LinearLayout>\n  "},"layout-sw600dp":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:orientation=\"vertical\"\n\n    android:layout_width=\"fill_parent\"\n\n    android:layout_height=\"fill_parent\"\n\n    android:id=\"@+id/sample_main_layout\" >\n\n \n\n    <TextView android:id=\"@+id/sample_output\"\n\n        style=\"@style/Widget.SampleMessage\"\n\n        android:background=\"@android:color/white\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:text=\"@string/intro_message\"\n\n        android:padding=\"16dp\"\n\n        android:layout_margin=\"16dp\"/>\n\n    <fragment\n\n        android:name=\"com.example.android.common.logger.LogFragment\"\n\n        android:id=\"@+id/log_fragment\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"match_parent\"\n\n        android:layout_margin=\"16dp\" />\n\n</LinearLayout>\n  "},"layout-sw600dp-land":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n        android:orientation=\"horizontal\"\n\n        android:layout_width=\"fill_parent\"\n\n        android:layout_height=\"fill_parent\"\n\n        android:id=\"@+id/sample_main_layout\">\n\n    <TextView android:id=\"@+id/sample_output\"\n\n              style=\"@style/Widget.SampleMessage\"\n\n              android:background=\"@android:color/white\"\n\n              android:layout_weight=\"1\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\"\n\n              android:text=\"@string/intro_message\"\n\n              android:layout_margin=\"16dp\" />\n\n    <fragment\n\n            android:name=\"com.example.android.common.logger.LogFragment\"\n\n            android:id=\"@+id/log_fragment\"\n\n            android:layout_weight=\"1\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"match_parent\"\n\n            android:layout_margin=\"16dp\" />\n\n</LinearLayout>\n  "},"menu":{"main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:id=\"@+id/sample_action\"\n\n          android:showAsAction=\"ifRoom|withText\"\n\n          android:title=\"@string/sample_action\" />\n\n</menu>\n  "},"raw":{"android_computer_android_studio.jpg":"http://developer.android.com/samples/StorageProvider/res/raw/android_computer_android_studio.jpg","android_computer_back.jpg":"http://developer.android.com/samples/StorageProvider/res/raw/android_computer_back.jpg","android_dinner.jpg":"http://developer.android.com/samples/StorageProvider/res/raw/android_dinner.jpg","android_pumpkins_fall.jpg":"http://developer.android.com/samples/StorageProvider/res/raw/android_pumpkins_fall.jpg","android_rose.jpg":"http://developer.android.com/samples/StorageProvider/res/raw/android_rose.jpg","cat_names.txt":"\n    \n\nTop cat names of 2013\n\n \n\n1. Angel\n\n2. Charlie\n\n3. Mittens\n\n4. Milkshake\n\n5. Oreo\n\n6. Ella\n\n7. Lily\n\n8. Ellie\n\n9. Pepsi\n\n10. Amber\n\n11. Molly\n\n12. Truffles\n\n13. Peanut\n\n14. Tiger Lilly\n\n15. Snowball\n  ","dog_names.txt":"\n    \n\nTop dog names of 2013\n\n \n\n1. Gus\n\n2. Trapper\n\n3. Finn\n\n4. Bailey\n\n5. Cooper\n\n6. Hawkeye\n\n7. Wrigley\n\n8. Boomer\n\n9. Ace\n\n10. Butch\n\n11. Delgado\n\n12. Evan\n\n13. Lucky\n\n14. Otto\n\n15. Buddy\n  "},"values":{"app_strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\nCopyright 2013 The Android Open Source Project\n\n \n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n \n\n http://www.apache.org/licenses/LICENSE-2.0\n\n \n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n-->\n\n \n\n \n\n<resources>\n\n    <string name=\"log_in\">Log in</string>\n\n    <string name=\"log_out\">Log out</string>\n\n    <string name=\"logged_in_info\">You are currently logged in, which means the documents in MyCloud are visible to other applications.</string>\n\n    <string name=\"logged_out_info\">You are currently logged out, so MyCloud is not visible as a document provider.</string>\n\n    <string name=\"root_summary\">cloudy with a chance of &#8230;</string>\n\n    <string name=\"key_logged_in\">logged_in</string>\n\n</resources>\n  ","arrays.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n    <array name=\"image_res_ids\">\n\n        <item>@raw/android_dinner</item>\n\n        <item>@raw/android_rose</item>\n\n        <item>@raw/android_pumpkins_fall</item>\n\n        <item>@raw/android_computer_back</item>\n\n        <item>@raw/android_computer_android_studio</item>\n\n    </array>\n\n \n\n    <array name=\"text_res_ids\">\n\n        <item>@raw/cat_names</item>\n\n        <item>@raw/dog_names</item>\n\n    </array>\n\n \n\n    <array name=\"docx_res_ids\">\n\n        <item>@raw/example</item>\n\n    </array>\n\n</resources>\n  ","base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">MyCloud</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            \\nA simple implementation of a documents provider using the storage access framework in\n\n            Android 4.4.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n        <string name=\"sample_action\">Log in</string>\n\n</resources>\n  ","styles.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <style name=\"MyAppTheme\" parent=\"AppTheme\">\n\n        <item name=\"android:textViewStyle\">@style/MyTextViewStyle</item>\n\n        <item name=\"android:actionBarStyle\">@style/MyActionBarStyle</item>\n\n        <item name=\"android:actionMenuTextColor\">@android:color/white</item>\n\n    </style>\n\n \n\n    <style name=\"MyActionBarStyle\" parent=\"android:Widget.Holo.Light.ActionBar.Solid.Inverse\">\n\n        <item name=\"android:background\">#5E2D79</item>\n\n        <item name=\"android:backgroundSplit\">#5E2D79</item>\n\n    </style>\n\n \n\n    <style name=\"MyTextViewStyle\" parent=\"android:TextAppearance.Holo.Widget.TextView\">\n\n        <item name=\"android:textSize\">18sp</item>\n\n        <item name=\"android:paddingRight\">@dimen/margin_medium</item>\n\n        <item name=\"android:paddingLeft\">@dimen/margin_medium</item>\n\n        <item name=\"android:fontFamily\">sans-serif-light</item>\n\n    </style>\n\n \n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Base\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n \n\n    <style name=\"Widget.SampleOutput\">\n\n        <item name=\"android:padding\">@dimen/margin_medium</item>\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Log\" parent=\"Widget.SampleOutput\">\n\n        <item name=\"android:typeface\">monospace</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:padding\">@dimen/margin_medium</item>\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n \n\n        <item name=\"android:layout_margin\">16dp</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n    <style name=\"Log\" parent=\"Widget.SampleOutput\">\n\n        <item name=\"android:typeface\">monospace</item>\n\n    </style>\n\n \n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "},"ic_launcher.png":"http://developer.android.com/samples/StorageProvider/res/ic_launcher.png"},"src":{"com.example.android.common":{"activities":{"SampleActivityBase.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\npackage com.example.android.common.activities;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentActivity;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogWrapper;\n\n \n\n/**\n\n * Base launcher activity, to handle most of the common plumbing for samples.\n\n */\n\npublic class SampleActivityBase extends FragmentActivity {\n\n \n\n    public static final String TAG = \"SampleActivityBase\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n    }\n\n \n\n    @Override\n\n    protected  void onStart() {\n\n        super.onStart();\n\n        initializeLogging();\n\n    }\n\n \n\n    /** Set up targets to receive log data */\n\n    public void initializeLogging() {\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        // Wraps Android's native log framework\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        Log.setLogNode(logWrapper);\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "},"logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "}},"com.example.android.storageprovider":{"MainActivity.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.storageprovider;\n\n \n\nimport android.graphics.Color;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentTransaction;\n\nimport android.view.Menu;\n\n \n\nimport com.example.android.common.activities.SampleActivityBase;\n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogFragment;\n\nimport com.example.android.common.logger.LogWrapper;\n\nimport com.example.android.common.logger.MessageOnlyLogFilter;\n\n \n\n/**\n\n * A simple launcher activity containing a summary sample description\n\n * and a few action bar buttons.\n\n */\n\npublic class MainActivity extends SampleActivityBase {\n\n \n\n    public static final String TAG = \"MainActivity\";\n\n \n\n    public static final String FRAGTAG = \"MyCloudFragment\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_main);\n\n \n\n        if (getSupportFragmentManager().findFragmentByTag(FRAGTAG) == null ) {\n\n            FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n\n            MyCloudFragment fragment = new MyCloudFragment();\n\n            transaction.add(fragment, FRAGTAG);\n\n            transaction.commit();\n\n        }\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        getMenuInflater().inflate(R.menu.main, menu);\n\n        return true;\n\n    }\n\n \n\n    /** Create a chain of targets that will receive log data */\n\n    @Override\n\n    public void initializeLogging() {\n\n        // Wraps Android's native log framework.\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        Log.setLogNode(logWrapper);\n\n \n\n        // Filter strips out everything except the message text.\n\n        MessageOnlyLogFilter msgFilter = new MessageOnlyLogFilter();\n\n        logWrapper.setNext(msgFilter);\n\n \n\n        // On screen logging via a fragment with a TextView.\n\n        LogFragment logFragment = (LogFragment) getSupportFragmentManager()\n\n                .findFragmentById(R.id.log_fragment);\n\n        msgFilter.setNext(logFragment.getLogView());\n\n        logFragment.getLogView().setTextAppearance(this, R.style.Log);\n\n        logFragment.getLogView().setBackgroundColor(Color.WHITE);\n\n \n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  ","MyCloudFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\npackage com.example.android.storageprovider;\n\n \n\n \n\nimport android.content.SharedPreferences;\n\nimport android.os.Bundle;\n\nimport android.provider.DocumentsContract;\n\nimport android.support.v4.app.Fragment;\n\nimport android.view.Menu;\n\nimport android.view.MenuItem;\n\n \n\nimport com.example.android.common.logger.Log;\n\n \n\n/**\n\n * Toggles the user's login status via a login menu option, and enables/disables the cloud storage\n\n * content provider.\n\n */\n\npublic class MyCloudFragment extends Fragment {\n\n \n\n    private static final String TAG = \"MyCloudFragment\";\n\n    private static final String AUTHORITY = \"com.example.android.storageprovider.documents\";\n\n    private boolean mLoggedIn = false;\n\n \n\n    @Override\n\n    public void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        mLoggedIn = readLoginValue();\n\n \n\n        setHasOptionsMenu(true);\n\n    }\n\n \n\n    @Override\n\n    public void onPrepareOptionsMenu(Menu menu) {\n\n        super.onPrepareOptionsMenu(menu);\n\n        MenuItem item = menu.findItem(R.id.sample_action);\n\n        item.setTitle(mLoggedIn ? R.string.log_out : R.string.log_in);\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        if (item.getItemId() == R.id.sample_action) {\n\n            toggleLogin();\n\n            item.setTitle(mLoggedIn ? R.string.log_out : R.string.log_in);\n\n \n\n            // Notify the system that the status of our roots has changed.  This will trigger\n\n            // a call to MyCloudProvider.queryRoots() and force a refresh of the system\n\n            // picker UI.  It's important to call this or stale results may persist.\n\n            getActivity().getContentResolver().notifyChange(DocumentsContract.buildRootsUri\n\n                    (AUTHORITY), null, false);\n\n        }\n\n        return true;\n\n    }\n\n \n\n    /**\n\n     * Dummy function to change the user's authorization status.\n\n     */\n\n    private void toggleLogin() {\n\n        // Replace this with your standard method of authentication to determine if your app\n\n        // should make the user's documents available.\n\n        mLoggedIn = !mLoggedIn;\n\n        writeLoginValue(mLoggedIn);\n\n        Log.i(TAG, getString(mLoggedIn ? R.string.logged_in_info : R.string.logged_out_info));\n\n    }\n\n \n\n    /**\n\n     * Dummy function to save whether the user is logged in.\n\n     */\n\n    private void writeLoginValue(boolean loggedIn) {\n\n        final SharedPreferences sharedPreferences =\n\n                getActivity().getSharedPreferences(getString(R.string.app_name),\n\n                        getActivity().MODE_PRIVATE);\n\n        sharedPreferences.edit().putBoolean(getString(R.string.key_logged_in), loggedIn).commit();\n\n    }\n\n \n\n    /**\n\n     * Dummy function to determine whether the user is logged in.\n\n     */\n\n    private boolean readLoginValue() {\n\n        final SharedPreferences sharedPreferences =\n\n                getActivity().getSharedPreferences(getString(R.string.app_name),\n\n                        getActivity().MODE_PRIVATE);\n\n        return sharedPreferences.getBoolean(getString(R.string.key_logged_in), false);\n\n    }\n\n \n\n}\n\n \n\n \n  ","MyCloudProvider.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\n \n\npackage com.example.android.storageprovider;\n\n \n\nimport android.content.Context;\n\nimport android.content.SharedPreferences;\n\nimport android.content.res.AssetFileDescriptor;\n\nimport android.content.res.TypedArray;\n\nimport android.database.Cursor;\n\nimport android.database.MatrixCursor;\n\nimport android.graphics.Point;\n\nimport android.os.CancellationSignal;\n\nimport android.os.Handler;\n\nimport android.os.ParcelFileDescriptor;\n\nimport android.provider.DocumentsContract.Document;\n\nimport android.provider.DocumentsContract.Root;\n\nimport android.provider.DocumentsProvider;\n\nimport android.webkit.MimeTypeMap;\n\n \n\nimport com.example.android.common.logger.Log;\n\n \n\nimport java.io.ByteArrayOutputStream;\n\nimport java.io.File;\n\nimport java.io.FileNotFoundException;\n\nimport java.io.FileOutputStream;\n\nimport java.io.IOException;\n\nimport java.io.InputStream;\n\nimport java.util.Collections;\n\nimport java.util.Comparator;\n\nimport java.util.HashSet;\n\nimport java.util.LinkedList;\n\nimport java.util.PriorityQueue;\n\nimport java.util.Set;\n\n \n\n/**\n\n * Manages documents and exposes them to the Android system for sharing.\n\n */\n\npublic class MyCloudProvider extends DocumentsProvider {\n\n    private static final String TAG = MyCloudProvider.class.getSimpleName();\n\n \n\n    // Use these as the default columns to return information about a root if no specific\n\n    // columns are requested in a query.\n\n    private static final String[] DEFAULT_ROOT_PROJECTION = new String[]{\n\n            Root.COLUMN_ROOT_ID,\n\n            Root.COLUMN_MIME_TYPES,\n\n            Root.COLUMN_FLAGS,\n\n            Root.COLUMN_ICON,\n\n            Root.COLUMN_TITLE,\n\n            Root.COLUMN_SUMMARY,\n\n            Root.COLUMN_DOCUMENT_ID,\n\n            Root.COLUMN_AVAILABLE_BYTES\n\n    };\n\n \n\n    // Use these as the default columns to return information about a document if no specific\n\n    // columns are requested in a query.\n\n    private static final String[] DEFAULT_DOCUMENT_PROJECTION = new String[]{\n\n            Document.COLUMN_DOCUMENT_ID,\n\n            Document.COLUMN_MIME_TYPE,\n\n            Document.COLUMN_DISPLAY_NAME,\n\n            Document.COLUMN_LAST_MODIFIED,\n\n            Document.COLUMN_FLAGS,\n\n            Document.COLUMN_SIZE\n\n    };\n\n \n\n    // No official policy on how many to return, but make sure you do limit the number of recent\n\n    // and search results.\n\n    private static final int MAX_SEARCH_RESULTS = 20;\n\n    private static final int MAX_LAST_MODIFIED = 5;\n\n \n\n    private static final String ROOT = \"root\";\n\n \n\n    // A file object at the root of the file hierarchy.  Depending on your implementation, the root\n\n    // does not need to be an existing file system directory.  For example, a tag-based document\n\n    // provider might return a directory containing all tags, represented as child directories.\n\n    private File mBaseDir;\n\n \n\n    @Override\n\n    public boolean onCreate() {\n\n        Log.v(TAG, \"onCreate\");\n\n \n\n        mBaseDir = getContext().getFilesDir();\n\n \n\n        writeDummyFilesToStorage();\n\n \n\n        return true;\n\n    }\n\n \n\n    @Override\n\n    public Cursor queryRoots(String[] projection) throws FileNotFoundException {\n\n        Log.v(TAG, \"queryRoots\");\n\n \n\n        // Create a cursor with either the requested fields, or the default projection.  This\n\n        // cursor is returned to the Android system picker UI and used to display all roots from\n\n        // this provider.\n\n        final MatrixCursor result = new MatrixCursor(resolveRootProjection(projection));\n\n \n\n        // If user is not logged in, return an empty root cursor.  This removes our provider from\n\n        // the list entirely.\n\n        if (!isUserLoggedIn()) {\n\n            return result;\n\n        }\n\n \n\n        // It's possible to have multiple roots (e.g. for multiple accounts in the same app) -\n\n        // just add multiple cursor rows.\n\n        // Construct one row for a root called \"MyCloud\".\n\n        final MatrixCursor.RowBuilder row = result.newRow();\n\n \n\n        row.add(Root.COLUMN_ROOT_ID, ROOT);\n\n        row.add(Root.COLUMN_SUMMARY, getContext().getString(R.string.root_summary));\n\n \n\n        // FLAG_SUPPORTS_CREATE means at least one directory under the root supports creating\n\n        // documents.  FLAG_SUPPORTS_RECENTS means your application's most recently used\n\n        // documents will show up in the \"Recents\" category.  FLAG_SUPPORTS_SEARCH allows users\n\n        // to search all documents the application shares.\n\n        row.add(Root.COLUMN_FLAGS, Root.FLAG_SUPPORTS_CREATE |\n\n                Root.FLAG_SUPPORTS_RECENTS |\n\n                Root.FLAG_SUPPORTS_SEARCH);\n\n \n\n        // COLUMN_TITLE is the root title (e.g. what will be displayed to identify your provider).\n\n        row.add(Root.COLUMN_TITLE, getContext().getString(R.string.app_name));\n\n \n\n        // This document id must be unique within this provider and consistent across time.  The\n\n        // system picker UI may save it and refer to it later.\n\n        row.add(Root.COLUMN_DOCUMENT_ID, getDocIdForFile(mBaseDir));\n\n \n\n        // The child MIME types are used to filter the roots and only present to the user roots\n\n        // that contain the desired type somewhere in their file hierarchy.\n\n        row.add(Root.COLUMN_MIME_TYPES, getChildMimeTypes(mBaseDir));\n\n        row.add(Root.COLUMN_AVAILABLE_BYTES, mBaseDir.getFreeSpace());\n\n        row.add(Root.COLUMN_ICON, R.drawable.ic_launcher);\n\n \n\n        return result;\n\n    }\n\n \n\n    @Override\n\n    public Cursor queryRecentDocuments(String rootId, String[] projection)\n\n            throws FileNotFoundException {\n\n        Log.v(TAG, \"queryRecentDocuments\");\n\n \n\n        // This example implementation walks a local file structure to find the most recently\n\n        // modified files.  Other implementations might include making a network call to query a\n\n        // server.\n\n \n\n        // Create a cursor with the requested projection, or the default projection.\n\n        final MatrixCursor result = new MatrixCursor(resolveDocumentProjection(projection));\n\n \n\n        final File parent = getFileForDocId(rootId);\n\n \n\n        // Create a queue to store the most recent documents, which orders by last modified.\n\n        PriorityQueue<File> lastModifiedFiles = new PriorityQueue<File>(5, new Comparator<File>() {\n\n            public int compare(File i, File j) {\n\n                return Long.compare(i.lastModified(), j.lastModified());\n\n            }\n\n        });\n\n \n\n        // Iterate through all files and directories in the file structure under the root.  If\n\n        // the file is more recent than the least recently modified, add it to the queue,\n\n        // limiting the number of results.\n\n        final LinkedList<File> pending = new LinkedList<File>();\n\n \n\n        // Start by adding the parent to the list of files to be processed\n\n        pending.add(parent);\n\n \n\n        // Do while we still have unexamined files\n\n        while (!pending.isEmpty()) {\n\n            // Take a file from the list of unprocessed files\n\n            final File file = pending.removeFirst();\n\n            if (file.isDirectory()) {\n\n                // If it's a directory, add all its children to the unprocessed list\n\n                Collections.addAll(pending, file.listFiles());\n\n            } else {\n\n                // If it's a file, add it to the ordered queue.\n\n                lastModifiedFiles.add(file);\n\n            }\n\n        }\n\n \n\n        // Add the most recent files to the cursor, not exceeding the max number of results.\n\n        for (int i = 0; i < Math.min(MAX_LAST_MODIFIED + 1, lastModifiedFiles.size()); i++) {\n\n            final File file = lastModifiedFiles.remove();\n\n            includeFile(result, null, file);\n\n        }\n\n        return result;\n\n    }\n\n \n\n    @Override\n\n    public Cursor querySearchDocuments(String rootId, String query, String[] projection)\n\n            throws FileNotFoundException {\n\n        Log.v(TAG, \"querySearchDocuments\");\n\n \n\n        // Create a cursor with the requested projection, or the default projection.\n\n        final MatrixCursor result = new MatrixCursor(resolveDocumentProjection(projection));\n\n        final File parent = getFileForDocId(rootId);\n\n \n\n        // This example implementation searches file names for the query and doesn't rank search\n\n        // results, so we can stop as soon as we find a sufficient number of matches.  Other\n\n        // implementations might use other data about files, rather than the file name, to\n\n        // produce a match; it might also require a network call to query a remote server.\n\n \n\n        // Iterate through all files in the file structure under the root until we reach the\n\n        // desired number of matches.\n\n        final LinkedList<File> pending = new LinkedList<File>();\n\n \n\n        // Start by adding the parent to the list of files to be processed\n\n        pending.add(parent);\n\n \n\n        // Do while we still have unexamined files, and fewer than the max search results\n\n        while (!pending.isEmpty() && result.getCount() < MAX_SEARCH_RESULTS) {\n\n            // Take a file from the list of unprocessed files\n\n            final File file = pending.removeFirst();\n\n            if (file.isDirectory()) {\n\n                // If it's a directory, add all its children to the unprocessed list\n\n                Collections.addAll(pending, file.listFiles());\n\n            } else {\n\n                // If it's a file and it matches, add it to the result cursor.\n\n                if (file.getName().toLowerCase().contains(query)) {\n\n                    includeFile(result, null, file);\n\n                }\n\n            }\n\n        }\n\n        return result;\n\n    }\n\n \n\n    @Override\n\n    public AssetFileDescriptor openDocumentThumbnail(String documentId, Point sizeHint,\n\n                                                     CancellationSignal signal)\n\n            throws FileNotFoundException {\n\n        Log.v(TAG, \"openDocumentThumbnail\");\n\n \n\n        final File file = getFileForDocId(documentId);\n\n        final ParcelFileDescriptor pfd =\n\n                ParcelFileDescriptor.open(file, ParcelFileDescriptor.MODE_READ_ONLY);\n\n        return new AssetFileDescriptor(pfd, 0, AssetFileDescriptor.UNKNOWN_LENGTH);\n\n    }\n\n \n\n    @Override\n\n    public Cursor queryDocument(String documentId, String[] projection)\n\n            throws FileNotFoundException {\n\n        Log.v(TAG, \"queryDocument\");\n\n \n\n        // Create a cursor with the requested projection, or the default projection.\n\n        final MatrixCursor result = new MatrixCursor(resolveDocumentProjection(projection));\n\n        includeFile(result, documentId, null);\n\n        return result;\n\n    }\n\n \n\n    @Override\n\n    public Cursor queryChildDocuments(String parentDocumentId, String[] projection,\n\n                                      String sortOrder) throws FileNotFoundException {\n\n        Log.v(TAG, \"queryChildDocuments, parentDocumentId: \" +\n\n                parentDocumentId +\n\n                \" sortOrder: \" +\n\n                sortOrder);\n\n \n\n        final MatrixCursor result = new MatrixCursor(resolveDocumentProjection(projection));\n\n        final File parent = getFileForDocId(parentDocumentId);\n\n        for (File file : parent.listFiles()) {\n\n            includeFile(result, null, file);\n\n        }\n\n        return result;\n\n    }\n\n \n\n \n\n    @Override\n\n    public ParcelFileDescriptor openDocument(final String documentId, final String mode,\n\n                                             CancellationSignal signal)\n\n            throws FileNotFoundException {\n\n        Log.v(TAG, \"openDocument, mode: \" + mode);\n\n        // It's OK to do network operations in this method to download the document, as long as you\n\n        // periodically check the CancellationSignal.  If you have an extremely large file to\n\n        // transfer from the network, a better solution may be pipes or sockets\n\n        // (see ParcelFileDescriptor for helper methods).\n\n \n\n        final File file = getFileForDocId(documentId);\n\n        final int accessMode = ParcelFileDescriptor.parseMode(mode);\n\n \n\n        final boolean isWrite = (mode.indexOf('w') != -1);\n\n        if (isWrite) {\n\n            // Attach a close listener if the document is opened in write mode.\n\n            try {\n\n                Handler handler = new Handler(getContext().getMainLooper());\n\n                return ParcelFileDescriptor.open(file, accessMode, handler,\n\n                        new ParcelFileDescriptor.OnCloseListener() {\n\n                    @Override\n\n                    public void onClose(IOException e) {\n\n \n\n                        // Update the file with the cloud server.  The client is done writing.\n\n                        Log.i(TAG, \"A file with id \" + documentId + \" has been closed!  Time to \" +\n\n                                \"update the server.\");\n\n                    }\n\n \n\n                });\n\n            } catch (IOException e) {\n\n                throw new FileNotFoundException(\"Failed to open document with id \" + documentId +\n\n                        \" and mode \" + mode);\n\n            }\n\n        } else {\n\n            return ParcelFileDescriptor.open(file, accessMode);\n\n        }\n\n    }\n\n \n\n \n\n    @Override\n\n    public String createDocument(String documentId, String mimeType, String displayName)\n\n            throws FileNotFoundException {\n\n        Log.v(TAG, \"createDocument\");\n\n \n\n        File parent = getFileForDocId(documentId);\n\n        File file = new File(parent.getPath(), displayName);\n\n        try {\n\n            file.createNewFile();\n\n            file.setWritable(true);\n\n            file.setReadable(true);\n\n        } catch (IOException e) {\n\n            throw new FileNotFoundException(\"Failed to create document with name \" +\n\n                    displayName +\" and documentId \" + documentId);\n\n        }\n\n        return getDocIdForFile(file);\n\n    }\n\n \n\n    @Override\n\n    public void deleteDocument(String documentId) throws FileNotFoundException {\n\n        Log.v(TAG, \"deleteDocument\");\n\n        File file = getFileForDocId(documentId);\n\n        if (file.delete()) {\n\n            Log.i(TAG, \"Deleted file with id \" + documentId);\n\n        } else {\n\n            throw new FileNotFoundException(\"Failed to delete document with id \" + documentId);\n\n        }\n\n    }\n\n \n\n \n\n    @Override\n\n    public String getDocumentType(String documentId) throws FileNotFoundException {\n\n        File file = getFileForDocId(documentId);\n\n        return getTypeForFile(file);\n\n    }\n\n \n\n    /**\n\n     * @param projection the requested root column projection\n\n     * @return either the requested root column projection, or the default projection if the\n\n     * requested projection is null.\n\n     */\n\n    private static String[] resolveRootProjection(String[] projection) {\n\n        return projection != null ? projection : DEFAULT_ROOT_PROJECTION;\n\n    }\n\n \n\n    private static String[] resolveDocumentProjection(String[] projection) {\n\n        return projection != null ? projection : DEFAULT_DOCUMENT_PROJECTION;\n\n    }\n\n \n\n    /**\n\n     * Get a file's MIME type\n\n     *\n\n     * @param file the File object whose type we want\n\n     * @return the MIME type of the file\n\n     */\n\n    private static String getTypeForFile(File file) {\n\n        if (file.isDirectory()) {\n\n            return Document.MIME_TYPE_DIR;\n\n        } else {\n\n            return getTypeForName(file.getName());\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Get the MIME data type of a document, given its filename.\n\n     *\n\n     * @param name the filename of the document\n\n     * @return the MIME data type of a document\n\n     */\n\n    private static String getTypeForName(String name) {\n\n        final int lastDot = name.lastIndexOf('.');\n\n        if (lastDot >= 0) {\n\n            final String extension = name.substring(lastDot + 1);\n\n            final String mime = MimeTypeMap.getSingleton().getMimeTypeFromExtension(extension);\n\n            if (mime != null) {\n\n                return mime;\n\n            }\n\n        }\n\n        return \"application/octet-stream\";\n\n    }\n\n \n\n    /**\n\n     * Gets a string of unique MIME data types a directory supports, separated by newlines.  This\n\n     * should not change.\n\n     *\n\n     * @param parent the File for the parent directory\n\n     * @return a string of the unique MIME data types the parent directory supports\n\n     */\n\n    private String getChildMimeTypes(File parent) {\n\n        Set<String> mimeTypes = new HashSet<String>();\n\n        mimeTypes.add(\"image/*\");\n\n        mimeTypes.add(\"text/*\");\n\n        mimeTypes.add(\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\");\n\n \n\n        // Flatten the list into a string and insert newlines between the MIME type strings.\n\n        StringBuilder mimeTypesString = new StringBuilder();\n\n        for (String mimeType : mimeTypes) {\n\n            mimeTypesString.append(mimeType).append(\"\\n\");\n\n        }\n\n \n\n        return mimeTypesString.toString();\n\n    }\n\n \n\n    /**\n\n     * Get the document ID given a File.  The document id must be consistent across time.  Other\n\n     * applications may save the ID and use it to reference documents later.\n\n     * <p/>\n\n     * This implementation is specific to this demo.  It assumes only one root and is built\n\n     * directly from the file structure.  However, it is possible for a document to be a child of\n\n     * multiple directories (for example \"android\" and \"images\"), in which case the file must have\n\n     * the same consistent, unique document ID in both cases.\n\n     *\n\n     * @param file the File whose document ID you want\n\n     * @return the corresponding document ID\n\n     */\n\n    private String getDocIdForFile(File file) {\n\n        String path = file.getAbsolutePath();\n\n \n\n        // Start at first char of path under root\n\n        final String rootPath = mBaseDir.getPath();\n\n        if (rootPath.equals(path)) {\n\n            path = \"\";\n\n        } else if (rootPath.endsWith(\"/\")) {\n\n            path = path.substring(rootPath.length());\n\n        } else {\n\n            path = path.substring(rootPath.length() + 1);\n\n        }\n\n \n\n        return \"root\" + ':' + path;\n\n    }\n\n \n\n    /**\n\n     * Add a representation of a file to a cursor.\n\n     *\n\n     * @param result the cursor to modify\n\n     * @param docId  the document ID representing the desired file (may be null if given file)\n\n     * @param file   the File object representing the desired file (may be null if given docID)\n\n     * @throws java.io.FileNotFoundException\n\n     */\n\n    private void includeFile(MatrixCursor result, String docId, File file)\n\n            throws FileNotFoundException {\n\n        if (docId == null) {\n\n            docId = getDocIdForFile(file);\n\n        } else {\n\n            file = getFileForDocId(docId);\n\n        }\n\n \n\n        int flags = 0;\n\n \n\n        if (file.isDirectory()) {\n\n            // Request the folder to lay out as a grid rather than a list. This also allows a larger\n\n            // thumbnail to be displayed for each image.\n\n            //            flags |= Document.FLAG_DIR_PREFERS_GRID;\n\n \n\n            // Add FLAG_DIR_SUPPORTS_CREATE if the file is a writable directory.\n\n            if (file.isDirectory() && file.canWrite()) {\n\n                flags |= Document.FLAG_DIR_SUPPORTS_CREATE;\n\n            }\n\n        } else if (file.canWrite()) {\n\n            // If the file is writable set FLAG_SUPPORTS_WRITE and\n\n            // FLAG_SUPPORTS_DELETE\n\n            flags |= Document.FLAG_SUPPORTS_WRITE;\n\n            flags |= Document.FLAG_SUPPORTS_DELETE;\n\n        }\n\n \n\n        final String displayName = file.getName();\n\n        final String mimeType = getTypeForFile(file);\n\n \n\n        if (mimeType.startsWith(\"image/\")) {\n\n            // Allow the image to be represented by a thumbnail rather than an icon\n\n            flags |= Document.FLAG_SUPPORTS_THUMBNAIL;\n\n        }\n\n \n\n        final MatrixCursor.RowBuilder row = result.newRow();\n\n        row.add(Document.COLUMN_DOCUMENT_ID, docId);\n\n        row.add(Document.COLUMN_DISPLAY_NAME, displayName);\n\n        row.add(Document.COLUMN_SIZE, file.length());\n\n        row.add(Document.COLUMN_MIME_TYPE, mimeType);\n\n        row.add(Document.COLUMN_LAST_MODIFIED, file.lastModified());\n\n        row.add(Document.COLUMN_FLAGS, flags);\n\n \n\n        // Add a custom icon\n\n        row.add(Document.COLUMN_ICON, R.drawable.ic_launcher);\n\n    }\n\n \n\n    /**\n\n     * Translate your custom URI scheme into a File object.\n\n     *\n\n     * @param docId the document ID representing the desired file\n\n     * @return a File represented by the given document ID\n\n     * @throws java.io.FileNotFoundException\n\n     */\n\n    private File getFileForDocId(String docId) throws FileNotFoundException {\n\n        File target = mBaseDir;\n\n        if (docId.equals(ROOT)) {\n\n            return target;\n\n        }\n\n        final int splitIndex = docId.indexOf(':', 1);\n\n        if (splitIndex < 0) {\n\n            throw new FileNotFoundException(\"Missing root for \" + docId);\n\n        } else {\n\n            final String path = docId.substring(splitIndex + 1);\n\n            target = new File(target, path);\n\n            if (!target.exists()) {\n\n                throw new FileNotFoundException(\"Missing file for \" + docId + \" at \" + target);\n\n            }\n\n            return target;\n\n        }\n\n    }\n\n \n\n \n\n    /**\n\n     * Preload sample files packaged in the apk into the internal storage directory.  This is a\n\n     * dummy function specific to this demo.  The MyCloud mock cloud service doesn't actually\n\n     * have a backend, so it simulates by reading content from the device's internal storage.\n\n     */\n\n    private void writeDummyFilesToStorage() {\n\n        if (mBaseDir.list().length > 0) {\n\n            return;\n\n        }\n\n \n\n        int[] imageResIds = getResourceIdArray(R.array.image_res_ids);\n\n        for (int resId : imageResIds) {\n\n            writeFileToInternalStorage(resId, \".jpeg\");\n\n        }\n\n \n\n        int[] textResIds = getResourceIdArray(R.array.text_res_ids);\n\n        for (int resId : textResIds) {\n\n            writeFileToInternalStorage(resId, \".txt\");\n\n        }\n\n \n\n        int[] docxResIds = getResourceIdArray(R.array.docx_res_ids);\n\n        for (int resId : docxResIds) {\n\n            writeFileToInternalStorage(resId, \".docx\");\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Write a file to internal storage.  Used to set up our dummy \"cloud server\".\n\n     *\n\n     * @param resId     the resource ID of the file to write to internal storage\n\n     * @param extension the file extension (ex. .png, .mp3)\n\n     */\n\n    private void writeFileToInternalStorage(int resId, String extension) {\n\n        InputStream ins = getContext().getResources().openRawResource(resId);\n\n        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n\n        int size;\n\n        byte[] buffer = new byte[1024];\n\n        try {\n\n            while ((size = ins.read(buffer, 0, 1024)) >= 0) {\n\n                outputStream.write(buffer, 0, size);\n\n            }\n\n            ins.close();\n\n            buffer = outputStream.toByteArray();\n\n            String filename = getContext().getResources().getResourceEntryName(resId) + extension;\n\n            FileOutputStream fos = getContext().openFileOutput(filename, Context.MODE_PRIVATE);\n\n            fos.write(buffer);\n\n            fos.close();\n\n \n\n        } catch (IOException e) {\n\n            e.printStackTrace();\n\n        }\n\n    }\n\n \n\n    private int[] getResourceIdArray(int arrayResId) {\n\n        TypedArray ar = getContext().getResources().obtainTypedArray(arrayResId);\n\n        int len = ar.length();\n\n        int[] resIds = new int[len];\n\n        for (int i = 0; i < len; i++) {\n\n            resIds[i] = ar.getResourceId(i, 0);\n\n        }\n\n        ar.recycle();\n\n        return resIds;\n\n    }\n\n \n\n    /**\n\n     * Dummy function to determine whether the user is logged in.\n\n     */\n\n    private boolean isUserLoggedIn() {\n\n        final SharedPreferences sharedPreferences =\n\n                getContext().getSharedPreferences(getContext().getString(R.string.app_name),\n\n                        Context.MODE_PRIVATE);\n\n        return sharedPreferences.getBoolean(getContext().getString(R.string.key_logged_in), false);\n\n    }\n\n \n\n \n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n          package=\"com.example.android.storageprovider\"\n\n          android:versionCode=\"1\"\n\n          android:versionName=\"1.0\">\n\n \n\n    <uses-sdk\n\n        android:minSdkVersion=\"19\"\n\n        android:targetSdkVersion=\"19\"/>\n\n \n\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\n\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>\n\n \n\n    <application\n\n        android:allowBackup=\"true\"\n\n        android:label=\"@string/app_name\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:theme=\"@style/MyAppTheme\">\n\n \n\n        <activity\n\n            android:name=\".MainActivity\"\n\n            android:uiOptions=\"splitActionBarWhenNarrow\"\n\n            android:label=\"@string/app_name\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\"/>\n\n                <category android:name=\"android.intent.category.LAUNCHER\"/>\n\n            </intent-filter>\n\n        </activity>\n\n \n\n        <!--\n\n        Declare the document provider class MyCloudProvider to the system.  The MANAGE_DOCUMENTS\n\n        permission belongs only to the Android system, ensuring this provider will never be used\n\n        directly by another app.  The provider must grant URI permissions in order to expose the\n\n        specific documents(s) chosen, while not sharing all of its data by default.  It must be\n\n        exported to be visible outside the application, and it must include a filter with the intent\n\n        \"android.content.action.DOCUMENTS_PROVIDER\" in order to be shown in the system document\n\n        picker UI.\n\n        -->\n\n        <provider\n\n            android:name=\"com.example.android.storageprovider.MyCloudProvider\"\n\n            android:authorities=\"com.example.android.storageprovider.documents\"\n\n            android:grantUriPermissions=\"true\"\n\n            android:exported=\"true\"\n\n            android:permission=\"android.permission.MANAGE_DOCUMENTS\">\n\n            <intent-filter>\n\n                <action android:name=\"android.content.action.DOCUMENTS_PROVIDER\"/>\n\n            </intent-filter>\n\n        </provider>\n\n \n\n    </application>\n\n \n\n</manifest>\n  "}},"Input":{"BasicGestureDetect":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicGestureDetect/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com/samples/BasicGestureDetect/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicGestureDetect/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicGestureDetect/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicGestureDetect/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n        android:orientation=\"vertical\"\n\n        android:layout_width=\"fill_parent\"\n\n        android:layout_height=\"fill_parent\"\n\n        android:id=\"@+id/sample_main_layout\">\n\n    <TextView android:id=\"@+id/sample_output\"\n\n              style=\"@style/Widget.SampleMessage\"\n\n              android:layout_weight=\"1\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\"\n\n              android:text=\"@string/intro_message\"\n\n              android:padding=\"16dp\" />\n\n    <View\n\n            android:layout_width=\"fill_parent\"\n\n            android:layout_height=\"1dp\"\n\n            android:background=\"@android:color/darker_gray\"/>\n\n    <fragment\n\n            android:name=\"com.example.android.common.logger.LogFragment\"\n\n            android:id=\"@+id/log_fragment\"\n\n            android:layout_weight=\"1\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"match_parent\" />\n\n</LinearLayout>\n  "},"layout-sw600dp":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:orientation=\"vertical\"\n\n    android:layout_width=\"fill_parent\"\n\n    android:layout_height=\"fill_parent\"\n\n    android:id=\"@+id/sample_main_layout\" >\n\n \n\n    <TextView android:id=\"@+id/sample_output\"\n\n        style=\"@style/Widget.SampleMessage\"\n\n        android:background=\"@android:color/white\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:text=\"@string/intro_message\"\n\n        android:padding=\"16dp\"\n\n        android:layout_margin=\"16dp\"/>\n\n    <fragment\n\n        android:name=\"com.example.android.common.logger.LogFragment\"\n\n        android:id=\"@+id/log_fragment\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"match_parent\"\n\n        android:layout_margin=\"16dp\" />\n\n</LinearLayout>\n  "},"layout-sw600dp-land":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n        android:orientation=\"horizontal\"\n\n        android:layout_width=\"fill_parent\"\n\n        android:layout_height=\"fill_parent\"\n\n        android:id=\"@+id/sample_main_layout\">\n\n    <TextView android:id=\"@+id/sample_output\"\n\n              style=\"@style/Widget.SampleMessage\"\n\n              android:background=\"@android:color/white\"\n\n              android:layout_weight=\"1\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\"\n\n              android:text=\"@string/intro_message\"\n\n              android:layout_margin=\"16dp\" />\n\n    <fragment\n\n            android:name=\"com.example.android.common.logger.LogFragment\"\n\n            android:id=\"@+id/log_fragment\"\n\n            android:layout_weight=\"1\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"match_parent\"\n\n            android:layout_margin=\"16dp\" />\n\n</LinearLayout>\n  "},"menu":{"main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:id=\"@+id/sample_action\"\n\n          android:showAsAction=\"ifRoom|withText\"\n\n          android:title=\"@string/sample_action\" />\n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">BasicGestureDetect</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            Welcome to Basic Gesture Detect!\n\n            In order to try this sample out, try dragging or tapping this text to see what happens!\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n        <string name=\"sample_action\">Clear Text</string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Base\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n \n\n    <style name=\"Widget.SampleOutput\">\n\n        <item name=\"android:padding\">@dimen/margin_medium</item>\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Log\" parent=\"Widget.SampleOutput\">\n\n        <item name=\"android:typeface\">monospace</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:padding\">@dimen/margin_medium</item>\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n \n\n        <item name=\"android:layout_margin\">16dp</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n    <style name=\"Log\" parent=\"Widget.SampleOutput\">\n\n        <item name=\"android:typeface\">monospace</item>\n\n    </style>\n\n \n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.basicgesturedetect":{"BasicGestureDetectFragment.java":"\n    \n\n/*\n\n* Copyright (C) 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*      http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\npackage com.example.android.basicgesturedetect;\n\n \n\nimport android.content.Intent;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.view.GestureDetector;\n\nimport android.view.MenuItem;\n\nimport android.view.MotionEvent;\n\nimport android.view.View;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogFragment;\n\n \n\npublic class BasicGestureDetectFragment extends Fragment{\n\n    @Override\n\n    public void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setHasOptionsMenu(true);\n\n    }\n\n \n\n    @Override\n\n    public void onActivityCreated(Bundle savedInstanceState) {\n\n        super.onActivityCreated(savedInstanceState);\n\n        View gestureView = getActivity().findViewById(R.id.sample_output);\n\n        gestureView.setClickable(true);\n\n        gestureView.setFocusable(true);\n\n \n\n \n\n        // First create the GestureListener that will include all our callbacks.\n\n        // Then create the GestureDetector, which takes that listener as an argument.\n\n        GestureDetector.SimpleOnGestureListener gestureListener = new GestureListener();\n\n        final GestureDetector gd = new GestureDetector(getActivity(), gestureListener);\n\n \n\n        /* For the view where gestures will occur, create an onTouchListener that sends\n\n         * all motion events to the gesture detector.  When the gesture detector\n\n         * actually detects an event, it will use the callbacks you created in the\n\n         * SimpleOnGestureListener to alert your application.\n\n        */\n\n \n\n        gestureView.setOnTouchListener(new View.OnTouchListener() {\n\n            @Override\n\n            public boolean onTouch(View view, MotionEvent motionEvent) {\n\n                gd.onTouchEvent(motionEvent);\n\n                return false;\n\n            }\n\n        });\n\n    }\n\n \n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        if (item.getItemId() == R.id.sample_action) {\n\n            clearLog();\n\n        }\n\n        return true;\n\n    }\n\n \n\n    public void clearLog() {\n\n        LogFragment logFragment =  ((LogFragment) getActivity().getSupportFragmentManager()\n\n                .findFragmentById(R.id.log_fragment));\n\n        logFragment.getLogView().setText(\"\");\n\n    }\n\n}\n  ","GestureListener.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.basicgesturedetect;\n\n \n\nimport android.view.GestureDetector;\n\nimport android.view.MotionEvent;\n\n \n\nimport com.example.android.common.logger.Log;\n\n \n\npublic class GestureListener extends GestureDetector.SimpleOnGestureListener {\n\n \n\n    public static final String TAG = \"GestureListener\";\n\n \n\n    @Override\n\n    public boolean onSingleTapUp(MotionEvent e) {\n\n        // Up motion completing a single tap occurred.\n\n        Log.i(TAG, \"Single Tap Up\");\n\n        return false;\n\n    }\n\n \n\n    @Override\n\n    public void onLongPress(MotionEvent e) {\n\n        // Touch has been long enough to indicate a long press.\n\n        // Does not indicate motion is complete yet (no up event necessarily)\n\n        Log.i(TAG, \"Long Press\");\n\n    }\n\n \n\n    @Override\n\n    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX,\n\n    float distanceY) {\n\n        // User attempted to scroll\n\n        Log.i(TAG, \"Scroll\");\n\n        return false;\n\n    }\n\n \n\n    @Override\n\n    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX,\n\n    float velocityY) {\n\n        // Fling event occurred.  Notification of this one happens after an \"up\" event.\n\n        Log.i(TAG, \"Fling\");\n\n        return false;\n\n    }\n\n \n\n    @Override\n\n    public void onShowPress(MotionEvent e) {\n\n        // User performed a down event, and hasn't moved yet.\n\n        Log.i(TAG, \"Show Press\");\n\n    }\n\n \n\n    @Override\n\n    public boolean onDown(MotionEvent e) {\n\n        // \"Down\" event - User touched the screen.\n\n        Log.i(TAG, \"Down\");\n\n        return false;\n\n    }\n\n \n\n    @Override\n\n    public boolean onDoubleTap(MotionEvent e) {\n\n        // User tapped the screen twice.\n\n        Log.i(TAG, \"Double tap\");\n\n        return false;\n\n    }\n\n \n\n    @Override\n\n    public boolean onDoubleTapEvent(MotionEvent e) {\n\n        // Since double-tap is actually several events which are considered one aggregate\n\n        // gesture, there's a separate callback for an individual event within the doubletap\n\n        // occurring.  This occurs for down, up, and move.\n\n        Log.i(TAG, \"Event within double tap\");\n\n        return false;\n\n    }\n\n \n\n    @Override\n\n    public boolean onSingleTapConfirmed(MotionEvent e) {\n\n        // A confirmed single-tap event has occurred.  Only called when the detector has\n\n        // determined that the first tap stands alone, and is not part of a double tap.\n\n        Log.i(TAG, \"Single tap confirmed\");\n\n        return false;\n\n    }\n\n}\n  ","MainActivity.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.basicgesturedetect;\n\n \n\nimport android.graphics.Color;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentTransaction;\n\nimport android.view.Menu;\n\n \n\nimport com.example.android.common.activities.SampleActivityBase;\n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogFragment;\n\nimport com.example.android.common.logger.LogWrapper;\n\nimport com.example.android.common.logger.MessageOnlyLogFilter;\n\n \n\n/**\n\n * A simple launcher activity containing a summary sample description\n\n * and a few action bar buttons.\n\n */\n\npublic class MainActivity extends SampleActivityBase {\n\n \n\n    public static final String TAG = \"MainActivity\";\n\n \n\n    public static final String FRAGTAG = \"BasicGestureDetectFragment\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_main);\n\n \n\n        if (getSupportFragmentManager().findFragmentByTag(FRAGTAG) == null ) {\n\n            FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n\n            BasicGestureDetectFragment fragment = new BasicGestureDetectFragment();\n\n            transaction.add(fragment, FRAGTAG);\n\n            transaction.commit();\n\n        }\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        getMenuInflater().inflate(R.menu.main, menu);\n\n        return true;\n\n    }\n\n \n\n    /** Create a chain of targets that will receive log data */\n\n    @Override\n\n    public void initializeLogging() {\n\n        // Wraps Android's native log framework.\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        Log.setLogNode(logWrapper);\n\n \n\n        // Filter strips out everything except the message text.\n\n        MessageOnlyLogFilter msgFilter = new MessageOnlyLogFilter();\n\n        logWrapper.setNext(msgFilter);\n\n \n\n        // On screen logging via a fragment with a TextView.\n\n        LogFragment logFragment = (LogFragment) getSupportFragmentManager()\n\n                .findFragmentById(R.id.log_fragment);\n\n        msgFilter.setNext(logFragment.getLogView());\n\n        logFragment.getLogView().setTextAppearance(this, R.style.Log);\n\n        logFragment.getLogView().setBackgroundColor(Color.WHITE);\n\n \n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "},"com.example.android.common":{"activities":{"SampleActivityBase.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\npackage com.example.android.common.activities;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentActivity;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogWrapper;\n\n \n\n/**\n\n * Base launcher activity, to handle most of the common plumbing for samples.\n\n */\n\npublic class SampleActivityBase extends FragmentActivity {\n\n \n\n    public static final String TAG = \"SampleActivityBase\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n    }\n\n \n\n    @Override\n\n    protected  void onStart() {\n\n        super.onStart();\n\n        initializeLogging();\n\n    }\n\n \n\n    /** Set up targets to receive log data */\n\n    public void initializeLogging() {\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        // Wraps Android's native log framework\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        Log.setLogNode(logWrapper);\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "},"logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "}}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.basicgesturedetect\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk android:minSdkVersion=\"4\" android:targetSdkVersion=\"17\" />\n\n \n\n    <application android:allowBackup=\"true\"\n\n        android:label=\"@string/app_name\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:theme=\"@style/AppTheme\">\n\n \n\n        <activity android:name=\".MainActivity\"\n\n                  android:label=\"@string/app_name\"\n\n                  android:uiOptions=\"splitActionBarWhenNarrow\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n \n\n</manifest>\n  "},"BasicMultitouch":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicMultitouch/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com/samples/BasicMultitouch/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicMultitouch/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicMultitouch/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicMultitouch/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleMessageTile\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n            android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n            android:text=\"@string/intro_message\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n  ","layout_mainactivity.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\" >\n\n \n\n    <TextView\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:layout_gravity=\"center\"\n\n        android:padding=\"75dp\"\n\n        android:text=\"@string/intro_message\" />\n\n \n\n    <com.example.android.basicmultitouch.TouchDisplayView\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\" />\n\n \n\n</FrameLayout>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">BasicMultitouch</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\nThis samples demonstrates the use of MotionEvent properties to keep track of individual touches\n\nacross multiple touch events.\n\n\\n\\nTouch the screen with multiple fingers to show that the pointer id\n\n(also represented by a colour) does not change as new touch events are received.</string>\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n</resources>\n  ","styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<resources>\n\n \n\n    <!--\n\n        Base application theme, dependent on API level. This theme is replaced\n\n        by AppBaseTheme from res/values-vXX/styles.xml on newer devices.\n\n    -->\n\n    <style name=\"AppBaseTheme\" parent=\"android:Theme.Light.NoTitleBar\">\n\n        <!--\n\n            Theme customizations available in newer API levels can go in\n\n            res/values-vXX/styles.xml, while customizations related to\n\n            backward-compatibility can go here.\n\n        -->\n\n    </style>\n\n \n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n  <resources>\n\n \n\n    <!--\n\n        Base application theme for API 11+. This theme completely replaces\n\n        AppBaseTheme from res/values/styles.xml on API 11+ devices.\n\n    -->\n\n    <style name=\"AppBaseTheme\" parent=\"android:Theme.Holo.Light\">\n\n        <!-- API 11 theme customizations can go here. -->\n\n    </style>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "},"values-v14":{"styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n  <resources>\n\n \n\n    <!--\n\n        Base application theme for API 14+. This theme completely replaces\n\n        AppBaseTheme from BOTH res/values/styles.xml and\n\n        res/values-v11/styles.xml on API 14+ devices.\n\n    -->\n\n    <style name=\"AppBaseTheme\" parent=\"android:Theme.Holo.Light.NoActionBar\">\n\n        <!-- API 14 theme customizations can go here. -->\n\n    </style>\n\n \n\n</resources>\n  "}},"src":{"com.example.android.basicmultitouch":{"MainActivity.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.basicmultitouch;\n\n \n\nimport android.app.Activity;\n\nimport android.os.Bundle;\n\n \n\n/**\n\n * This is an example of keeping track of individual touches across multiple\n\n * {@link android.view.MotionEvent}s.\n\n * <p>\n\n * This is illustrated by a View ({@link TouchDisplayView}) that responds to\n\n * touch events and draws coloured circles for each pointer, stores the last\n\n * positions of this pointer and draws them. This example shows the relationship\n\n * between MotionEvent indices, pointer identifiers and actions.\n\n *\n\n * @see android.view.MotionEvent\n\n */\n\npublic class MainActivity extends Activity {\n\n    TouchDisplayView mView;\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n \n\n        setContentView(R.layout.layout_mainactivity);\n\n    }\n\n \n\n}\n  ","Pools.java":"\n    \n\n/*\n\n * Copyright (C) 2009 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.basicmultitouch;\n\n \n\n/**\n\n * Helper class for crating pools of objects. An example use looks like this:\n\n * <pre>\n\n * public class MyPooledClass {\n\n *\n\n *     private static final SynchronizedPool<MyPooledClass> sPool =\n\n *             new SynchronizedPool<MyPooledClass>(10);\n\n *\n\n *     public static MyPooledClass obtain() {\n\n *         MyPooledClass instance = sPool.acquire();\n\n *         return (instance != null) ? instance : new MyPooledClass();\n\n *     }\n\n *\n\n *     public void recycle() {\n\n *          // Clear state if needed.\n\n *          sPool.release(this);\n\n *     }\n\n *\n\n *     . . .\n\n * }\n\n * </pre>\n\n *\n\n * @hide\n\n */\n\npublic final class Pools {\n\n \n\n    /**\n\n     * Interface for managing a pool of objects.\n\n     *\n\n     * @param <T> The pooled type.\n\n     */\n\n    public static interface Pool<T> {\n\n \n\n        /**\n\n         * @return An instance from the pool if such, null otherwise.\n\n         */\n\n        public T acquire();\n\n \n\n        /**\n\n         * Release an instance to the pool.\n\n         *\n\n         * @param instance The instance to release.\n\n         * @return Whether the instance was put in the pool.\n\n         *\n\n         * @throws IllegalStateException If the instance is already in the pool.\n\n         */\n\n        public boolean release(T instance);\n\n    }\n\n \n\n    private Pools() {\n\n        /* do nothing - hiding constructor */\n\n    }\n\n \n\n    /**\n\n     * Simple (non-synchronized) pool of objects.\n\n     *\n\n     * @param <T> The pooled type.\n\n     */\n\n    public static class SimplePool<T> implements Pool<T> {\n\n        private final Object[] mPool;\n\n \n\n        private int mPoolSize;\n\n \n\n        /**\n\n         * Creates a new instance.\n\n         *\n\n         * @param maxPoolSize The max pool size.\n\n         *\n\n         * @throws IllegalArgumentException If the max pool size is less than zero.\n\n         */\n\n        public SimplePool(int maxPoolSize) {\n\n            if (maxPoolSize <= 0) {\n\n                throw new IllegalArgumentException(\"The max pool size must be > 0\");\n\n            }\n\n            mPool = new Object[maxPoolSize];\n\n        }\n\n \n\n        @Override\n\n        @SuppressWarnings(\"unchecked\")\n\n        public T acquire() {\n\n            if (mPoolSize > 0) {\n\n                final int lastPooledIndex = mPoolSize - 1;\n\n                T instance = (T) mPool[lastPooledIndex];\n\n                mPool[lastPooledIndex] = null;\n\n                mPoolSize--;\n\n                return instance;\n\n            }\n\n            return null;\n\n        }\n\n \n\n        @Override\n\n        public boolean release(T instance) {\n\n            if (isInPool(instance)) {\n\n                throw new IllegalStateException(\"Already in the pool!\");\n\n            }\n\n            if (mPoolSize < mPool.length) {\n\n                mPool[mPoolSize] = instance;\n\n                mPoolSize++;\n\n                return true;\n\n            }\n\n            return false;\n\n        }\n\n \n\n        private boolean isInPool(T instance) {\n\n            for (int i = 0; i < mPoolSize; i++) {\n\n                if (mPool[i] == instance) {\n\n                    return true;\n\n                }\n\n            }\n\n            return false;\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Synchronized) pool of objects.\n\n     *\n\n     * @param <T> The pooled type.\n\n     */\n\n    public static class SynchronizedPool<T> extends SimplePool<T> {\n\n        private final Object mLock = new Object();\n\n \n\n        /**\n\n         * Creates a new instance.\n\n         *\n\n         * @param maxPoolSize The max pool size.\n\n         *\n\n         * @throws IllegalArgumentException If the max pool size is less than zero.\n\n         */\n\n        public SynchronizedPool(int maxPoolSize) {\n\n            super(maxPoolSize);\n\n        }\n\n \n\n        @Override\n\n        public T acquire() {\n\n            synchronized (mLock) {\n\n                return super.acquire();\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public boolean release(T element) {\n\n            synchronized (mLock) {\n\n                return super.release(element);\n\n            }\n\n        }\n\n    }\n\n}\n  ","TouchDisplayView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.basicmultitouch;\n\n \n\nimport android.content.Context;\n\nimport android.graphics.Canvas;\n\nimport android.graphics.Color;\n\nimport android.graphics.Paint;\n\nimport android.graphics.PointF;\n\nimport android.util.AttributeSet;\n\nimport android.util.SparseArray;\n\nimport android.view.MotionEvent;\n\nimport android.view.View;\n\n \n\nimport com.example.android.basicmultitouch.Pools.SimplePool;\n\n \n\n/**\n\n * View that shows touch events and their history. This view demonstrates the\n\n * use of {@link #onTouchEvent(android.view.MotionEvent)} and {@link android.view.MotionEvent}s to keep\n\n * track of touch pointers across events.\n\n */\n\npublic class TouchDisplayView extends View {\n\n \n\n    // Hold data for active touch pointer IDs\n\n    private SparseArray<TouchHistory> mTouches;\n\n \n\n    // Is there an active touch?\n\n    private boolean mHasTouch = false;\n\n \n\n    /**\n\n     * Holds data related to a touch pointer, including its current position,\n\n     * pressure and historical positions. Objects are allocated through an\n\n     * object pool using {@link #obtain()} and {@link #recycle()} to reuse\n\n     * existing objects.\n\n     */\n\n    static final class TouchHistory {\n\n \n\n        // number of historical points to store\n\n        public static final int HISTORY_COUNT = 20;\n\n \n\n        public float x;\n\n        public float y;\n\n        public float pressure = 0f;\n\n        public String label = null;\n\n \n\n        // current position in history array\n\n        public int historyIndex = 0;\n\n        public int historyCount = 0;\n\n \n\n        // arrray of pointer position history\n\n        public PointF[] history = new PointF[HISTORY_COUNT];\n\n \n\n        private static final int MAX_POOL_SIZE = 10;\n\n        private static final SimplePool<TouchHistory> sPool =\n\n                new SimplePool<TouchHistory>(MAX_POOL_SIZE);\n\n \n\n        public static TouchHistory obtain(float x, float y, float pressure) {\n\n            TouchHistory data = sPool.acquire();\n\n            if (data == null) {\n\n                data = new TouchHistory();\n\n            }\n\n \n\n            data.setTouch(x, y, pressure);\n\n \n\n            return data;\n\n        }\n\n \n\n        public TouchHistory() {\n\n \n\n            // initialise history array\n\n            for (int i = 0; i < HISTORY_COUNT; i++) {\n\n                history[i] = new PointF();\n\n            }\n\n        }\n\n \n\n        public void setTouch(float x, float y, float pressure) {\n\n            this.x = x;\n\n            this.y = y;\n\n            this.pressure = pressure;\n\n        }\n\n \n\n        public void recycle() {\n\n            this.historyIndex = 0;\n\n            this.historyCount = 0;\n\n            sPool.release(this);\n\n        }\n\n \n\n        /**\n\n         * Add a point to its history. Overwrites oldest point if the maximum\n\n         * number of historical points is already stored.\n\n         *\n\n         * @param point\n\n         */\n\n        public void addHistory(float x, float y) {\n\n            PointF p = history[historyIndex];\n\n            p.x = x;\n\n            p.y = y;\n\n \n\n            historyIndex = (historyIndex + 1) % history.length;\n\n \n\n            if (historyCount < HISTORY_COUNT) {\n\n                historyCount++;\n\n            }\n\n        }\n\n \n\n    }\n\n \n\n    public TouchDisplayView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n \n\n        // SparseArray for touch events, indexed by touch id\n\n        mTouches = new SparseArray<TouchHistory>(10);\n\n \n\n        initialisePaint();\n\n    }\n\n \n\n    @Override\n\n    public boolean onTouchEvent(MotionEvent event) {\n\n \n\n        final int action = event.getAction();\n\n \n\n        /*\n\n         * Switch on the action. The action is extracted from the event by\n\n         * applying the MotionEvent.ACTION_MASK. Alternatively a call to\n\n         * event.getActionMasked() would yield in the action as well.\n\n         */\n\n        switch (action & MotionEvent.ACTION_MASK) {\n\n \n\n            case MotionEvent.ACTION_DOWN: {\n\n                // first pressed gesture has started\n\n \n\n                /*\n\n                 * Only one touch event is stored in the MotionEvent. Extract\n\n                 * the pointer identifier of this touch from the first index\n\n                 * within the MotionEvent object.\n\n                 */\n\n                int id = event.getPointerId(0);\n\n \n\n                TouchHistory data = TouchHistory.obtain(event.getX(0), event.getY(0),\n\n                        event.getPressure(0));\n\n                data.label = \"id: \" + 0;\n\n \n\n                /*\n\n                 * Store the data under its pointer identifier. The pointer\n\n                 * number stays consistent for the duration of a gesture,\n\n                 * accounting for other pointers going up or down.\n\n                 */\n\n                mTouches.put(id, data);\n\n \n\n                mHasTouch = true;\n\n \n\n                break;\n\n            }\n\n \n\n            case MotionEvent.ACTION_POINTER_DOWN: {\n\n                /*\n\n                 * A non-primary pointer has gone down, after an event for the\n\n                 * primary pointer (ACTION_DOWN) has already been received.\n\n                 */\n\n \n\n                /*\n\n                 * The MotionEvent object contains multiple pointers. Need to\n\n                 * extract the index at which the data for this particular event\n\n                 * is stored.\n\n                 */\n\n                int index = event.getActionIndex();\n\n                int id = event.getPointerId(index);\n\n \n\n                TouchHistory data = TouchHistory.obtain(event.getX(index), event.getY(index),\n\n                        event.getPressure(index));\n\n                data.label = \"id: \" + id;\n\n \n\n                /*\n\n                 * Store the data under its pointer identifier. The index of\n\n                 * this pointer can change over multiple events, but this\n\n                 * pointer is always identified by the same identifier for this\n\n                 * active gesture.\n\n                 */\n\n                mTouches.put(id, data);\n\n \n\n                break;\n\n            }\n\n \n\n            case MotionEvent.ACTION_UP: {\n\n                /*\n\n                 * Final pointer has gone up and has ended the last pressed\n\n                 * gesture.\n\n                 */\n\n \n\n                /*\n\n                 * Extract the pointer identifier for the only event stored in\n\n                 * the MotionEvent object and remove it from the list of active\n\n                 * touches.\n\n                 */\n\n                int id = event.getPointerId(0);\n\n                TouchHistory data = mTouches.get(id);\n\n                mTouches.remove(id);\n\n                data.recycle();\n\n \n\n                mHasTouch = false;\n\n \n\n                break;\n\n            }\n\n \n\n            case MotionEvent.ACTION_POINTER_UP: {\n\n                /*\n\n                 * A non-primary pointer has gone up and other pointers are\n\n                 * still active.\n\n                 */\n\n \n\n                /*\n\n                 * The MotionEvent object contains multiple pointers. Need to\n\n                 * extract the index at which the data for this particular event\n\n                 * is stored.\n\n                 */\n\n                int index = event.getActionIndex();\n\n                int id = event.getPointerId(index);\n\n \n\n                TouchHistory data = mTouches.get(id);\n\n                mTouches.remove(id);\n\n                data.recycle();\n\n \n\n                break;\n\n            }\n\n \n\n            case MotionEvent.ACTION_MOVE: {\n\n                /*\n\n                 * A change event happened during a pressed gesture. (Between\n\n                 * ACTION_DOWN and ACTION_UP or ACTION_POINTER_DOWN and\n\n                 * ACTION_POINTER_UP)\n\n                 */\n\n \n\n                /*\n\n                 * Loop through all active pointers contained within this event.\n\n                 * Data for each pointer is stored in a MotionEvent at an index\n\n                 * (starting from 0 up to the number of active pointers). This\n\n                 * loop goes through each of these active pointers, extracts its\n\n                 * data (position and pressure) and updates its stored data. A\n\n                 * pointer is identified by its pointer number which stays\n\n                 * constant across touch events as long as it remains active.\n\n                 * This identifier is used to keep track of a pointer across\n\n                 * events.\n\n                 */\n\n                for (int index = 0; index < event.getPointerCount(); index++) {\n\n                    // get pointer id for data stored at this index\n\n                    int id = event.getPointerId(index);\n\n \n\n                    // get the data stored externally about this pointer.\n\n                    TouchHistory data = mTouches.get(id);\n\n \n\n                    // add previous position to history and add new values\n\n                    data.addHistory(data.x, data.y);\n\n                    data.setTouch(event.getX(index), event.getY(index),\n\n                            event.getPressure(index));\n\n \n\n                }\n\n \n\n                break;\n\n            }\n\n        }\n\n \n\n        // trigger redraw on UI thread\n\n        this.postInvalidate();\n\n \n\n        return true;\n\n    }\n\n \n\n \n\n    @Override\n\n    protected void onDraw(Canvas canvas) {\n\n        super.onDraw(canvas);\n\n \n\n        // Canvas background color depends on whether there is an active touch\n\n        if (mHasTouch) {\n\n            canvas.drawColor(BACKGROUND_ACTIVE);\n\n        } else {\n\n            // draw inactive border\n\n            canvas.drawRect(mBorderWidth, mBorderWidth, getWidth() - mBorderWidth, getHeight()\n\n                    - mBorderWidth, mBorderPaint);\n\n        }\n\n \n\n        // loop through all active touches and draw them\n\n        for (int i = 0; i < mTouches.size(); i++) {\n\n \n\n            // get the pointer id and associated data for this index\n\n            int id = mTouches.keyAt(i);\n\n            TouchHistory data = mTouches.valueAt(i);\n\n \n\n            // draw the data and its history to the canvas\n\n            drawCircle(canvas, id, data);\n\n        }\n\n    }\n\n \n\n    /*\n\n     * Below are only helper methods and variables required for drawing.\n\n     */\n\n \n\n    // radius of active touch circle in dp\n\n    private static final float CIRCLE_RADIUS_DP = 75f;\n\n    // radius of historical circle in dp\n\n    private static final float CIRCLE_HISTORICAL_RADIUS_DP = 7f;\n\n \n\n    // calculated radiuses in px\n\n    private float mCircleRadius;\n\n    private float mCircleHistoricalRadius;\n\n \n\n    private Paint mCirclePaint = new Paint();\n\n    private Paint mTextPaint = new Paint();\n\n \n\n    private static final int BACKGROUND_ACTIVE = Color.WHITE;\n\n \n\n    // inactive border\n\n    private static final float INACTIVE_BORDER_DP = 15f;\n\n    private static final int INACTIVE_BORDER_COLOR = 0xFFffd060;\n\n    private Paint mBorderPaint = new Paint();\n\n    private float mBorderWidth;\n\n \n\n    public final int[] COLORS = {\n\n            0xFF33B5E5, 0xFFAA66CC, 0xFF99CC00, 0xFFFFBB33, 0xFFFF4444,\n\n            0xFF0099CC, 0xFF9933CC, 0xFF669900, 0xFFFF8800, 0xFFCC0000\n\n    };\n\n \n\n    /**\n\n     * Sets up the required {@link android.graphics.Paint} objects for the screen density of this\n\n     * device.\n\n     */\n\n    private void initialisePaint() {\n\n \n\n        // Calculate radiuses in px from dp based on screen density\n\n        float density = getResources().getDisplayMetrics().density;\n\n        mCircleRadius = CIRCLE_RADIUS_DP * density;\n\n        mCircleHistoricalRadius = CIRCLE_HISTORICAL_RADIUS_DP * density;\n\n \n\n        // Setup text paint for circle label\n\n        mTextPaint.setTextSize(27f);\n\n        mTextPaint.setColor(Color.BLACK);\n\n \n\n        // Setup paint for inactive border\n\n        mBorderWidth = INACTIVE_BORDER_DP * density;\n\n        mBorderPaint.setStrokeWidth(mBorderWidth);\n\n        mBorderPaint.setColor(INACTIVE_BORDER_COLOR);\n\n        mBorderPaint.setStyle(Paint.Style.STROKE);\n\n \n\n    }\n\n \n\n    /**\n\n     * Draws the data encapsulated by a {@link TouchDisplayView.TouchHistory} object to a canvas.\n\n     * A large circle indicates the current position held by the\n\n     * {@link TouchDisplayView.TouchHistory} object, while a smaller circle is drawn for each\n\n     * entry in its history. The size of the large circle is scaled depending on\n\n     * its pressure, clamped to a maximum of <code>1.0</code>.\n\n     *\n\n     * @param canvas\n\n     * @param id\n\n     * @param data\n\n     */\n\n    protected void drawCircle(Canvas canvas, int id, TouchHistory data) {\n\n        // select the color based on the id\n\n        int color = COLORS[id % COLORS.length];\n\n        mCirclePaint.setColor(color);\n\n \n\n        /*\n\n         * Draw the circle, size scaled to its pressure. Pressure is clamped to\n\n         * 1.0 max to ensure proper drawing. (Reported pressure values can\n\n         * exceed 1.0, depending on the calibration of the touch screen).\n\n         */\n\n        float pressure = Math.min(data.pressure, 1f);\n\n        float radius = pressure * mCircleRadius;\n\n \n\n        canvas.drawCircle(data.x, (data.y) - (radius / 2f), radius,\n\n                mCirclePaint);\n\n \n\n        // draw all historical points with a lower alpha value\n\n        mCirclePaint.setAlpha(125);\n\n        for (int j = 0; j < data.history.length && j < data.historyCount; j++) {\n\n            PointF p = data.history[j];\n\n            canvas.drawCircle(p.x, p.y, mCircleHistoricalRadius, mCirclePaint);\n\n        }\n\n \n\n        // draw its label next to the main circle\n\n        canvas.drawText(data.label, data.x + radius, data.y\n\n                - radius, mTextPaint);\n\n    }\n\n \n\n}\n  "},"com.example.android.common.logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.basicmultitouch\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\" >\n\n \n\n    <uses-sdk\n\n        android:minSdkVersion=\"8\"\n\n        android:targetSdkVersion=\"17\" />\n\n \n\n    <application\n\n        android:allowBackup=\"true\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:label=\"@string/app_name\"\n\n        android:theme=\"@style/AppTheme\" >\n\n        <activity\n\n            android:name=\".MainActivity\"\n\n            android:label=\"@string/app_name\" >\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n \n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n</manifest>\n  "}},"Media":{"BasicMediaDecoder":{"res":{"drawable":{"selector_play.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n \n\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:state_enabled=\"true\"\n\n          android:drawable=\"@drawable/ic_action_play\"/>\n\n \n\n    <item android:state_enabled=\"false\"\n\n          android:drawable=\"@drawable/ic_action_play_disabled\"/>\n\n</selector>\n  "},"drawable-hdpi":{"ic_action_play.png":"http://developer.android.com/samples/BasicMediaDecoder/res/drawable-hdpi/ic_action_play.png","ic_action_play_disabled.png":"http://developer.android.com/samples/BasicMediaDecoder/res/drawable-hdpi/ic_action_play_disabled.png","ic_launcher.png":"http://developer.android.com/samples/BasicMediaDecoder/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com/samples/BasicMediaDecoder/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_action_play.png":"http://developer.android.com/samples/BasicMediaDecoder/res/drawable-mdpi/ic_action_play.png","ic_action_play_disabled.png":"http://developer.android.com/samples/BasicMediaDecoder/res/drawable-mdpi/ic_action_play_disabled.png","ic_launcher.png":"http://developer.android.com/samples/BasicMediaDecoder/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_action_play.png":"http://developer.android.com/samples/BasicMediaDecoder/res/drawable-xhdpi/ic_action_play.png","ic_action_play_disabled.png":"http://developer.android.com/samples/BasicMediaDecoder/res/drawable-xhdpi/ic_action_play_disabled.png","ic_launcher.png":"http://developer.android.com/samples/BasicMediaDecoder/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicMediaDecoder/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleMessageTile\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n            android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n            android:text=\"@string/intro_message\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n  ","sample_main.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright (C) 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n              android:orientation=\"vertical\"\n\n              android:layout_width=\"fill_parent\"\n\n              android:layout_height=\"fill_parent\"\n\n    >\n\n    <TextureView\n\n        android:id=\"@+id/PlaybackView\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"match_parent\"/>\n\n    <TextView\n\n            android:id=\"@+id/AttribView\"\n\n            android:layout_width=\"wrap_content\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_gravity=\"right|bottom\"\n\n            android:visibility=\"gone\"\n\n            android:textColor=\"@android:color/holo_blue_bright\"\n\n            android:text=\"@string/app_video_attrib\"/>\n\n</FrameLayout>\n\n \n  "},"menu":{"action_menu.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright (C) 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:id=\"@+id/menu_play\"\n\n          android:icon=\"@drawable/selector_play\"\n\n          android:title=\"Play\"\n\n          android:showAsAction=\"ifRoom|withText\" />\n\n</menu>\n  "},"raw":{"vid_bigbuckbunny.mp4":""},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">BasicMediaDecoder</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n             This activity uses a TextureView to render the frames of a video decoded using the\n\n             MediaCodec API.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright (C) 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n<resources>\n\n    <string name=\"app_video_attrib\">(c) copyright 2008, Blender Foundation / www.bigbuckbunny.org\n\n    </string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.basicmediadecoder":{"MainActivity.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.basicmediadecoder;\n\n \n\n \n\nimport android.animation.TimeAnimator;\n\nimport android.app.Activity;\n\nimport android.media.MediaCodec;\n\nimport android.media.MediaExtractor;\n\nimport android.net.Uri;\n\nimport android.os.Bundle;\n\nimport android.view.Menu;\n\nimport android.view.MenuInflater;\n\nimport android.view.MenuItem;\n\nimport android.view.Surface;\n\nimport android.view.TextureView;\n\nimport android.view.View;\n\nimport android.widget.TextView;\n\n \n\nimport com.example.android.common.media.MediaCodecWrapper;\n\n \n\nimport java.io.IOException;\n\n \n\n/**\n\n * This activity uses a {@link android.view.TextureView} to render the frames of a video decoded using\n\n * {@link android.media.MediaCodec} API.\n\n */\n\npublic class MainActivity extends Activity {\n\n \n\n    private TextureView mPlaybackView;\n\n    private TimeAnimator mTimeAnimator = new TimeAnimator();\n\n \n\n    // A utility that wraps up the underlying input and output buffer processing operations\n\n    // into an east to use API.\n\n    private MediaCodecWrapper mCodecWrapper;\n\n    private MediaExtractor mExtractor = new MediaExtractor();\n\n    TextView mAttribView = null;\n\n \n\n \n\n    /**\n\n     * Called when the activity is first created.\n\n     */\n\n    @Override\n\n    public void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.sample_main);\n\n        mPlaybackView = (TextureView) findViewById(R.id.PlaybackView);\n\n        mAttribView =  (TextView)findViewById(R.id.AttribView);\n\n \n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        MenuInflater inflater = getMenuInflater();\n\n        inflater.inflate(R.menu.action_menu, menu);\n\n        return true;\n\n    }\n\n \n\n    @Override\n\n    protected void onPause() {\n\n        super.onPause();\n\n        if(mTimeAnimator != null && mTimeAnimator.isRunning()) {\n\n            mTimeAnimator.end();\n\n        }\n\n \n\n        if (mCodecWrapper != null ) {\n\n            mCodecWrapper.stopAndRelease();\n\n            mExtractor.release();\n\n        }\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        if (item.getItemId() == R.id.menu_play) {\n\n            mAttribView.setVisibility(View.VISIBLE);\n\n            startPlayback();\n\n            item.setEnabled(false);\n\n        }\n\n        return true;\n\n    }\n\n \n\n \n\n    public void startPlayback() {\n\n \n\n        // Construct a URI that points to the video resource that we want to play\n\n        Uri videoUri = Uri.parse(\"android.resource://\"\n\n                + getPackageName() + \"/\"\n\n                + R.raw.vid_bigbuckbunny);\n\n \n\n        try {\n\n \n\n            mExtractor.setDataSource(this, videoUri, null);\n\n            int nTracks = mExtractor.getTrackCount();\n\n \n\n            // Begin by unselecting all of the tracks in the extractor, so we won't see\n\n            // any tracks that we haven't explicitly selected.\n\n            for (int i = 0; i < nTracks; ++i) {\n\n                mExtractor.unselectTrack(i);\n\n            }\n\n \n\n \n\n            // Find the first video track in the stream. In a real-world application\n\n            // it's possible that the stream would contain multiple tracks, but this\n\n            // sample assumes that we just want to play the first one.\n\n            for (int i = 0; i < nTracks; ++i) {\n\n                // Try to create a video codec for this track. This call will return null if the\n\n                // track is not a video track, or not a recognized video format. Once it returns\n\n                // a valid MediaCodecWrapper, we can break out of the loop.\n\n                mCodecWrapper = MediaCodecWrapper.fromVideoFormat(mExtractor.getTrackFormat(i),\n\n                        new Surface(mPlaybackView.getSurfaceTexture()));\n\n                if (mCodecWrapper != null) {\n\n                    mExtractor.selectTrack(i);\n\n                    break;\n\n                }\n\n            }\n\n \n\n \n\n \n\n \n\n            // By using a {@link TimeAnimator}, we can sync our media rendering commands with\n\n            // the system display frame rendering. The animator ticks as the {@link Choreographer}\n\n            // recieves VSYNC events.\n\n            mTimeAnimator.setTimeListener(new TimeAnimator.TimeListener() {\n\n                @Override\n\n                public void onTimeUpdate(final TimeAnimator animation,\n\n                                         final long totalTime,\n\n                                         final long deltaTime) {\n\n \n\n                    boolean isEos = ((mExtractor.getSampleFlags() & MediaCodec\n\n                            .BUFFER_FLAG_END_OF_STREAM) == MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n\n \n\n                    if (!isEos) {\n\n                        // Try to submit the sample to the codec and if successful advance the\n\n                        // extractor to the next available sample to read.\n\n                        boolean result = mCodecWrapper.writeSample(mExtractor, false,\n\n                                mExtractor.getSampleTime(), mExtractor.getSampleFlags());\n\n \n\n                        if (result) {\n\n                            // Advancing the extractor is a blocking operation and it MUST be\n\n                            // executed outside the main thread in real applications.\n\n                            mExtractor.advance();\n\n                        }\n\n                    }\n\n \n\n                    // Examine the sample at the head of the queue to see if its ready to be\n\n                    // rendered and is not zero sized End-of-Stream record.\n\n                    MediaCodec.BufferInfo out_bufferInfo = new MediaCodec.BufferInfo();\n\n                    mCodecWrapper.peekSample(out_bufferInfo);\n\n \n\n                    if (out_bufferInfo.size <= 0 && isEos) {\n\n                        mTimeAnimator.end();\n\n                        mCodecWrapper.stopAndRelease();\n\n                        mExtractor.release();\n\n                    } else if (out_bufferInfo.presentationTimeUs / 1000 < totalTime) {\n\n                        // Pop the sample off the queue and send it to {@link Surface}\n\n                        mCodecWrapper.popSample(true);\n\n                    }\n\n \n\n                }\n\n            });\n\n \n\n            // We're all set. Kick off the animator to process buffers and render video frames as\n\n            // they become available\n\n            mTimeAnimator.start();\n\n        } catch (IOException e) {\n\n            e.printStackTrace();\n\n        }\n\n    }\n\n}\n  "},"com.example.android.common.media":{"CameraHelper.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.media;\n\n \n\nimport android.annotation.TargetApi;\n\nimport android.hardware.Camera;\n\nimport android.os.Build;\n\nimport android.os.Environment;\n\nimport android.util.Log;\n\n \n\nimport java.io.File;\n\nimport java.text.SimpleDateFormat;\n\nimport java.util.Date;\n\nimport java.util.List;\n\n \n\n/**\n\n * Camera related utilities.\n\n */\n\npublic class CameraHelper {\n\n \n\n    public static final int MEDIA_TYPE_IMAGE = 1;\n\n    public static final int MEDIA_TYPE_VIDEO = 2;\n\n \n\n    /**\n\n     * Iterate over supported camera preview sizes to see which one best fits the\n\n     * dimensions of the given view while maintaining the aspect ratio. If none can,\n\n     * be lenient with the aspect ratio.\n\n     *\n\n     * @param sizes Supported camera preview sizes.\n\n     * @param w The width of the view.\n\n     * @param h The height of the view.\n\n     * @return Best match camera preview size to fit in the view.\n\n     */\n\n    public static  Camera.Size getOptimalPreviewSize(List<Camera.Size> sizes, int w, int h) {\n\n        // Use a very small tolerance because we want an exact match.\n\n        final double ASPECT_TOLERANCE = 0.1;\n\n        double targetRatio = (double) w / h;\n\n        if (sizes == null)\n\n            return null;\n\n \n\n        Camera.Size optimalSize = null;\n\n \n\n        // Start with max value and refine as we iterate over available preview sizes. This is the\n\n        // minimum difference between view and camera height.\n\n        double minDiff = Double.MAX_VALUE;\n\n \n\n        // Target view height\n\n        int targetHeight = h;\n\n \n\n        // Try to find a preview size that matches aspect ratio and the target view size.\n\n        // Iterate over all available sizes and pick the largest size that can fit in the view and\n\n        // still maintain the aspect ratio.\n\n        for (Camera.Size size : sizes) {\n\n            double ratio = (double) size.width / size.height;\n\n            if (Math.abs(ratio - targetRatio) > ASPECT_TOLERANCE)\n\n                continue;\n\n            if (Math.abs(size.height - targetHeight) < minDiff) {\n\n                optimalSize = size;\n\n                minDiff = Math.abs(size.height - targetHeight);\n\n            }\n\n        }\n\n \n\n        // Cannot find preview size that matches the aspect ratio, ignore the requirement\n\n        if (optimalSize == null) {\n\n            minDiff = Double.MAX_VALUE;\n\n            for (Camera.Size size : sizes) {\n\n                if (Math.abs(size.height - targetHeight) < minDiff) {\n\n                    optimalSize = size;\n\n                    minDiff = Math.abs(size.height - targetHeight);\n\n                }\n\n            }\n\n        }\n\n        return optimalSize;\n\n    }\n\n \n\n    /**\n\n     * @return the default camera on the device. Return null if there is no camera on the device.\n\n     */\n\n    public static Camera getDefaultCameraInstance() {\n\n        return Camera.open();\n\n    }\n\n \n\n \n\n    /**\n\n     * @return the default rear/back facing camera on the device. Returns null if camera is not\n\n     * available.\n\n     */\n\n    public static Camera getDefaultBackFacingCameraInstance() {\n\n        return getDefaultCamera(Camera.CameraInfo.CAMERA_FACING_BACK);\n\n    }\n\n \n\n    /**\n\n     * @return the default front facing camera on the device. Returns null if camera is not\n\n     * available.\n\n     */\n\n    public static Camera getDefaultFrontFacingCameraInstance() {\n\n        return getDefaultCamera(Camera.CameraInfo.CAMERA_FACING_FRONT);\n\n    }\n\n \n\n \n\n    /**\n\n     *\n\n     * @param position Physical position of the camera i.e Camera.CameraInfo.CAMERA_FACING_FRONT\n\n     *                 or Camera.CameraInfo.CAMERA_FACING_BACK.\n\n     * @return the default camera on the device. Returns null if camera is not available.\n\n     */\n\n    @TargetApi(Build.VERSION_CODES.GINGERBREAD)\n\n    private static Camera getDefaultCamera(int position) {\n\n        // Find the total number of cameras available\n\n        int  mNumberOfCameras = Camera.getNumberOfCameras();\n\n \n\n        // Find the ID of the back-facing (\"default\") camera\n\n        Camera.CameraInfo cameraInfo = new Camera.CameraInfo();\n\n        for (int i = 0; i < mNumberOfCameras; i++) {\n\n            Camera.getCameraInfo(i, cameraInfo);\n\n            if (cameraInfo.facing == position) {\n\n                return Camera.open(i);\n\n \n\n            }\n\n        }\n\n \n\n        return null;\n\n    }\n\n \n\n    /**\n\n     * Creates a media file in the {@code Environment.DIRECTORY_PICTURES} directory. The directory\n\n     * is persistent and available to other applications like gallery.\n\n     *\n\n     * @param type Media type. Can be video or image.\n\n     * @return A file object pointing to the newly created file.\n\n     */\n\n    public  static File getOutputMediaFile(int type){\n\n        // To be safe, you should check that the SDCard is mounted\n\n        // using Environment.getExternalStorageState() before doing this.\n\n        if (!Environment.getExternalStorageState().equalsIgnoreCase(Environment.MEDIA_MOUNTED)) {\n\n            return  null;\n\n        }\n\n \n\n        File mediaStorageDir = new File(Environment.getExternalStoragePublicDirectory(\n\n                Environment.DIRECTORY_PICTURES), \"CameraSample\");\n\n        // This location works best if you want the created images to be shared\n\n        // between applications and persist after your app has been uninstalled.\n\n \n\n        // Create the storage directory if it does not exist\n\n        if (! mediaStorageDir.exists()){\n\n            if (! mediaStorageDir.mkdirs()) {\n\n                Log.d(\"CameraSample\", \"failed to create directory\");\n\n                return null;\n\n            }\n\n        }\n\n \n\n        // Create a media file name\n\n        String timeStamp = new SimpleDateFormat(\"yyyyMMdd_HHmmss\").format(new Date());\n\n        File mediaFile;\n\n        if (type == MEDIA_TYPE_IMAGE){\n\n            mediaFile = new File(mediaStorageDir.getPath() + File.separator +\n\n                    \"IMG_\"+ timeStamp + \".jpg\");\n\n        } else if(type == MEDIA_TYPE_VIDEO) {\n\n            mediaFile = new File(mediaStorageDir.getPath() + File.separator +\n\n                    \"VID_\"+ timeStamp + \".mp4\");\n\n        } else {\n\n            return null;\n\n        }\n\n \n\n        return mediaFile;\n\n    }\n\n \n\n}\n  ","MediaCodecWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.media;\n\n \n\nimport android.media.*;\n\nimport android.os.Handler;\n\nimport android.os.Looper;\n\nimport android.view.Surface;\n\n \n\nimport java.nio.ByteBuffer;\n\nimport java.util.ArrayDeque;\n\nimport java.util.Queue;\n\n \n\n/**\n\n * Simplifies the MediaCodec interface by wrapping around the buffer processing operations.\n\n */\n\npublic class MediaCodecWrapper {\n\n \n\n    // Handler to use for {@code OutputSampleListener} and {code OutputFormatChangedListener}\n\n    // callbacks\n\n    private Handler mHandler;\n\n \n\n \n\n    // Callback when media output format changes.\n\n    public interface OutputFormatChangedListener {\n\n        void outputFormatChanged(MediaCodecWrapper sender, MediaFormat newFormat);\n\n    }\n\n \n\n    private OutputFormatChangedListener mOutputFormatChangedListener = null;\n\n \n\n    /**\n\n     * Callback for decodes frames. Observers can register a listener for optional stream\n\n     * of decoded data\n\n     */\n\n    public interface OutputSampleListener {\n\n        void outputSample(MediaCodecWrapper sender, MediaCodec.BufferInfo info, ByteBuffer buffer);\n\n    }\n\n \n\n    /**\n\n     * The {@link MediaCodec} that is managed by this class.\n\n     */\n\n    private MediaCodec mDecoder;\n\n \n\n    // References to the internal buffers managed by the codec. The codec\n\n    // refers to these buffers by index, never by reference so it's up to us\n\n    // to keep track of which buffer is which.\n\n    private ByteBuffer[] mInputBuffers;\n\n    private ByteBuffer[] mOutputBuffers;\n\n \n\n    // Indices of the input buffers that are currently available for writing. We'll\n\n    // consume these in the order they were dequeued from the codec.\n\n    private Queue<Integer> mAvailableInputBuffers;\n\n \n\n    // Indices of the output buffers that currently hold valid data, in the order\n\n    // they were produced by the codec.\n\n    private Queue<Integer> mAvailableOutputBuffers;\n\n \n\n    // Information about each output buffer, by index. Each entry in this array\n\n    // is valid if and only if its index is currently contained in mAvailableOutputBuffers.\n\n    private MediaCodec.BufferInfo[] mOutputBufferInfo;\n\n \n\n    // An (optional) stream that will receive decoded data.\n\n    private OutputSampleListener mOutputSampleListener;\n\n \n\n    private MediaCodecWrapper(MediaCodec codec) {\n\n        mDecoder = codec;\n\n        codec.start();\n\n        mInputBuffers = codec.getInputBuffers();\n\n        mOutputBuffers = codec.getOutputBuffers();\n\n        mOutputBufferInfo = new MediaCodec.BufferInfo[mOutputBuffers.length];\n\n        mAvailableInputBuffers = new ArrayDeque<Integer>(mOutputBuffers.length);\n\n        mAvailableOutputBuffers = new ArrayDeque<Integer>(mInputBuffers.length);\n\n    }\n\n \n\n    /**\n\n     * Releases resources and ends the encoding/decoding session.\n\n     */\n\n    public void stopAndRelease() {\n\n        mDecoder.stop();\n\n        mDecoder.release();\n\n        mDecoder = null;\n\n        mHandler = null;\n\n    }\n\n \n\n    /**\n\n     * Getter for the registered {@link OutputFormatChangedListener}\n\n     */\n\n    public OutputFormatChangedListener getOutputFormatChangedListener() {\n\n        return mOutputFormatChangedListener;\n\n    }\n\n \n\n    /**\n\n     *\n\n     * @param outputFormatChangedListener the listener for callback.\n\n     * @param handler message handler for posting the callback.\n\n     */\n\n    public void setOutputFormatChangedListener(final OutputFormatChangedListener\n\n            outputFormatChangedListener, Handler handler) {\n\n        mOutputFormatChangedListener = outputFormatChangedListener;\n\n \n\n        // Making sure we don't block ourselves due to a bad implementation of the callback by\n\n        // using a handler provided by client.\n\n        Looper looper;\n\n        mHandler = handler;\n\n        if (outputFormatChangedListener != null && mHandler == null) {\n\n            if ((looper = Looper.myLooper()) != null) {\n\n                mHandler = new Handler();\n\n            } else {\n\n                throw new IllegalArgumentException(\n\n                        \"Looper doesn't exist in the calling thread\");\n\n            }\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Constructs the {@link MediaCodecWrapper} wrapper object around the video codec.\n\n     * The codec is created using the encapsulated information in the\n\n     * {@link MediaFormat} object.\n\n     *\n\n     * @param trackFormat The format of the media object to be decoded.\n\n     * @param surface Surface to render the decoded frames.\n\n     * @return\n\n     */\n\n    public static MediaCodecWrapper fromVideoFormat(final MediaFormat trackFormat,\n\n            Surface surface) {\n\n        MediaCodecWrapper result = null;\n\n        MediaCodec videoCodec = null;\n\n \n\n        final String mimeType = trackFormat.getString(MediaFormat.KEY_MIME);\n\n \n\n        // Check to see if this is actually a video mime type. If it is, then create\n\n        // a codec that can decode this mime type.\n\n        if (mimeType.contains(\"video/\")) {\n\n            videoCodec = MediaCodec.createDecoderByType(mimeType);\n\n            videoCodec.configure(trackFormat, surface, null,  0);\n\n \n\n        }\n\n \n\n        // If codec creation was successful, then create a wrapper object around the\n\n        // newly created codec.\n\n        if (videoCodec != null) {\n\n            result = new MediaCodecWrapper(videoCodec);\n\n        }\n\n \n\n        return result;\n\n    }\n\n \n\n \n\n    /**\n\n     * Write a media sample to the decoder.\n\n     *\n\n     * A \"sample\" here refers to a single atomic access unit in the media stream. The definition\n\n     * of \"access unit\" is dependent on the type of encoding used, but it typically refers to\n\n     * a single frame of video or a few seconds of audio. {@link android.media.MediaExtractor}\n\n     * extracts data from a stream one sample at a time.\n\n     *\n\n     * @param input A ByteBuffer containing the input data for one sample. The buffer must be set\n\n     * up for reading, with its position set to the beginning of the sample data and its limit\n\n     * set to the end of the sample data.\n\n     *\n\n     * @param presentationTimeUs  The time, relative to the beginning of the media stream,\n\n     * at which this buffer should be rendered.\n\n     *\n\n     * @param flags Flags to pass to the decoder. See {@link MediaCodec#queueInputBuffer(int,\n\n     * int, int, long, int)}\n\n     *\n\n     * @throws MediaCodec.CryptoException\n\n     */\n\n    public boolean writeSample(final ByteBuffer input,\n\n            final MediaCodec.CryptoInfo crypto,\n\n            final long presentationTimeUs,\n\n            final int flags) throws MediaCodec.CryptoException, WriteException {\n\n        boolean result = false;\n\n        int size = input.remaining();\n\n \n\n        // check if we have dequed input buffers available from the codec\n\n        if (size > 0 &&  !mAvailableInputBuffers.isEmpty()) {\n\n            int index = mAvailableInputBuffers.remove();\n\n            ByteBuffer buffer = mInputBuffers[index];\n\n \n\n            // we can't write our sample to a lesser capacity input buffer.\n\n            if (size > buffer.capacity()) {\n\n                throw new MediaCodecWrapper.WriteException(String.format(\n\n                        \"Insufficient capacity in MediaCodec buffer: \"\n\n                            + \"tried to write %d, buffer capacity is %d.\",\n\n                        input.remaining(),\n\n                        buffer.capacity()));\n\n            }\n\n \n\n            buffer.clear();\n\n            buffer.put(input);\n\n \n\n            // Submit the buffer to the codec for decoding. The presentationTimeUs\n\n            // indicates the position (play time) for the current sample.\n\n            if (crypto == null) {\n\n                mDecoder.queueInputBuffer(index, 0, size, presentationTimeUs, flags);\n\n            } else {\n\n                mDecoder.queueSecureInputBuffer(index, 0, crypto, presentationTimeUs, flags);\n\n            }\n\n            result = true;\n\n        }\n\n        return result;\n\n    }\n\n \n\n    static MediaCodec.CryptoInfo cryptoInfo= new MediaCodec.CryptoInfo();\n\n \n\n    /**\n\n     * Write a media sample to the decoder.\n\n     *\n\n     * A \"sample\" here refers to a single atomic access unit in the media stream. The definition\n\n     * of \"access unit\" is dependent on the type of encoding used, but it typically refers to\n\n     * a single frame of video or a few seconds of audio. {@link android.media.MediaExtractor}\n\n     * extracts data from a stream one sample at a time.\n\n     *\n\n     * @param extractor  Instance of {@link android.media.MediaExtractor} wrapping the media.\n\n     *\n\n     * @param presentationTimeUs The time, relative to the beginning of the media stream,\n\n     * at which this buffer should be rendered.\n\n     *\n\n     * @param flags  Flags to pass to the decoder. See {@link MediaCodec#queueInputBuffer(int,\n\n     * int, int, long, int)}\n\n     *\n\n     * @throws MediaCodec.CryptoException\n\n     */\n\n    public boolean writeSample(final MediaExtractor extractor,\n\n            final boolean isSecure,\n\n            final long presentationTimeUs,\n\n            int flags) {\n\n        boolean result = false;\n\n        boolean isEos = false;\n\n \n\n        if (!mAvailableInputBuffers.isEmpty()) {\n\n            int index = mAvailableInputBuffers.remove();\n\n            ByteBuffer buffer = mInputBuffers[index];\n\n \n\n            // reads the sample from the file using extractor into the buffer\n\n            int size = extractor.readSampleData(buffer, 0);\n\n            if (size <= 0) {\n\n                flags |= MediaCodec.BUFFER_FLAG_END_OF_STREAM;\n\n            }\n\n \n\n            // Submit the buffer to the codec for decoding. The presentationTimeUs\n\n            // indicates the position (play time) for the current sample.\n\n            if (!isSecure) {\n\n                mDecoder.queueInputBuffer(index, 0, size, presentationTimeUs, flags);\n\n            } else {\n\n                extractor.getSampleCryptoInfo(cryptoInfo);\n\n                mDecoder.queueSecureInputBuffer(index, 0, cryptoInfo, presentationTimeUs, flags);\n\n            }\n\n \n\n            result = true;\n\n        }\n\n        return result;\n\n    }\n\n \n\n    /**\n\n     * Performs a peek() operation in the queue to extract media info for the buffer ready to be\n\n     * released i.e. the head element of the queue.\n\n     *\n\n     * @param out_bufferInfo An output var to hold the buffer info.\n\n     *\n\n     * @return True, if the peek was successful.\n\n     */\n\n    public boolean peekSample(MediaCodec.BufferInfo out_bufferInfo) {\n\n        // dequeue available buffers and synchronize our data structures with the codec.\n\n        update();\n\n        boolean result = false;\n\n        if (!mAvailableOutputBuffers.isEmpty()) {\n\n            int index = mAvailableOutputBuffers.peek();\n\n            MediaCodec.BufferInfo info = mOutputBufferInfo[index];\n\n            // metadata of the sample\n\n            out_bufferInfo.set(\n\n                    info.offset,\n\n                    info.size,\n\n                    info.presentationTimeUs,\n\n                    info.flags);\n\n            result = true;\n\n        }\n\n        return result;\n\n    }\n\n \n\n    /**\n\n     * Processes, releases and optionally renders the output buffer available at the head of the\n\n     * queue. All observers are notified with a callback. See {@link\n\n     * OutputSampleListener#outputSample(MediaCodecWrapper, android.media.MediaCodec.BufferInfo,\n\n     * java.nio.ByteBuffer)}\n\n     *\n\n     * @param render True, if the buffer is to be rendered on the {@link Surface} configured\n\n     *\n\n     */\n\n    public void popSample(boolean render) {\n\n        // dequeue available buffers and synchronize our data structures with the codec.\n\n        update();\n\n        if (!mAvailableOutputBuffers.isEmpty()) {\n\n            int index = mAvailableOutputBuffers.remove();\n\n \n\n            if (render && mOutputSampleListener != null) {\n\n                ByteBuffer buffer = mOutputBuffers[index];\n\n                MediaCodec.BufferInfo info = mOutputBufferInfo[index];\n\n                mOutputSampleListener.outputSample(this, info, buffer);\n\n            }\n\n \n\n            // releases the buffer back to the codec\n\n            mDecoder.releaseOutputBuffer(index, render);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Synchronize this object's state with the internal state of the wrapped\n\n     * MediaCodec.\n\n     */\n\n    private void update() {\n\n        int index;\n\n \n\n        // Get valid input buffers from the codec to fill later in the same order they were\n\n        // made available by the codec.\n\n        while ((index = mDecoder.dequeueInputBuffer(0)) != MediaCodec.INFO_TRY_AGAIN_LATER) {\n\n            mAvailableInputBuffers.add(index);\n\n        }\n\n \n\n \n\n        // Likewise with output buffers. If the output buffers have changed, start using the\n\n        // new set of output buffers. If the output format has changed, notify listeners.\n\n        MediaCodec.BufferInfo info = new MediaCodec.BufferInfo();\n\n        while ((index = mDecoder.dequeueOutputBuffer(info, 0)) !=  MediaCodec.INFO_TRY_AGAIN_LATER) {\n\n            switch (index) {\n\n                case MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED:\n\n                    mOutputBuffers = mDecoder.getOutputBuffers();\n\n                    mOutputBufferInfo = new MediaCodec.BufferInfo[mOutputBuffers.length];\n\n                    mAvailableOutputBuffers.clear();\n\n                    break;\n\n                case MediaCodec.INFO_OUTPUT_FORMAT_CHANGED:\n\n                    if (mOutputFormatChangedListener != null) {\n\n                        mHandler.post(new Runnable() {\n\n                            @Override\n\n                            public void run() {\n\n                                mOutputFormatChangedListener\n\n                                        .outputFormatChanged(MediaCodecWrapper.this,\n\n                                                mDecoder.getOutputFormat());\n\n \n\n                            }\n\n                        });\n\n                    }\n\n                    break;\n\n                default:\n\n                    // Making sure the index is valid before adding to output buffers. We've already\n\n                    // handled INFO_TRY_AGAIN_LATER, INFO_OUTPUT_FORMAT_CHANGED &\n\n                    // INFO_OUTPUT_BUFFERS_CHANGED i.e all the other possible return codes but\n\n                    // asserting index value anyways for future-proofing the code.\n\n                    if(index >= 0) {\n\n                        mOutputBufferInfo[index] = info;\n\n                        mAvailableOutputBuffers.add(index);\n\n                    } else {\n\n                        throw new IllegalStateException(\"Unknown status from dequeueOutputBuffer\");\n\n                    }\n\n                    break;\n\n            }\n\n \n\n        }\n\n \n\n    }\n\n \n\n    private class WriteException extends Throwable {\n\n        private WriteException(final String detailMessage) {\n\n            super(detailMessage);\n\n        }\n\n    }\n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.basicmediadecoder\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk android:minSdkVersion=\"17\"/>\n\n    <application\n\n        android:label=\"@string/app_name\" android:icon=\"@drawable/ic_launcher\">\n\n        <activity\n\n            android:name=\".MainActivity\"\n\n            android:screenOrientation=\"landscape\"\n\n            android:label=\"@string/app_name\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\"/>\n\n                <category android:name=\"android.intent.category.LAUNCHER\"/>\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n</manifest>\n  "},"BasicMediaRouter":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicMediaRouter/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com/samples/BasicMediaRouter/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicMediaRouter/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicMediaRouter/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicMediaRouter/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleMessageTile\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n            android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n            android:text=\"@string/intro_message\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n  ","display.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:id=\"@+id/display_layout\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:gravity=\"center\"\n\n    android:orientation=\"vertical\" >\n\n \n\n    <TextView\n\n        android:id=\"@+id/display_text\"\n\n        style=\"@style/DisplayLargeText\"\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:text=\"\" />\n\n \n\n    <TextView\n\n        android:id=\"@+id/display_smalltext\"\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:text=\"\"\n\n        android:textAppearance=\"?android:attr/textAppearanceMedium\" />\n\n \n\n</LinearLayout>\n  ","sample_main.xml":"\n    \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:tools=\"http://schemas.android.com/tools\"\n\n    android:id=\"@+id/LinearLayout1\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:gravity=\"center\"\n\n    android:orientation=\"vertical\"\n\n    tools:context=\".MainActivity\" >\n\n \n\n    <TextView\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:padding=\"5dp\"\n\n        android:text=\"@string/intro_message\" />\n\n \n\n    <TextView\n\n        android:id=\"@+id/textStatus\"\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:gravity=\"center\"\n\n        android:text=\"@string/secondary_notconnected\"\n\n        android:textAppearance=\"?android:attr/textAppearanceLarge\"\n\n        android:layout_margin=\"5dp\" />\n\n \n\n    <Button\n\n        android:id=\"@+id/button1\"\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:enabled=\"false\"\n\n        android:text=\"@string/change_color\" />\n\n \n\n</LinearLayout>\n  "},"menu":{"main.xml":"\n    \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\" >\n\n \n\n    <!-- This ActionProvider is configured to  -->\n\n    <item\n\n        android:id=\"@+id/menu_media_route\"\n\n        android:actionProviderClass=\"android.app.MediaRouteActionProvider\"\n\n        android:orderInCategory=\"1\"\n\n        android:showAsAction=\"always\"\n\n        android:title=\"@string/menu_present_to\"\n\n        android:visible=\"true\"/>\n\n \n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">BasicMediaRouter</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            This sample demonstrates the use of the MediaRouter API to display\n\n content on a secondary display.\\n\\nUse the \"Media Route Action Item\" in the ActionBar\n\n to select an output device. If your device supports Miracast wireless displays,\n\n you may need to enable \"Wireless Display\" functionality in the system settings.\n\n Secondary screen simulation can also be enabled from the \"Developer Options\".\\n\\n\n\nOnce connected, use the \"Change Color\" button to change the background color of the secondary screen.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","colors.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<resources>\n\n \n\n    <item name=\"blue\" type=\"color\">#FF33B5E5</item>\n\n    <item name=\"purple\" type=\"color\">#FFAA66CC</item>\n\n    <item name=\"green\" type=\"color\">#FF99CC00</item>\n\n    <item name=\"orange\" type=\"color\">#FFFFBB33</item>\n\n    <item name=\"red\" type=\"color\">#FFFF4444</item>\n\n    <item name=\"darkblue\" type=\"color\">#FF0099CC</item>\n\n    <item name=\"darkpurple\" type=\"color\">#FF9933CC</item>\n\n    <item name=\"darkgreen\" type=\"color\">#FF669900</item>\n\n    <item name=\"darkorange\" type=\"color\">#FFFF8800</item>\n\n    <item name=\"darkred\" type=\"color\">#FFCC0000</item>\n\n \n\n    <integer-array name=\"androidcolors\">\n\n        <item>@color/blue</item>\n\n        <item>@color/purple</item>\n\n        <item>@color/green</item>\n\n        <item>@color/orange</item>\n\n        <item>@color/red</item>\n\n        <item>@color/darkblue</item>\n\n        <item>@color/darkpurple</item>\n\n        <item>@color/darkgreen</item>\n\n        <item>@color/darkorange</item>\n\n        <item>@color/darkred</item>\n\n    </integer-array>\n\n \n\n</resources> \n  ","strings.xml":"\n    \n\n<resources>\n\n    <string name=\"menu_present_to\">Present to</string>\n\n    <string name=\"title_activity_main\">MainActivity</string>\n\n    <string name=\"secondary_connected\">Connected to:\\n%s</string>\n\n    <string name=\"secondary_notconnected\">No secondary display connected.</string>\n\n    <string name=\"change_color\">Change Color</string>\n\n    <string name=\"display_name\">This display is: %s</string>\n\n    <string name=\"display_color\">Background color: #%X</string>\n\n</resources>\n  ","styles.xml":"\n    \n\n<resources xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n \n\n    <!--\n\n        Base application theme, dependent on API level. This theme is replaced\n\n        by AppBaseTheme from res/values-vXX/styles.xml on newer devices.\n\n    -->\n\n    <style name=\"AppBaseTheme\" parent=\"android:Theme.Light\">\n\n        <!--\n\n            Theme customizations available in newer API levels can go in\n\n            res/values-vXX/styles.xml, while customizations related to\n\n            backward-compatibility can go here.\n\n        -->\n\n    </style>\n\n \n\n \n\n    <style name=\"DisplayLargeText\">\n\n        <item name=\"android:textSize\">30sp</item>\n\n        <item name=\"android:textStyle\">bold</item>\n\n        <item name=\"android:textColor\">#FFFFFF</item>\n\n    </style>\n\n \n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.basicmediarouter":{"MainActivity.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *       http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.basicmediarouter;\n\n \n\nimport android.app.Activity;\n\nimport android.app.MediaRouteActionProvider;\n\nimport android.content.Context;\n\nimport android.content.DialogInterface;\n\nimport android.media.MediaRouter;\n\nimport android.media.MediaRouter.RouteInfo;\n\nimport android.os.Bundle;\n\nimport android.view.Display;\n\nimport android.view.Menu;\n\nimport android.view.MenuItem;\n\nimport android.view.View;\n\nimport android.view.WindowManager;\n\nimport android.widget.Button;\n\nimport android.widget.TextView;\n\n \n\n/**\n\n * <p>\n\n * This sample demonstrates the use of the MediaRouter API to show content on a\n\n * secondary display using a {@link android.app.Presentation}.\n\n * </p>\n\n * <p>\n\n * The activity uses the {@link android.media.MediaRouter} API to automatically detect when a\n\n * presentation display is available and to allow the user to control the media\n\n * routes using a menu item provided by the {@link android.app.MediaRouteActionProvider}.\n\n * When a presentation display is available a {@link android.app.Presentation} (implemented\n\n * as a {@link SamplePresentation}) is shown on the preferred display. A button\n\n * toggles the background color of the secondary screen to show the interaction\n\n * between the primary and secondary screens.\n\n * </p>\n\n * <p>\n\n * This sample requires an HDMI or Wifi display. Alternatively, the\n\n * \"Simulate secondary displays\" feature in Development Settings can be enabled\n\n * to simulate secondary displays.\n\n * </p>\n\n *\n\n * @see android.app.Presentation\n\n * @see android.media.MediaRouter\n\n */\n\npublic class MainActivity extends Activity {\n\n \n\n    private MediaRouter mMediaRouter;\n\n \n\n    // Active Presentation, set to null if no secondary screen is enabled\n\n    private SamplePresentation mPresentation;\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n \n\n        setContentView(R.layout.sample_main);\n\n        mTextStatus = (TextView) findViewById(R.id.textStatus);\n\n \n\n        // get the list of background colors\n\n        mColors = getResources().getIntArray(R.array.androidcolors);\n\n \n\n        // Enable clicks on the 'change color' button\n\n        mButton = (Button) findViewById(R.id.button1);\n\n        mButton.setOnClickListener(new View.OnClickListener() {\n\n \n\n            @Override\n\n            public void onClick(View v) {\n\n                showNextColor();\n\n            }\n\n        });\n\n \n\n        // Get the MediaRouter service\n\n        mMediaRouter = (MediaRouter) getSystemService(Context.MEDIA_ROUTER_SERVICE);\n\n    }\n\n \n\n    /**\n\n     * Implementing a {@link android.media.MediaRouter.Callback} to update the displayed\n\n     * {@link android.app.Presentation} when a route is selected, unselected or the\n\n     * presentation display has changed. The provided stub implementation\n\n     * {@link android.media.MediaRouter.SimpleCallback} is extended and only\n\n     * {@link android.media.MediaRouter.SimpleCallback#onRouteSelected(android.media.MediaRouter, int, android.media.MediaRouter.RouteInfo)}\n\n     * ,\n\n     * {@link android.media.MediaRouter.SimpleCallback#onRouteUnselected(android.media.MediaRouter, int, android.media.MediaRouter.RouteInfo)}\n\n     * and\n\n     * {@link android.media.MediaRouter.SimpleCallback#onRoutePresentationDisplayChanged(android.media.MediaRouter, android.media.MediaRouter.RouteInfo)}\n\n     * are overridden to update the displayed {@link android.app.Presentation} in\n\n     * {@link #updatePresentation()}. These callbacks enable or disable the\n\n     * second screen presentation based on the routing provided by the\n\n     * {@link android.media.MediaRouter} for {@link android.media.MediaRouter#ROUTE_TYPE_LIVE_VIDEO}\n\n     * streams. @\n\n     */\n\n    private final MediaRouter.SimpleCallback mMediaRouterCallback =\n\n            new MediaRouter.SimpleCallback() {\n\n \n\n                /**\n\n                 * A new route has been selected as active. Disable the current\n\n                 * route and enable the new one.\n\n                 */\n\n                @Override\n\n                public void onRouteSelected(MediaRouter router, int type, RouteInfo info) {\n\n                    updatePresentation();\n\n                }\n\n \n\n                /**\n\n                 * The route has been unselected.\n\n                 */\n\n                @Override\n\n                public void onRouteUnselected(MediaRouter router, int type, RouteInfo info) {\n\n                    updatePresentation();\n\n \n\n                }\n\n \n\n                /**\n\n                 * The route's presentation display has changed. This callback\n\n                 * is called when the presentation has been activated, removed\n\n                 * or its properties have changed.\n\n                 */\n\n                @Override\n\n                public void onRoutePresentationDisplayChanged(MediaRouter router, RouteInfo info) {\n\n                    updatePresentation();\n\n                }\n\n            };\n\n \n\n    /**\n\n     * Updates the displayed presentation to enable a secondary screen if it has\n\n     * been selected in the {@link android.media.MediaRouter} for the\n\n     * {@link android.media.MediaRouter#ROUTE_TYPE_LIVE_VIDEO} type. If no screen has been\n\n     * selected by the {@link android.media.MediaRouter}, the current screen is disabled.\n\n     * Otherwise a new {@link SamplePresentation} is initialized and shown on\n\n     * the secondary screen.\n\n     */\n\n    private void updatePresentation() {\n\n \n\n        // Get the selected route for live video\n\n        RouteInfo selectedRoute = mMediaRouter.getSelectedRoute(\n\n                MediaRouter.ROUTE_TYPE_LIVE_VIDEO);\n\n \n\n        // Get its Display if a valid route has been selected\n\n        Display selectedDisplay = null;\n\n        if (selectedRoute != null) {\n\n            selectedDisplay = selectedRoute.getPresentationDisplay();\n\n        }\n\n \n\n        /*\n\n         * Dismiss the current presentation if the display has changed or no new\n\n         * route has been selected\n\n         */\n\n        if (mPresentation != null && mPresentation.getDisplay() != selectedDisplay) {\n\n            mPresentation.dismiss();\n\n            mPresentation = null;\n\n            mButton.setEnabled(false);\n\n            mTextStatus.setText(R.string.secondary_notconnected);\n\n        }\n\n \n\n        /*\n\n         * Show a new presentation if the previous one has been dismissed and a\n\n         * route has been selected.\n\n         */\n\n        if (mPresentation == null && selectedDisplay != null) {\n\n \n\n            // Initialise a new Presentation for the Display\n\n            mPresentation = new SamplePresentation(this, selectedDisplay);\n\n            mPresentation.setOnDismissListener(mOnDismissListener);\n\n \n\n            // Try to show the presentation, this might fail if the display has\n\n            // gone away in the mean time\n\n            try {\n\n                mPresentation.show();\n\n                mTextStatus.setText(getResources().getString(R.string.secondary_connected,\n\n                        selectedRoute.getName(MainActivity.this)));\n\n                mButton.setEnabled(true);\n\n                showNextColor();\n\n            } catch (WindowManager.InvalidDisplayException ex) {\n\n                // Couldn't show presentation - display was already removed\n\n                mPresentation = null;\n\n            }\n\n        }\n\n \n\n    }\n\n \n\n    @Override\n\n    protected void onResume() {\n\n        super.onResume();\n\n \n\n        // Register a callback for all events related to live video devices\n\n        mMediaRouter.addCallback(MediaRouter.ROUTE_TYPE_LIVE_VIDEO, mMediaRouterCallback);\n\n \n\n        // Show the 'Not connected' status message\n\n        mButton.setEnabled(false);\n\n        mTextStatus.setText(R.string.secondary_notconnected);\n\n \n\n        // Update the displays based on the currently active routes\n\n        updatePresentation();\n\n    }\n\n \n\n    @Override\n\n    protected void onPause() {\n\n        super.onPause();\n\n \n\n        // Stop listening for changes to media routes.\n\n        mMediaRouter.removeCallback(mMediaRouterCallback);\n\n    }\n\n \n\n    @Override\n\n    protected void onStop() {\n\n        super.onStop();\n\n \n\n        // Dismiss the presentation when the activity is not visible.\n\n        if (mPresentation != null) {\n\n            mPresentation.dismiss();\n\n            mPresentation = null;\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Inflates the ActionBar or options menu. The menu file defines an item for\n\n     * the {@link android.app.MediaRouteActionProvider}, which is registered here for all\n\n     * live video devices using {@link android.media.MediaRouter#ROUTE_TYPE_LIVE_VIDEO}.\n\n     */\n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        super.onCreateOptionsMenu(menu);\n\n \n\n        getMenuInflater().inflate(R.menu.main, menu);\n\n \n\n        // Configure the media router action provider\n\n        MenuItem mediaRouteMenuItem = menu.findItem(R.id.menu_media_route);\n\n        MediaRouteActionProvider mediaRouteActionProvider =\n\n                (MediaRouteActionProvider) mediaRouteMenuItem.getActionProvider();\n\n        mediaRouteActionProvider.setRouteTypes(MediaRouter.ROUTE_TYPE_LIVE_VIDEO);\n\n \n\n        return true;\n\n    }\n\n \n\n    /**\n\n     * Listens for dismissal of the {@link SamplePresentation} and removes its\n\n     * reference.\n\n     */\n\n    private final DialogInterface.OnDismissListener mOnDismissListener =\n\n            new DialogInterface.OnDismissListener() {\n\n                @Override\n\n                public void onDismiss(DialogInterface dialog) {\n\n                    if (dialog == mPresentation) {\n\n                        mPresentation = null;\n\n                    }\n\n                }\n\n            };\n\n \n\n    // Views used to display status information on the primary screen\n\n    private TextView mTextStatus;\n\n    private Button mButton;\n\n \n\n    // selected color index\n\n    private int mColor = 0;\n\n \n\n    // background colors\n\n    public int[] mColors;\n\n \n\n    /**\n\n     * Displays the next color on the secondary screen if it is activate.\n\n     */\n\n    private void showNextColor() {\n\n        if (mPresentation != null) {\n\n            // a second screen is active and initialized, show the next color\n\n            mPresentation.setColor(mColors[mColor]);\n\n            mColor = (mColor + 1) % mColors.length;\n\n        }\n\n    }\n\n \n\n}\n  ","SamplePresentation.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *       http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.basicmediarouter;\n\n \n\nimport android.app.Presentation;\n\nimport android.content.Context;\n\nimport android.os.Bundle;\n\nimport android.view.Display;\n\nimport android.widget.LinearLayout;\n\nimport android.widget.TextView;\n\n \n\n/**\n\n * <p>\n\n * A {@link android.app.Presentation} used to demonstrate interaction between primary and\n\n * secondary screens.\n\n * </p>\n\n * <p>\n\n * It displays the name of the display in which it has been embedded (see\n\n * {@link android.app.Presentation#getDisplay()}) and exposes a facility to change its\n\n * background color and display its text.\n\n * </p>\n\n */\n\npublic class SamplePresentation extends Presentation {\n\n \n\n    private LinearLayout mLayout;\n\n    private TextView mText;\n\n \n\n    public SamplePresentation(Context outerContext, Display display) {\n\n        super(outerContext, display);\n\n    }\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n \n\n        // Set the content view to the custom layout\n\n        setContentView(R.layout.display);\n\n \n\n        // Get the Views\n\n        mLayout = (LinearLayout) findViewById(R.id.display_layout);\n\n        mText = (TextView) findViewById(R.id.display_text);\n\n \n\n        /*\n\n         * Show the name of the display this presentation was embedded in.\n\n         */\n\n        TextView smallText = (TextView) findViewById(R.id.display_smalltext);\n\n        final String name = getDisplay().getName();\n\n        smallText.setText(getResources().getString(R.string.display_name, name));\n\n    }\n\n \n\n    /**\n\n     * Set the background color of the layout and display the color as a String.\n\n     *\n\n     * @param color The background color\n\n     */\n\n    public void setColor(int color) {\n\n        mLayout.setBackgroundColor(color);\n\n \n\n        // Display the color as a string on screen\n\n        String s = getResources().getString(R.string.display_color, color);\n\n        mText.setText(s);\n\n    }\n\n \n\n}\n  "},"com.example.android.common.logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.basicmediarouter\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\" >\n\n \n\n    <uses-sdk\n\n        android:minSdkVersion=\"17\"\n\n        android:targetSdkVersion=\"17\" />\n\n \n\n    <application\n\n        android:allowBackup=\"true\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:label=\"@string/app_name\"\n\n        android:theme=\"@style/AppTheme\" >\n\n        <activity\n\n            android:name=\".MainActivity\"\n\n            android:label=\"@string/app_name\" >\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n</manifest>\n  "},"MediaRecorder":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com/samples/MediaRecorder/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com/samples/MediaRecorder/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com/samples/MediaRecorder/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com/samples/MediaRecorder/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com/samples/MediaRecorder/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleMessageTile\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n            android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n            android:text=\"@string/intro_message\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n  ","sample_main.xml":"\n    \n\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:tools=\"http://schemas.android.com/tools\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n\n    android:paddingRight=\"@dimen/activity_horizontal_margin\"\n\n    android:paddingTop=\"@dimen/activity_vertical_margin\"\n\n    android:paddingBottom=\"@dimen/activity_vertical_margin\"\n\n    android:orientation=\"vertical\"\n\n    tools:context=\".MainActivity\">\n\n \n\n    <TextureView\n\n        android:layout_width=\"fill_parent\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:id=\"@+id/surface_view\" />\n\n \n\n    <Button\n\n            android:layout_width=\"fill_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:id=\"@+id/button_capture\"\n\n            android:layout_gravity=\"bottom\"\n\n            android:onClick=\"onCaptureClick\"\n\n            android:text=\"@string/btnCapture\"/>\n\n</FrameLayout>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">MediaRecorder</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            This sample uses the camera/camcorder as the A/V source for the MediaRecorder API.\n\n            A TextureView is used as the camera preview which limits the code to API 14+. This\n\n            can be easily replaced with a SurfaceView to run on older devices.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","dimens.xml":"\n    \n\n<!--\n\n  Copyright (C) 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n    <!-- Default screen margins, per the Android Design guidelines. -->\n\n    <dimen name=\"activity_horizontal_margin\">16dp</dimen>\n\n    <dimen name=\"activity_vertical_margin\">16dp</dimen>\n\n</resources>\n  ","strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright (C) 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <string name=\"action_settings\">Settings</string>\n\n    <string name=\"hello_world\">Hello world!</string>\n\n    <string name=\"btnCapture\">capture</string>\n\n \n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw720dp-land":{"dimens.xml":"\n    \n\n<!--\n\n  Copyright (C) 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n    <!-- Customize dimensions originally defined in res/values/dimens.xml (such as\n\n         screen margins) for sw720dp devices (e.g. 10\" tablets) in landscape here. -->\n\n    <dimen name=\"activity_horizontal_margin\">128dp</dimen>\n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.common.media":{"CameraHelper.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.media;\n\n \n\nimport android.annotation.TargetApi;\n\nimport android.hardware.Camera;\n\nimport android.os.Build;\n\nimport android.os.Environment;\n\nimport android.util.Log;\n\n \n\nimport java.io.File;\n\nimport java.text.SimpleDateFormat;\n\nimport java.util.Date;\n\nimport java.util.List;\n\n \n\n/**\n\n * Camera related utilities.\n\n */\n\npublic class CameraHelper {\n\n \n\n    public static final int MEDIA_TYPE_IMAGE = 1;\n\n    public static final int MEDIA_TYPE_VIDEO = 2;\n\n \n\n    /**\n\n     * Iterate over supported camera preview sizes to see which one best fits the\n\n     * dimensions of the given view while maintaining the aspect ratio. If none can,\n\n     * be lenient with the aspect ratio.\n\n     *\n\n     * @param sizes Supported camera preview sizes.\n\n     * @param w The width of the view.\n\n     * @param h The height of the view.\n\n     * @return Best match camera preview size to fit in the view.\n\n     */\n\n    public static  Camera.Size getOptimalPreviewSize(List<Camera.Size> sizes, int w, int h) {\n\n        // Use a very small tolerance because we want an exact match.\n\n        final double ASPECT_TOLERANCE = 0.1;\n\n        double targetRatio = (double) w / h;\n\n        if (sizes == null)\n\n            return null;\n\n \n\n        Camera.Size optimalSize = null;\n\n \n\n        // Start with max value and refine as we iterate over available preview sizes. This is the\n\n        // minimum difference between view and camera height.\n\n        double minDiff = Double.MAX_VALUE;\n\n \n\n        // Target view height\n\n        int targetHeight = h;\n\n \n\n        // Try to find a preview size that matches aspect ratio and the target view size.\n\n        // Iterate over all available sizes and pick the largest size that can fit in the view and\n\n        // still maintain the aspect ratio.\n\n        for (Camera.Size size : sizes) {\n\n            double ratio = (double) size.width / size.height;\n\n            if (Math.abs(ratio - targetRatio) > ASPECT_TOLERANCE)\n\n                continue;\n\n            if (Math.abs(size.height - targetHeight) < minDiff) {\n\n                optimalSize = size;\n\n                minDiff = Math.abs(size.height - targetHeight);\n\n            }\n\n        }\n\n \n\n        // Cannot find preview size that matches the aspect ratio, ignore the requirement\n\n        if (optimalSize == null) {\n\n            minDiff = Double.MAX_VALUE;\n\n            for (Camera.Size size : sizes) {\n\n                if (Math.abs(size.height - targetHeight) < minDiff) {\n\n                    optimalSize = size;\n\n                    minDiff = Math.abs(size.height - targetHeight);\n\n                }\n\n            }\n\n        }\n\n        return optimalSize;\n\n    }\n\n \n\n    /**\n\n     * @return the default camera on the device. Return null if there is no camera on the device.\n\n     */\n\n    public static Camera getDefaultCameraInstance() {\n\n        return Camera.open();\n\n    }\n\n \n\n \n\n    /**\n\n     * @return the default rear/back facing camera on the device. Returns null if camera is not\n\n     * available.\n\n     */\n\n    public static Camera getDefaultBackFacingCameraInstance() {\n\n        return getDefaultCamera(Camera.CameraInfo.CAMERA_FACING_BACK);\n\n    }\n\n \n\n    /**\n\n     * @return the default front facing camera on the device. Returns null if camera is not\n\n     * available.\n\n     */\n\n    public static Camera getDefaultFrontFacingCameraInstance() {\n\n        return getDefaultCamera(Camera.CameraInfo.CAMERA_FACING_FRONT);\n\n    }\n\n \n\n \n\n    /**\n\n     *\n\n     * @param position Physical position of the camera i.e Camera.CameraInfo.CAMERA_FACING_FRONT\n\n     *                 or Camera.CameraInfo.CAMERA_FACING_BACK.\n\n     * @return the default camera on the device. Returns null if camera is not available.\n\n     */\n\n    @TargetApi(Build.VERSION_CODES.GINGERBREAD)\n\n    private static Camera getDefaultCamera(int position) {\n\n        // Find the total number of cameras available\n\n        int  mNumberOfCameras = Camera.getNumberOfCameras();\n\n \n\n        // Find the ID of the back-facing (\"default\") camera\n\n        Camera.CameraInfo cameraInfo = new Camera.CameraInfo();\n\n        for (int i = 0; i < mNumberOfCameras; i++) {\n\n            Camera.getCameraInfo(i, cameraInfo);\n\n            if (cameraInfo.facing == position) {\n\n                return Camera.open(i);\n\n \n\n            }\n\n        }\n\n \n\n        return null;\n\n    }\n\n \n\n    /**\n\n     * Creates a media file in the {@code Environment.DIRECTORY_PICTURES} directory. The directory\n\n     * is persistent and available to other applications like gallery.\n\n     *\n\n     * @param type Media type. Can be video or image.\n\n     * @return A file object pointing to the newly created file.\n\n     */\n\n    public  static File getOutputMediaFile(int type){\n\n        // To be safe, you should check that the SDCard is mounted\n\n        // using Environment.getExternalStorageState() before doing this.\n\n        if (!Environment.getExternalStorageState().equalsIgnoreCase(Environment.MEDIA_MOUNTED)) {\n\n            return  null;\n\n        }\n\n \n\n        File mediaStorageDir = new File(Environment.getExternalStoragePublicDirectory(\n\n                Environment.DIRECTORY_PICTURES), \"CameraSample\");\n\n        // This location works best if you want the created images to be shared\n\n        // between applications and persist after your app has been uninstalled.\n\n \n\n        // Create the storage directory if it does not exist\n\n        if (! mediaStorageDir.exists()){\n\n            if (! mediaStorageDir.mkdirs()) {\n\n                Log.d(\"CameraSample\", \"failed to create directory\");\n\n                return null;\n\n            }\n\n        }\n\n \n\n        // Create a media file name\n\n        String timeStamp = new SimpleDateFormat(\"yyyyMMdd_HHmmss\").format(new Date());\n\n        File mediaFile;\n\n        if (type == MEDIA_TYPE_IMAGE){\n\n            mediaFile = new File(mediaStorageDir.getPath() + File.separator +\n\n                    \"IMG_\"+ timeStamp + \".jpg\");\n\n        } else if(type == MEDIA_TYPE_VIDEO) {\n\n            mediaFile = new File(mediaStorageDir.getPath() + File.separator +\n\n                    \"VID_\"+ timeStamp + \".mp4\");\n\n        } else {\n\n            return null;\n\n        }\n\n \n\n        return mediaFile;\n\n    }\n\n \n\n}\n  ","MediaCodecWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.media;\n\n \n\nimport android.media.*;\n\nimport android.os.Handler;\n\nimport android.os.Looper;\n\nimport android.view.Surface;\n\n \n\nimport java.nio.ByteBuffer;\n\nimport java.util.ArrayDeque;\n\nimport java.util.Queue;\n\n \n\n/**\n\n * Simplifies the MediaCodec interface by wrapping around the buffer processing operations.\n\n */\n\npublic class MediaCodecWrapper {\n\n \n\n    // Handler to use for {@code OutputSampleListener} and {code OutputFormatChangedListener}\n\n    // callbacks\n\n    private Handler mHandler;\n\n \n\n \n\n    // Callback when media output format changes.\n\n    public interface OutputFormatChangedListener {\n\n        void outputFormatChanged(MediaCodecWrapper sender, MediaFormat newFormat);\n\n    }\n\n \n\n    private OutputFormatChangedListener mOutputFormatChangedListener = null;\n\n \n\n    /**\n\n     * Callback for decodes frames. Observers can register a listener for optional stream\n\n     * of decoded data\n\n     */\n\n    public interface OutputSampleListener {\n\n        void outputSample(MediaCodecWrapper sender, MediaCodec.BufferInfo info, ByteBuffer buffer);\n\n    }\n\n \n\n    /**\n\n     * The {@link MediaCodec} that is managed by this class.\n\n     */\n\n    private MediaCodec mDecoder;\n\n \n\n    // References to the internal buffers managed by the codec. The codec\n\n    // refers to these buffers by index, never by reference so it's up to us\n\n    // to keep track of which buffer is which.\n\n    private ByteBuffer[] mInputBuffers;\n\n    private ByteBuffer[] mOutputBuffers;\n\n \n\n    // Indices of the input buffers that are currently available for writing. We'll\n\n    // consume these in the order they were dequeued from the codec.\n\n    private Queue<Integer> mAvailableInputBuffers;\n\n \n\n    // Indices of the output buffers that currently hold valid data, in the order\n\n    // they were produced by the codec.\n\n    private Queue<Integer> mAvailableOutputBuffers;\n\n \n\n    // Information about each output buffer, by index. Each entry in this array\n\n    // is valid if and only if its index is currently contained in mAvailableOutputBuffers.\n\n    private MediaCodec.BufferInfo[] mOutputBufferInfo;\n\n \n\n    // An (optional) stream that will receive decoded data.\n\n    private OutputSampleListener mOutputSampleListener;\n\n \n\n    private MediaCodecWrapper(MediaCodec codec) {\n\n        mDecoder = codec;\n\n        codec.start();\n\n        mInputBuffers = codec.getInputBuffers();\n\n        mOutputBuffers = codec.getOutputBuffers();\n\n        mOutputBufferInfo = new MediaCodec.BufferInfo[mOutputBuffers.length];\n\n        mAvailableInputBuffers = new ArrayDeque<Integer>(mOutputBuffers.length);\n\n        mAvailableOutputBuffers = new ArrayDeque<Integer>(mInputBuffers.length);\n\n    }\n\n \n\n    /**\n\n     * Releases resources and ends the encoding/decoding session.\n\n     */\n\n    public void stopAndRelease() {\n\n        mDecoder.stop();\n\n        mDecoder.release();\n\n        mDecoder = null;\n\n        mHandler = null;\n\n    }\n\n \n\n    /**\n\n     * Getter for the registered {@link OutputFormatChangedListener}\n\n     */\n\n    public OutputFormatChangedListener getOutputFormatChangedListener() {\n\n        return mOutputFormatChangedListener;\n\n    }\n\n \n\n    /**\n\n     *\n\n     * @param outputFormatChangedListener the listener for callback.\n\n     * @param handler message handler for posting the callback.\n\n     */\n\n    public void setOutputFormatChangedListener(final OutputFormatChangedListener\n\n            outputFormatChangedListener, Handler handler) {\n\n        mOutputFormatChangedListener = outputFormatChangedListener;\n\n \n\n        // Making sure we don't block ourselves due to a bad implementation of the callback by\n\n        // using a handler provided by client.\n\n        Looper looper;\n\n        mHandler = handler;\n\n        if (outputFormatChangedListener != null && mHandler == null) {\n\n            if ((looper = Looper.myLooper()) != null) {\n\n                mHandler = new Handler();\n\n            } else {\n\n                throw new IllegalArgumentException(\n\n                        \"Looper doesn't exist in the calling thread\");\n\n            }\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Constructs the {@link MediaCodecWrapper} wrapper object around the video codec.\n\n     * The codec is created using the encapsulated information in the\n\n     * {@link MediaFormat} object.\n\n     *\n\n     * @param trackFormat The format of the media object to be decoded.\n\n     * @param surface Surface to render the decoded frames.\n\n     * @return\n\n     */\n\n    public static MediaCodecWrapper fromVideoFormat(final MediaFormat trackFormat,\n\n            Surface surface) {\n\n        MediaCodecWrapper result = null;\n\n        MediaCodec videoCodec = null;\n\n \n\n        final String mimeType = trackFormat.getString(MediaFormat.KEY_MIME);\n\n \n\n        // Check to see if this is actually a video mime type. If it is, then create\n\n        // a codec that can decode this mime type.\n\n        if (mimeType.contains(\"video/\")) {\n\n            videoCodec = MediaCodec.createDecoderByType(mimeType);\n\n            videoCodec.configure(trackFormat, surface, null,  0);\n\n \n\n        }\n\n \n\n        // If codec creation was successful, then create a wrapper object around the\n\n        // newly created codec.\n\n        if (videoCodec != null) {\n\n            result = new MediaCodecWrapper(videoCodec);\n\n        }\n\n \n\n        return result;\n\n    }\n\n \n\n \n\n    /**\n\n     * Write a media sample to the decoder.\n\n     *\n\n     * A \"sample\" here refers to a single atomic access unit in the media stream. The definition\n\n     * of \"access unit\" is dependent on the type of encoding used, but it typically refers to\n\n     * a single frame of video or a few seconds of audio. {@link android.media.MediaExtractor}\n\n     * extracts data from a stream one sample at a time.\n\n     *\n\n     * @param input A ByteBuffer containing the input data for one sample. The buffer must be set\n\n     * up for reading, with its position set to the beginning of the sample data and its limit\n\n     * set to the end of the sample data.\n\n     *\n\n     * @param presentationTimeUs  The time, relative to the beginning of the media stream,\n\n     * at which this buffer should be rendered.\n\n     *\n\n     * @param flags Flags to pass to the decoder. See {@link MediaCodec#queueInputBuffer(int,\n\n     * int, int, long, int)}\n\n     *\n\n     * @throws MediaCodec.CryptoException\n\n     */\n\n    public boolean writeSample(final ByteBuffer input,\n\n            final MediaCodec.CryptoInfo crypto,\n\n            final long presentationTimeUs,\n\n            final int flags) throws MediaCodec.CryptoException, WriteException {\n\n        boolean result = false;\n\n        int size = input.remaining();\n\n \n\n        // check if we have dequed input buffers available from the codec\n\n        if (size > 0 &&  !mAvailableInputBuffers.isEmpty()) {\n\n            int index = mAvailableInputBuffers.remove();\n\n            ByteBuffer buffer = mInputBuffers[index];\n\n \n\n            // we can't write our sample to a lesser capacity input buffer.\n\n            if (size > buffer.capacity()) {\n\n                throw new MediaCodecWrapper.WriteException(String.format(\n\n                        \"Insufficient capacity in MediaCodec buffer: \"\n\n                            + \"tried to write %d, buffer capacity is %d.\",\n\n                        input.remaining(),\n\n                        buffer.capacity()));\n\n            }\n\n \n\n            buffer.clear();\n\n            buffer.put(input);\n\n \n\n            // Submit the buffer to the codec for decoding. The presentationTimeUs\n\n            // indicates the position (play time) for the current sample.\n\n            if (crypto == null) {\n\n                mDecoder.queueInputBuffer(index, 0, size, presentationTimeUs, flags);\n\n            } else {\n\n                mDecoder.queueSecureInputBuffer(index, 0, crypto, presentationTimeUs, flags);\n\n            }\n\n            result = true;\n\n        }\n\n        return result;\n\n    }\n\n \n\n    static MediaCodec.CryptoInfo cryptoInfo= new MediaCodec.CryptoInfo();\n\n \n\n    /**\n\n     * Write a media sample to the decoder.\n\n     *\n\n     * A \"sample\" here refers to a single atomic access unit in the media stream. The definition\n\n     * of \"access unit\" is dependent on the type of encoding used, but it typically refers to\n\n     * a single frame of video or a few seconds of audio. {@link android.media.MediaExtractor}\n\n     * extracts data from a stream one sample at a time.\n\n     *\n\n     * @param extractor  Instance of {@link android.media.MediaExtractor} wrapping the media.\n\n     *\n\n     * @param presentationTimeUs The time, relative to the beginning of the media stream,\n\n     * at which this buffer should be rendered.\n\n     *\n\n     * @param flags  Flags to pass to the decoder. See {@link MediaCodec#queueInputBuffer(int,\n\n     * int, int, long, int)}\n\n     *\n\n     * @throws MediaCodec.CryptoException\n\n     */\n\n    public boolean writeSample(final MediaExtractor extractor,\n\n            final boolean isSecure,\n\n            final long presentationTimeUs,\n\n            int flags) {\n\n        boolean result = false;\n\n        boolean isEos = false;\n\n \n\n        if (!mAvailableInputBuffers.isEmpty()) {\n\n            int index = mAvailableInputBuffers.remove();\n\n            ByteBuffer buffer = mInputBuffers[index];\n\n \n\n            // reads the sample from the file using extractor into the buffer\n\n            int size = extractor.readSampleData(buffer, 0);\n\n            if (size <= 0) {\n\n                flags |= MediaCodec.BUFFER_FLAG_END_OF_STREAM;\n\n            }\n\n \n\n            // Submit the buffer to the codec for decoding. The presentationTimeUs\n\n            // indicates the position (play time) for the current sample.\n\n            if (!isSecure) {\n\n                mDecoder.queueInputBuffer(index, 0, size, presentationTimeUs, flags);\n\n            } else {\n\n                extractor.getSampleCryptoInfo(cryptoInfo);\n\n                mDecoder.queueSecureInputBuffer(index, 0, cryptoInfo, presentationTimeUs, flags);\n\n            }\n\n \n\n            result = true;\n\n        }\n\n        return result;\n\n    }\n\n \n\n    /**\n\n     * Performs a peek() operation in the queue to extract media info for the buffer ready to be\n\n     * released i.e. the head element of the queue.\n\n     *\n\n     * @param out_bufferInfo An output var to hold the buffer info.\n\n     *\n\n     * @return True, if the peek was successful.\n\n     */\n\n    public boolean peekSample(MediaCodec.BufferInfo out_bufferInfo) {\n\n        // dequeue available buffers and synchronize our data structures with the codec.\n\n        update();\n\n        boolean result = false;\n\n        if (!mAvailableOutputBuffers.isEmpty()) {\n\n            int index = mAvailableOutputBuffers.peek();\n\n            MediaCodec.BufferInfo info = mOutputBufferInfo[index];\n\n            // metadata of the sample\n\n            out_bufferInfo.set(\n\n                    info.offset,\n\n                    info.size,\n\n                    info.presentationTimeUs,\n\n                    info.flags);\n\n            result = true;\n\n        }\n\n        return result;\n\n    }\n\n \n\n    /**\n\n     * Processes, releases and optionally renders the output buffer available at the head of the\n\n     * queue. All observers are notified with a callback. See {@link\n\n     * OutputSampleListener#outputSample(MediaCodecWrapper, android.media.MediaCodec.BufferInfo,\n\n     * java.nio.ByteBuffer)}\n\n     *\n\n     * @param render True, if the buffer is to be rendered on the {@link Surface} configured\n\n     *\n\n     */\n\n    public void popSample(boolean render) {\n\n        // dequeue available buffers and synchronize our data structures with the codec.\n\n        update();\n\n        if (!mAvailableOutputBuffers.isEmpty()) {\n\n            int index = mAvailableOutputBuffers.remove();\n\n \n\n            if (render && mOutputSampleListener != null) {\n\n                ByteBuffer buffer = mOutputBuffers[index];\n\n                MediaCodec.BufferInfo info = mOutputBufferInfo[index];\n\n                mOutputSampleListener.outputSample(this, info, buffer);\n\n            }\n\n \n\n            // releases the buffer back to the codec\n\n            mDecoder.releaseOutputBuffer(index, render);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Synchronize this object's state with the internal state of the wrapped\n\n     * MediaCodec.\n\n     */\n\n    private void update() {\n\n        int index;\n\n \n\n        // Get valid input buffers from the codec to fill later in the same order they were\n\n        // made available by the codec.\n\n        while ((index = mDecoder.dequeueInputBuffer(0)) != MediaCodec.INFO_TRY_AGAIN_LATER) {\n\n            mAvailableInputBuffers.add(index);\n\n        }\n\n \n\n \n\n        // Likewise with output buffers. If the output buffers have changed, start using the\n\n        // new set of output buffers. If the output format has changed, notify listeners.\n\n        MediaCodec.BufferInfo info = new MediaCodec.BufferInfo();\n\n        while ((index = mDecoder.dequeueOutputBuffer(info, 0)) !=  MediaCodec.INFO_TRY_AGAIN_LATER) {\n\n            switch (index) {\n\n                case MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED:\n\n                    mOutputBuffers = mDecoder.getOutputBuffers();\n\n                    mOutputBufferInfo = new MediaCodec.BufferInfo[mOutputBuffers.length];\n\n                    mAvailableOutputBuffers.clear();\n\n                    break;\n\n                case MediaCodec.INFO_OUTPUT_FORMAT_CHANGED:\n\n                    if (mOutputFormatChangedListener != null) {\n\n                        mHandler.post(new Runnable() {\n\n                            @Override\n\n                            public void run() {\n\n                                mOutputFormatChangedListener\n\n                                        .outputFormatChanged(MediaCodecWrapper.this,\n\n                                                mDecoder.getOutputFormat());\n\n \n\n                            }\n\n                        });\n\n                    }\n\n                    break;\n\n                default:\n\n                    // Making sure the index is valid before adding to output buffers. We've already\n\n                    // handled INFO_TRY_AGAIN_LATER, INFO_OUTPUT_FORMAT_CHANGED &\n\n                    // INFO_OUTPUT_BUFFERS_CHANGED i.e all the other possible return codes but\n\n                    // asserting index value anyways for future-proofing the code.\n\n                    if(index >= 0) {\n\n                        mOutputBufferInfo[index] = info;\n\n                        mAvailableOutputBuffers.add(index);\n\n                    } else {\n\n                        throw new IllegalStateException(\"Unknown status from dequeueOutputBuffer\");\n\n                    }\n\n                    break;\n\n            }\n\n \n\n        }\n\n \n\n    }\n\n \n\n    private class WriteException extends Throwable {\n\n        private WriteException(final String detailMessage) {\n\n            super(detailMessage);\n\n        }\n\n    }\n\n}\n  "},"com.example.android.mediarecorder":{"MainActivity.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.mediarecorder;\n\n \n\nimport android.annotation.TargetApi;\n\nimport android.app.Activity;\n\nimport android.hardware.Camera;\n\nimport android.media.CamcorderProfile;\n\nimport android.media.MediaRecorder;\n\nimport android.os.AsyncTask;\n\nimport android.os.Build;\n\nimport android.os.Bundle;\n\nimport android.util.Log;\n\nimport android.view.Menu;\n\nimport android.view.TextureView;\n\nimport android.view.View;\n\nimport android.widget.Button;\n\n \n\nimport com.example.android.common.media.CameraHelper;\n\n \n\nimport java.io.IOException;\n\nimport java.util.List;\n\n \n\n/**\n\n *  This activity uses the camera/camcorder as the A/V source for the {@link android.media.MediaRecorder} API.\n\n *  A {@link android.view.TextureView} is used as the camera preview which limits the code to API 14+. This\n\n *  can be easily replaced with a {@link android.view.SurfaceView} to run on older devices.\n\n */\n\npublic class MainActivity extends Activity {\n\n \n\n    private Camera mCamera;\n\n    private TextureView mPreview;\n\n    private MediaRecorder mMediaRecorder;\n\n \n\n    private boolean isRecording = false;\n\n    private static final String TAG = \"Recorder\";\n\n    private Button captureButton;\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.sample_main);\n\n \n\n        mPreview = (TextureView) findViewById(R.id.surface_view);\n\n        captureButton = (Button) findViewById(R.id.button_capture);\n\n    }\n\n \n\n    /**\n\n     * The capture button controls all user interaction. When recording, the button click\n\n     * stops recording, releases {@link android.media.MediaRecorder} and {@link android.hardware.Camera}. When not recording,\n\n     * it prepares the {@link android.media.MediaRecorder} and starts recording.\n\n     *\n\n     * @param view the view generating the event.\n\n     */\n\n    public void onCaptureClick(View view) {\n\n        if (isRecording) {\n\n \n\n            // stop recording and release camera\n\n            mMediaRecorder.stop();  // stop the recording\n\n            releaseMediaRecorder(); // release the MediaRecorder object\n\n            mCamera.lock();         // take camera access back from MediaRecorder\n\n \n\n            // inform the user that recording has stopped\n\n            setCaptureButtonText(\"Capture\");\n\n            isRecording = false;\n\n            releaseCamera();\n\n \n\n        } else {\n\n \n\n \n\n            new MediaPrepareTask().execute(null, null, null);\n\n \n\n \n\n        }\n\n    }\n\n \n\n    private void setCaptureButtonText(String title) {\n\n        captureButton.setText(title);\n\n    }\n\n \n\n    @Override\n\n    protected void onPause() {\n\n        super.onPause();\n\n        // if we are using MediaRecorder, release it first\n\n        releaseMediaRecorder();\n\n        // release the camera immediately on pause event\n\n        releaseCamera();\n\n    }\n\n \n\n    private void releaseMediaRecorder(){\n\n        if (mMediaRecorder != null) {\n\n            // clear recorder configuration\n\n            mMediaRecorder.reset();\n\n            // release the recorder object\n\n            mMediaRecorder.release();\n\n            mMediaRecorder = null;\n\n            // Lock camera for later use i.e taking it back from MediaRecorder.\n\n            // MediaRecorder doesn't need it anymore and we will release it if the activity pauses.\n\n            mCamera.lock();\n\n        }\n\n    }\n\n \n\n    private void releaseCamera(){\n\n        if (mCamera != null){\n\n            // release the camera for other applications\n\n            mCamera.release();\n\n            mCamera = null;\n\n        }\n\n    }\n\n \n\n    @TargetApi(Build.VERSION_CODES.HONEYCOMB)\n\n    private boolean prepareVideoRecorder(){\n\n \n\n        mCamera = CameraHelper.getDefaultCameraInstance();\n\n \n\n        // We need to make sure that our preview and recording video size are supported by the\n\n        // camera. Query camera to find all the sizes and choose the optimal size given the\n\n        // dimensions of our preview surface.\n\n        Camera.Parameters parameters = mCamera.getParameters();\n\n        List<Camera.Size> mSupportedPreviewSizes = parameters.getSupportedPreviewSizes();\n\n        Camera.Size optimalSize = CameraHelper.getOptimalPreviewSize(mSupportedPreviewSizes,\n\n                mPreview.getWidth(), mPreview.getHeight());\n\n \n\n        // Use the same size for recording profile.\n\n        CamcorderProfile profile = CamcorderProfile.get(CamcorderProfile.QUALITY_HIGH);\n\n        profile.videoFrameWidth = optimalSize.width;\n\n        profile.videoFrameHeight = optimalSize.height;\n\n \n\n        // likewise for the camera object itself.\n\n        parameters.setPreviewSize(profile.videoFrameWidth, profile.videoFrameHeight);\n\n        mCamera.setParameters(parameters);\n\n        try {\n\n                // Requires API level 11+, For backward compatibility use {@link setPreviewDisplay}\n\n                // with {@link SurfaceView}\n\n                mCamera.setPreviewTexture(mPreview.getSurfaceTexture());\n\n        } catch (IOException e) {\n\n            Log.e(TAG, \"Surface texture is unavailable or unsuitable\" + e.getMessage());\n\n            return false;\n\n        }\n\n \n\n \n\n        mMediaRecorder = new MediaRecorder();\n\n \n\n        // Step 1: Unlock and set camera to MediaRecorder\n\n        mCamera.unlock();\n\n        mMediaRecorder.setCamera(mCamera);\n\n \n\n        // Step 2: Set sources\n\n        mMediaRecorder.setAudioSource(MediaRecorder.AudioSource.DEFAULT );\n\n        mMediaRecorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);\n\n \n\n        // Step 3: Set a CamcorderProfile (requires API Level 8 or higher)\n\n        mMediaRecorder.setProfile(profile);\n\n \n\n        // Step 4: Set output file\n\n        mMediaRecorder.setOutputFile(CameraHelper.getOutputMediaFile(\n\n                CameraHelper.MEDIA_TYPE_VIDEO).toString());\n\n \n\n        // Step 5: Prepare configured MediaRecorder\n\n        try {\n\n            mMediaRecorder.prepare();\n\n        } catch (IllegalStateException e) {\n\n            Log.d(TAG, \"IllegalStateException preparing MediaRecorder: \" + e.getMessage());\n\n            releaseMediaRecorder();\n\n            return false;\n\n        } catch (IOException e) {\n\n            Log.d(TAG, \"IOException preparing MediaRecorder: \" + e.getMessage());\n\n            releaseMediaRecorder();\n\n            return false;\n\n        }\n\n        return true;\n\n    }\n\n \n\n    /**\n\n     * Asynchronous task for preparing the {@link android.media.MediaRecorder} since it's a long blocking\n\n     * operation.\n\n     */\n\n    class MediaPrepareTask extends AsyncTask<Void, Void, Boolean> {\n\n \n\n        @Override\n\n        protected Boolean doInBackground(Void... voids) {\n\n            // initialize video camera\n\n            if (prepareVideoRecorder()) {\n\n                // Camera is available and unlocked, MediaRecorder is prepared,\n\n                // now you can start recording\n\n                mMediaRecorder.start();\n\n \n\n                isRecording = true;\n\n            } else {\n\n                // prepare didn't work, release the camera\n\n                releaseMediaRecorder();\n\n                return false;\n\n            }\n\n            return true;\n\n        }\n\n \n\n        @Override\n\n        protected void onPostExecute(Boolean result) {\n\n            if (!result) {\n\n                MainActivity.this.finish();\n\n            }\n\n            // inform the user that recording has started\n\n            setCaptureButtonText(\"Stop\");\n\n \n\n        }\n\n    }\n\n \n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.mediarecorder\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk\n\n        android:minSdkVersion=\"14\"\n\n        android:targetSdkVersion=\"17\" />\n\n \n\n    <!-- This app records A/V content from camera and stores it to disk -->\n\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n\n    <uses-permission android:name=\"android.permission.RECORD_VIDEO\" />\n\n    <uses-permission android:name=\"android.permission.RECORD_AUDIO\"/>\n\n    <uses-permission android:name=\"android.permission.CAMERA\" />\n\n    <uses-feature android:name=\"android.hardware.camera\" />\n\n \n\n    <application\n\n        android:allowBackup=\"true\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:label=\"@string/app_name\"\n\n        android:theme=\"@style/AppTheme\">\n\n        <!-- Since this sample records video from camera preview, locking the orientation to\n\n            landscape. Landscape mode offers us more preview space with standard video aspect\n\n            ratios (width > height) -->\n\n        <activity\n\n            android:name=\".MainActivity\"\n\n            android:label=\"@string/app_name\"\n\n            android:screenOrientation=\"landscape\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n \n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n</manifest>\n  "},"MediaRouter":{"res":{"drawable":{"list_background.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:state_pressed=\"true\"\n\n          android:drawable=\"@color/list_highlight_color\" />\n\n    <item\n\n          android:drawable=\"@android:color/transparent\" />\n\n</selector>\n  "},"drawable-hdpi":{"ic_action_pause.png":"http://developer.android.com/samples/MediaRouter/res/drawable-hdpi/ic_action_pause.png","ic_action_play.png":"http://developer.android.com/samples/MediaRouter/res/drawable-hdpi/ic_action_play.png","ic_action_stop.png":"http://developer.android.com/samples/MediaRouter/res/drawable-hdpi/ic_action_stop.png","ic_launcher.png":"http://developer.android.com/samples/MediaRouter/res/drawable-hdpi/ic_launcher.png","ic_media_pause.png":"http://developer.android.com/samples/MediaRouter/res/drawable-hdpi/ic_media_pause.png","ic_media_play.png":"http://developer.android.com/samples/MediaRouter/res/drawable-hdpi/ic_media_play.png","ic_media_stop.png":"http://developer.android.com/samples/MediaRouter/res/drawable-hdpi/ic_media_stop.png","ic_menu_add.png":"http://developer.android.com/samples/MediaRouter/res/drawable-hdpi/ic_menu_add.png","ic_menu_delete.png":"http://developer.android.com/samples/MediaRouter/res/drawable-hdpi/ic_menu_delete.png","tile.9.png":"http://developer.android.com/samples/MediaRouter/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_action_pause.png":"http://developer.android.com/samples/MediaRouter/res/drawable-mdpi/ic_action_pause.png","ic_action_play.png":"http://developer.android.com/samples/MediaRouter/res/drawable-mdpi/ic_action_play.png","ic_action_stop.png":"http://developer.android.com/samples/MediaRouter/res/drawable-mdpi/ic_action_stop.png","ic_launcher.png":"http://developer.android.com/samples/MediaRouter/res/drawable-mdpi/ic_launcher.png","ic_media_pause.png":"http://developer.android.com/samples/MediaRouter/res/drawable-mdpi/ic_media_pause.png","ic_media_play.png":"http://developer.android.com/samples/MediaRouter/res/drawable-mdpi/ic_media_play.png","ic_media_stop.png":"http://developer.android.com/samples/MediaRouter/res/drawable-mdpi/ic_media_stop.png","ic_menu_add.png":"http://developer.android.com/samples/MediaRouter/res/drawable-mdpi/ic_menu_add.png","ic_menu_delete.png":"http://developer.android.com/samples/MediaRouter/res/drawable-mdpi/ic_menu_delete.png"},"drawable-xhdpi":{"ic_action_pause.png":"http://developer.android.com/samples/MediaRouter/res/drawable-xhdpi/ic_action_pause.png","ic_action_play.png":"http://developer.android.com/samples/MediaRouter/res/drawable-xhdpi/ic_action_play.png","ic_action_stop.png":"http://developer.android.com/samples/MediaRouter/res/drawable-xhdpi/ic_action_stop.png","ic_launcher.png":"http://developer.android.com/samples/MediaRouter/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_action_pause.png":"http://developer.android.com/samples/MediaRouter/res/drawable-xxhdpi/ic_action_pause.png","ic_action_play.png":"http://developer.android.com/samples/MediaRouter/res/drawable-xxhdpi/ic_action_play.png","ic_action_stop.png":"http://developer.android.com/samples/MediaRouter/res/drawable-xxhdpi/ic_action_stop.png","ic_launcher.png":"http://developer.android.com/samples/MediaRouter/res/drawable-xxhdpi/ic_launcher.png","ic_suggestions_add.png":"http://developer.android.com/samples/MediaRouter/res/drawable-xxhdpi/ic_suggestions_add.png","ic_suggestions_delete.png":"http://developer.android.com/samples/MediaRouter/res/drawable-xxhdpi/ic_suggestions_delete.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleMessageTile\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n            android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n            android:text=\"@string/intro_message\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n  ","media_item.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!-- Copyright (C) 2012 The Android Open Source Project\n\n \n\n     Licensed under the Apache License, Version 2.0 (the \"License\");\n\n     you may not use this file except in compliance with the License.\n\n     You may obtain a copy of the License at\n\n \n\n          http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n     Unless required by applicable law or agreed to in writing, software\n\n     distributed under the License is distributed on an \"AS IS\" BASIS,\n\n     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n     See the License for the specific language governing permissions and\n\n     limitations under the License.\n\n-->\n\n \n\n<!-- Layout for list item in Library or Playlist view. Displays ImageButton\n\n     instead of radio button to the right of the item. -->\n\n \n\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"match_parent\"\n\n        android:orientation=\"horizontal\"\n\n        android:clickable=\"true\"\n\n        android:background=\"@drawable/list_background\"\n\n        android:gravity=\"center_vertical\">\n\n \n\n    <ImageButton android:id=\"@+id/item_action\"\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:minWidth=\"48dp\"\n\n        android:minHeight=\"48dp\"\n\n        android:layout_alignParentRight=\"true\"\n\n        android:layout_centerVertical=\"true\"\n\n        android:background=\"@null\"/>\n\n \n\n    <TextView android:id=\"@+id/item_text\"\n\n        android:layout_width=\"fill_parent\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:textAppearance=\"?android:attr/textAppearanceMedium\"\n\n        android:layout_centerVertical=\"true\"\n\n        android:layout_toLeftOf=\"@id/item_action\"\n\n        android:layout_gravity=\"left\"\n\n        android:gravity=\"left\"/>\n\n</RelativeLayout>\n  ","overlay_display_window.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!-- Copyright (C) 2012 The Android Open Source Project\n\n \n\n     Licensed under the Apache License, Version 2.0 (the \"License\");\n\n     you may not use this file except in compliance with the License.\n\n     You may obtain a copy of the License at\n\n \n\n          http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n     Unless required by applicable law or agreed to in writing, software\n\n     distributed under the License is distributed on an \"AS IS\" BASIS,\n\n     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n     See the License for the specific language governing permissions and\n\n     limitations under the License.\n\n-->\n\n \n\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:background=\"#000000\">\n\n    <TextureView android:id=\"@+id/overlay_display_window_texture\"\n\n               android:layout_width=\"0px\"\n\n               android:layout_height=\"0px\" />\n\n    <TextView android:id=\"@+id/overlay_display_window_title\"\n\n               android:layout_width=\"wrap_content\"\n\n               android:layout_height=\"wrap_content\"\n\n               android:layout_gravity=\"top|center_horizontal\" />\n\n</FrameLayout>\n  ","sample_media_router.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!-- Copyright (C) 2013 The Android Open Source Project\n\n \n\n     Licensed under the Apache License, Version 2.0 (the \"License\");\n\n     you may not use this file except in compliance with the License.\n\n     You may obtain a copy of the License at\n\n \n\n          http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n     Unless required by applicable law or agreed to in writing, software\n\n     distributed under the License is distributed on an \"AS IS\" BASIS,\n\n     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n     See the License for the specific language governing permissions and\n\n     limitations under the License.\n\n-->\n\n \n\n<!-- See corresponding Java code MainActivity.java. -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"match_parent\"\n\n        android:orientation=\"vertical\">\n\n    <LinearLayout\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"0dp\"\n\n        android:layout_weight=\"1\"\n\n        android:orientation=\"vertical\">\n\n        <!-- Tabs for media library, playlist and statistics -->\n\n        <TabHost android:id=\"@+id/tabHost\"\n\n            android:layout_width=\"fill_parent\"\n\n            android:layout_height=\"fill_parent\"\n\n            android:layout_weight=\"1\">\n\n            <LinearLayout\n\n                android:orientation=\"vertical\"\n\n                android:layout_width=\"fill_parent\"\n\n                android:layout_height=\"fill_parent\">\n\n                <TabWidget android:id=\"@android:id/tabs\"\n\n                    android:layout_width=\"fill_parent\"\n\n                    android:layout_height=\"wrap_content\" />\n\n \n\n                <FrameLayout android:id=\"@android:id/tabcontent\"\n\n                    android:layout_width=\"fill_parent\"\n\n                    android:layout_height=\"wrap_content\">\n\n                    <LinearLayout android:id=\"@+id/tab1\"\n\n                        android:layout_width=\"fill_parent\"\n\n                        android:layout_height=\"wrap_content\"\n\n                        android:orientation=\"vertical\">\n\n                        <ListView android:id=\"@+id/media\"\n\n                                  android:listSelector=\"@drawable/list_background\"\n\n                            android:layout_width=\"match_parent\"\n\n                            android:layout_height=\"wrap_content\"\n\n                            android:layout_weight=\"1\" />\n\n                    </LinearLayout>\n\n \n\n                    <LinearLayout android:id=\"@+id/tab2\"\n\n                        android:layout_width=\"fill_parent\"\n\n                        android:layout_height=\"fill_parent\"\n\n                        android:orientation=\"vertical\">\n\n                        <ListView android:id=\"@+id/playlist\"\n\n                            android:layout_width=\"match_parent\"\n\n                            android:layout_height=\"wrap_content\"\n\n                            android:layout_weight=\"1\"/>\n\n                    </LinearLayout>\n\n \n\n                    <LinearLayout android:id=\"@+id/tab3\"\n\n                        android:layout_width=\"fill_parent\"\n\n                        android:layout_height=\"fill_parent\"\n\n                        android:orientation=\"vertical\">\n\n                        <TextView android:id=\"@+id/info\"\n\n                            android:layout_width=\"match_parent\"\n\n                            android:layout_height=\"wrap_content\"\n\n                            android:layout_weight=\"1\"\n\n                            android:textAppearance=\"?android:attr/textAppearanceMedium\"/>\n\n                    </LinearLayout>\n\n                </FrameLayout>\n\n            </LinearLayout>\n\n        </TabHost>\n\n \n\n        <!-- Control buttons for the currently selected route. -->\n\n        <LinearLayout\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_weight=\"0\">\n\n \n\n            <SeekBar android:id=\"@+id/seekbar\"\n\n                 android:layout_width=\"fill_parent\"\n\n                 android:layout_height=\"wrap_content\"\n\n                 style=\"?android:attr/progressBarStyleHorizontal\"\n\n                 android:max=\"100\"\n\n                 android:progress=\"0\"\n\n                 android:layout_gravity=\"center\"\n\n                 android:layout_weight=\"1\"/>\n\n \n\n            <ImageButton android:id=\"@+id/pause_resume_button\"\n\n                android:layout_width=\"wrap_content\"\n\n                android:layout_height=\"wrap_content\"\n\n                android:layout_weight=\"0\"\n\n                android:layout_gravity=\"right\"\n\n                android:minWidth=\"48dp\"\n\n                android:minHeight=\"48dp\"\n\n                android:background=\"@null\"\n\n                android:src=\"@drawable/ic_action_pause\" />\n\n \n\n            <ImageButton android:id=\"@+id/stop_button\"\n\n                android:layout_width=\"wrap_content\"\n\n                android:layout_height=\"wrap_content\"\n\n                android:layout_weight=\"0\"\n\n                android:layout_gravity=\"right\"\n\n                android:minWidth=\"48dp\"\n\n                android:minHeight=\"48dp\"\n\n                android:background=\"@null\"\n\n                android:src=\"@drawable/ic_action_stop\" />\n\n        </LinearLayout>\n\n \n\n    </LinearLayout>\n\n \n\n    <!-- Some content for visual interest in the case where no presentation is showing. -->\n\n    <FrameLayout android:id=\"@+id/player\"\n\n        android:background=\"#ff000000\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"0dp\"\n\n        android:layout_weight=\"1\">\n\n        <LinearLayout\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"match_parent\"\n\n            android:gravity=\"center\">\n\n            <SurfaceView android:id=\"@+id/surface_view\"\n\n                android:layout_width=\"match_parent\"\n\n                android:layout_height=\"match_parent\"/>\n\n        </LinearLayout>\n\n        <TextView\n\n            android:textColor=\"#ffaaaaaa\"\n\n            android:text=\"@string/sample_media_route_activity_local\"\n\n            android:layout_width=\"wrap_content\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_gravity=\"top|center_horizontal\" />\n\n    </FrameLayout>\n\n</LinearLayout>\n  ","sample_media_router_presentation.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!-- Copyright (C) 2013 The Android Open Source Project\n\n \n\n     Licensed under the Apache License, Version 2.0 (the \"License\");\n\n     you may not use this file except in compliance with the License.\n\n     You may obtain a copy of the License at\n\n \n\n          http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n     Unless required by applicable law or agreed to in writing, software\n\n     distributed under the License is distributed on an \"AS IS\" BASIS,\n\n     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n     See the License for the specific language governing permissions and\n\n     limitations under the License.\n\n-->\n\n \n\n<!-- The content that we show on secondary displays.\n\n     See corresponding Java code PresentationWithMediaRouterActivity.java. -->\n\n \n\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:background=\"#ff000000\">\n\n    <LinearLayout\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"match_parent\"\n\n        android:gravity=\"center\">\n\n        <SurfaceView android:id=\"@+id/surface_view\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"match_parent\"/>\n\n    </LinearLayout>\n\n    <TextView\n\n        android:textColor=\"#ffaaaaaa\"\n\n        android:text=\"@string/sample_media_route_activity_presentation\"\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:layout_gravity=\"top|center_horizontal\" />\n\n</FrameLayout>\n  "},"layout-land":{"grid_layout_2.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!-- Copyright (C) 2011 The Android Open Source Project\n\n \n\n     Licensed under the Apache License, Version 2.0 (the \"License\");\n\n     you may not use this file except in compliance with the License.\n\n     You may obtain a copy of the License at\n\n \n\n          http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n     Unless required by applicable law or agreed to in writing, software\n\n     distributed under the License is distributed on an \"AS IS\" BASIS,\n\n     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n     See the License for the specific language governing permissions and\n\n     limitations under the License.\n\n-->\n\n \n\n<android.support.v7.widget.GridLayout\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:useDefaultMargins=\"true\"\n\n    android:alignmentMode=\"alignBounds\"\n\n    android:rowOrderPreserved=\"false\"\n\n    android:columnCount=\"4\"\n\n    >\n\n    <TextView\n\n        android:text=\"Email setup\"\n\n        android:textSize=\"32dip\"\n\n        android:layout_columnSpan=\"4\"\n\n        android:layout_gravity=\"center_horizontal\"\n\n    />\n\n    <TextView\n\n        android:text=\"You can configure email in a few simple steps:\"\n\n        android:textSize=\"16dip\"\n\n        android:layout_columnSpan=\"4\"\n\n        android:layout_gravity=\"left\"\n\n    />\n\n    <TextView\n\n        android:text=\"Email address:\"\n\n        android:layout_gravity=\"right\"\n\n    />\n\n    <EditText\n\n        android:ems=\"10\"\n\n    />\n\n    <TextView\n\n        android:text=\"Password:\"\n\n        android:layout_column=\"0\"\n\n        android:layout_gravity=\"right\"\n\n    />\n\n    <EditText\n\n        android:ems=\"8\"\n\n    />\n\n    <Button\n\n        android:text=\"Manual setup\"\n\n        android:layout_row=\"5\"\n\n        android:layout_column=\"3\"\n\n    />\n\n    <Button\n\n        android:text=\"Next\"\n\n        android:layout_column=\"3\"\n\n        android:layout_gravity=\"fill_horizontal\"\n\n    />\n\n</android.support.v7.widget.GridLayout>\n  "},"menu":{"sample_media_router_menu.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!-- Copyright (C) 2013 Google Inc.\n\n \n\n     Licensed under the Apache License, Version 2.0 (the \"License\");\n\n     you may not use this file except in compliance with the License.\n\n     You may obtain a copy of the License at\n\n \n\n          http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n     Unless required by applicable law or agreed to in writing, software\n\n     distributed under the License is distributed on an \"AS IS\" BASIS,\n\n     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n     See the License for the specific language governing permissions and\n\n     limitations under the License.\n\n-->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\">\n\n    <item android:id=\"@+id/media_route_menu_item\"\n\n        android:title=\"@string/media_route_menu_title\"\n\n        app:showAsAction=\"always\"\n\n        app:actionProviderClass=\"android.support.v7.app.MediaRouteActionProvider\"/>\n\n</menu>\n  "},"values":{"arrays.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!-- Copyright (C) 2013 The Android Open Source Project\n\n \n\n     Licensed under the Apache License, Version 2.0 (the \"License\");\n\n     you may not use this file except in compliance with the License.\n\n     You may obtain a copy of the License at\n\n \n\n          http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n     Unless required by applicable law or agreed to in writing, software\n\n     distributed under the License is distributed on an \"AS IS\" BASIS,\n\n     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n     See the License for the specific language governing permissions and\n\n     limitations under the License.\n\n-->\n\n \n\n<resources>\n\n    <string-array name=\"media_names\">\n\n        <item>Big Buck Bunny</item>\n\n        <item>Elephants Dream</item>\n\n        <item>Sintel</item>\n\n        <item>Tears of Steel</item>\n\n    </string-array>\n\n \n\n    <string-array name=\"media_uris\">\n\n        <item>http://archive.org/download/BigBuckBunny_328/BigBuckBunny_512kb.mp4</item>\n\n        <item>http://archive.org/download/ElephantsDream_277/elephant_dreams_640_512kb.mp4</item>\n\n        <item>http://archive.org/download/Sintel/sintel-2048-stereo_512kb.mp4</item>\n\n        <item>http://archive.org/download/Tears-of-Steel/tears_of_steel_720p.mp4</item>\n\n    </string-array>\n\n</resources>\n  ","base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">MediaRouter</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n            Demonstrates how to create a custom media route provider.\n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","colors.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!-- Copyright (C) 2007 The Android Open Source Project\n\n \n\n     Licensed under the Apache License, Version 2.0 (the \"License\");\n\n     you may not use this file except in compliance with the License.\n\n     You may obtain a copy of the License at\n\n \n\n          http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n     Unless required by applicable law or agreed to in writing, software\n\n     distributed under the License is distributed on an \"AS IS\" BASIS,\n\n     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n     See the License for the specific language governing permissions and\n\n     limitations under the License.\n\n-->\n\n \n\n<resources>\n\n    <drawable name=\"blue\">#770000ff</drawable>\n\n    <color name=\"list_highlight_color\">#ccc</color>\n\n</resources>\n  ","strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!-- Copyright (C) 2013 The Android Open Source Project\n\n \n\n     Licensed under the Apache License, Version 2.0 (the \"License\");\n\n     you may not use this file except in compliance with the License.\n\n     You may obtain a copy of the License at\n\n \n\n          http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n     Unless required by applicable law or agreed to in writing, software\n\n     distributed under the License is distributed on an \"AS IS\" BASIS,\n\n     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n     See the License for the specific language governing permissions and\n\n     limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <string name=\"sample_media_router_text\">This activity demonstrates how to\n\n            use MediaRouter from the support library.  Select a route from the action bar.</string>\n\n    <string name=\"media_route_menu_title\">Play on...</string>\n\n \n\n    <string name=\"library_tab_text\">Library</string>\n\n    <string name=\"playlist_tab_text\">Playlist</string>\n\n    <string name=\"statistics_tab_text\">Statistics</string>\n\n \n\n    <string name=\"sample_media_route_provider_service\">Media Route Provider Service Support Library Sample</string>\n\n    <string name=\"fixed_volume_route_name\">Fixed Volume Remote Playback Route</string>\n\n    <string name=\"variable_volume_basic_route_name\">Variable Volume (Basic) Remote Playback Route</string>\n\n    <string name=\"variable_volume_queuing_route_name\">Variable Volume (Queuing) Remote Playback Route</string>\n\n    <string name=\"variable_volume_session_route_name\">Variable Volume (Session) Remote Playback Route</string>\n\n    <string name=\"sample_route_description\">Sample route</string>\n\n \n\n    <string name=\"sample_media_route_provider_remote\">Remote Playback (Simulated)</string>\n\n    <string name=\"sample_media_route_activity_local\">Local Playback</string>\n\n    <string name=\"sample_media_route_activity_presentation\">Local Playback on Presentation Display</string>\n\n    <string name=\"playlist_item_added_text\">Added to playlist!</string>\n\n    <string name=\"playlist_item_removed_text\">Removed from playlist</string>\n\n \n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.common.logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "},"com.example.android.mediarouter":{"player":{"LocalPlayer.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.mediarouter.player;\n\n \n\nimport android.app.Activity;\n\nimport android.app.Presentation;\n\nimport android.content.Context;\n\nimport android.content.DialogInterface;\n\nimport android.media.MediaPlayer;\n\nimport android.os.Build;\n\nimport android.os.Bundle;\n\nimport android.os.Handler;\n\nimport android.os.SystemClock;\n\nimport android.support.v7.media.MediaItemStatus;\n\nimport android.support.v7.media.MediaRouter.RouteInfo;\n\nimport android.util.Log;\n\nimport android.view.Display;\n\nimport android.view.Gravity;\n\nimport android.view.Surface;\n\nimport android.view.SurfaceHolder;\n\nimport android.view.SurfaceView;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.view.WindowManager;\n\nimport android.widget.FrameLayout;\n\n \n\nimport com.example.android.mediarouter.R;\n\n \n\nimport java.io.IOException;\n\n \n\n/**\n\n * Handles playback of a single media item using MediaPlayer.\n\n */\n\npublic abstract class LocalPlayer extends Player implements\n\n        MediaPlayer.OnPreparedListener,\n\n        MediaPlayer.OnCompletionListener,\n\n        MediaPlayer.OnErrorListener,\n\n        MediaPlayer.OnSeekCompleteListener {\n\n    private static final String TAG = \"LocalPlayer\";\n\n    private static final boolean DEBUG = Log.isLoggable(TAG, Log.DEBUG);\n\n \n\n    private static final int STATE_IDLE = 0;\n\n    private static final int STATE_PLAY_PENDING = 1;\n\n    private static final int STATE_READY = 2;\n\n    private static final int STATE_PLAYING = 3;\n\n    private static final int STATE_PAUSED = 4;\n\n \n\n    private final Context mContext;\n\n    private final Handler mHandler = new Handler();\n\n    private MediaPlayer mMediaPlayer;\n\n    private int mState = STATE_IDLE;\n\n    private int mSeekToPos;\n\n    private int mVideoWidth;\n\n    private int mVideoHeight;\n\n    private Surface mSurface;\n\n    private SurfaceHolder mSurfaceHolder;\n\n \n\n    public LocalPlayer(Context context) {\n\n        mContext = context;\n\n \n\n        // reset media player\n\n        reset();\n\n    }\n\n \n\n    @Override\n\n    public boolean isRemotePlayback() {\n\n        return false;\n\n    }\n\n \n\n    @Override\n\n    public boolean isQueuingSupported() {\n\n        return false;\n\n    }\n\n \n\n    @Override\n\n    public void connect(RouteInfo route) {\n\n        if (DEBUG) {\n\n            Log.d(TAG, \"connecting to: \" + route);\n\n        }\n\n    }\n\n \n\n    @Override\n\n    public void release() {\n\n        if (DEBUG) {\n\n            Log.d(TAG, \"releasing\");\n\n        }\n\n        // release media player\n\n        if (mMediaPlayer != null) {\n\n            mMediaPlayer.stop();\n\n            mMediaPlayer.release();\n\n            mMediaPlayer = null;\n\n        }\n\n    }\n\n \n\n    // Player\n\n    @Override\n\n    public void play(final PlaylistItem item) {\n\n        if (DEBUG) {\n\n            Log.d(TAG, \"play: item=\" + item);\n\n        }\n\n        reset();\n\n        mSeekToPos = (int)item.getPosition();\n\n        try {\n\n            mMediaPlayer.setDataSource(mContext, item.getUri());\n\n            mMediaPlayer.prepareAsync();\n\n        } catch (IllegalStateException e) {\n\n            Log.e(TAG, \"MediaPlayer throws IllegalStateException, uri=\" + item.getUri());\n\n        } catch (IOException e) {\n\n            Log.e(TAG, \"MediaPlayer throws IOException, uri=\" + item.getUri());\n\n        } catch (IllegalArgumentException e) {\n\n            Log.e(TAG, \"MediaPlayer throws IllegalArgumentException, uri=\" + item.getUri());\n\n        } catch (SecurityException e) {\n\n            Log.e(TAG, \"MediaPlayer throws SecurityException, uri=\" + item.getUri());\n\n        }\n\n        if (item.getState() == MediaItemStatus.PLAYBACK_STATE_PLAYING) {\n\n            resume();\n\n        } else {\n\n            pause();\n\n        }\n\n    }\n\n \n\n    @Override\n\n    public void seek(final PlaylistItem item) {\n\n        if (DEBUG) {\n\n            Log.d(TAG, \"seek: item=\" + item);\n\n        }\n\n        int pos = (int)item.getPosition();\n\n        if (mState == STATE_PLAYING || mState == STATE_PAUSED) {\n\n            mMediaPlayer.seekTo(pos);\n\n            mSeekToPos = pos;\n\n        } else if (mState == STATE_IDLE || mState == STATE_PLAY_PENDING) {\n\n            // Seek before onPrepared() arrives,\n\n            // need to performed delayed seek in onPrepared()\n\n            mSeekToPos = pos;\n\n        }\n\n    }\n\n \n\n    @Override\n\n    public void getStatus(final PlaylistItem item, final boolean update) {\n\n        if (mState == STATE_PLAYING || mState == STATE_PAUSED) {\n\n            // use mSeekToPos if we're currently seeking (mSeekToPos is reset\n\n            // when seeking is completed)\n\n            item.setDuration(mMediaPlayer.getDuration());\n\n            item.setPosition(mSeekToPos > 0 ?\n\n                    mSeekToPos : mMediaPlayer.getCurrentPosition());\n\n            item.setTimestamp(SystemClock.elapsedRealtime());\n\n        }\n\n        if (update && mCallback != null) {\n\n            mCallback.onPlaylistReady();\n\n        }\n\n    }\n\n \n\n    @Override\n\n    public void pause() {\n\n        if (DEBUG) {\n\n            Log.d(TAG, \"pause\");\n\n        }\n\n        if (mState == STATE_PLAYING) {\n\n            mMediaPlayer.pause();\n\n            mState = STATE_PAUSED;\n\n        }\n\n    }\n\n \n\n    @Override\n\n    public void resume() {\n\n        if (DEBUG) {\n\n            Log.d(TAG, \"resume\");\n\n        }\n\n        if (mState == STATE_READY || mState == STATE_PAUSED) {\n\n            mMediaPlayer.start();\n\n            mState = STATE_PLAYING;\n\n        } else if (mState == STATE_IDLE){\n\n            mState = STATE_PLAY_PENDING;\n\n        }\n\n    }\n\n \n\n    @Override\n\n    public void stop() {\n\n        if (DEBUG) {\n\n            Log.d(TAG, \"stop\");\n\n        }\n\n        if (mState == STATE_PLAYING || mState == STATE_PAUSED) {\n\n            mMediaPlayer.stop();\n\n            mState = STATE_IDLE;\n\n        }\n\n    }\n\n \n\n    @Override\n\n    public void enqueue(final PlaylistItem item) {\n\n        throw new UnsupportedOperationException(\"LocalPlayer doesn't support enqueue!\");\n\n    }\n\n \n\n    @Override\n\n    public PlaylistItem remove(String iid) {\n\n        throw new UnsupportedOperationException(\"LocalPlayer doesn't support remove!\");\n\n    }\n\n \n\n    //MediaPlayer Listeners\n\n    @Override\n\n    public void onPrepared(MediaPlayer mp) {\n\n        if (DEBUG) {\n\n            Log.d(TAG, \"onPrepared\");\n\n        }\n\n        mHandler.post(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                if (mState == STATE_IDLE) {\n\n                    mState = STATE_READY;\n\n                    updateVideoRect();\n\n                } else if (mState == STATE_PLAY_PENDING) {\n\n                    mState = STATE_PLAYING;\n\n                    updateVideoRect();\n\n                    if (mSeekToPos > 0) {\n\n                        if (DEBUG) {\n\n                            Log.d(TAG, \"seek to initial pos: \" + mSeekToPos);\n\n                        }\n\n                        mMediaPlayer.seekTo(mSeekToPos);\n\n                    }\n\n                    mMediaPlayer.start();\n\n                }\n\n                if (mCallback != null) {\n\n                    mCallback.onPlaylistChanged();\n\n                }\n\n            }\n\n        });\n\n    }\n\n \n\n    @Override\n\n    public void onCompletion(MediaPlayer mp) {\n\n        if (DEBUG) {\n\n            Log.d(TAG, \"onCompletion\");\n\n        }\n\n        mHandler.post(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                if (mCallback != null) {\n\n                    mCallback.onCompletion();\n\n                }\n\n            }\n\n        });\n\n    }\n\n \n\n    @Override\n\n    public boolean onError(MediaPlayer mp, int what, int extra) {\n\n        if (DEBUG) {\n\n            Log.d(TAG, \"onError\");\n\n        }\n\n        mHandler.post(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                if (mCallback != null) {\n\n                    mCallback.onError();\n\n                }\n\n            }\n\n        });\n\n        // return true so that onCompletion is not called\n\n        return true;\n\n    }\n\n \n\n    @Override\n\n    public void onSeekComplete(MediaPlayer mp) {\n\n        if (DEBUG) {\n\n            Log.d(TAG, \"onSeekComplete\");\n\n        }\n\n        mHandler.post(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                mSeekToPos = 0;\n\n                if (mCallback != null) {\n\n                    mCallback.onPlaylistChanged();\n\n                }\n\n            }\n\n        });\n\n    }\n\n \n\n    protected Context getContext() { return mContext; }\n\n    protected MediaPlayer getMediaPlayer() { return mMediaPlayer; }\n\n    protected int getVideoWidth() { return mVideoWidth; }\n\n    protected int getVideoHeight() { return mVideoHeight; }\n\n    protected void setSurface(Surface surface) {\n\n        mSurface = surface;\n\n        mSurfaceHolder = null;\n\n        updateSurface();\n\n    }\n\n \n\n    protected void setSurface(SurfaceHolder surfaceHolder) {\n\n        mSurface = null;\n\n        mSurfaceHolder = surfaceHolder;\n\n        updateSurface();\n\n    }\n\n \n\n    protected void removeSurface(SurfaceHolder surfaceHolder) {\n\n        if (surfaceHolder == mSurfaceHolder) {\n\n            setSurface((SurfaceHolder)null);\n\n        }\n\n    }\n\n \n\n    protected void updateSurface() {\n\n        if (mMediaPlayer == null) {\n\n            // just return if media player is already gone\n\n            return;\n\n        }\n\n        if (mSurface != null) {\n\n            // The setSurface API does not exist until V14+.\n\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {\n\n                ICSMediaPlayer.setSurface(mMediaPlayer, mSurface);\n\n            } else {\n\n                throw new UnsupportedOperationException(\"MediaPlayer does not support \"\n\n                        + \"setSurface() on this version of the platform.\");\n\n            }\n\n        } else if (mSurfaceHolder != null) {\n\n            mMediaPlayer.setDisplay(mSurfaceHolder);\n\n        } else {\n\n            mMediaPlayer.setDisplay(null);\n\n        }\n\n    }\n\n \n\n    protected abstract void updateSize();\n\n \n\n    private void reset() {\n\n        if (mMediaPlayer != null) {\n\n            mMediaPlayer.stop();\n\n            mMediaPlayer.release();\n\n            mMediaPlayer = null;\n\n        }\n\n        mMediaPlayer = new MediaPlayer();\n\n        mMediaPlayer.setOnPreparedListener(this);\n\n        mMediaPlayer.setOnCompletionListener(this);\n\n        mMediaPlayer.setOnErrorListener(this);\n\n        mMediaPlayer.setOnSeekCompleteListener(this);\n\n        updateSurface();\n\n        mState = STATE_IDLE;\n\n        mSeekToPos = 0;\n\n    }\n\n \n\n    private void updateVideoRect() {\n\n        if (mState != STATE_IDLE && mState != STATE_PLAY_PENDING) {\n\n            int width = mMediaPlayer.getVideoWidth();\n\n            int height = mMediaPlayer.getVideoHeight();\n\n            if (width > 0 && height > 0) {\n\n                mVideoWidth = width;\n\n                mVideoHeight = height;\n\n                updateSize();\n\n            } else {\n\n                Log.e(TAG, \"video rect is 0x0!\");\n\n                mVideoWidth = mVideoHeight = 0;\n\n            }\n\n        }\n\n    }\n\n \n\n    private static final class ICSMediaPlayer {\n\n        public static final void setSurface(MediaPlayer player, Surface surface) {\n\n            player.setSurface(surface);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Handles playback of a single media item using MediaPlayer in SurfaceView\n\n     */\n\n    public static class SurfaceViewPlayer extends LocalPlayer implements\n\n            SurfaceHolder.Callback {\n\n        private static final String TAG = \"SurfaceViewPlayer\";\n\n        private RouteInfo mRoute;\n\n        private final SurfaceView mSurfaceView;\n\n        private final FrameLayout mLayout;\n\n        private DemoPresentation mPresentation;\n\n \n\n        public SurfaceViewPlayer(Context context) {\n\n            super(context);\n\n \n\n            mLayout = (FrameLayout)((Activity)context).findViewById(R.id.player);\n\n            mSurfaceView = (SurfaceView)((Activity)context).findViewById(R.id.surface_view);\n\n \n\n            // add surface holder callback\n\n            SurfaceHolder holder = mSurfaceView.getHolder();\n\n            holder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);\n\n            holder.addCallback(this);\n\n        }\n\n \n\n        @Override\n\n        public void connect(RouteInfo route) {\n\n            super.connect(route);\n\n            mRoute = route;\n\n        }\n\n \n\n        @Override\n\n        public void release() {\n\n            super.release();\n\n \n\n            // dismiss presentation display\n\n            if (mPresentation != null) {\n\n                Log.i(TAG, \"Dismissing presentation because the activity is no longer visible.\");\n\n                mPresentation.dismiss();\n\n                mPresentation = null;\n\n            }\n\n \n\n            // remove surface holder callback\n\n            SurfaceHolder holder = mSurfaceView.getHolder();\n\n            holder.removeCallback(this);\n\n \n\n            // hide the surface view when SurfaceViewPlayer is destroyed\n\n            mSurfaceView.setVisibility(View.GONE);\n\n            mLayout.setVisibility(View.GONE);\n\n        }\n\n \n\n        @Override\n\n        public void updatePresentation() {\n\n            // Get the current route and its presentation display.\n\n            Display presentationDisplay = mRoute != null ? mRoute.getPresentationDisplay() : null;\n\n \n\n            // Dismiss the current presentation if the display has changed.\n\n            if (mPresentation != null && mPresentation.getDisplay() != presentationDisplay) {\n\n                Log.i(TAG, \"Dismissing presentation because the current route no longer \"\n\n                        + \"has a presentation display.\");\n\n                mPresentation.dismiss();\n\n                mPresentation = null;\n\n            }\n\n \n\n            // Show a new presentation if needed.\n\n            if (mPresentation == null && presentationDisplay != null) {\n\n                Log.i(TAG, \"Showing presentation on display: \" + presentationDisplay);\n\n                mPresentation = new DemoPresentation(getContext(), presentationDisplay);\n\n                mPresentation.setOnDismissListener(mOnDismissListener);\n\n                try {\n\n                    mPresentation.show();\n\n                } catch (WindowManager.InvalidDisplayException ex) {\n\n                    Log.w(TAG, \"Couldn't show presentation!  Display was removed in \"\n\n                              + \"the meantime.\", ex);\n\n                    mPresentation = null;\n\n                }\n\n            }\n\n \n\n            updateContents();\n\n        }\n\n \n\n        // SurfaceHolder.Callback\n\n        @Override\n\n        public void surfaceChanged(SurfaceHolder holder, int format,\n\n                int width, int height) {\n\n            if (DEBUG) {\n\n                Log.d(TAG, \"surfaceChanged: \" + width + \"x\" + height);\n\n            }\n\n            setSurface(holder);\n\n        }\n\n \n\n        @Override\n\n        public void surfaceCreated(SurfaceHolder holder) {\n\n            if (DEBUG) {\n\n                Log.d(TAG, \"surfaceCreated\");\n\n            }\n\n            setSurface(holder);\n\n            updateSize();\n\n        }\n\n \n\n        @Override\n\n        public void surfaceDestroyed(SurfaceHolder holder) {\n\n            if (DEBUG) {\n\n                Log.d(TAG, \"surfaceDestroyed\");\n\n            }\n\n            removeSurface(holder);\n\n        }\n\n \n\n        @Override\n\n        protected void updateSize() {\n\n            int width = getVideoWidth();\n\n            int height = getVideoHeight();\n\n            if (width > 0 && height > 0) {\n\n                if (mPresentation == null) {\n\n                    int surfaceWidth = mLayout.getWidth();\n\n                    int surfaceHeight = mLayout.getHeight();\n\n \n\n                    // Calculate the new size of mSurfaceView, so that video is centered\n\n                    // inside the framelayout with proper letterboxing/pillarboxing\n\n                    ViewGroup.LayoutParams lp = mSurfaceView.getLayoutParams();\n\n                    if (surfaceWidth * height < surfaceHeight * width) {\n\n                        // Black bars on top&bottom, mSurfaceView has full layout width,\n\n                        // while height is derived from video's aspect ratio\n\n                        lp.width = surfaceWidth;\n\n                        lp.height = surfaceWidth * height / width;\n\n                    } else {\n\n                        // Black bars on left&right, mSurfaceView has full layout height,\n\n                        // while width is derived from video's aspect ratio\n\n                        lp.width = surfaceHeight * width / height;\n\n                        lp.height = surfaceHeight;\n\n                    }\n\n                    Log.i(TAG, \"video rect is \" + lp.width + \"x\" + lp.height);\n\n                    mSurfaceView.setLayoutParams(lp);\n\n                } else {\n\n                    mPresentation.updateSize(width, height);\n\n                }\n\n            }\n\n        }\n\n \n\n        private void updateContents() {\n\n            // Show either the content in the main activity or the content in the presentation\n\n            if (mPresentation != null) {\n\n                mLayout.setVisibility(View.GONE);\n\n                mSurfaceView.setVisibility(View.GONE);\n\n            } else {\n\n                mLayout.setVisibility(View.VISIBLE);\n\n                mSurfaceView.setVisibility(View.VISIBLE);\n\n            }\n\n        }\n\n \n\n        // Listens for when presentations are dismissed.\n\n        private final DialogInterface.OnDismissListener mOnDismissListener =\n\n                new DialogInterface.OnDismissListener() {\n\n            @Override\n\n            public void onDismiss(DialogInterface dialog) {\n\n                if (dialog == mPresentation) {\n\n                    Log.i(TAG, \"Presentation dismissed.\");\n\n                    mPresentation = null;\n\n                    updateContents();\n\n                }\n\n            }\n\n        };\n\n \n\n        // Presentation\n\n        private final class DemoPresentation extends Presentation {\n\n            private SurfaceView mPresentationSurfaceView;\n\n \n\n            public DemoPresentation(Context context, Display display) {\n\n                super(context, display);\n\n            }\n\n \n\n            @Override\n\n            protected void onCreate(Bundle savedInstanceState) {\n\n                // Be sure to call the super class.\n\n                super.onCreate(savedInstanceState);\n\n \n\n                // Inflate the layout.\n\n                setContentView(R.layout.sample_media_router_presentation);\n\n \n\n                // Set up the surface view.\n\n                mPresentationSurfaceView = (SurfaceView)findViewById(R.id.surface_view);\n\n                SurfaceHolder holder = mPresentationSurfaceView.getHolder();\n\n                holder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);\n\n                holder.addCallback(SurfaceViewPlayer.this);\n\n                Log.i(TAG, \"Presentation created\");\n\n            }\n\n \n\n            public void updateSize(int width, int height) {\n\n                int surfaceHeight = getWindow().getDecorView().getHeight();\n\n                int surfaceWidth = getWindow().getDecorView().getWidth();\n\n                ViewGroup.LayoutParams lp = mPresentationSurfaceView.getLayoutParams();\n\n                if (surfaceWidth * height < surfaceHeight * width) {\n\n                    lp.width = surfaceWidth;\n\n                    lp.height = surfaceWidth * height / width;\n\n                } else {\n\n                    lp.width = surfaceHeight * width / height;\n\n                    lp.height = surfaceHeight;\n\n                }\n\n                Log.i(TAG, \"Presentation video rect is \" + lp.width + \"x\" + lp.height);\n\n                mPresentationSurfaceView.setLayoutParams(lp);\n\n            }\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Handles playback of a single media item using MediaPlayer in\n\n     * OverlayDisplayWindow.\n\n     */\n\n    public static class OverlayPlayer extends LocalPlayer implements\n\n            OverlayDisplayWindow.OverlayWindowListener {\n\n        private static final String TAG = \"OverlayPlayer\";\n\n        private final OverlayDisplayWindow mOverlay;\n\n \n\n        public OverlayPlayer(Context context) {\n\n            super(context);\n\n \n\n            mOverlay = OverlayDisplayWindow.create(getContext(),\n\n                    getContext().getResources().getString(\n\n                            R.string.sample_media_route_provider_remote),\n\n                    1024, 768, Gravity.CENTER);\n\n \n\n            mOverlay.setOverlayWindowListener(this);\n\n        }\n\n \n\n        @Override\n\n        public void connect(RouteInfo route) {\n\n            super.connect(route);\n\n            mOverlay.show();\n\n        }\n\n \n\n        @Override\n\n        public void release() {\n\n            super.release();\n\n            mOverlay.dismiss();\n\n        }\n\n \n\n        @Override\n\n        protected void updateSize() {\n\n            int width = getVideoWidth();\n\n            int height = getVideoHeight();\n\n            if (width > 0 && height > 0) {\n\n                mOverlay.updateAspectRatio(width, height);\n\n            }\n\n        }\n\n \n\n        // OverlayDisplayWindow.OverlayWindowListener\n\n        @Override\n\n        public void onWindowCreated(Surface surface) {\n\n            setSurface(surface);\n\n        }\n\n \n\n        @Override\n\n        public void onWindowCreated(SurfaceHolder surfaceHolder) {\n\n            setSurface(surfaceHolder);\n\n        }\n\n \n\n        @Override\n\n        public void onWindowDestroyed() {\n\n            setSurface((SurfaceHolder)null);\n\n        }\n\n    }\n\n}\n  ","MainActivity.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.mediarouter.player;\n\n \n\nimport android.app.PendingIntent;\n\nimport android.content.ComponentName;\n\nimport android.content.Context;\n\nimport android.content.Intent;\n\nimport android.media.AudioManager;\n\nimport android.media.AudioManager.OnAudioFocusChangeListener;\n\nimport android.media.RemoteControlClient;\n\nimport android.net.Uri;\n\nimport android.os.Build;\n\nimport android.os.Bundle;\n\nimport android.os.Environment;\n\nimport android.os.Handler;\n\nimport android.os.SystemClock;\n\nimport android.support.v4.app.FragmentManager;\n\nimport android.support.v4.view.MenuItemCompat;\n\nimport android.support.v7.app.ActionBarActivity;\n\nimport android.support.v7.app.MediaRouteActionProvider;\n\nimport android.support.v7.app.MediaRouteDiscoveryFragment;\n\nimport android.support.v7.media.MediaControlIntent;\n\nimport android.support.v7.media.MediaItemStatus;\n\nimport android.support.v7.media.MediaRouteSelector;\n\nimport android.support.v7.media.MediaRouter;\n\nimport android.support.v7.media.MediaRouter.Callback;\n\nimport android.support.v7.media.MediaRouter.ProviderInfo;\n\nimport android.support.v7.media.MediaRouter.RouteInfo;\n\nimport android.util.Log;\n\nimport android.view.KeyEvent;\n\nimport android.view.Menu;\n\nimport android.view.MenuItem;\n\nimport android.view.View;\n\nimport android.view.View.OnClickListener;\n\nimport android.view.ViewGroup;\n\nimport android.widget.AdapterView;\n\nimport android.widget.AdapterView.OnItemClickListener;\n\nimport android.widget.ArrayAdapter;\n\nimport android.widget.ImageButton;\n\nimport android.widget.ListView;\n\nimport android.widget.SeekBar;\n\nimport android.widget.SeekBar.OnSeekBarChangeListener;\n\nimport android.widget.TabHost;\n\nimport android.widget.TabHost.OnTabChangeListener;\n\nimport android.widget.TabHost.TabSpec;\n\nimport android.widget.TextView;\n\nimport android.widget.Toast;\n\n \n\nimport com.example.android.mediarouter.R;\n\nimport com.example.android.mediarouter.provider.SampleMediaRouteProvider;\n\n \n\nimport java.io.File;\n\n \n\n/**\n\n * <h3>Media Router Support Activity</h3>\n\n * <p/>\n\n * <p>\n\n * This demonstrates how to use the {@link MediaRouter} API to build an\n\n * application that allows the user to send content to various rendering\n\n * targets.\n\n * </p>\n\n */\n\npublic class MainActivity extends ActionBarActivity {\n\n    private static final String TAG = \"MainActivity\";\n\n    private static final String DISCOVERY_FRAGMENT_TAG = \"DiscoveryFragment\";\n\n \n\n    private MediaRouter mMediaRouter;\n\n    private MediaRouteSelector mSelector;\n\n    private LibraryAdapter mLibraryItems;\n\n    private PlaylistAdapter mPlayListItems;\n\n    private TextView mInfoTextView;\n\n    private ListView mLibraryView;\n\n    private ListView mPlayListView;\n\n    private ImageButton mPauseResumeButton;\n\n    private ImageButton mStopButton;\n\n    private SeekBar mSeekBar;\n\n    private boolean mPaused;\n\n    private boolean mNeedResume;\n\n    private boolean mSeeking;\n\n \n\n    private RemoteControlClient mRemoteControlClient;\n\n    private ComponentName mEventReceiver;\n\n    private AudioManager mAudioManager;\n\n    private PendingIntent mMediaPendingIntent;\n\n \n\n    private final Handler mHandler = new Handler();\n\n    private final Runnable mUpdateSeekRunnable = new Runnable() {\n\n        @Override\n\n        public void run() {\n\n            updateProgress();\n\n            // update UI every 1 second\n\n            mHandler.postDelayed(this, 1000);\n\n        }\n\n    };\n\n \n\n    private final SessionManager mSessionManager = new SessionManager(\"app\");\n\n    private Player mPlayer;\n\n \n\n    private final MediaRouter.Callback mMediaRouterCB = new MediaRouter.Callback() {\n\n        // Return a custom callback that will simply log all of the route events\n\n        // for demonstration purposes.\n\n        @Override\n\n        public void onRouteAdded(MediaRouter router, RouteInfo route) {\n\n            Log.d(TAG, \"onRouteAdded: route=\" + route);\n\n        }\n\n \n\n        @Override\n\n        public void onRouteChanged(MediaRouter router, RouteInfo route) {\n\n            Log.d(TAG, \"onRouteChanged: route=\" + route);\n\n        }\n\n \n\n        @Override\n\n        public void onRouteRemoved(MediaRouter router, RouteInfo route) {\n\n            Log.d(TAG, \"onRouteRemoved: route=\" + route);\n\n        }\n\n \n\n        @Override\n\n        public void onRouteSelected(MediaRouter router, RouteInfo route) {\n\n            Log.d(TAG, \"onRouteSelected: route=\" + route);\n\n \n\n            mPlayer = Player.create(MainActivity.this, route);\n\n            mPlayer.updatePresentation();\n\n            mSessionManager.setPlayer(mPlayer);\n\n            mSessionManager.unsuspend();\n\n \n\n            registerRemoteControlClient();\n\n            updateUi();\n\n        }\n\n \n\n        @Override\n\n        public void onRouteUnselected(MediaRouter router, RouteInfo route) {\n\n            Log.d(TAG, \"onRouteUnselected: route=\" + route);\n\n            unregisterRemoteControlClient();\n\n \n\n            PlaylistItem item = getCheckedPlaylistItem();\n\n            if (item != null) {\n\n                long pos = item.getPosition() +\n\n                        (mPaused ? 0 : (SystemClock.elapsedRealtime() - item.getTimestamp()));\n\n                mSessionManager.suspend(pos);\n\n            }\n\n            mPlayer.updatePresentation();\n\n            mPlayer.release();\n\n        }\n\n \n\n        @Override\n\n        public void onRouteVolumeChanged(MediaRouter router, RouteInfo route) {\n\n            Log.d(TAG, \"onRouteVolumeChanged: route=\" + route);\n\n        }\n\n \n\n        @Override\n\n        public void onRoutePresentationDisplayChanged(MediaRouter router, RouteInfo route) {\n\n            Log.d(TAG, \"onRoutePresentationDisplayChanged: route=\" + route);\n\n            mPlayer.updatePresentation();\n\n        }\n\n \n\n        @Override\n\n        public void onProviderAdded(MediaRouter router, ProviderInfo provider) {\n\n            Log.d(TAG, \"onRouteProviderAdded: provider=\" + provider);\n\n        }\n\n \n\n        @Override\n\n        public void onProviderRemoved(MediaRouter router, ProviderInfo provider) {\n\n            Log.d(TAG, \"onRouteProviderRemoved: provider=\" + provider);\n\n        }\n\n \n\n        @Override\n\n        public void onProviderChanged(MediaRouter router, ProviderInfo provider) {\n\n            Log.d(TAG, \"onRouteProviderChanged: provider=\" + provider);\n\n        }\n\n    };\n\n \n\n    private final OnAudioFocusChangeListener mAfChangeListener = new OnAudioFocusChangeListener() {\n\n        @Override\n\n        public void onAudioFocusChange(int focusChange) {\n\n            if (focusChange == AudioManager.AUDIOFOCUS_LOSS_TRANSIENT) {\n\n                Log.d(TAG, \"onAudioFocusChange: LOSS_TRANSIENT\");\n\n            } else if (focusChange == AudioManager.AUDIOFOCUS_GAIN) {\n\n                Log.d(TAG, \"onAudioFocusChange: AUDIOFOCUS_GAIN\");\n\n            } else if (focusChange == AudioManager.AUDIOFOCUS_LOSS) {\n\n                Log.d(TAG, \"onAudioFocusChange: AUDIOFOCUS_LOSS\");\n\n            }\n\n        }\n\n    };\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        // Be sure to call the super class.\n\n        super.onCreate(savedInstanceState);\n\n        if (savedInstanceState != null) {\n\n            mPlayer = (Player) savedInstanceState.getSerializable(\"mPlayer\");\n\n        }\n\n \n\n        // Get the media router service.\n\n        mMediaRouter = MediaRouter.getInstance(this);\n\n \n\n        // Create a route selector for the type of routes that we care about.\n\n        mSelector =\n\n                new MediaRouteSelector.Builder().addControlCategory(MediaControlIntent\n\n                        .CATEGORY_LIVE_AUDIO).addControlCategory(MediaControlIntent\n\n                        .CATEGORY_LIVE_VIDEO).addControlCategory(MediaControlIntent\n\n                        .CATEGORY_REMOTE_PLAYBACK).addControlCategory(SampleMediaRouteProvider\n\n                        .CATEGORY_SAMPLE_ROUTE).build();\n\n \n\n        // Add a fragment to take care of media route discovery.\n\n        // This fragment automatically adds or removes a callback whenever the activity\n\n        // is started or stopped.\n\n        FragmentManager fm = getSupportFragmentManager();\n\n        DiscoveryFragment fragment =\n\n                (DiscoveryFragment) fm.findFragmentByTag(DISCOVERY_FRAGMENT_TAG);\n\n        if (fragment == null) {\n\n            fragment = new DiscoveryFragment(mMediaRouterCB);\n\n            fragment.setRouteSelector(mSelector);\n\n            fm.beginTransaction().add(fragment, DISCOVERY_FRAGMENT_TAG).commit();\n\n        } else {\n\n            fragment.setCallback(mMediaRouterCB);\n\n            fragment.setRouteSelector(mSelector);\n\n        }\n\n \n\n        // Populate an array adapter with streaming media items.\n\n        String[] mediaNames = getResources().getStringArray(R.array.media_names);\n\n        String[] mediaUris = getResources().getStringArray(R.array.media_uris);\n\n        mLibraryItems = new LibraryAdapter();\n\n        for (int i = 0; i < mediaNames.length; i++) {\n\n            mLibraryItems.add(new MediaItem(\n\n                    \"[streaming] \" + mediaNames[i], Uri.parse(mediaUris[i]), \"video/mp4\"));\n\n        }\n\n \n\n        // Scan local external storage directory for media files.\n\n        File externalDir = Environment.getExternalStorageDirectory();\n\n        if (externalDir != null) {\n\n            File list[] = externalDir.listFiles();\n\n            if (list != null) {\n\n                for (int i = 0; i < list.length; i++) {\n\n                    String filename = list[i].getName();\n\n                    if (filename.matches(\".*\\\\.(m4v|mp4)\")) {\n\n                        mLibraryItems.add(new MediaItem(\n\n                                \"[local] \" + filename, Uri.fromFile(list[i]), \"video/mp4\"));\n\n                    }\n\n                }\n\n            }\n\n        }\n\n \n\n        mPlayListItems = new PlaylistAdapter();\n\n \n\n        // Initialize the layout.\n\n        setContentView(R.layout.sample_media_router);\n\n \n\n        TabHost tabHost = (TabHost) findViewById(R.id.tabHost);\n\n        tabHost.setup();\n\n        String tabName = getResources().getString(R.string.library_tab_text);\n\n        TabSpec spec1 = tabHost.newTabSpec(tabName);\n\n        spec1.setContent(R.id.tab1);\n\n        spec1.setIndicator(tabName);\n\n \n\n        tabName = getResources().getString(R.string.playlist_tab_text);\n\n        TabSpec spec2 = tabHost.newTabSpec(tabName);\n\n        spec2.setIndicator(tabName);\n\n        spec2.setContent(R.id.tab2);\n\n \n\n        tabName = getResources().getString(R.string.statistics_tab_text);\n\n        TabSpec spec3 = tabHost.newTabSpec(tabName);\n\n        spec3.setIndicator(tabName);\n\n        spec3.setContent(R.id.tab3);\n\n \n\n        tabHost.addTab(spec1);\n\n        tabHost.addTab(spec2);\n\n        tabHost.addTab(spec3);\n\n        tabHost.setOnTabChangedListener(new OnTabChangeListener() {\n\n            @Override\n\n            public void onTabChanged(String arg0) {\n\n                updateUi();\n\n            }\n\n        });\n\n \n\n        mLibraryView = (ListView) findViewById(R.id.media);\n\n        mLibraryView.setAdapter(mLibraryItems);\n\n        mLibraryView.setChoiceMode(ListView.CHOICE_MODE_SINGLE);\n\n        mLibraryView.setOnItemClickListener(new OnItemClickListener() {\n\n            @Override\n\n            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n\n                updateButtons();\n\n            }\n\n        });\n\n \n\n        mPlayListView = (ListView) findViewById(R.id.playlist);\n\n        mPlayListView.setAdapter(mPlayListItems);\n\n        mPlayListView.setChoiceMode(ListView.CHOICE_MODE_SINGLE);\n\n        mPlayListView.setOnItemClickListener(new OnItemClickListener() {\n\n            @Override\n\n            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n\n                updateButtons();\n\n            }\n\n        });\n\n \n\n        mInfoTextView = (TextView) findViewById(R.id.info);\n\n \n\n        mPauseResumeButton = (ImageButton) findViewById(R.id.pause_resume_button);\n\n        mPauseResumeButton.setOnClickListener(new OnClickListener() {\n\n            @Override\n\n            public void onClick(View v) {\n\n                mPaused = !mPaused;\n\n                if (mPaused) {\n\n                    mSessionManager.pause();\n\n                } else {\n\n                    mSessionManager.resume();\n\n                }\n\n            }\n\n        });\n\n \n\n        mStopButton = (ImageButton) findViewById(R.id.stop_button);\n\n        mStopButton.setOnClickListener(new OnClickListener() {\n\n            @Override\n\n            public void onClick(View v) {\n\n                mPaused = false;\n\n                mSessionManager.stop();\n\n            }\n\n        });\n\n \n\n        mSeekBar = (SeekBar) findViewById(R.id.seekbar);\n\n        mSeekBar.setOnSeekBarChangeListener(new OnSeekBarChangeListener() {\n\n            @Override\n\n            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {\n\n                PlaylistItem item = getCheckedPlaylistItem();\n\n                if (fromUser && item != null && item.getDuration() > 0) {\n\n                    long pos = progress * item.getDuration() / 100;\n\n                    mSessionManager.seek(item.getItemId(), pos);\n\n                    item.setPosition(pos);\n\n                    item.setTimestamp(SystemClock.elapsedRealtime());\n\n                }\n\n            }\n\n \n\n            @Override\n\n            public void onStartTrackingTouch(SeekBar seekBar) {\n\n                mSeeking = true;\n\n            }\n\n \n\n            @Override\n\n            public void onStopTrackingTouch(SeekBar seekBar) {\n\n                mSeeking = false;\n\n                updateUi();\n\n            }\n\n        });\n\n \n\n        // Schedule Ui update\n\n        mHandler.postDelayed(mUpdateSeekRunnable, 1000);\n\n \n\n        // Build the PendingIntent for the remote control client\n\n        mAudioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);\n\n        mEventReceiver =\n\n                new ComponentName(getPackageName(), SampleMediaButtonReceiver.class.getName());\n\n        Intent mediaButtonIntent = new Intent(Intent.ACTION_MEDIA_BUTTON);\n\n        mediaButtonIntent.setComponent(mEventReceiver);\n\n        mMediaPendingIntent = PendingIntent.getBroadcast(this, 0, mediaButtonIntent, 0);\n\n \n\n        // Create and register the remote control client\n\n        registerRemoteControlClient();\n\n \n\n        // Set up playback manager and player\n\n        mPlayer = Player.create(MainActivity.this, mMediaRouter.getSelectedRoute());\n\n        mSessionManager.setPlayer(mPlayer);\n\n        mSessionManager.setCallback(new SessionManager.Callback() {\n\n            @Override\n\n            public void onStatusChanged() {\n\n                updateUi();\n\n            }\n\n \n\n            @Override\n\n            public void onItemChanged(PlaylistItem item) {\n\n            }\n\n        });\n\n \n\n        updateUi();\n\n    }\n\n \n\n    private void registerRemoteControlClient() {\n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {\n\n            // Create the RCC and register with AudioManager and MediaRouter\n\n            mAudioManager.requestAudioFocus(mAfChangeListener, AudioManager.STREAM_MUSIC,\n\n                    AudioManager.AUDIOFOCUS_GAIN);\n\n            mAudioManager.registerMediaButtonEventReceiver(mEventReceiver);\n\n            mRemoteControlClient = new RemoteControlClient(mMediaPendingIntent);\n\n            mAudioManager.registerRemoteControlClient(mRemoteControlClient);\n\n            mMediaRouter.addRemoteControlClient(mRemoteControlClient);\n\n            SampleMediaButtonReceiver.setActivity(MainActivity.this);\n\n            mRemoteControlClient.setTransportControlFlags(RemoteControlClient\n\n                    .FLAG_KEY_MEDIA_PLAY_PAUSE);\n\n            mRemoteControlClient.setPlaybackState(RemoteControlClient.PLAYSTATE_PLAYING);\n\n        }\n\n    }\n\n \n\n    private void unregisterRemoteControlClient() {\n\n        // Unregister the RCC with AudioManager and MediaRouter\n\n        if (mRemoteControlClient != null) {\n\n            mRemoteControlClient.setTransportControlFlags(0);\n\n            mAudioManager.abandonAudioFocus(mAfChangeListener);\n\n            mAudioManager.unregisterMediaButtonEventReceiver(mEventReceiver);\n\n            mAudioManager.unregisterRemoteControlClient(mRemoteControlClient);\n\n            mMediaRouter.removeRemoteControlClient(mRemoteControlClient);\n\n            SampleMediaButtonReceiver.setActivity(null);\n\n            mRemoteControlClient = null;\n\n        }\n\n    }\n\n \n\n    public boolean handleMediaKey(KeyEvent event) {\n\n        if (event.getAction() == KeyEvent.ACTION_DOWN && event.getRepeatCount() == 0) {\n\n            switch (event.getKeyCode()) {\n\n                case KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE: {\n\n                    Log.d(TAG, \"Received Play/Pause event from RemoteControlClient\");\n\n                    mPaused = !mPaused;\n\n                    if (mPaused) {\n\n                        mSessionManager.pause();\n\n                    } else {\n\n                        mSessionManager.resume();\n\n                    }\n\n                    return true;\n\n                }\n\n                case KeyEvent.KEYCODE_MEDIA_PLAY: {\n\n                    Log.d(TAG, \"Received Play event from RemoteControlClient\");\n\n                    if (mPaused) {\n\n                        mPaused = false;\n\n                        mSessionManager.resume();\n\n                    }\n\n                    return true;\n\n                }\n\n                case KeyEvent.KEYCODE_MEDIA_PAUSE: {\n\n                    Log.d(TAG, \"Received Pause event from RemoteControlClient\");\n\n                    if (!mPaused) {\n\n                        mPaused = true;\n\n                        mSessionManager.pause();\n\n                    }\n\n                    return true;\n\n                }\n\n                case KeyEvent.KEYCODE_MEDIA_STOP: {\n\n                    Log.d(TAG, \"Received Stop event from RemoteControlClient\");\n\n                    mPaused = false;\n\n                    mSessionManager.stop();\n\n                    return true;\n\n                }\n\n                default:\n\n                    break;\n\n            }\n\n        }\n\n        return false;\n\n    }\n\n \n\n    @Override\n\n    public boolean onKeyDown(int keyCode, KeyEvent event) {\n\n        return handleMediaKey(event) || super.onKeyDown(keyCode, event);\n\n    }\n\n \n\n    @Override\n\n    public boolean onKeyUp(int keyCode, KeyEvent event) {\n\n        return handleMediaKey(event) || super.onKeyUp(keyCode, event);\n\n    }\n\n \n\n    @Override\n\n    public void onStart() {\n\n        // Be sure to call the super class.\n\n        super.onStart();\n\n    }\n\n \n\n    @Override\n\n    public void onPause() {\n\n        // pause media player for local playback case only\n\n        if (!mPlayer.isRemotePlayback() && !mPaused) {\n\n            mNeedResume = true;\n\n            mSessionManager.pause();\n\n        }\n\n        super.onPause();\n\n    }\n\n \n\n    @Override\n\n    public void onResume() {\n\n        // resume media player for local playback case only\n\n        if (!mPlayer.isRemotePlayback() && mNeedResume) {\n\n            mSessionManager.resume();\n\n            mNeedResume = false;\n\n        }\n\n        super.onResume();\n\n    }\n\n \n\n    @Override\n\n    public void onDestroy() {\n\n        // Unregister the remote control client\n\n        unregisterRemoteControlClient();\n\n \n\n        mPaused = false;\n\n        mSessionManager.stop();\n\n        mPlayer.release();\n\n        super.onDestroy();\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        // Be sure to call the super class.\n\n        super.onCreateOptionsMenu(menu);\n\n \n\n        // Inflate the menu and configure the media router action provider.\n\n        getMenuInflater().inflate(R.menu.sample_media_router_menu, menu);\n\n \n\n        MenuItem mediaRouteMenuItem = menu.findItem(R.id.media_route_menu_item);\n\n        MediaRouteActionProvider mediaRouteActionProvider =\n\n                (MediaRouteActionProvider) MenuItemCompat.getActionProvider(mediaRouteMenuItem);\n\n        mediaRouteActionProvider.setRouteSelector(mSelector);\n\n \n\n        // Return true to show the menu.\n\n        return true;\n\n    }\n\n \n\n    private void updateProgress() {\n\n        // Estimate content position from last status time and elapsed time.\n\n        // (Note this might be slightly out of sync with remote side, however\n\n        // it avoids frequent polling the MRP.)\n\n        int progress = 0;\n\n        PlaylistItem item = getCheckedPlaylistItem();\n\n        if (item != null) {\n\n            int state = item.getState();\n\n            long duration = item.getDuration();\n\n            if (duration <= 0) {\n\n                if (state == MediaItemStatus.PLAYBACK_STATE_PLAYING ||\n\n                        state == MediaItemStatus.PLAYBACK_STATE_PAUSED) {\n\n                    mSessionManager.updateStatus();\n\n                }\n\n            } else {\n\n                long position = item.getPosition();\n\n                long timeDelta =\n\n                        mPaused ? 0 : (SystemClock.elapsedRealtime() - item.getTimestamp());\n\n                progress = (int) (100.0 * (position + timeDelta) / duration);\n\n            }\n\n        }\n\n        mSeekBar.setProgress(progress);\n\n    }\n\n \n\n    private void updateUi() {\n\n        updatePlaylist();\n\n        updateRouteDescription();\n\n        updateButtons();\n\n    }\n\n \n\n    private void updatePlaylist() {\n\n        mPlayListItems.clear();\n\n        for (PlaylistItem item : mSessionManager.getPlaylist()) {\n\n            mPlayListItems.add(item);\n\n        }\n\n        mPlayListView.invalidate();\n\n    }\n\n \n\n \n\n    private void updateRouteDescription() {\n\n        RouteInfo route = mMediaRouter.getSelectedRoute();\n\n        mInfoTextView.setText(\n\n                \"Currently selected route:\" + \"\\nName: \" + route.getName() + \"\\nProvider: \" +\n\n                        route.getProvider().getPackageName() + \"\\nDescription: \" +\n\n                        route.getDescription() + \"\\nStatistics: \" +\n\n                        mSessionManager.getStatistics());\n\n    }\n\n \n\n    private void updateButtons() {\n\n        MediaRouter.RouteInfo route = mMediaRouter.getSelectedRoute();\n\n        // show pause or resume icon depending on current state\n\n        mPauseResumeButton.setImageResource(\n\n                mPaused ? R.drawable.ic_action_play : R.drawable.ic_action_pause);\n\n        // disable pause/resume/stop if no session\n\n        mPauseResumeButton.setEnabled(mSessionManager.hasSession());\n\n        mStopButton.setEnabled(mSessionManager.hasSession());\n\n        // only enable seek bar when duration is known\n\n        PlaylistItem item = getCheckedPlaylistItem();\n\n        mSeekBar.setEnabled(item != null && item.getDuration() > 0);\n\n        if (mRemoteControlClient != null) {\n\n            mRemoteControlClient.setPlaybackState(mPaused ? RemoteControlClient.PLAYSTATE_PAUSED :\n\n                    RemoteControlClient.PLAYSTATE_PLAYING);\n\n        }\n\n    }\n\n \n\n    private PlaylistItem getCheckedPlaylistItem() {\n\n        int count = mPlayListView.getCount();\n\n        int index = mPlayListView.getCheckedItemPosition();\n\n        if (count > 0) {\n\n            if (index < 0 || index >= count) {\n\n                index = 0;\n\n                mPlayListView.setItemChecked(0, true);\n\n            }\n\n            return mPlayListItems.getItem(index);\n\n        }\n\n        return null;\n\n    }\n\n \n\n    public static final class DiscoveryFragment extends MediaRouteDiscoveryFragment {\n\n        private static final String TAG = \"DiscoveryFragment\";\n\n        private Callback mCallback;\n\n \n\n        public DiscoveryFragment() {\n\n            mCallback = null;\n\n        }\n\n \n\n        public DiscoveryFragment(Callback cb) {\n\n            mCallback = cb;\n\n        }\n\n \n\n        public void setCallback(Callback cb) {\n\n            mCallback = cb;\n\n        }\n\n \n\n        @Override\n\n        public Callback onCreateCallback() {\n\n            return mCallback;\n\n        }\n\n \n\n        @Override\n\n        public int onPrepareCallbackFlags() {\n\n            // Add the CALLBACK_FLAG_UNFILTERED_EVENTS flag to ensure that we will\n\n            // observe and log all route events including those that are for routes\n\n            // that do not match our selector.  This is only for demonstration purposes\n\n            // and should not be needed by most applications.\n\n            return super.onPrepareCallbackFlags() | MediaRouter.CALLBACK_FLAG_UNFILTERED_EVENTS;\n\n        }\n\n    }\n\n \n\n    private static final class MediaItem {\n\n        public final String mName;\n\n        public final Uri mUri;\n\n        public final String mMime;\n\n \n\n        public MediaItem(String name, Uri uri, String mime) {\n\n            mName = name;\n\n            mUri = uri;\n\n            mMime = mime;\n\n        }\n\n \n\n        @Override\n\n        public String toString() {\n\n            return mName;\n\n        }\n\n    }\n\n \n\n    private final class LibraryAdapter extends ArrayAdapter<MediaItem> {\n\n        public LibraryAdapter() {\n\n            super(MainActivity.this, R.layout.media_item);\n\n        }\n\n \n\n        @Override\n\n        public View getView(int position, View convertView, ViewGroup parent) {\n\n            final View v;\n\n            if (convertView == null) {\n\n                v = getLayoutInflater().inflate(R.layout.media_item, null);\n\n            } else {\n\n                v = convertView;\n\n            }\n\n \n\n            final MediaItem item = getItem(position);\n\n \n\n            TextView tv = (TextView) v.findViewById(R.id.item_text);\n\n            tv.setText(item.mName);\n\n \n\n            ImageButton b = (ImageButton) v.findViewById(R.id.item_action);\n\n            b.setImageResource(R.drawable.ic_suggestions_add);\n\n            b.setTag(item);\n\n            b.setOnClickListener(new OnClickListener() {\n\n                @Override\n\n                public void onClick(View v) {\n\n                    if (item != null) {\n\n                        mSessionManager.add(item.mUri, item.mMime);\n\n                        Toast.makeText(MainActivity.this, R.string.playlist_item_added_text,\n\n                                Toast.LENGTH_SHORT).show();\n\n                    }\n\n                }\n\n            });\n\n \n\n            return v;\n\n        }\n\n    }\n\n \n\n    private final class PlaylistAdapter extends ArrayAdapter<PlaylistItem> {\n\n        public PlaylistAdapter() {\n\n            super(MainActivity.this, R.layout.media_item);\n\n        }\n\n \n\n        @Override\n\n        public View getView(int position, View convertView, ViewGroup parent) {\n\n            final View v;\n\n            if (convertView == null) {\n\n                v = getLayoutInflater().inflate(R.layout.media_item, null);\n\n            } else {\n\n                v = convertView;\n\n            }\n\n \n\n            final PlaylistItem item = getItem(position);\n\n \n\n            TextView tv = (TextView) v.findViewById(R.id.item_text);\n\n            tv.setText(item.toString());\n\n \n\n            ImageButton b = (ImageButton) v.findViewById(R.id.item_action);\n\n            b.setImageResource(R.drawable.ic_suggestions_delete);\n\n            b.setTag(item);\n\n            b.setOnClickListener(new OnClickListener() {\n\n                @Override\n\n                public void onClick(View v) {\n\n                    if (item != null) {\n\n                        mSessionManager.remove(item.getItemId());\n\n                        Toast.makeText(MainActivity.this, R.string.playlist_item_removed_text,\n\n                                Toast.LENGTH_SHORT).show();\n\n                    }\n\n                }\n\n            });\n\n \n\n            return v;\n\n        }\n\n    }\n\n}\n  ","OverlayDisplayWindow.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.mediarouter.player;\n\n \n\nimport android.content.Context;\n\nimport android.graphics.SurfaceTexture;\n\nimport android.hardware.display.DisplayManager;\n\nimport android.os.Build;\n\nimport android.util.DisplayMetrics;\n\nimport android.util.Log;\n\nimport android.view.Display;\n\nimport android.view.GestureDetector;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.MotionEvent;\n\nimport android.view.ScaleGestureDetector;\n\nimport android.view.Surface;\n\nimport android.view.SurfaceHolder;\n\nimport android.view.SurfaceView;\n\nimport android.view.TextureView;\n\nimport android.view.TextureView.SurfaceTextureListener;\n\nimport android.view.View;\n\nimport android.view.WindowManager;\n\nimport android.widget.TextView;\n\n \n\nimport com.example.android.mediarouter.R;\n\n \n\n/**\n\n * Manages an overlay display window, used for simulating remote playback.\n\n */\n\npublic abstract class OverlayDisplayWindow {\n\n    private static final String TAG = \"OverlayDisplayWindow\";\n\n    private static final boolean DEBUG = false;\n\n \n\n    private static final float WINDOW_ALPHA = 0.8f;\n\n    private static final float INITIAL_SCALE = 0.5f;\n\n    private static final float MIN_SCALE = 0.3f;\n\n    private static final float MAX_SCALE = 1.0f;\n\n \n\n    protected final Context mContext;\n\n    protected final String mName;\n\n    protected final int mWidth;\n\n    protected final int mHeight;\n\n    protected final int mGravity;\n\n    protected OverlayWindowListener mListener;\n\n \n\n    protected OverlayDisplayWindow(Context context, String name,\n\n            int width, int height, int gravity) {\n\n        mContext = context;\n\n        mName = name;\n\n        mWidth = width;\n\n        mHeight = height;\n\n        mGravity = gravity;\n\n    }\n\n \n\n    public static OverlayDisplayWindow create(Context context, String name,\n\n            int width, int height, int gravity) {\n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {\n\n            return new JellybeanMr1Impl(context, name, width, height, gravity);\n\n        } else {\n\n            return new LegacyImpl(context, name, width, height, gravity);\n\n        }\n\n    }\n\n \n\n    public void setOverlayWindowListener(OverlayWindowListener listener) {\n\n        mListener = listener;\n\n    }\n\n \n\n    public Context getContext() {\n\n        return mContext;\n\n    }\n\n \n\n    public abstract void show();\n\n \n\n    public abstract void dismiss();\n\n \n\n    public abstract void updateAspectRatio(int width, int height);\n\n \n\n    // Watches for significant changes in the overlay display window lifecycle.\n\n    public interface OverlayWindowListener {\n\n        public void onWindowCreated(Surface surface);\n\n        public void onWindowCreated(SurfaceHolder surfaceHolder);\n\n        public void onWindowDestroyed();\n\n    }\n\n \n\n    /**\n\n     * Implementation for older versions.\n\n     */\n\n    private static final class LegacyImpl extends OverlayDisplayWindow {\n\n        private final WindowManager mWindowManager;\n\n \n\n        private boolean mWindowVisible;\n\n        private SurfaceView mSurfaceView;\n\n \n\n        public LegacyImpl(Context context, String name,\n\n                int width, int height, int gravity) {\n\n            super(context, name, width, height, gravity);\n\n \n\n            mWindowManager = (WindowManager)context.getSystemService(\n\n                    Context.WINDOW_SERVICE);\n\n        }\n\n \n\n        @Override\n\n        public void show() {\n\n            if (!mWindowVisible) {\n\n                mSurfaceView = new SurfaceView(mContext);\n\n \n\n                Display display = mWindowManager.getDefaultDisplay();\n\n \n\n                WindowManager.LayoutParams params = new WindowManager.LayoutParams(\n\n                        WindowManager.LayoutParams.TYPE_SYSTEM_ALERT);\n\n                params.flags |= WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN\n\n                        | WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS\n\n                        | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE\n\n                        | WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL\n\n                        | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE;\n\n                params.alpha = WINDOW_ALPHA;\n\n                params.gravity = Gravity.LEFT | Gravity.BOTTOM;\n\n                params.setTitle(mName);\n\n \n\n                int width = (int)(display.getWidth() * INITIAL_SCALE);\n\n                int height = (int)(display.getHeight() * INITIAL_SCALE);\n\n                if (mWidth > mHeight) {\n\n                    height = mHeight * width / mWidth;\n\n                } else {\n\n                    width = mWidth * height / mHeight;\n\n                }\n\n                params.width = width;\n\n                params.height = height;\n\n \n\n                mWindowManager.addView(mSurfaceView, params);\n\n                mWindowVisible = true;\n\n \n\n                SurfaceHolder holder = mSurfaceView.getHolder();\n\n                holder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);\n\n                mListener.onWindowCreated(holder);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void dismiss() {\n\n            if (mWindowVisible) {\n\n                mListener.onWindowDestroyed();\n\n \n\n                mWindowManager.removeView(mSurfaceView);\n\n                mWindowVisible = false;\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void updateAspectRatio(int width, int height) {\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Implementation for API version 17+.\n\n     */\n\n    private static final class JellybeanMr1Impl extends OverlayDisplayWindow {\n\n        // When true, disables support for moving and resizing the overlay.\n\n        // The window is made non-touchable, which makes it possible to\n\n        // directly interact with the content underneath.\n\n        private static final boolean DISABLE_MOVE_AND_RESIZE = false;\n\n \n\n        private final DisplayManager mDisplayManager;\n\n        private final WindowManager mWindowManager;\n\n \n\n        private final Display mDefaultDisplay;\n\n        private final DisplayMetrics mDefaultDisplayMetrics = new DisplayMetrics();\n\n \n\n        private View mWindowContent;\n\n        private WindowManager.LayoutParams mWindowParams;\n\n        private TextureView mTextureView;\n\n        private TextView mNameTextView;\n\n \n\n        private GestureDetector mGestureDetector;\n\n        private ScaleGestureDetector mScaleGestureDetector;\n\n \n\n        private boolean mWindowVisible;\n\n        private int mWindowX;\n\n        private int mWindowY;\n\n        private float mWindowScale;\n\n \n\n        private float mLiveTranslationX;\n\n        private float mLiveTranslationY;\n\n        private float mLiveScale = 1.0f;\n\n \n\n        public JellybeanMr1Impl(Context context, String name,\n\n                int width, int height, int gravity) {\n\n            super(context, name, width, height, gravity);\n\n \n\n            mDisplayManager = (DisplayManager)context.getSystemService(\n\n                    Context.DISPLAY_SERVICE);\n\n            mWindowManager = (WindowManager)context.getSystemService(\n\n                    Context.WINDOW_SERVICE);\n\n \n\n            mDefaultDisplay = mWindowManager.getDefaultDisplay();\n\n            updateDefaultDisplayInfo();\n\n \n\n            createWindow();\n\n        }\n\n \n\n        @Override\n\n        public void show() {\n\n            if (!mWindowVisible) {\n\n                mDisplayManager.registerDisplayListener(mDisplayListener, null);\n\n                if (!updateDefaultDisplayInfo()) {\n\n                    mDisplayManager.unregisterDisplayListener(mDisplayListener);\n\n                    return;\n\n                }\n\n \n\n                clearLiveState();\n\n                updateWindowParams();\n\n                mWindowManager.addView(mWindowContent, mWindowParams);\n\n                mWindowVisible = true;\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void dismiss() {\n\n            if (mWindowVisible) {\n\n                mDisplayManager.unregisterDisplayListener(mDisplayListener);\n\n                mWindowManager.removeView(mWindowContent);\n\n                mWindowVisible = false;\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void updateAspectRatio(int width, int height) {\n\n            if (mWidth * height < mHeight * width) {\n\n                mTextureView.getLayoutParams().width = mWidth;\n\n                mTextureView.getLayoutParams().height = mWidth * height / width;\n\n            } else {\n\n                mTextureView.getLayoutParams().width = mHeight * width / height;\n\n                mTextureView.getLayoutParams().height = mHeight;\n\n            }\n\n            relayout();\n\n        }\n\n \n\n        private void relayout() {\n\n            if (mWindowVisible) {\n\n                updateWindowParams();\n\n                mWindowManager.updateViewLayout(mWindowContent, mWindowParams);\n\n            }\n\n        }\n\n \n\n        private boolean updateDefaultDisplayInfo() {\n\n            mDefaultDisplay.getMetrics(mDefaultDisplayMetrics);\n\n            return true;\n\n        }\n\n \n\n        private void createWindow() {\n\n            LayoutInflater inflater = LayoutInflater.from(mContext);\n\n \n\n            mWindowContent = inflater.inflate(\n\n                    R.layout.overlay_display_window, null);\n\n            mWindowContent.setOnTouchListener(mOnTouchListener);\n\n \n\n            mTextureView = (TextureView)mWindowContent.findViewById(\n\n                    R.id.overlay_display_window_texture);\n\n            mTextureView.setPivotX(0);\n\n            mTextureView.setPivotY(0);\n\n            mTextureView.getLayoutParams().width = mWidth;\n\n            mTextureView.getLayoutParams().height = mHeight;\n\n            mTextureView.setOpaque(false);\n\n            mTextureView.setSurfaceTextureListener(mSurfaceTextureListener);\n\n \n\n            mNameTextView = (TextView)mWindowContent.findViewById(\n\n                    R.id.overlay_display_window_title);\n\n            mNameTextView.setText(mName);\n\n \n\n            mWindowParams = new WindowManager.LayoutParams(\n\n                    WindowManager.LayoutParams.TYPE_SYSTEM_ALERT);\n\n            mWindowParams.flags |= WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN\n\n                    | WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS\n\n                    | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE\n\n                    | WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL\n\n                    | WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED;\n\n            if (DISABLE_MOVE_AND_RESIZE) {\n\n                mWindowParams.flags |= WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE;\n\n            }\n\n            mWindowParams.alpha = WINDOW_ALPHA;\n\n            mWindowParams.gravity = Gravity.TOP | Gravity.LEFT;\n\n            mWindowParams.setTitle(mName);\n\n \n\n            mGestureDetector = new GestureDetector(mContext, mOnGestureListener);\n\n            mScaleGestureDetector = new ScaleGestureDetector(mContext, mOnScaleGestureListener);\n\n \n\n            // Set the initial position and scale.\n\n            // The position and scale will be clamped when the display is first shown.\n\n            mWindowX = (mGravity & Gravity.LEFT) == Gravity.LEFT ?\n\n                    0 : mDefaultDisplayMetrics.widthPixels;\n\n            mWindowY = (mGravity & Gravity.TOP) == Gravity.TOP ?\n\n                    0 : mDefaultDisplayMetrics.heightPixels;\n\n            Log.d(TAG, mDefaultDisplayMetrics.toString());\n\n            mWindowScale = INITIAL_SCALE;\n\n \n\n            // calculate and save initial settings\n\n            updateWindowParams();\n\n            saveWindowParams();\n\n        }\n\n \n\n        private void updateWindowParams() {\n\n            float scale = mWindowScale * mLiveScale;\n\n            scale = Math.min(scale, (float)mDefaultDisplayMetrics.widthPixels / mWidth);\n\n            scale = Math.min(scale, (float)mDefaultDisplayMetrics.heightPixels / mHeight);\n\n            scale = Math.max(MIN_SCALE, Math.min(MAX_SCALE, scale));\n\n \n\n            float offsetScale = (scale / mWindowScale - 1.0f) * 0.5f;\n\n            int width = (int)(mWidth * scale);\n\n            int height = (int)(mHeight * scale);\n\n            int x = (int)(mWindowX + mLiveTranslationX - width * offsetScale);\n\n            int y = (int)(mWindowY + mLiveTranslationY - height * offsetScale);\n\n            x = Math.max(0, Math.min(x, mDefaultDisplayMetrics.widthPixels - width));\n\n            y = Math.max(0, Math.min(y, mDefaultDisplayMetrics.heightPixels - height));\n\n \n\n            if (DEBUG) {\n\n                Log.d(TAG, \"updateWindowParams: scale=\" + scale\n\n                        + \", offsetScale=\" + offsetScale\n\n                        + \", x=\" + x + \", y=\" + y\n\n                        + \", width=\" + width + \", height=\" + height);\n\n            }\n\n \n\n            mTextureView.setScaleX(scale);\n\n            mTextureView.setScaleY(scale);\n\n \n\n            mTextureView.setTranslationX(\n\n                    (mWidth - mTextureView.getLayoutParams().width) * scale / 2);\n\n            mTextureView.setTranslationY(\n\n                    (mHeight - mTextureView.getLayoutParams().height) * scale / 2);\n\n \n\n            mWindowParams.x = x;\n\n            mWindowParams.y = y;\n\n            mWindowParams.width = width;\n\n            mWindowParams.height = height;\n\n        }\n\n \n\n        private void saveWindowParams() {\n\n            mWindowX = mWindowParams.x;\n\n            mWindowY = mWindowParams.y;\n\n            mWindowScale = mTextureView.getScaleX();\n\n            clearLiveState();\n\n        }\n\n \n\n        private void clearLiveState() {\n\n            mLiveTranslationX = 0f;\n\n            mLiveTranslationY = 0f;\n\n            mLiveScale = 1.0f;\n\n        }\n\n \n\n        private final DisplayManager.DisplayListener mDisplayListener =\n\n                new DisplayManager.DisplayListener() {\n\n            @Override\n\n            public void onDisplayAdded(int displayId) {\n\n            }\n\n \n\n            @Override\n\n            public void onDisplayChanged(int displayId) {\n\n                if (displayId == mDefaultDisplay.getDisplayId()) {\n\n                    if (updateDefaultDisplayInfo()) {\n\n                        relayout();\n\n                    } else {\n\n                        dismiss();\n\n                    }\n\n                }\n\n            }\n\n \n\n            @Override\n\n            public void onDisplayRemoved(int displayId) {\n\n                if (displayId == mDefaultDisplay.getDisplayId()) {\n\n                    dismiss();\n\n                }\n\n            }\n\n        };\n\n \n\n        private final SurfaceTextureListener mSurfaceTextureListener =\n\n                new SurfaceTextureListener() {\n\n            @Override\n\n            public void onSurfaceTextureAvailable(SurfaceTexture surfaceTexture,\n\n                    int width, int height) {\n\n                if (mListener != null) {\n\n                    mListener.onWindowCreated(new Surface(surfaceTexture));\n\n                }\n\n            }\n\n \n\n            @Override\n\n            public boolean onSurfaceTextureDestroyed(SurfaceTexture surfaceTexture) {\n\n                if (mListener != null) {\n\n                    mListener.onWindowDestroyed();\n\n                }\n\n                return true;\n\n            }\n\n \n\n            @Override\n\n            public void onSurfaceTextureSizeChanged(SurfaceTexture surfaceTexture,\n\n                    int width, int height) {\n\n            }\n\n \n\n            @Override\n\n            public void onSurfaceTextureUpdated(SurfaceTexture surfaceTexture) {\n\n            }\n\n        };\n\n \n\n        private final View.OnTouchListener mOnTouchListener = new View.OnTouchListener() {\n\n            @Override\n\n            public boolean onTouch(View view, MotionEvent event) {\n\n                // Work in screen coordinates.\n\n                final float oldX = event.getX();\n\n                final float oldY = event.getY();\n\n                event.setLocation(event.getRawX(), event.getRawY());\n\n \n\n                mGestureDetector.onTouchEvent(event);\n\n                mScaleGestureDetector.onTouchEvent(event);\n\n \n\n                switch (event.getActionMasked()) {\n\n                    case MotionEvent.ACTION_UP:\n\n                    case MotionEvent.ACTION_CANCEL:\n\n                        saveWindowParams();\n\n                        break;\n\n                }\n\n \n\n                // Revert to window coordinates.\n\n                event.setLocation(oldX, oldY);\n\n                return true;\n\n            }\n\n        };\n\n \n\n        private final GestureDetector.OnGestureListener mOnGestureListener =\n\n                new GestureDetector.SimpleOnGestureListener() {\n\n            @Override\n\n            public boolean onScroll(MotionEvent e1, MotionEvent e2,\n\n                    float distanceX, float distanceY) {\n\n                mLiveTranslationX -= distanceX;\n\n                mLiveTranslationY -= distanceY;\n\n                relayout();\n\n                return true;\n\n            }\n\n        };\n\n \n\n        private final ScaleGestureDetector.OnScaleGestureListener mOnScaleGestureListener =\n\n                new ScaleGestureDetector.SimpleOnScaleGestureListener() {\n\n            @Override\n\n            public boolean onScale(ScaleGestureDetector detector) {\n\n                mLiveScale *= detector.getScaleFactor();\n\n                relayout();\n\n                return true;\n\n            }\n\n        };\n\n    }\n\n}\n  ","Player.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.mediarouter.player;\n\n \n\nimport android.content.Context;\n\nimport android.support.v7.media.MediaControlIntent;\n\nimport android.support.v7.media.MediaRouter.RouteInfo;\n\n \n\n/**\n\n * Abstraction of common playback operations of media items, such as play,\n\n * seek, etc. Used by PlaybackManager as a backend to handle actual playback\n\n * of media items.\n\n */\n\npublic abstract class Player {\n\n    protected Callback mCallback;\n\n \n\n    public abstract boolean isRemotePlayback();\n\n    public abstract boolean isQueuingSupported();\n\n \n\n    public abstract void connect(RouteInfo route);\n\n    public abstract void release();\n\n \n\n    // basic operations that are always supported\n\n    public abstract void play(final PlaylistItem item);\n\n    public abstract void seek(final PlaylistItem item);\n\n    public abstract void getStatus(final PlaylistItem item, final boolean update);\n\n    public abstract void pause();\n\n    public abstract void resume();\n\n    public abstract void stop();\n\n \n\n    // advanced queuing (enqueue & remove) are only supported\n\n    // if isQueuingSupported() returns true\n\n    public abstract void enqueue(final PlaylistItem item);\n\n    public abstract PlaylistItem remove(String iid);\n\n \n\n    // route statistics\n\n    public void updateStatistics() {}\n\n    public String getStatistics() { return \"\"; }\n\n \n\n    // presentation display\n\n    public void updatePresentation() {}\n\n \n\n    public void setCallback(Callback callback) {\n\n        mCallback = callback;\n\n    }\n\n \n\n    public static Player create(Context context, RouteInfo route) {\n\n        Player player;\n\n        if (route != null && route.supportsControlCategory(\n\n                MediaControlIntent.CATEGORY_REMOTE_PLAYBACK)) {\n\n            player = new RemotePlayer(context);\n\n        } else if (route != null) {\n\n            player = new LocalPlayer.SurfaceViewPlayer(context);\n\n        } else {\n\n            player = new LocalPlayer.OverlayPlayer(context);\n\n        }\n\n        player.connect(route);\n\n        return player;\n\n    }\n\n \n\n    public interface Callback {\n\n        void onError();\n\n        void onCompletion();\n\n        void onPlaylistChanged();\n\n        void onPlaylistReady();\n\n    }\n\n}\n  ","PlaylistItem.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.mediarouter.player;\n\n \n\nimport android.app.PendingIntent;\n\nimport android.net.Uri;\n\nimport android.os.SystemClock;\n\nimport android.support.v7.media.MediaItemStatus;\n\n \n\n/**\n\n * PlaylistItem helps keep track of the current status of an media item.\n\n */\n\npublic final class PlaylistItem {\n\n    // immutables\n\n    private final String mSessionId;\n\n    private final String mItemId;\n\n    private final Uri mUri;\n\n    private final String mMime;\n\n    private final PendingIntent mUpdateReceiver;\n\n    // changeable states\n\n    private int mPlaybackState = MediaItemStatus.PLAYBACK_STATE_PENDING;\n\n    private long mContentPosition;\n\n    private long mContentDuration;\n\n    private long mTimestamp;\n\n    private String mRemoteItemId;\n\n \n\n    public PlaylistItem(String qid, String iid, Uri uri, String mime, PendingIntent pi) {\n\n        mSessionId = qid;\n\n        mItemId = iid;\n\n        mUri = uri;\n\n        mMime = mime;\n\n        mUpdateReceiver = pi;\n\n        setTimestamp(SystemClock.elapsedRealtime());\n\n    }\n\n \n\n    public void setRemoteItemId(String riid) {\n\n        mRemoteItemId = riid;\n\n    }\n\n \n\n    public void setState(int state) {\n\n        mPlaybackState = state;\n\n    }\n\n \n\n    public void setPosition(long pos) {\n\n        mContentPosition = pos;\n\n    }\n\n \n\n    public void setTimestamp(long ts) {\n\n        mTimestamp = ts;\n\n    }\n\n \n\n    public void setDuration(long duration) {\n\n        mContentDuration = duration;\n\n    }\n\n \n\n    public String getSessionId() {\n\n        return mSessionId;\n\n    }\n\n \n\n    public String getItemId() {\n\n        return mItemId;\n\n    }\n\n \n\n    public String getRemoteItemId() {\n\n        return mRemoteItemId;\n\n    }\n\n \n\n    public Uri getUri() {\n\n        return mUri;\n\n    }\n\n \n\n    public PendingIntent getUpdateReceiver() {\n\n        return mUpdateReceiver;\n\n    }\n\n \n\n    public int getState() {\n\n        return mPlaybackState;\n\n    }\n\n \n\n    public long getPosition() {\n\n        return mContentPosition;\n\n    }\n\n \n\n    public long getDuration() {\n\n        return mContentDuration;\n\n    }\n\n \n\n    public long getTimestamp() {\n\n        return mTimestamp;\n\n    }\n\n \n\n    public MediaItemStatus getStatus() {\n\n        return new MediaItemStatus.Builder(mPlaybackState)\n\n            .setContentPosition(mContentPosition)\n\n            .setContentDuration(mContentDuration)\n\n            .setTimestamp(mTimestamp)\n\n            .build();\n\n    }\n\n \n\n    @Override\n\n    public String toString() {\n\n        String state[] = {\n\n            \"PENDING\",\n\n            \"PLAYING\",\n\n            \"PAUSED\",\n\n            \"BUFFERING\",\n\n            \"FINISHED\",\n\n            \"CANCELED\",\n\n            \"INVALIDATED\",\n\n            \"ERROR\"\n\n        };\n\n        return \"[\" + mSessionId + \"|\" + mItemId + \"|\"\n\n            + (mRemoteItemId != null ? mRemoteItemId : \"-\") + \"|\"\n\n            + state[mPlaybackState] + \"] \" + mUri.toString();\n\n    }\n\n}\n  ","RemotePlayer.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.mediarouter.player;\n\n \n\nimport android.content.Context;\n\nimport android.content.Intent;\n\nimport android.os.Bundle;\n\nimport android.support.v7.media.MediaItemStatus;\n\nimport android.support.v7.media.MediaRouter.ControlRequestCallback;\n\nimport android.support.v7.media.MediaRouter.RouteInfo;\n\nimport android.support.v7.media.MediaSessionStatus;\n\nimport android.support.v7.media.RemotePlaybackClient;\n\nimport android.support.v7.media.RemotePlaybackClient.ItemActionCallback;\n\nimport android.support.v7.media.RemotePlaybackClient.SessionActionCallback;\n\nimport android.support.v7.media.RemotePlaybackClient.StatusCallback;\n\nimport android.util.Log;\n\n \n\nimport com.example.android.mediarouter.player.Player;\n\nimport com.example.android.mediarouter.player.PlaylistItem;\n\nimport com.example.android.mediarouter.provider.SampleMediaRouteProvider;\n\n \n\nimport java.util.ArrayList;\n\nimport java.util.List;\n\n \n\n/**\n\n * Handles playback of media items using a remote route.\n\n *\n\n * This class is used as a backend by PlaybackManager to feed media items to\n\n * the remote route. When the remote route doesn't support queuing, media items\n\n * are fed one-at-a-time; otherwise media items are enqueued to the remote side.\n\n */\n\npublic class RemotePlayer extends Player {\n\n    private static final String TAG = \"RemotePlayer\";\n\n    private static final boolean DEBUG = Log.isLoggable(TAG, Log.DEBUG);\n\n    private Context mContext;\n\n    private RouteInfo mRoute;\n\n    private boolean mEnqueuePending;\n\n    private String mStatsInfo = \"\";\n\n    private List<PlaylistItem> mTempQueue = new ArrayList<PlaylistItem>();\n\n \n\n    private RemotePlaybackClient mClient;\n\n    private StatusCallback mStatusCallback = new StatusCallback() {\n\n        @Override\n\n        public void onItemStatusChanged(Bundle data,\n\n                String sessionId, MediaSessionStatus sessionStatus,\n\n                String itemId, MediaItemStatus itemStatus) {\n\n            logStatus(\"onItemStatusChanged\", sessionId, sessionStatus, itemId, itemStatus);\n\n            if (mCallback != null) {\n\n                if (itemStatus.getPlaybackState() ==\n\n                        MediaItemStatus.PLAYBACK_STATE_FINISHED) {\n\n                    mCallback.onCompletion();\n\n                } else if (itemStatus.getPlaybackState() ==\n\n                        MediaItemStatus.PLAYBACK_STATE_ERROR) {\n\n                    mCallback.onError();\n\n                }\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void onSessionStatusChanged(Bundle data,\n\n                String sessionId, MediaSessionStatus sessionStatus) {\n\n            logStatus(\"onSessionStatusChanged\", sessionId, sessionStatus, null, null);\n\n            if (mCallback != null) {\n\n                mCallback.onPlaylistChanged();\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void onSessionChanged(String sessionId) {\n\n            if (DEBUG) {\n\n                Log.d(TAG, \"onSessionChanged: sessionId=\" + sessionId);\n\n            }\n\n        }\n\n    };\n\n \n\n    public RemotePlayer(Context context) {\n\n        mContext = context;\n\n    }\n\n \n\n    @Override\n\n    public boolean isRemotePlayback() {\n\n        return true;\n\n    }\n\n \n\n    @Override\n\n    public boolean isQueuingSupported() {\n\n        return mClient.isQueuingSupported();\n\n    }\n\n \n\n    @Override\n\n    public void connect(RouteInfo route) {\n\n        mRoute = route;\n\n        mClient = new RemotePlaybackClient(mContext, route);\n\n        mClient.setStatusCallback(mStatusCallback);\n\n \n\n        if (DEBUG) {\n\n            Log.d(TAG, \"connected to: \" + route\n\n                    + \", isRemotePlaybackSupported: \" + mClient.isRemotePlaybackSupported()\n\n                    + \", isQueuingSupported: \"+ mClient.isQueuingSupported());\n\n        }\n\n    }\n\n \n\n    @Override\n\n    public void release() {\n\n        mClient.release();\n\n \n\n        if (DEBUG) {\n\n            Log.d(TAG, \"released.\");\n\n        }\n\n    }\n\n \n\n    // basic playback operations that are always supported\n\n    @Override\n\n    public void play(final PlaylistItem item) {\n\n        if (DEBUG) {\n\n            Log.d(TAG, \"play: item=\" + item);\n\n        }\n\n        mClient.play(item.getUri(), \"video/mp4\", null, 0, null, new ItemActionCallback() {\n\n            @Override\n\n            public void onResult(Bundle data, String sessionId, MediaSessionStatus sessionStatus,\n\n                    String itemId, MediaItemStatus itemStatus) {\n\n                logStatus(\"play: succeeded\", sessionId, sessionStatus, itemId, itemStatus);\n\n                item.setRemoteItemId(itemId);\n\n                if (item.getPosition() > 0) {\n\n                    seekInternal(item);\n\n                }\n\n                if (item.getState() == MediaItemStatus.PLAYBACK_STATE_PAUSED) {\n\n                    pause();\n\n                }\n\n                if (mCallback != null) {\n\n                    mCallback.onPlaylistChanged();\n\n                }\n\n            }\n\n \n\n            @Override\n\n            public void onError(String error, int code, Bundle data) {\n\n                logError(\"play: failed\", error, code);\n\n            }\n\n        });\n\n    }\n\n \n\n    @Override\n\n    public void seek(final PlaylistItem item) {\n\n        seekInternal(item);\n\n    }\n\n \n\n    @Override\n\n    public void getStatus(final PlaylistItem item, final boolean update) {\n\n        if (!mClient.hasSession() || item.getRemoteItemId() == null) {\n\n            // if session is not valid or item id not assigend yet.\n\n            // just return, it's not fatal\n\n            return;\n\n        }\n\n \n\n        if (DEBUG) {\n\n            Log.d(TAG, \"getStatus: item=\" + item + \", update=\" + update);\n\n        }\n\n        mClient.getStatus(item.getRemoteItemId(), null, new ItemActionCallback() {\n\n            @Override\n\n            public void onResult(Bundle data, String sessionId, MediaSessionStatus sessionStatus,\n\n                    String itemId, MediaItemStatus itemStatus) {\n\n                logStatus(\"getStatus: succeeded\", sessionId, sessionStatus, itemId, itemStatus);\n\n                int state = itemStatus.getPlaybackState();\n\n                if (state == MediaItemStatus.PLAYBACK_STATE_PLAYING\n\n                        || state == MediaItemStatus.PLAYBACK_STATE_PAUSED\n\n                        || state == MediaItemStatus.PLAYBACK_STATE_PENDING) {\n\n                    item.setState(state);\n\n                    item.setPosition(itemStatus.getContentPosition());\n\n                    item.setDuration(itemStatus.getContentDuration());\n\n                    item.setTimestamp(itemStatus.getTimestamp());\n\n                }\n\n                if (update && mCallback != null) {\n\n                    mCallback.onPlaylistReady();\n\n                }\n\n            }\n\n \n\n            @Override\n\n            public void onError(String error, int code, Bundle data) {\n\n                logError(\"getStatus: failed\", error, code);\n\n                if (update && mCallback != null) {\n\n                    mCallback.onPlaylistReady();\n\n                }\n\n            }\n\n        });\n\n    }\n\n \n\n    @Override\n\n    public void pause() {\n\n        if (!mClient.hasSession()) {\n\n            // ignore if no session\n\n            return;\n\n        }\n\n        if (DEBUG) {\n\n            Log.d(TAG, \"pause\");\n\n        }\n\n        mClient.pause(null, new SessionActionCallback() {\n\n            @Override\n\n            public void onResult(Bundle data, String sessionId, MediaSessionStatus sessionStatus) {\n\n                logStatus(\"pause: succeeded\", sessionId, sessionStatus, null, null);\n\n                if (mCallback != null) {\n\n                    mCallback.onPlaylistChanged();\n\n                }\n\n            }\n\n \n\n            @Override\n\n            public void onError(String error, int code, Bundle data) {\n\n                logError(\"pause: failed\", error, code);\n\n            }\n\n        });\n\n    }\n\n \n\n    @Override\n\n    public void resume() {\n\n        if (!mClient.hasSession()) {\n\n            // ignore if no session\n\n            return;\n\n        }\n\n        if (DEBUG) {\n\n            Log.d(TAG, \"resume\");\n\n        }\n\n        mClient.resume(null, new SessionActionCallback() {\n\n            @Override\n\n            public void onResult(Bundle data, String sessionId, MediaSessionStatus sessionStatus) {\n\n                logStatus(\"resume: succeeded\", sessionId, sessionStatus, null, null);\n\n                if (mCallback != null) {\n\n                    mCallback.onPlaylistChanged();\n\n                }\n\n            }\n\n \n\n            @Override\n\n            public void onError(String error, int code, Bundle data) {\n\n                logError(\"resume: failed\", error, code);\n\n            }\n\n        });\n\n    }\n\n \n\n    @Override\n\n    public void stop() {\n\n        if (!mClient.hasSession()) {\n\n            // ignore if no session\n\n            return;\n\n        }\n\n        if (DEBUG) {\n\n            Log.d(TAG, \"stop\");\n\n        }\n\n        mClient.stop(null, new SessionActionCallback() {\n\n            @Override\n\n            public void onResult(Bundle data, String sessionId, MediaSessionStatus sessionStatus) {\n\n                logStatus(\"stop: succeeded\", sessionId, sessionStatus, null, null);\n\n                if (mClient.isSessionManagementSupported()) {\n\n                    endSession();\n\n                }\n\n                if (mCallback != null) {\n\n                    mCallback.onPlaylistChanged();\n\n                }\n\n            }\n\n \n\n            @Override\n\n            public void onError(String error, int code, Bundle data) {\n\n                logError(\"stop: failed\", error, code);\n\n            }\n\n        });\n\n    }\n\n \n\n    // enqueue & remove are only supported if isQueuingSupported() returns true\n\n    @Override\n\n    public void enqueue(final PlaylistItem item) {\n\n        throwIfQueuingUnsupported();\n\n \n\n        if (!mClient.hasSession() && !mEnqueuePending) {\n\n            mEnqueuePending = true;\n\n            if (mClient.isSessionManagementSupported()) {\n\n                startSession(item);\n\n            } else {\n\n                enqueueInternal(item);\n\n            }\n\n        } else if (mEnqueuePending){\n\n            mTempQueue.add(item);\n\n        } else {\n\n            enqueueInternal(item);\n\n        }\n\n    }\n\n \n\n    @Override\n\n    public PlaylistItem remove(String itemId) {\n\n        throwIfNoSession();\n\n        throwIfQueuingUnsupported();\n\n \n\n        if (DEBUG) {\n\n            Log.d(TAG, \"remove: itemId=\" + itemId);\n\n        }\n\n        mClient.remove(itemId, null, new ItemActionCallback() {\n\n            @Override\n\n            public void onResult(Bundle data, String sessionId, MediaSessionStatus sessionStatus,\n\n                    String itemId, MediaItemStatus itemStatus) {\n\n                logStatus(\"remove: succeeded\", sessionId, sessionStatus, itemId, itemStatus);\n\n            }\n\n \n\n            @Override\n\n            public void onError(String error, int code, Bundle data) {\n\n                logError(\"remove: failed\", error, code);\n\n            }\n\n        });\n\n \n\n        return null;\n\n    }\n\n \n\n    @Override\n\n    public void updateStatistics() {\n\n        // clear stats info first\n\n        mStatsInfo = \"\";\n\n \n\n        Intent intent = new Intent(SampleMediaRouteProvider.ACTION_GET_STATISTICS);\n\n        intent.addCategory(SampleMediaRouteProvider.CATEGORY_SAMPLE_ROUTE);\n\n \n\n        if (mRoute != null && mRoute.supportsControlRequest(intent)) {\n\n            ControlRequestCallback callback = new ControlRequestCallback() {\n\n                @Override\n\n                public void onResult(Bundle data) {\n\n                    if (DEBUG) {\n\n                        Log.d(TAG, \"getStatistics: succeeded: data=\" + data);\n\n                    }\n\n                    if (data != null) {\n\n                        int playbackCount = data.getInt(\n\n                                SampleMediaRouteProvider.DATA_PLAYBACK_COUNT, -1);\n\n                        mStatsInfo = \"Total playback count: \" + playbackCount;\n\n                    }\n\n                }\n\n \n\n                @Override\n\n                public void onError(String error, Bundle data) {\n\n                    Log.d(TAG, \"getStatistics: failed: error=\" + error + \", data=\" + data);\n\n                }\n\n            };\n\n \n\n            mRoute.sendControlRequest(intent, callback);\n\n        }\n\n    }\n\n \n\n    @Override\n\n    public String getStatistics() {\n\n        return mStatsInfo;\n\n    }\n\n \n\n    private void enqueueInternal(final PlaylistItem item) {\n\n        throwIfQueuingUnsupported();\n\n \n\n        if (DEBUG) {\n\n            Log.d(TAG, \"enqueue: item=\" + item);\n\n        }\n\n        mClient.enqueue(item.getUri(), \"video/mp4\", null, 0, null, new ItemActionCallback() {\n\n            @Override\n\n            public void onResult(Bundle data, String sessionId, MediaSessionStatus sessionStatus,\n\n                    String itemId, MediaItemStatus itemStatus) {\n\n                logStatus(\"enqueue: succeeded\", sessionId, sessionStatus, itemId, itemStatus);\n\n                item.setRemoteItemId(itemId);\n\n                if (item.getPosition() > 0) {\n\n                    seekInternal(item);\n\n                }\n\n                if (item.getState() == MediaItemStatus.PLAYBACK_STATE_PAUSED) {\n\n                    pause();\n\n                }\n\n                if (mEnqueuePending) {\n\n                    mEnqueuePending = false;\n\n                    for (PlaylistItem item : mTempQueue) {\n\n                        enqueueInternal(item);\n\n                    }\n\n                    mTempQueue.clear();\n\n                }\n\n                if (mCallback != null) {\n\n                    mCallback.onPlaylistChanged();\n\n                }\n\n            }\n\n \n\n            @Override\n\n            public void onError(String error, int code, Bundle data) {\n\n                logError(\"enqueue: failed\", error, code);\n\n                if (mCallback != null) {\n\n                    mCallback.onPlaylistChanged();\n\n                }\n\n            }\n\n        });\n\n    }\n\n \n\n    private void seekInternal(final PlaylistItem item) {\n\n        throwIfNoSession();\n\n \n\n        if (DEBUG) {\n\n            Log.d(TAG, \"seek: item=\" + item);\n\n        }\n\n        mClient.seek(item.getRemoteItemId(), item.getPosition(), null, new ItemActionCallback() {\n\n           @Override\n\n           public void onResult(Bundle data, String sessionId, MediaSessionStatus sessionStatus,\n\n                   String itemId, MediaItemStatus itemStatus) {\n\n               logStatus(\"seek: succeeded\", sessionId, sessionStatus, itemId, itemStatus);\n\n               if (mCallback != null) {\n\n                   mCallback.onPlaylistChanged();\n\n               }\n\n           }\n\n \n\n           @Override\n\n           public void onError(String error, int code, Bundle data) {\n\n               logError(\"seek: failed\", error, code);\n\n           }\n\n        });\n\n    }\n\n \n\n    private void startSession(final PlaylistItem item) {\n\n        mClient.startSession(null, new SessionActionCallback() {\n\n            @Override\n\n            public void onResult(Bundle data, String sessionId, MediaSessionStatus sessionStatus) {\n\n                logStatus(\"startSession: succeeded\", sessionId, sessionStatus, null, null);\n\n                enqueueInternal(item);\n\n            }\n\n \n\n            @Override\n\n            public void onError(String error, int code, Bundle data) {\n\n                logError(\"startSession: failed\", error, code);\n\n            }\n\n        });\n\n    }\n\n \n\n    private void endSession() {\n\n        mClient.endSession(null, new SessionActionCallback() {\n\n            @Override\n\n            public void onResult(Bundle data, String sessionId, MediaSessionStatus sessionStatus) {\n\n                logStatus(\"endSession: succeeded\", sessionId, sessionStatus, null, null);\n\n            }\n\n \n\n            @Override\n\n            public void onError(String error, int code, Bundle data) {\n\n                logError(\"endSession: failed\", error, code);\n\n            }\n\n        });\n\n    }\n\n \n\n    private void logStatus(String message,\n\n            String sessionId, MediaSessionStatus sessionStatus,\n\n            String itemId, MediaItemStatus itemStatus) {\n\n        if (DEBUG) {\n\n            String result = \"\";\n\n            if (sessionId != null && sessionStatus != null) {\n\n                result += \"sessionId=\" + sessionId + \", sessionStatus=\" + sessionStatus;\n\n            }\n\n            if (itemId != null & itemStatus != null) {\n\n                result += (result.isEmpty() ? \"\" : \", \")\n\n                        + \"itemId=\" + itemId + \", itemStatus=\" + itemStatus;\n\n            }\n\n            Log.d(TAG, message + \": \" + result);\n\n        }\n\n    }\n\n \n\n    private void logError(String message, String error, int code) {\n\n        Log.d(TAG, message + \": error=\" + error + \", code=\" + code);\n\n    }\n\n \n\n    private void throwIfNoSession() {\n\n        if (!mClient.hasSession()) {\n\n            throw new IllegalStateException(\"Session is invalid\");\n\n        }\n\n    }\n\n \n\n    private void throwIfQueuingUnsupported() {\n\n        if (!isQueuingSupported()) {\n\n            throw new UnsupportedOperationException(\"Queuing is unsupported\");\n\n        }\n\n    }\n\n}\n  ","SampleMediaButtonReceiver.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.mediarouter.player;\n\n \n\nimport android.content.BroadcastReceiver;\n\nimport android.content.Context;\n\nimport android.content.Intent;\n\nimport android.view.KeyEvent;\n\n \n\n/**\n\n * Broadcast receiver for handling ACTION_MEDIA_BUTTON.\n\n *\n\n * This is needed to create the RemoteControlClient for controlling\n\n * remote route volume in lock screen. It routes media key events back\n\n * to main app activity MainActivity.\n\n */\n\npublic class SampleMediaButtonReceiver extends BroadcastReceiver {\n\n    private static final String TAG = \"SampleMediaButtonReceiver\";\n\n    private static MainActivity mActivity;\n\n \n\n    public static void setActivity(MainActivity activity) {\n\n        mActivity = activity;\n\n    }\n\n \n\n    @Override\n\n    public void onReceive(Context context, Intent intent) {\n\n        if (mActivity != null && Intent.ACTION_MEDIA_BUTTON.equals(intent.getAction())) {\n\n            mActivity.handleMediaKey(\n\n                    (KeyEvent)intent.getParcelableExtra(Intent.EXTRA_KEY_EVENT));\n\n        }\n\n    }\n\n}\n  ","SessionManager.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.mediarouter.player;\n\n \n\nimport android.app.PendingIntent;\n\nimport android.net.Uri;\n\nimport android.support.v7.media.MediaItemStatus;\n\nimport android.support.v7.media.MediaSessionStatus;\n\nimport android.util.Log;\n\n \n\nimport com.example.android.mediarouter.player.Player.Callback;\n\n \n\nimport java.util.ArrayList;\n\nimport java.util.List;\n\n \n\n/**\n\n * SessionManager manages a media session as a queue. It supports common\n\n * queuing behaviors such as enqueue/remove of media items, pause/resume/stop,\n\n * etc.\n\n *\n\n * Actual playback of a single media item is abstracted into a Player interface,\n\n * and is handled outside this class.\n\n */\n\npublic class SessionManager implements Callback {\n\n    private static final String TAG = \"SessionManager\";\n\n    private static final boolean DEBUG = Log.isLoggable(TAG, Log.DEBUG);\n\n \n\n    private String mName;\n\n    private int mSessionId;\n\n    private int mItemId;\n\n    private boolean mPaused;\n\n    private boolean mSessionValid;\n\n    private Player mPlayer;\n\n    private Callback mCallback;\n\n    private List<PlaylistItem> mPlaylist = new ArrayList<PlaylistItem>();\n\n \n\n    public SessionManager(String name) {\n\n        mName = name;\n\n    }\n\n \n\n    public boolean hasSession() {\n\n        return mSessionValid;\n\n    }\n\n \n\n    public String getSessionId() {\n\n        return mSessionValid ? Integer.toString(mSessionId) : null;\n\n    }\n\n \n\n    public PlaylistItem getCurrentItem() {\n\n        return mPlaylist.isEmpty() ? null : mPlaylist.get(0);\n\n    }\n\n \n\n    // Get the cached statistic info from the player (will not update it)\n\n    public String getStatistics() {\n\n        checkPlayer();\n\n        return mPlayer.getStatistics();\n\n    }\n\n \n\n    // Returns the cached playlist (note this is not responsible for updating it)\n\n    public List<PlaylistItem> getPlaylist() {\n\n        return mPlaylist;\n\n    }\n\n \n\n    // Updates the playlist asynchronously, calls onPlaylistReady() when finished.\n\n    public void updateStatus() {\n\n        if (DEBUG) {\n\n            log(\"updateStatus\");\n\n        }\n\n        checkPlayer();\n\n        // update the statistics first, so that the stats string is valid when\n\n        // onPlaylistReady() gets called in the end\n\n        mPlayer.updateStatistics();\n\n \n\n        if (mPlaylist.isEmpty()) {\n\n            // If queue is empty, don't forget to call onPlaylistReady()!\n\n            onPlaylistReady();\n\n        } else if (mPlayer.isQueuingSupported()) {\n\n            // If player supports queuing, get status of each item. Player is\n\n            // responsible to call onPlaylistReady() after last getStatus().\n\n            // (update=1 requires player to callback onPlaylistReady())\n\n            for (int i = 0; i < mPlaylist.size(); i++) {\n\n                PlaylistItem item = mPlaylist.get(i);\n\n                mPlayer.getStatus(item, (i == mPlaylist.size() - 1) /* update */);\n\n            }\n\n        } else {\n\n            // Otherwise, only need to get status for current item. Player is\n\n            // responsible to call onPlaylistReady() when finished.\n\n            mPlayer.getStatus(getCurrentItem(), true /* update */);\n\n        }\n\n    }\n\n \n\n    public PlaylistItem add(Uri uri, String mime) {\n\n        return add(uri, mime, null);\n\n    }\n\n \n\n    public PlaylistItem add(Uri uri, String mime, PendingIntent receiver) {\n\n        if (DEBUG) {\n\n            log(\"add: uri=\" + uri + \", receiver=\" + receiver);\n\n        }\n\n        // create new session if needed\n\n        startSession();\n\n        checkPlayerAndSession();\n\n \n\n        // append new item with initial status PLAYBACK_STATE_PENDING\n\n        PlaylistItem item = new PlaylistItem(\n\n                Integer.toString(mSessionId), Integer.toString(mItemId), uri, mime, receiver);\n\n        mPlaylist.add(item);\n\n        mItemId++;\n\n \n\n        // if player supports queuing, enqueue the item now\n\n        if (mPlayer.isQueuingSupported()) {\n\n            mPlayer.enqueue(item);\n\n        }\n\n        updatePlaybackState();\n\n        return item;\n\n    }\n\n \n\n    public PlaylistItem remove(String iid) {\n\n        if (DEBUG) {\n\n            log(\"remove: iid=\" + iid);\n\n        }\n\n        checkPlayerAndSession();\n\n        return removeItem(iid, MediaItemStatus.PLAYBACK_STATE_CANCELED);\n\n    }\n\n \n\n    public PlaylistItem seek(String iid, long pos) {\n\n        if (DEBUG) {\n\n            log(\"seek: iid=\" + iid +\", pos=\" + pos);\n\n        }\n\n        checkPlayerAndSession();\n\n        // seeking on pending items are not yet supported\n\n        checkItemCurrent(iid);\n\n \n\n        PlaylistItem item = getCurrentItem();\n\n        if (pos != item.getPosition()) {\n\n            item.setPosition(pos);\n\n            if (item.getState() == MediaItemStatus.PLAYBACK_STATE_PLAYING\n\n                    || item.getState() == MediaItemStatus.PLAYBACK_STATE_PAUSED) {\n\n                mPlayer.seek(item);\n\n            }\n\n        }\n\n        return item;\n\n    }\n\n \n\n    public PlaylistItem getStatus(String iid) {\n\n        checkPlayerAndSession();\n\n \n\n        // This should only be called for local player. Remote player is\n\n        // asynchronous, need to use updateStatus() instead.\n\n        if (mPlayer.isRemotePlayback()) {\n\n            throw new IllegalStateException(\n\n                    \"getStatus should not be called on remote player!\");\n\n        }\n\n \n\n        for (PlaylistItem item : mPlaylist) {\n\n            if (item.getItemId().equals(iid)) {\n\n                if (item == getCurrentItem()) {\n\n                    mPlayer.getStatus(item, false);\n\n                }\n\n                return item;\n\n            }\n\n        }\n\n        return null;\n\n    }\n\n \n\n    public void pause() {\n\n        if (DEBUG) {\n\n            log(\"pause\");\n\n        }\n\n        mPaused = true;\n\n        updatePlaybackState();\n\n    }\n\n \n\n    public void resume() {\n\n        if (DEBUG) {\n\n            log(\"resume\");\n\n        }\n\n        mPaused = false;\n\n        updatePlaybackState();\n\n    }\n\n \n\n    public void stop() {\n\n        if (DEBUG) {\n\n            log(\"stop\");\n\n        }\n\n        mPlayer.stop();\n\n        mPlaylist.clear();\n\n        mPaused = false;\n\n        updateStatus();\n\n    }\n\n \n\n    public String startSession() {\n\n        if (!mSessionValid) {\n\n            mSessionId++;\n\n            mItemId = 0;\n\n            mPaused = false;\n\n            mSessionValid = true;\n\n            return Integer.toString(mSessionId);\n\n        }\n\n        return null;\n\n    }\n\n \n\n    public boolean endSession() {\n\n        if (mSessionValid) {\n\n            mSessionValid = false;\n\n            return true;\n\n        }\n\n        return false;\n\n    }\n\n \n\n    public MediaSessionStatus getSessionStatus(String sid) {\n\n        int sessionState = (sid != null && sid.equals(mSessionId)) ?\n\n                MediaSessionStatus.SESSION_STATE_ACTIVE :\n\n                    MediaSessionStatus.SESSION_STATE_INVALIDATED;\n\n \n\n        return new MediaSessionStatus.Builder(sessionState)\n\n                .setQueuePaused(mPaused)\n\n                .build();\n\n    }\n\n \n\n    // Suspend the playback manager. Put the current item back into PENDING\n\n    // state, and remember the current playback position. Called when switching\n\n    // to a different player (route).\n\n    public void suspend(long pos) {\n\n        for (PlaylistItem item : mPlaylist) {\n\n            item.setRemoteItemId(null);\n\n            item.setDuration(0);\n\n        }\n\n        PlaylistItem item = getCurrentItem();\n\n        if (DEBUG) {\n\n            log(\"suspend: item=\" + item + \", pos=\" + pos);\n\n        }\n\n        if (item != null) {\n\n            if (item.getState() == MediaItemStatus.PLAYBACK_STATE_PLAYING\n\n                    || item.getState() == MediaItemStatus.PLAYBACK_STATE_PAUSED) {\n\n                item.setState(MediaItemStatus.PLAYBACK_STATE_PENDING);\n\n                item.setPosition(pos);\n\n            }\n\n        }\n\n    }\n\n \n\n    // Unsuspend the playback manager. Restart playback on new player (route).\n\n    // This will resume playback of current item. Furthermore, if the new player\n\n    // supports queuing, playlist will be re-established on the remote player.\n\n    public void unsuspend() {\n\n        if (DEBUG) {\n\n            log(\"unsuspend\");\n\n        }\n\n        if (mPlayer.isQueuingSupported()) {\n\n            for (PlaylistItem item : mPlaylist) {\n\n                mPlayer.enqueue(item);\n\n            }\n\n        }\n\n        updatePlaybackState();\n\n    }\n\n \n\n    // Player.Callback\n\n    @Override\n\n    public void onError() {\n\n        finishItem(true);\n\n    }\n\n \n\n    @Override\n\n    public void onCompletion() {\n\n        finishItem(false);\n\n    }\n\n \n\n    @Override\n\n    public void onPlaylistChanged() {\n\n        // Playlist has changed, update the cached playlist\n\n        updateStatus();\n\n    }\n\n \n\n    @Override\n\n    public void onPlaylistReady() {\n\n        // Notify activity to update Ui\n\n        if (mCallback != null) {\n\n            mCallback.onStatusChanged();\n\n        }\n\n    }\n\n \n\n    private void log(String message) {\n\n        Log.d(TAG, mName + \": \" + message);\n\n    }\n\n \n\n    private void checkPlayer() {\n\n        if (mPlayer == null) {\n\n            throw new IllegalStateException(\"Player not set!\");\n\n        }\n\n    }\n\n \n\n    private void checkSession() {\n\n        if (!mSessionValid) {\n\n            throw new IllegalStateException(\"Session not set!\");\n\n        }\n\n    }\n\n \n\n    private void checkPlayerAndSession() {\n\n        checkPlayer();\n\n        checkSession();\n\n    }\n\n \n\n    private void checkItemCurrent(String iid) {\n\n        PlaylistItem item = getCurrentItem();\n\n        if (item == null || !item.getItemId().equals(iid)) {\n\n            throw new IllegalArgumentException(\"Item is not current!\");\n\n        }\n\n    }\n\n \n\n    private void updatePlaybackState() {\n\n        PlaylistItem item = getCurrentItem();\n\n        if (item != null) {\n\n            if (item.getState() == MediaItemStatus.PLAYBACK_STATE_PENDING) {\n\n                item.setState(mPaused ? MediaItemStatus.PLAYBACK_STATE_PAUSED\n\n                        : MediaItemStatus.PLAYBACK_STATE_PLAYING);\n\n                if (!mPlayer.isQueuingSupported()) {\n\n                    mPlayer.play(item);\n\n                }\n\n            } else if (mPaused && item.getState() == MediaItemStatus.PLAYBACK_STATE_PLAYING) {\n\n                mPlayer.pause();\n\n                item.setState(MediaItemStatus.PLAYBACK_STATE_PAUSED);\n\n            } else if (!mPaused && item.getState() == MediaItemStatus.PLAYBACK_STATE_PAUSED) {\n\n                mPlayer.resume();\n\n                item.setState(MediaItemStatus.PLAYBACK_STATE_PLAYING);\n\n            }\n\n            // notify client that item playback status has changed\n\n            if (mCallback != null) {\n\n                mCallback.onItemChanged(item);\n\n            }\n\n        }\n\n        updateStatus();\n\n    }\n\n \n\n    private PlaylistItem removeItem(String iid, int state) {\n\n        checkPlayerAndSession();\n\n        List<PlaylistItem> queue =\n\n                new ArrayList<PlaylistItem>(mPlaylist.size());\n\n        PlaylistItem found = null;\n\n        for (PlaylistItem item : mPlaylist) {\n\n            if (iid.equals(item.getItemId())) {\n\n                if (mPlayer.isQueuingSupported()) {\n\n                    mPlayer.remove(item.getRemoteItemId());\n\n                } else if (item.getState() == MediaItemStatus.PLAYBACK_STATE_PLAYING\n\n                        || item.getState() == MediaItemStatus.PLAYBACK_STATE_PAUSED){\n\n                    mPlayer.stop();\n\n                }\n\n                item.setState(state);\n\n                found = item;\n\n                // notify client that item is now removed\n\n                if (mCallback != null) {\n\n                    mCallback.onItemChanged(found);\n\n                }\n\n            } else {\n\n                queue.add(item);\n\n            }\n\n        }\n\n        if (found != null) {\n\n            mPlaylist = queue;\n\n            updatePlaybackState();\n\n        } else {\n\n            log(\"item not found\");\n\n        }\n\n        return found;\n\n    }\n\n \n\n    private void finishItem(boolean error) {\n\n        PlaylistItem item = getCurrentItem();\n\n        if (item != null) {\n\n            removeItem(item.getItemId(), error ?\n\n                    MediaItemStatus.PLAYBACK_STATE_ERROR :\n\n                        MediaItemStatus.PLAYBACK_STATE_FINISHED);\n\n            updateStatus();\n\n        }\n\n    }\n\n \n\n    // set the Player that this playback manager will interact with\n\n    public void setPlayer(Player player) {\n\n        mPlayer = player;\n\n        checkPlayer();\n\n        mPlayer.setCallback(this);\n\n    }\n\n \n\n    // provide a callback interface to tell the UI when significant state changes occur\n\n    public void setCallback(Callback callback) {\n\n        mCallback = callback;\n\n    }\n\n \n\n    @Override\n\n    public String toString() {\n\n        String result = \"Media Queue: \";\n\n        if (!mPlaylist.isEmpty()) {\n\n            for (PlaylistItem item : mPlaylist) {\n\n                result += \"\\n\" + item.toString();\n\n            }\n\n        } else {\n\n            result += \"<empty>\";\n\n        }\n\n        return result;\n\n    }\n\n \n\n    public interface Callback {\n\n        void onStatusChanged();\n\n        void onItemChanged(PlaylistItem item);\n\n    }\n\n}\n  "},"provider":{"SampleMediaRouteProvider.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.mediarouter.provider;\n\n \n\nimport android.app.PendingIntent;\n\nimport android.content.Context;\n\nimport android.content.Intent;\n\nimport android.content.IntentFilter;\n\nimport android.content.IntentFilter.MalformedMimeTypeException;\n\nimport android.content.res.Resources;\n\nimport android.media.AudioManager;\n\nimport android.media.MediaRouter;\n\nimport android.net.Uri;\n\nimport android.os.Bundle;\n\nimport android.support.v7.media.MediaControlIntent;\n\nimport android.support.v7.media.MediaRouteDescriptor;\n\nimport android.support.v7.media.MediaRouteProvider;\n\nimport android.support.v7.media.MediaRouteProviderDescriptor;\n\nimport android.support.v7.media.MediaRouter.ControlRequestCallback;\n\nimport android.support.v7.media.MediaSessionStatus;\n\nimport android.util.Log;\n\n \n\nimport com.example.android.mediarouter.player.Player;\n\nimport com.example.android.mediarouter.player.PlaylistItem;\n\nimport com.example.android.mediarouter.R;\n\nimport com.example.android.mediarouter.player.SessionManager;\n\n \n\nimport java.util.ArrayList;\n\n \n\n/**\n\n * Demonstrates how to create a custom media route provider.\n\n *\n\n * @see SampleMediaRouteProviderService\n\n */\n\npublic final class SampleMediaRouteProvider extends MediaRouteProvider {\n\n    private static final String TAG = \"SampleMediaRouteProvider\";\n\n \n\n    private static final String FIXED_VOLUME_ROUTE_ID = \"fixed\";\n\n    private static final String VARIABLE_VOLUME_BASIC_ROUTE_ID = \"variable_basic\";\n\n    private static final String VARIABLE_VOLUME_QUEUING_ROUTE_ID = \"variable_queuing\";\n\n    private static final String VARIABLE_VOLUME_SESSION_ROUTE_ID = \"variable_session\";\n\n    private static final int VOLUME_MAX = 10;\n\n \n\n    /**\n\n     * A custom media control intent category for special requests that are\n\n     * supported by this provider's routes.\n\n     */\n\n    public static final String CATEGORY_SAMPLE_ROUTE =\n\n            \"com.example.android.mediarouteprovider.CATEGORY_SAMPLE_ROUTE\";\n\n \n\n    /**\n\n     * A custom media control intent action for special requests that are\n\n     * supported by this provider's routes.\n\n     * <p>\n\n     * This particular request is designed to return a bundle of not very\n\n     * interesting statistics for demonstration purposes.\n\n     * </p>\n\n     *\n\n     * @see #DATA_PLAYBACK_COUNT\n\n     */\n\n    public static final String ACTION_GET_STATISTICS =\n\n            \"com.example.android.mediarouteprovider.ACTION_GET_STATISTICS\";\n\n \n\n    /**\n\n     * {@link #ACTION_GET_STATISTICS} result data: Number of times the\n\n     * playback action was invoked.\n\n     */\n\n    public static final String DATA_PLAYBACK_COUNT =\n\n            \"com.example.android.mediarouteprovider.EXTRA_PLAYBACK_COUNT\";\n\n \n\n    private static final ArrayList<IntentFilter> CONTROL_FILTERS_BASIC;\n\n    private static final ArrayList<IntentFilter> CONTROL_FILTERS_QUEUING;\n\n    private static final ArrayList<IntentFilter> CONTROL_FILTERS_SESSION;\n\n \n\n    static {\n\n        IntentFilter f1 = new IntentFilter();\n\n        f1.addCategory(CATEGORY_SAMPLE_ROUTE);\n\n        f1.addAction(ACTION_GET_STATISTICS);\n\n \n\n        IntentFilter f2 = new IntentFilter();\n\n        f2.addCategory(MediaControlIntent.CATEGORY_REMOTE_PLAYBACK);\n\n        f2.addAction(MediaControlIntent.ACTION_PLAY);\n\n        f2.addDataScheme(\"http\");\n\n        f2.addDataScheme(\"https\");\n\n        f2.addDataScheme(\"rtsp\");\n\n        f2.addDataScheme(\"file\");\n\n        addDataTypeUnchecked(f2, \"video/*\");\n\n \n\n        IntentFilter f3 = new IntentFilter();\n\n        f3.addCategory(MediaControlIntent.CATEGORY_REMOTE_PLAYBACK);\n\n        f3.addAction(MediaControlIntent.ACTION_SEEK);\n\n        f3.addAction(MediaControlIntent.ACTION_GET_STATUS);\n\n        f3.addAction(MediaControlIntent.ACTION_PAUSE);\n\n        f3.addAction(MediaControlIntent.ACTION_RESUME);\n\n        f3.addAction(MediaControlIntent.ACTION_STOP);\n\n \n\n        IntentFilter f4 = new IntentFilter();\n\n        f4.addCategory(MediaControlIntent.CATEGORY_REMOTE_PLAYBACK);\n\n        f4.addAction(MediaControlIntent.ACTION_ENQUEUE);\n\n        f4.addDataScheme(\"http\");\n\n        f4.addDataScheme(\"https\");\n\n        f4.addDataScheme(\"rtsp\");\n\n        f4.addDataScheme(\"file\");\n\n        addDataTypeUnchecked(f4, \"video/*\");\n\n \n\n        IntentFilter f5 = new IntentFilter();\n\n        f5.addCategory(MediaControlIntent.CATEGORY_REMOTE_PLAYBACK);\n\n        f5.addAction(MediaControlIntent.ACTION_REMOVE);\n\n \n\n        IntentFilter f6 = new IntentFilter();\n\n        f6.addCategory(MediaControlIntent.CATEGORY_REMOTE_PLAYBACK);\n\n        f6.addAction(MediaControlIntent.ACTION_START_SESSION);\n\n        f6.addAction(MediaControlIntent.ACTION_GET_SESSION_STATUS);\n\n        f6.addAction(MediaControlIntent.ACTION_END_SESSION);\n\n \n\n        CONTROL_FILTERS_BASIC = new ArrayList<IntentFilter>();\n\n        CONTROL_FILTERS_BASIC.add(f1);\n\n        CONTROL_FILTERS_BASIC.add(f2);\n\n        CONTROL_FILTERS_BASIC.add(f3);\n\n \n\n        CONTROL_FILTERS_QUEUING =\n\n                new ArrayList<IntentFilter>(CONTROL_FILTERS_BASIC);\n\n        CONTROL_FILTERS_QUEUING.add(f4);\n\n        CONTROL_FILTERS_QUEUING.add(f5);\n\n \n\n        CONTROL_FILTERS_SESSION =\n\n                new ArrayList<IntentFilter>(CONTROL_FILTERS_QUEUING);\n\n        CONTROL_FILTERS_SESSION.add(f6);\n\n    }\n\n \n\n    private static void addDataTypeUnchecked(IntentFilter filter, String type) {\n\n        try {\n\n            filter.addDataType(type);\n\n        } catch (MalformedMimeTypeException ex) {\n\n            throw new RuntimeException(ex);\n\n        }\n\n    }\n\n \n\n    private int mVolume = 5;\n\n    private int mEnqueueCount;\n\n \n\n    public SampleMediaRouteProvider(Context context) {\n\n        super(context);\n\n \n\n        publishRoutes();\n\n    }\n\n \n\n    @Override\n\n    public RouteController onCreateRouteController(String routeId) {\n\n        return new SampleRouteController(routeId);\n\n    }\n\n \n\n    private void publishRoutes() {\n\n        Resources r = getContext().getResources();\n\n \n\n        MediaRouteDescriptor routeDescriptor1 = new MediaRouteDescriptor.Builder(\n\n                FIXED_VOLUME_ROUTE_ID,\n\n                r.getString(R.string.fixed_volume_route_name))\n\n                .setDescription(r.getString(R.string.sample_route_description))\n\n                .addControlFilters(CONTROL_FILTERS_BASIC)\n\n                .setPlaybackStream(AudioManager.STREAM_MUSIC)\n\n                .setPlaybackType(MediaRouter.RouteInfo.PLAYBACK_TYPE_REMOTE)\n\n                .setVolumeHandling(MediaRouter.RouteInfo.PLAYBACK_VOLUME_FIXED)\n\n                .setVolume(VOLUME_MAX)\n\n                .build();\n\n \n\n        MediaRouteDescriptor routeDescriptor2 = new MediaRouteDescriptor.Builder(\n\n                VARIABLE_VOLUME_BASIC_ROUTE_ID,\n\n                r.getString(R.string.variable_volume_basic_route_name))\n\n                .setDescription(r.getString(R.string.sample_route_description))\n\n                .addControlFilters(CONTROL_FILTERS_BASIC)\n\n                .setPlaybackStream(AudioManager.STREAM_MUSIC)\n\n                .setPlaybackType(MediaRouter.RouteInfo.PLAYBACK_TYPE_REMOTE)\n\n                .setVolumeHandling(MediaRouter.RouteInfo.PLAYBACK_VOLUME_VARIABLE)\n\n                .setVolumeMax(VOLUME_MAX)\n\n                .setVolume(mVolume)\n\n                .build();\n\n \n\n        MediaRouteDescriptor routeDescriptor3 = new MediaRouteDescriptor.Builder(\n\n                VARIABLE_VOLUME_QUEUING_ROUTE_ID,\n\n                r.getString(R.string.variable_volume_queuing_route_name))\n\n                .setDescription(r.getString(R.string.sample_route_description))\n\n                .addControlFilters(CONTROL_FILTERS_QUEUING)\n\n                .setPlaybackStream(AudioManager.STREAM_MUSIC)\n\n                .setPlaybackType(MediaRouter.RouteInfo.PLAYBACK_TYPE_REMOTE)\n\n                .setVolumeHandling(MediaRouter.RouteInfo.PLAYBACK_VOLUME_VARIABLE)\n\n                .setVolumeMax(VOLUME_MAX)\n\n                .setVolume(mVolume)\n\n                .build();\n\n \n\n        MediaRouteDescriptor routeDescriptor4 = new MediaRouteDescriptor.Builder(\n\n                VARIABLE_VOLUME_SESSION_ROUTE_ID,\n\n                r.getString(R.string.variable_volume_session_route_name))\n\n                .setDescription(r.getString(R.string.sample_route_description))\n\n                .addControlFilters(CONTROL_FILTERS_SESSION)\n\n                .setPlaybackStream(AudioManager.STREAM_MUSIC)\n\n                .setPlaybackType(MediaRouter.RouteInfo.PLAYBACK_TYPE_REMOTE)\n\n                .setVolumeHandling(MediaRouter.RouteInfo.PLAYBACK_VOLUME_VARIABLE)\n\n                .setVolumeMax(VOLUME_MAX)\n\n                .setVolume(mVolume)\n\n                .build();\n\n \n\n        MediaRouteProviderDescriptor providerDescriptor =\n\n                new MediaRouteProviderDescriptor.Builder()\n\n                .addRoute(routeDescriptor1)\n\n                .addRoute(routeDescriptor2)\n\n                .addRoute(routeDescriptor3)\n\n                .addRoute(routeDescriptor4)\n\n                .build();\n\n        setDescriptor(providerDescriptor);\n\n    }\n\n \n\n    private final class SampleRouteController extends MediaRouteProvider.RouteController {\n\n        private final String mRouteId;\n\n        private final SessionManager mSessionManager = new SessionManager(\"mrp\");\n\n        private final Player mPlayer;\n\n        private PendingIntent mSessionReceiver;\n\n \n\n        public SampleRouteController(String routeId) {\n\n            mRouteId = routeId;\n\n            mPlayer = Player.create(getContext(), null);\n\n            mSessionManager.setPlayer(mPlayer);\n\n            mSessionManager.setCallback(new SessionManager.Callback() {\n\n                @Override\n\n                public void onStatusChanged() {\n\n                }\n\n \n\n                @Override\n\n                public void onItemChanged(PlaylistItem item) {\n\n                    handleStatusChange(item);\n\n                }\n\n            });\n\n            Log.d(TAG, mRouteId + \": Controller created\");\n\n        }\n\n \n\n        @Override\n\n        public void onRelease() {\n\n            Log.d(TAG, mRouteId + \": Controller released\");\n\n            mPlayer.release();\n\n        }\n\n \n\n        @Override\n\n        public void onSelect() {\n\n            Log.d(TAG, mRouteId + \": Selected\");\n\n            mPlayer.connect(null);\n\n        }\n\n \n\n        @Override\n\n        public void onUnselect() {\n\n            Log.d(TAG, mRouteId + \": Unselected\");\n\n            mPlayer.release();\n\n        }\n\n \n\n        @Override\n\n        public void onSetVolume(int volume) {\n\n            Log.d(TAG, mRouteId + \": Set volume to \" + volume);\n\n            if (!mRouteId.equals(FIXED_VOLUME_ROUTE_ID)) {\n\n                setVolumeInternal(volume);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void onUpdateVolume(int delta) {\n\n            Log.d(TAG, mRouteId + \": Update volume by \" + delta);\n\n            if (!mRouteId.equals(FIXED_VOLUME_ROUTE_ID)) {\n\n                setVolumeInternal(mVolume + delta);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public boolean onControlRequest(Intent intent, ControlRequestCallback callback) {\n\n            Log.d(TAG, mRouteId + \": Received control request \" + intent);\n\n            String action = intent.getAction();\n\n            if (intent.hasCategory(MediaControlIntent.CATEGORY_REMOTE_PLAYBACK)) {\n\n                boolean success = false;\n\n                if (action.equals(MediaControlIntent.ACTION_PLAY)) {\n\n                    success = handlePlay(intent, callback);\n\n                } else if (action.equals(MediaControlIntent.ACTION_ENQUEUE)) {\n\n                    success = handleEnqueue(intent, callback);\n\n                } else if (action.equals(MediaControlIntent.ACTION_REMOVE)) {\n\n                    success = handleRemove(intent, callback);\n\n                } else if (action.equals(MediaControlIntent.ACTION_SEEK)) {\n\n                    success = handleSeek(intent, callback);\n\n                } else if (action.equals(MediaControlIntent.ACTION_GET_STATUS)) {\n\n                    success = handleGetStatus(intent, callback);\n\n                } else if (action.equals(MediaControlIntent.ACTION_PAUSE)) {\n\n                    success = handlePause(intent, callback);\n\n                } else if (action.equals(MediaControlIntent.ACTION_RESUME)) {\n\n                    success = handleResume(intent, callback);\n\n                } else if (action.equals(MediaControlIntent.ACTION_STOP)) {\n\n                    success = handleStop(intent, callback);\n\n                } else if (action.equals(MediaControlIntent.ACTION_START_SESSION)) {\n\n                    success = handleStartSession(intent, callback);\n\n                } else if (action.equals(MediaControlIntent.ACTION_GET_SESSION_STATUS)) {\n\n                    success = handleGetSessionStatus(intent, callback);\n\n                } else if (action.equals(MediaControlIntent.ACTION_END_SESSION)) {\n\n                    success = handleEndSession(intent, callback);\n\n                }\n\n                Log.d(TAG, mSessionManager.toString());\n\n                return success;\n\n            }\n\n \n\n            if (action.equals(ACTION_GET_STATISTICS)\n\n                    && intent.hasCategory(CATEGORY_SAMPLE_ROUTE)) {\n\n                Bundle data = new Bundle();\n\n                data.putInt(DATA_PLAYBACK_COUNT, mEnqueueCount);\n\n                if (callback != null) {\n\n                    callback.onResult(data);\n\n                }\n\n                return true;\n\n            }\n\n            return false;\n\n        }\n\n \n\n        private void setVolumeInternal(int volume) {\n\n            if (volume >= 0 && volume <= VOLUME_MAX) {\n\n                mVolume = volume;\n\n                Log.d(TAG, mRouteId + \": New volume is \" + mVolume);\n\n                AudioManager audioManager =\n\n                        (AudioManager)getContext().getSystemService(Context.AUDIO_SERVICE);\n\n                audioManager.setStreamVolume(AudioManager.STREAM_MUSIC, volume, 0);\n\n                publishRoutes();\n\n            }\n\n        }\n\n \n\n        private boolean handlePlay(Intent intent, ControlRequestCallback callback) {\n\n            String sid = intent.getStringExtra(MediaControlIntent.EXTRA_SESSION_ID);\n\n            if (sid != null && !sid.equals(mSessionManager.getSessionId())) {\n\n                Log.d(TAG, \"handlePlay fails because of bad sid=\"+sid);\n\n                return false;\n\n            }\n\n            if (mSessionManager.hasSession()) {\n\n                mSessionManager.stop();\n\n            }\n\n            return handleEnqueue(intent, callback);\n\n        }\n\n \n\n        private boolean handleEnqueue(Intent intent, ControlRequestCallback callback) {\n\n            String sid = intent.getStringExtra(MediaControlIntent.EXTRA_SESSION_ID);\n\n            if (sid != null && !sid.equals(mSessionManager.getSessionId())) {\n\n                Log.d(TAG, \"handleEnqueue fails because of bad sid=\"+sid);\n\n                return false;\n\n            }\n\n \n\n            Uri uri = intent.getData();\n\n            if (uri == null) {\n\n                Log.d(TAG, \"handleEnqueue fails because of bad uri=\"+uri);\n\n                return false;\n\n            }\n\n \n\n            boolean enqueue = intent.getAction().equals(MediaControlIntent.ACTION_ENQUEUE);\n\n            String mime = intent.getType();\n\n            long pos = intent.getLongExtra(MediaControlIntent.EXTRA_ITEM_CONTENT_POSITION, 0);\n\n            Bundle metadata = intent.getBundleExtra(MediaControlIntent.EXTRA_ITEM_METADATA);\n\n            Bundle headers = intent.getBundleExtra(MediaControlIntent.EXTRA_ITEM_HTTP_HEADERS);\n\n            PendingIntent receiver = (PendingIntent)intent.getParcelableExtra(\n\n                    MediaControlIntent.EXTRA_ITEM_STATUS_UPDATE_RECEIVER);\n\n \n\n            Log.d(TAG, mRouteId + \": Received \" + (enqueue?\"enqueue\":\"play\") + \" request\"\n\n                    + \", uri=\" + uri\n\n                    + \", mime=\" + mime\n\n                    + \", sid=\" + sid\n\n                    + \", pos=\" + pos\n\n                    + \", metadata=\" + metadata\n\n                    + \", headers=\" + headers\n\n                    + \", receiver=\" + receiver);\n\n            PlaylistItem item = mSessionManager.add(uri, mime, receiver);\n\n            if (callback != null) {\n\n                if (item != null) {\n\n                    Bundle result = new Bundle();\n\n                    result.putString(MediaControlIntent.EXTRA_SESSION_ID, item.getSessionId());\n\n                    result.putString(MediaControlIntent.EXTRA_ITEM_ID, item.getItemId());\n\n                    result.putBundle(MediaControlIntent.EXTRA_ITEM_STATUS,\n\n                            item.getStatus().asBundle());\n\n                    callback.onResult(result);\n\n                } else {\n\n                    callback.onError(\"Failed to open \" + uri.toString(), null);\n\n                }\n\n            }\n\n            mEnqueueCount +=1;\n\n            return true;\n\n        }\n\n \n\n        private boolean handleRemove(Intent intent, ControlRequestCallback callback) {\n\n            String sid = intent.getStringExtra(MediaControlIntent.EXTRA_SESSION_ID);\n\n            if (sid == null || !sid.equals(mSessionManager.getSessionId())) {\n\n                return false;\n\n            }\n\n \n\n            String iid = intent.getStringExtra(MediaControlIntent.EXTRA_ITEM_ID);\n\n            PlaylistItem item = mSessionManager.remove(iid);\n\n            if (callback != null) {\n\n                if (item != null) {\n\n                    Bundle result = new Bundle();\n\n                    result.putBundle(MediaControlIntent.EXTRA_ITEM_STATUS,\n\n                            item.getStatus().asBundle());\n\n                    callback.onResult(result);\n\n                } else {\n\n                    callback.onError(\"Failed to remove\" +\n\n                            \", sid=\" + sid + \", iid=\" + iid, null);\n\n                }\n\n            }\n\n            return (item != null);\n\n        }\n\n \n\n        private boolean handleSeek(Intent intent, ControlRequestCallback callback) {\n\n            String sid = intent.getStringExtra(MediaControlIntent.EXTRA_SESSION_ID);\n\n            if (sid == null || !sid.equals(mSessionManager.getSessionId())) {\n\n                return false;\n\n            }\n\n \n\n            String iid = intent.getStringExtra(MediaControlIntent.EXTRA_ITEM_ID);\n\n            long pos = intent.getLongExtra(MediaControlIntent.EXTRA_ITEM_CONTENT_POSITION, 0);\n\n            Log.d(TAG, mRouteId + \": Received seek request, pos=\" + pos);\n\n            PlaylistItem item = mSessionManager.seek(iid, pos);\n\n            if (callback != null) {\n\n                if (item != null) {\n\n                    Bundle result = new Bundle();\n\n                    result.putBundle(MediaControlIntent.EXTRA_ITEM_STATUS,\n\n                            item.getStatus().asBundle());\n\n                    callback.onResult(result);\n\n                } else {\n\n                    callback.onError(\"Failed to seek\" +\n\n                            \", sid=\" + sid + \", iid=\" + iid + \", pos=\" + pos, null);\n\n                }\n\n            }\n\n            return (item != null);\n\n        }\n\n \n\n        private boolean handleGetStatus(Intent intent, ControlRequestCallback callback) {\n\n            String sid = intent.getStringExtra(MediaControlIntent.EXTRA_SESSION_ID);\n\n            String iid = intent.getStringExtra(MediaControlIntent.EXTRA_ITEM_ID);\n\n            Log.d(TAG, mRouteId + \": Received getStatus request, sid=\" + sid + \", iid=\" + iid);\n\n            PlaylistItem item = mSessionManager.getStatus(iid);\n\n            if (callback != null) {\n\n                if (item != null) {\n\n                    Bundle result = new Bundle();\n\n                    result.putBundle(MediaControlIntent.EXTRA_ITEM_STATUS,\n\n                            item.getStatus().asBundle());\n\n                    callback.onResult(result);\n\n                } else {\n\n                    callback.onError(\"Failed to get status\" +\n\n                            \", sid=\" + sid + \", iid=\" + iid, null);\n\n                }\n\n            }\n\n            return (item != null);\n\n        }\n\n \n\n        private boolean handlePause(Intent intent, ControlRequestCallback callback) {\n\n            String sid = intent.getStringExtra(MediaControlIntent.EXTRA_SESSION_ID);\n\n            boolean success = (sid != null) && sid.equals(mSessionManager.getSessionId());\n\n            mSessionManager.pause();\n\n            if (callback != null) {\n\n                if (success) {\n\n                    callback.onResult(new Bundle());\n\n                    handleSessionStatusChange(sid);\n\n                } else {\n\n                    callback.onError(\"Failed to pause, sid=\" + sid, null);\n\n                }\n\n            }\n\n            return success;\n\n        }\n\n \n\n        private boolean handleResume(Intent intent, ControlRequestCallback callback) {\n\n            String sid = intent.getStringExtra(MediaControlIntent.EXTRA_SESSION_ID);\n\n            boolean success = (sid != null) && sid.equals(mSessionManager.getSessionId());\n\n            mSessionManager.resume();\n\n            if (callback != null) {\n\n                if (success) {\n\n                    callback.onResult(new Bundle());\n\n                    handleSessionStatusChange(sid);\n\n                } else {\n\n                    callback.onError(\"Failed to resume, sid=\" + sid, null);\n\n                }\n\n            }\n\n            return success;\n\n        }\n\n \n\n        private boolean handleStop(Intent intent, ControlRequestCallback callback) {\n\n            String sid = intent.getStringExtra(MediaControlIntent.EXTRA_SESSION_ID);\n\n            boolean success = (sid != null) && sid.equals(mSessionManager.getSessionId());\n\n            mSessionManager.stop();\n\n            if (callback != null) {\n\n                if (success) {\n\n                    callback.onResult(new Bundle());\n\n                    handleSessionStatusChange(sid);\n\n                } else {\n\n                    callback.onError(\"Failed to stop, sid=\" + sid, null);\n\n                }\n\n            }\n\n            return success;\n\n        }\n\n \n\n        private boolean handleStartSession(Intent intent, ControlRequestCallback callback) {\n\n            String sid = mSessionManager.startSession();\n\n            Log.d(TAG, \"StartSession returns sessionId \"+sid);\n\n            if (callback != null) {\n\n                if (sid != null) {\n\n                    Bundle result = new Bundle();\n\n                    result.putString(MediaControlIntent.EXTRA_SESSION_ID, sid);\n\n                    result.putBundle(MediaControlIntent.EXTRA_SESSION_STATUS,\n\n                            mSessionManager.getSessionStatus(sid).asBundle());\n\n                    callback.onResult(result);\n\n                    mSessionReceiver = (PendingIntent)intent.getParcelableExtra(\n\n                            MediaControlIntent.EXTRA_SESSION_STATUS_UPDATE_RECEIVER);\n\n                    handleSessionStatusChange(sid);\n\n                } else {\n\n                    callback.onError(\"Failed to start session.\", null);\n\n                }\n\n            }\n\n            return (sid != null);\n\n        }\n\n \n\n        private boolean handleGetSessionStatus(Intent intent, ControlRequestCallback callback) {\n\n            String sid = intent.getStringExtra(MediaControlIntent.EXTRA_SESSION_ID);\n\n \n\n            MediaSessionStatus sessionStatus = mSessionManager.getSessionStatus(sid);\n\n            if (callback != null) {\n\n                if (sessionStatus != null) {\n\n                    Bundle result = new Bundle();\n\n                    result.putBundle(MediaControlIntent.EXTRA_SESSION_STATUS,\n\n                            mSessionManager.getSessionStatus(sid).asBundle());\n\n                    callback.onResult(result);\n\n                } else {\n\n                    callback.onError(\"Failed to get session status, sid=\" + sid, null);\n\n                }\n\n            }\n\n            return (sessionStatus != null);\n\n        }\n\n \n\n        private boolean handleEndSession(Intent intent, ControlRequestCallback callback) {\n\n            String sid = intent.getStringExtra(MediaControlIntent.EXTRA_SESSION_ID);\n\n            boolean success = (sid != null) && sid.equals(mSessionManager.getSessionId())\n\n                    && mSessionManager.endSession();\n\n            if (callback != null) {\n\n                if (success) {\n\n                    Bundle result = new Bundle();\n\n                    MediaSessionStatus sessionStatus = new MediaSessionStatus.Builder(\n\n                            MediaSessionStatus.SESSION_STATE_ENDED).build();\n\n                    result.putBundle(MediaControlIntent.EXTRA_SESSION_STATUS, sessionStatus.asBundle());\n\n                    callback.onResult(result);\n\n                    handleSessionStatusChange(sid);\n\n                    mSessionReceiver = null;\n\n                } else {\n\n                    callback.onError(\"Failed to end session, sid=\" + sid, null);\n\n                }\n\n            }\n\n            return success;\n\n        }\n\n \n\n        private void handleStatusChange(PlaylistItem item) {\n\n            if (item == null) {\n\n                item = mSessionManager.getCurrentItem();\n\n            }\n\n            if (item != null) {\n\n                PendingIntent receiver = item.getUpdateReceiver();\n\n                if (receiver != null) {\n\n                    Intent intent = new Intent();\n\n                    intent.putExtra(MediaControlIntent.EXTRA_SESSION_ID, item.getSessionId());\n\n                    intent.putExtra(MediaControlIntent.EXTRA_ITEM_ID, item.getItemId());\n\n                    intent.putExtra(MediaControlIntent.EXTRA_ITEM_STATUS,\n\n                            item.getStatus().asBundle());\n\n                    try {\n\n                        receiver.send(getContext(), 0, intent);\n\n                        Log.d(TAG, mRouteId + \": Sending status update from provider\");\n\n                    } catch (PendingIntent.CanceledException e) {\n\n                        Log.d(TAG, mRouteId + \": Failed to send status update!\");\n\n                    }\n\n                }\n\n            }\n\n        }\n\n \n\n        private void handleSessionStatusChange(String sid) {\n\n            if (mSessionReceiver != null) {\n\n                Intent intent = new Intent();\n\n                intent.putExtra(MediaControlIntent.EXTRA_SESSION_ID, sid);\n\n                intent.putExtra(MediaControlIntent.EXTRA_SESSION_STATUS,\n\n                        mSessionManager.getSessionStatus(sid).asBundle());\n\n                try {\n\n                    mSessionReceiver.send(getContext(), 0, intent);\n\n                    Log.d(TAG, mRouteId + \": Sending session status update from provider\");\n\n                } catch (PendingIntent.CanceledException e) {\n\n                    Log.d(TAG, mRouteId + \": Failed to send session status update!\");\n\n                }\n\n            }\n\n        }\n\n    }\n\n}\n  ","SampleMediaRouteProviderService.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.mediarouter.provider;\n\n \n\nimport android.support.v7.media.MediaRouteProvider;\n\nimport android.support.v7.media.MediaRouteProviderService;\n\n \n\nimport com.example.android.mediarouter.provider.SampleMediaRouteProvider;\n\n \n\n/**\n\n * Demonstrates how to register a custom media route provider service\n\n * using the support library.\n\n *\n\n * @see com.example.android.mediarouter.provider.SampleMediaRouteProvider\n\n */\n\npublic class SampleMediaRouteProviderService extends MediaRouteProviderService {\n\n    @Override\n\n    public MediaRouteProvider onCreateMediaRouteProvider() {\n\n        return new SampleMediaRouteProvider(this);\n\n    }\n\n}\n  "}}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!-- Copyright (C) 2013 The Android Open Source Project\n\n \n\n     Licensed under the Apache License, Version 2.0 (the \"License\");\n\n     you may not use this file except in compliance with the License.\n\n     You may obtain a copy of the License at\n\n \n\n          http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n     Unless required by applicable law or agreed to in writing, software\n\n     distributed under the License is distributed on an \"AS IS\" BASIS,\n\n     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n     See the License for the specific language governing permissions and\n\n     limitations under the License.\n\n-->\n\n \n\n<!-- Declare the contents of this Android application.  The namespace\n\n     attribute brings in the Android platform namespace, and the package\n\n     supplies a unique name for the application.  When writing your\n\n     own application, the package name must be changed from \"com.example.*\"\n\n     to come from a domain that you own or have control over. -->\n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n          package=\"com.example.android.mediarouter\">\n\n    <!-- Permission for INTERNET is required for streaming video content\n\n         from the web, it's not required otherwise. -->\n\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n\n    <!-- Permission for SYSTEM_ALERT_WINDOW is only required for emulating\n\n         remote display using system alert window. -->\n\n    <uses-permission android:name=\"android.permission.SYSTEM_ALERT_WINDOW\" />\n\n \n\n    <uses-sdk android:targetSdkVersion=\"19\"\n\n        android:minSdkVersion=\"7\"/>\n\n \n\n    <!-- The smallest screen this app works on is a phone.  The app will\n\n         scale its UI to larger screens but doesn't make good use of them\n\n         so allow the compatibility mode button to be shown (mostly because\n\n         this is just convenient for testing). -->\n\n    <supports-screens android:requiresSmallestWidthDp=\"320\"\n\n                      android:compatibleWidthLimitDp=\"480\" />\n\n \n\n    <application android:label=\"@string/app_name\"\n\n                 android:icon=\"@drawable/ic_launcher\"\n\n                 android:hardwareAccelerated=\"true\">\n\n \n\n        <receiver android:name=\".player.SampleMediaButtonReceiver\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MEDIA_BUTTON\" />\n\n            </intent-filter>\n\n        </receiver>\n\n        <!-- MediaRouter Support Samples -->\n\n \n\n        <activity android:name=\".player.MainActivity\"\n\n                  android:label=\"@string/app_name\"\n\n                  android:theme=\"@style/Theme.AppCompat.Light\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.DEFAULT\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"com.example.android.supportv7.SAMPLE_CODE\" />\n\n            </intent-filter>\n\n        </activity>\n\n \n\n        <service android:name=\".provider.SampleMediaRouteProviderService\"\n\n                 android:label=\"@string/sample_media_route_provider_service\"\n\n                 android:process=\":mrp\">\n\n            <intent-filter>\n\n                <action android:name=\"android.media.MediaRouteProviderService\" />\n\n            </intent-filter>\n\n        </service>\n\n \n\n    </application>\n\n</manifest>\n  "}},"RenderScript":{"BasicRenderScript":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicRenderScript/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com/samples/BasicRenderScript/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicRenderScript/res/drawable-mdpi/ic_launcher.png"},"drawable-nodpi":{"data.jpg":"http://developer.android.com/samples/BasicRenderScript/res/drawable-nodpi/data.jpg"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicRenderScript/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicRenderScript/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleMessageTile\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n            android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n            android:text=\"@string/intro_message\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n  ","main_layout.xml":"\n    \n\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:tools=\"http://schemas.android.com/tools\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:background=\"#0099cc\"\n\n    tools:context=\".MainActivity\">\n\n \n\n    <ImageView\n\n        android:id=\"@+id/imageView\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"match_parent\"\n\n        android:scaleType=\"fitCenter\"\n\n        android:src=\"@drawable/data\" />\n\n \n\n    <SeekBar\n\n        android:id=\"@+id/seekBar1\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:layout_gravity=\"bottom\"\n\n        android:layout_marginBottom=\"16dp\" />\n\n \n\n</FrameLayout>\n  "},"values":{"attrs.xml":"\n    \n\n<resources>\n\n \n\n    <!--\n\n         Declare custom theme attributes that allow changing which styles are\n\n         used for button bars depending on the API level.\n\n         ?android:attr/buttonBarStyle is new as of API 11 so this is\n\n         necessary to support previous API levels.\n\n    -->\n\n    <declare-styleable name=\"ButtonBarContainerTheme\">\n\n        <attr name=\"buttonBarStyle\" format=\"reference\" />\n\n        <attr name=\"buttonBarButtonStyle\" format=\"reference\" />\n\n    </declare-styleable>\n\n \n\n</resources>\n  ","base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">BasicRenderScript</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            BasicRenderScript sample demonstrates basic steps how to use renderScript.\n\n\t\t\tIn the sample, it performs graphical filter operation on a image with renderScript.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","colors.xml":"\n    \n\n<resources>\n\n \n\n    <color name=\"black_overlay\">#66000000</color>\n\n \n\n</resources>\n  ","styles.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<resources>\n\n \n\n \n\n    <style name=\"FullscreenTheme\" parent=\"android:Theme.NoTitleBar\">\n\n        <item name=\"android:windowContentOverlay\">@null</item>\n\n        <item name=\"android:windowBackground\">@null</item>\n\n        <item name=\"buttonBarStyle\">@style/ButtonBar</item>\n\n        <item name=\"buttonBarButtonStyle\">@style/ButtonBarButton</item>\n\n    </style>\n\n \n\n    <style name=\"ButtonBar\">\n\n        <item name=\"android:paddingLeft\">2dp</item>\n\n        <item name=\"android:paddingTop\">5dp</item>\n\n        <item name=\"android:paddingRight\">2dp</item>\n\n        <item name=\"android:paddingBottom\">0dp</item>\n\n        <item name=\"android:background\">@android:drawable/bottom_bar</item>\n\n    </style>\n\n \n\n    <style name=\"ButtonBarButton\" />\n\n \n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"styles.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<resources>\n\n \n\n    <!--\n\n        Base application theme for API 11+. This theme completely replaces\n\n        AppBaseTheme from res/values/styles.xml on API 11+ devices.\n\n    -->\n\n    <style name=\"AppBaseTheme\" parent=\"android:Theme.Holo.Light\">\n\n        <!-- API 11 theme customizations can go here. -->\n\n    </style>\n\n \n\n    <style name=\"FullscreenTheme\" parent=\"android:Theme.Holo\">\n\n        <item name=\"android:actionBarStyle\">@style/FullscreenActionBarStyle</item>\n\n        <item name=\"android:windowActionBarOverlay\">true</item>\n\n        <item name=\"android:windowBackground\">@null</item>\n\n        <item name=\"buttonBarStyle\">?android:attr/buttonBarStyle</item>\n\n        <item name=\"buttonBarButtonStyle\">?android:attr/buttonBarButtonStyle</item>\n\n    </style>\n\n \n\n    <style name=\"FullscreenActionBarStyle\" parent=\"android:Widget.Holo.ActionBar\">\n\n        <item name=\"android:background\">@color/black_overlay</item>\n\n    </style>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "},"values-v14":{"styles.xml":"\n    \n\n<resources>\n\n \n\n    <!--\n\n        Base application theme for API 14+. This theme completely replaces\n\n        AppBaseTheme from BOTH res/values/styles.xml and\n\n        res/values-v11/styles.xml on API 14+ devices.\n\n    -->\n\n    <style name=\"AppBaseTheme\" parent=\"android:Theme.Holo.Light.DarkActionBar\">\n\n        <!-- API 14 theme customizations can go here. -->\n\n    </style>\n\n \n\n</resources>\n  "}},"src":{"com.example.android.basicrenderscript":{"MainActivity.java":"\n    \n\n/*\n\n * Copyright (C) 2014 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.basicrenderscript;\n\n \n\nimport android.app.Activity;\n\nimport android.graphics.Bitmap;\n\nimport android.graphics.BitmapFactory;\n\nimport android.os.AsyncTask;\n\nimport android.os.Bundle;\n\nimport android.widget.ImageView;\n\nimport android.widget.SeekBar;\n\nimport android.widget.SeekBar.OnSeekBarChangeListener;\n\nimport android.support.v8.renderscript.*;\n\n \n\npublic class MainActivity extends Activity {\n\n    /* Number of bitmaps that is used for renderScript thread and UI thread synchronization.\n\n       Ideally, this can be reduced to 2, however in some devices, 2 buffers still showing tierings on UI.\n\n       Investigating a root cause.\n\n     */\n\n    private final int NUM_BITMAPS = 3;\n\n    private int mCurrentBitmap = 0;\n\n    private Bitmap mBitmapIn;\n\n    private Bitmap[] mBitmapsOut;\n\n    private ImageView mImageView;\n\n \n\n    private RenderScript mRS;\n\n    private Allocation mInAllocation;\n\n    private Allocation[] mOutAllocations;\n\n    private ScriptC_saturation mScript;\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n \n\n        setContentView(R.layout.main_layout);\n\n \n\n        /*\n\n         * Initialize UI\n\n         */\n\n        mBitmapIn = loadBitmap(R.drawable.data);\n\n        mBitmapsOut = new Bitmap[NUM_BITMAPS];\n\n        for (int i = 0; i < NUM_BITMAPS; ++i) {\n\n            mBitmapsOut[i] = Bitmap.createBitmap(mBitmapIn.getWidth(),\n\n                    mBitmapIn.getHeight(), mBitmapIn.getConfig());\n\n        }\n\n \n\n        mImageView = (ImageView) findViewById(R.id.imageView);\n\n        mImageView.setImageBitmap(mBitmapsOut[mCurrentBitmap]);\n\n        mCurrentBitmap += (mCurrentBitmap + 1) % NUM_BITMAPS;\n\n \n\n        SeekBar seekbar = (SeekBar) findViewById(R.id.seekBar1);\n\n        seekbar.setProgress(50);\n\n        seekbar.setOnSeekBarChangeListener(new OnSeekBarChangeListener() {\n\n            public void onProgressChanged(SeekBar seekBar, int progress,\n\n                                          boolean fromUser) {\n\n                float max = 2.0f;\n\n                float min = 0.0f;\n\n                float f = (float) ((max - min) * (progress / 100.0) + min);\n\n                updateImage(f);\n\n            }\n\n \n\n            @Override\n\n            public void onStartTrackingTouch(SeekBar seekBar) {\n\n            }\n\n \n\n            @Override\n\n            public void onStopTrackingTouch(SeekBar seekBar) {\n\n            }\n\n        });\n\n \n\n        /*\n\n         * Create renderScript\n\n         */\n\n        createScript();\n\n \n\n        /*\n\n         * Invoke renderScript kernel and update imageView\n\n         */\n\n        updateImage(1.0f);\n\n    }\n\n \n\n    /*\n\n     * Initialize RenderScript\n\n     * In the sample, it creates RenderScript kernel that performs saturation manipulation.\n\n     */\n\n    private void createScript() {\n\n        //Initialize RS\n\n        mRS = RenderScript.create(this);\n\n \n\n        //Allocate buffers\n\n        mInAllocation = Allocation.createFromBitmap(mRS, mBitmapIn);\n\n        mOutAllocations = new Allocation[NUM_BITMAPS];\n\n        for (int i = 0; i < NUM_BITMAPS; ++i) {\n\n            mOutAllocations[i] = Allocation.createFromBitmap(mRS, mBitmapsOut[i]);\n\n        }\n\n \n\n        //Load script\n\n        mScript = new ScriptC_saturation(mRS);\n\n    }\n\n \n\n    /*\n\n     * In the AsyncTask, it invokes RenderScript intrinsics to do a filtering.\n\n     * After the filtering is done, an operation blocks at Allication.copyTo() in AsyncTask thread.\n\n     * Once all operation is finished at onPostExecute() in UI thread, it can invalidate and update ImageView UI.\n\n     */\n\n    private class RenderScriptTask extends AsyncTask<Float, Integer, Integer> {\n\n        Boolean issued = false;\n\n \n\n        protected Integer doInBackground(Float... values) {\n\n            int index = -1;\n\n            if (isCancelled() == false) {\n\n                issued = true;\n\n                index = mCurrentBitmap;\n\n \n\n                /*\n\n                 * Set global variable in RS\n\n                 */\n\n                mScript.set_saturationValue(values[0]);\n\n \n\n                /*\n\n                 * Invoke saturation filter kernel\n\n                 */\n\n                mScript.forEach_saturation(mInAllocation, mOutAllocations[index]);\n\n \n\n                /*\n\n                 * Copy to bitmap and invalidate image view\n\n                 */\n\n                mOutAllocations[index].copyTo(mBitmapsOut[index]);\n\n                mCurrentBitmap = (mCurrentBitmap + 1) % NUM_BITMAPS;\n\n            }\n\n            return index;\n\n        }\n\n \n\n        void updateView(Integer result) {\n\n            if (result != -1) {\n\n                // Request UI update\n\n                mImageView.setImageBitmap(mBitmapsOut[result]);\n\n                mImageView.invalidate();\n\n            }\n\n        }\n\n \n\n        protected void onPostExecute(Integer result) {\n\n            updateView(result);\n\n        }\n\n \n\n        protected void onCancelled(Integer result) {\n\n            if (issued) {\n\n                updateView(result);\n\n            }\n\n        }\n\n    }\n\n \n\n    RenderScriptTask currentTask = null;\n\n \n\n    /*\n\n    Invoke AsynchTask and cancel previous task.\n\n    When AsyncTasks are piled up (typically in slow device with heavy kernel),\n\n    Only the latest (and already started) task invokes RenderScript operation.\n\n     */\n\n    private void updateImage(final float f) {\n\n        if (currentTask != null)\n\n            currentTask.cancel(false);\n\n        currentTask = new RenderScriptTask();\n\n        currentTask.execute(f);\n\n    }\n\n \n\n    /*\n\n    Helper to load Bitmap from resource\n\n     */\n\n    private Bitmap loadBitmap(int resource) {\n\n        final BitmapFactory.Options options = new BitmapFactory.Options();\n\n        options.inPreferredConfig = Bitmap.Config.ARGB_8888;\n\n        return BitmapFactory.decodeResource(getResources(), resource, options);\n\n    }\n\n \n\n}\n  "},"com.example.android.common.media":{"CameraHelper.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.media;\n\n \n\nimport android.annotation.TargetApi;\n\nimport android.hardware.Camera;\n\nimport android.os.Build;\n\nimport android.os.Environment;\n\nimport android.util.Log;\n\n \n\nimport java.io.File;\n\nimport java.text.SimpleDateFormat;\n\nimport java.util.Date;\n\nimport java.util.List;\n\n \n\n/**\n\n * Camera related utilities.\n\n */\n\npublic class CameraHelper {\n\n \n\n    public static final int MEDIA_TYPE_IMAGE = 1;\n\n    public static final int MEDIA_TYPE_VIDEO = 2;\n\n \n\n    /**\n\n     * Iterate over supported camera preview sizes to see which one best fits the\n\n     * dimensions of the given view while maintaining the aspect ratio. If none can,\n\n     * be lenient with the aspect ratio.\n\n     *\n\n     * @param sizes Supported camera preview sizes.\n\n     * @param w The width of the view.\n\n     * @param h The height of the view.\n\n     * @return Best match camera preview size to fit in the view.\n\n     */\n\n    public static  Camera.Size getOptimalPreviewSize(List<Camera.Size> sizes, int w, int h) {\n\n        // Use a very small tolerance because we want an exact match.\n\n        final double ASPECT_TOLERANCE = 0.1;\n\n        double targetRatio = (double) w / h;\n\n        if (sizes == null)\n\n            return null;\n\n \n\n        Camera.Size optimalSize = null;\n\n \n\n        // Start with max value and refine as we iterate over available preview sizes. This is the\n\n        // minimum difference between view and camera height.\n\n        double minDiff = Double.MAX_VALUE;\n\n \n\n        // Target view height\n\n        int targetHeight = h;\n\n \n\n        // Try to find a preview size that matches aspect ratio and the target view size.\n\n        // Iterate over all available sizes and pick the largest size that can fit in the view and\n\n        // still maintain the aspect ratio.\n\n        for (Camera.Size size : sizes) {\n\n            double ratio = (double) size.width / size.height;\n\n            if (Math.abs(ratio - targetRatio) > ASPECT_TOLERANCE)\n\n                continue;\n\n            if (Math.abs(size.height - targetHeight) < minDiff) {\n\n                optimalSize = size;\n\n                minDiff = Math.abs(size.height - targetHeight);\n\n            }\n\n        }\n\n \n\n        // Cannot find preview size that matches the aspect ratio, ignore the requirement\n\n        if (optimalSize == null) {\n\n            minDiff = Double.MAX_VALUE;\n\n            for (Camera.Size size : sizes) {\n\n                if (Math.abs(size.height - targetHeight) < minDiff) {\n\n                    optimalSize = size;\n\n                    minDiff = Math.abs(size.height - targetHeight);\n\n                }\n\n            }\n\n        }\n\n        return optimalSize;\n\n    }\n\n \n\n    /**\n\n     * @return the default camera on the device. Return null if there is no camera on the device.\n\n     */\n\n    public static Camera getDefaultCameraInstance() {\n\n        return Camera.open();\n\n    }\n\n \n\n \n\n    /**\n\n     * @return the default rear/back facing camera on the device. Returns null if camera is not\n\n     * available.\n\n     */\n\n    public static Camera getDefaultBackFacingCameraInstance() {\n\n        return getDefaultCamera(Camera.CameraInfo.CAMERA_FACING_BACK);\n\n    }\n\n \n\n    /**\n\n     * @return the default front facing camera on the device. Returns null if camera is not\n\n     * available.\n\n     */\n\n    public static Camera getDefaultFrontFacingCameraInstance() {\n\n        return getDefaultCamera(Camera.CameraInfo.CAMERA_FACING_FRONT);\n\n    }\n\n \n\n \n\n    /**\n\n     *\n\n     * @param position Physical position of the camera i.e Camera.CameraInfo.CAMERA_FACING_FRONT\n\n     *                 or Camera.CameraInfo.CAMERA_FACING_BACK.\n\n     * @return the default camera on the device. Returns null if camera is not available.\n\n     */\n\n    @TargetApi(Build.VERSION_CODES.GINGERBREAD)\n\n    private static Camera getDefaultCamera(int position) {\n\n        // Find the total number of cameras available\n\n        int  mNumberOfCameras = Camera.getNumberOfCameras();\n\n \n\n        // Find the ID of the back-facing (\"default\") camera\n\n        Camera.CameraInfo cameraInfo = new Camera.CameraInfo();\n\n        for (int i = 0; i < mNumberOfCameras; i++) {\n\n            Camera.getCameraInfo(i, cameraInfo);\n\n            if (cameraInfo.facing == position) {\n\n                return Camera.open(i);\n\n \n\n            }\n\n        }\n\n \n\n        return null;\n\n    }\n\n \n\n    /**\n\n     * Creates a media file in the {@code Environment.DIRECTORY_PICTURES} directory. The directory\n\n     * is persistent and available to other applications like gallery.\n\n     *\n\n     * @param type Media type. Can be video or image.\n\n     * @return A file object pointing to the newly created file.\n\n     */\n\n    public  static File getOutputMediaFile(int type){\n\n        // To be safe, you should check that the SDCard is mounted\n\n        // using Environment.getExternalStorageState() before doing this.\n\n        if (!Environment.getExternalStorageState().equalsIgnoreCase(Environment.MEDIA_MOUNTED)) {\n\n            return  null;\n\n        }\n\n \n\n        File mediaStorageDir = new File(Environment.getExternalStoragePublicDirectory(\n\n                Environment.DIRECTORY_PICTURES), \"CameraSample\");\n\n        // This location works best if you want the created images to be shared\n\n        // between applications and persist after your app has been uninstalled.\n\n \n\n        // Create the storage directory if it does not exist\n\n        if (! mediaStorageDir.exists()){\n\n            if (! mediaStorageDir.mkdirs()) {\n\n                Log.d(\"CameraSample\", \"failed to create directory\");\n\n                return null;\n\n            }\n\n        }\n\n \n\n        // Create a media file name\n\n        String timeStamp = new SimpleDateFormat(\"yyyyMMdd_HHmmss\").format(new Date());\n\n        File mediaFile;\n\n        if (type == MEDIA_TYPE_IMAGE){\n\n            mediaFile = new File(mediaStorageDir.getPath() + File.separator +\n\n                    \"IMG_\"+ timeStamp + \".jpg\");\n\n        } else if(type == MEDIA_TYPE_VIDEO) {\n\n            mediaFile = new File(mediaStorageDir.getPath() + File.separator +\n\n                    \"VID_\"+ timeStamp + \".mp4\");\n\n        } else {\n\n            return null;\n\n        }\n\n \n\n        return mediaFile;\n\n    }\n\n \n\n}\n  ","MediaCodecWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.media;\n\n \n\nimport android.media.*;\n\nimport android.os.Handler;\n\nimport android.os.Looper;\n\nimport android.view.Surface;\n\n \n\nimport java.nio.ByteBuffer;\n\nimport java.util.ArrayDeque;\n\nimport java.util.Queue;\n\n \n\n/**\n\n * Simplifies the MediaCodec interface by wrapping around the buffer processing operations.\n\n */\n\npublic class MediaCodecWrapper {\n\n \n\n    // Handler to use for {@code OutputSampleListener} and {code OutputFormatChangedListener}\n\n    // callbacks\n\n    private Handler mHandler;\n\n \n\n \n\n    // Callback when media output format changes.\n\n    public interface OutputFormatChangedListener {\n\n        void outputFormatChanged(MediaCodecWrapper sender, MediaFormat newFormat);\n\n    }\n\n \n\n    private OutputFormatChangedListener mOutputFormatChangedListener = null;\n\n \n\n    /**\n\n     * Callback for decodes frames. Observers can register a listener for optional stream\n\n     * of decoded data\n\n     */\n\n    public interface OutputSampleListener {\n\n        void outputSample(MediaCodecWrapper sender, MediaCodec.BufferInfo info, ByteBuffer buffer);\n\n    }\n\n \n\n    /**\n\n     * The {@link MediaCodec} that is managed by this class.\n\n     */\n\n    private MediaCodec mDecoder;\n\n \n\n    // References to the internal buffers managed by the codec. The codec\n\n    // refers to these buffers by index, never by reference so it's up to us\n\n    // to keep track of which buffer is which.\n\n    private ByteBuffer[] mInputBuffers;\n\n    private ByteBuffer[] mOutputBuffers;\n\n \n\n    // Indices of the input buffers that are currently available for writing. We'll\n\n    // consume these in the order they were dequeued from the codec.\n\n    private Queue<Integer> mAvailableInputBuffers;\n\n \n\n    // Indices of the output buffers that currently hold valid data, in the order\n\n    // they were produced by the codec.\n\n    private Queue<Integer> mAvailableOutputBuffers;\n\n \n\n    // Information about each output buffer, by index. Each entry in this array\n\n    // is valid if and only if its index is currently contained in mAvailableOutputBuffers.\n\n    private MediaCodec.BufferInfo[] mOutputBufferInfo;\n\n \n\n    // An (optional) stream that will receive decoded data.\n\n    private OutputSampleListener mOutputSampleListener;\n\n \n\n    private MediaCodecWrapper(MediaCodec codec) {\n\n        mDecoder = codec;\n\n        codec.start();\n\n        mInputBuffers = codec.getInputBuffers();\n\n        mOutputBuffers = codec.getOutputBuffers();\n\n        mOutputBufferInfo = new MediaCodec.BufferInfo[mOutputBuffers.length];\n\n        mAvailableInputBuffers = new ArrayDeque<Integer>(mOutputBuffers.length);\n\n        mAvailableOutputBuffers = new ArrayDeque<Integer>(mInputBuffers.length);\n\n    }\n\n \n\n    /**\n\n     * Releases resources and ends the encoding/decoding session.\n\n     */\n\n    public void stopAndRelease() {\n\n        mDecoder.stop();\n\n        mDecoder.release();\n\n        mDecoder = null;\n\n        mHandler = null;\n\n    }\n\n \n\n    /**\n\n     * Getter for the registered {@link OutputFormatChangedListener}\n\n     */\n\n    public OutputFormatChangedListener getOutputFormatChangedListener() {\n\n        return mOutputFormatChangedListener;\n\n    }\n\n \n\n    /**\n\n     *\n\n     * @param outputFormatChangedListener the listener for callback.\n\n     * @param handler message handler for posting the callback.\n\n     */\n\n    public void setOutputFormatChangedListener(final OutputFormatChangedListener\n\n            outputFormatChangedListener, Handler handler) {\n\n        mOutputFormatChangedListener = outputFormatChangedListener;\n\n \n\n        // Making sure we don't block ourselves due to a bad implementation of the callback by\n\n        // using a handler provided by client.\n\n        Looper looper;\n\n        mHandler = handler;\n\n        if (outputFormatChangedListener != null && mHandler == null) {\n\n            if ((looper = Looper.myLooper()) != null) {\n\n                mHandler = new Handler();\n\n            } else {\n\n                throw new IllegalArgumentException(\n\n                        \"Looper doesn't exist in the calling thread\");\n\n            }\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Constructs the {@link MediaCodecWrapper} wrapper object around the video codec.\n\n     * The codec is created using the encapsulated information in the\n\n     * {@link MediaFormat} object.\n\n     *\n\n     * @param trackFormat The format of the media object to be decoded.\n\n     * @param surface Surface to render the decoded frames.\n\n     * @return\n\n     */\n\n    public static MediaCodecWrapper fromVideoFormat(final MediaFormat trackFormat,\n\n            Surface surface) {\n\n        MediaCodecWrapper result = null;\n\n        MediaCodec videoCodec = null;\n\n \n\n        final String mimeType = trackFormat.getString(MediaFormat.KEY_MIME);\n\n \n\n        // Check to see if this is actually a video mime type. If it is, then create\n\n        // a codec that can decode this mime type.\n\n        if (mimeType.contains(\"video/\")) {\n\n            videoCodec = MediaCodec.createDecoderByType(mimeType);\n\n            videoCodec.configure(trackFormat, surface, null,  0);\n\n \n\n        }\n\n \n\n        // If codec creation was successful, then create a wrapper object around the\n\n        // newly created codec.\n\n        if (videoCodec != null) {\n\n            result = new MediaCodecWrapper(videoCodec);\n\n        }\n\n \n\n        return result;\n\n    }\n\n \n\n \n\n    /**\n\n     * Write a media sample to the decoder.\n\n     *\n\n     * A \"sample\" here refers to a single atomic access unit in the media stream. The definition\n\n     * of \"access unit\" is dependent on the type of encoding used, but it typically refers to\n\n     * a single frame of video or a few seconds of audio. {@link android.media.MediaExtractor}\n\n     * extracts data from a stream one sample at a time.\n\n     *\n\n     * @param input A ByteBuffer containing the input data for one sample. The buffer must be set\n\n     * up for reading, with its position set to the beginning of the sample data and its limit\n\n     * set to the end of the sample data.\n\n     *\n\n     * @param presentationTimeUs  The time, relative to the beginning of the media stream,\n\n     * at which this buffer should be rendered.\n\n     *\n\n     * @param flags Flags to pass to the decoder. See {@link MediaCodec#queueInputBuffer(int,\n\n     * int, int, long, int)}\n\n     *\n\n     * @throws MediaCodec.CryptoException\n\n     */\n\n    public boolean writeSample(final ByteBuffer input,\n\n            final MediaCodec.CryptoInfo crypto,\n\n            final long presentationTimeUs,\n\n            final int flags) throws MediaCodec.CryptoException, WriteException {\n\n        boolean result = false;\n\n        int size = input.remaining();\n\n \n\n        // check if we have dequed input buffers available from the codec\n\n        if (size > 0 &&  !mAvailableInputBuffers.isEmpty()) {\n\n            int index = mAvailableInputBuffers.remove();\n\n            ByteBuffer buffer = mInputBuffers[index];\n\n \n\n            // we can't write our sample to a lesser capacity input buffer.\n\n            if (size > buffer.capacity()) {\n\n                throw new MediaCodecWrapper.WriteException(String.format(\n\n                        \"Insufficient capacity in MediaCodec buffer: \"\n\n                            + \"tried to write %d, buffer capacity is %d.\",\n\n                        input.remaining(),\n\n                        buffer.capacity()));\n\n            }\n\n \n\n            buffer.clear();\n\n            buffer.put(input);\n\n \n\n            // Submit the buffer to the codec for decoding. The presentationTimeUs\n\n            // indicates the position (play time) for the current sample.\n\n            if (crypto == null) {\n\n                mDecoder.queueInputBuffer(index, 0, size, presentationTimeUs, flags);\n\n            } else {\n\n                mDecoder.queueSecureInputBuffer(index, 0, crypto, presentationTimeUs, flags);\n\n            }\n\n            result = true;\n\n        }\n\n        return result;\n\n    }\n\n \n\n    static MediaCodec.CryptoInfo cryptoInfo= new MediaCodec.CryptoInfo();\n\n \n\n    /**\n\n     * Write a media sample to the decoder.\n\n     *\n\n     * A \"sample\" here refers to a single atomic access unit in the media stream. The definition\n\n     * of \"access unit\" is dependent on the type of encoding used, but it typically refers to\n\n     * a single frame of video or a few seconds of audio. {@link android.media.MediaExtractor}\n\n     * extracts data from a stream one sample at a time.\n\n     *\n\n     * @param extractor  Instance of {@link android.media.MediaExtractor} wrapping the media.\n\n     *\n\n     * @param presentationTimeUs The time, relative to the beginning of the media stream,\n\n     * at which this buffer should be rendered.\n\n     *\n\n     * @param flags  Flags to pass to the decoder. See {@link MediaCodec#queueInputBuffer(int,\n\n     * int, int, long, int)}\n\n     *\n\n     * @throws MediaCodec.CryptoException\n\n     */\n\n    public boolean writeSample(final MediaExtractor extractor,\n\n            final boolean isSecure,\n\n            final long presentationTimeUs,\n\n            int flags) {\n\n        boolean result = false;\n\n        boolean isEos = false;\n\n \n\n        if (!mAvailableInputBuffers.isEmpty()) {\n\n            int index = mAvailableInputBuffers.remove();\n\n            ByteBuffer buffer = mInputBuffers[index];\n\n \n\n            // reads the sample from the file using extractor into the buffer\n\n            int size = extractor.readSampleData(buffer, 0);\n\n            if (size <= 0) {\n\n                flags |= MediaCodec.BUFFER_FLAG_END_OF_STREAM;\n\n            }\n\n \n\n            // Submit the buffer to the codec for decoding. The presentationTimeUs\n\n            // indicates the position (play time) for the current sample.\n\n            if (!isSecure) {\n\n                mDecoder.queueInputBuffer(index, 0, size, presentationTimeUs, flags);\n\n            } else {\n\n                extractor.getSampleCryptoInfo(cryptoInfo);\n\n                mDecoder.queueSecureInputBuffer(index, 0, cryptoInfo, presentationTimeUs, flags);\n\n            }\n\n \n\n            result = true;\n\n        }\n\n        return result;\n\n    }\n\n \n\n    /**\n\n     * Performs a peek() operation in the queue to extract media info for the buffer ready to be\n\n     * released i.e. the head element of the queue.\n\n     *\n\n     * @param out_bufferInfo An output var to hold the buffer info.\n\n     *\n\n     * @return True, if the peek was successful.\n\n     */\n\n    public boolean peekSample(MediaCodec.BufferInfo out_bufferInfo) {\n\n        // dequeue available buffers and synchronize our data structures with the codec.\n\n        update();\n\n        boolean result = false;\n\n        if (!mAvailableOutputBuffers.isEmpty()) {\n\n            int index = mAvailableOutputBuffers.peek();\n\n            MediaCodec.BufferInfo info = mOutputBufferInfo[index];\n\n            // metadata of the sample\n\n            out_bufferInfo.set(\n\n                    info.offset,\n\n                    info.size,\n\n                    info.presentationTimeUs,\n\n                    info.flags);\n\n            result = true;\n\n        }\n\n        return result;\n\n    }\n\n \n\n    /**\n\n     * Processes, releases and optionally renders the output buffer available at the head of the\n\n     * queue. All observers are notified with a callback. See {@link\n\n     * OutputSampleListener#outputSample(MediaCodecWrapper, android.media.MediaCodec.BufferInfo,\n\n     * java.nio.ByteBuffer)}\n\n     *\n\n     * @param render True, if the buffer is to be rendered on the {@link Surface} configured\n\n     *\n\n     */\n\n    public void popSample(boolean render) {\n\n        // dequeue available buffers and synchronize our data structures with the codec.\n\n        update();\n\n        if (!mAvailableOutputBuffers.isEmpty()) {\n\n            int index = mAvailableOutputBuffers.remove();\n\n \n\n            if (render && mOutputSampleListener != null) {\n\n                ByteBuffer buffer = mOutputBuffers[index];\n\n                MediaCodec.BufferInfo info = mOutputBufferInfo[index];\n\n                mOutputSampleListener.outputSample(this, info, buffer);\n\n            }\n\n \n\n            // releases the buffer back to the codec\n\n            mDecoder.releaseOutputBuffer(index, render);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Synchronize this object's state with the internal state of the wrapped\n\n     * MediaCodec.\n\n     */\n\n    private void update() {\n\n        int index;\n\n \n\n        // Get valid input buffers from the codec to fill later in the same order they were\n\n        // made available by the codec.\n\n        while ((index = mDecoder.dequeueInputBuffer(0)) != MediaCodec.INFO_TRY_AGAIN_LATER) {\n\n            mAvailableInputBuffers.add(index);\n\n        }\n\n \n\n \n\n        // Likewise with output buffers. If the output buffers have changed, start using the\n\n        // new set of output buffers. If the output format has changed, notify listeners.\n\n        MediaCodec.BufferInfo info = new MediaCodec.BufferInfo();\n\n        while ((index = mDecoder.dequeueOutputBuffer(info, 0)) !=  MediaCodec.INFO_TRY_AGAIN_LATER) {\n\n            switch (index) {\n\n                case MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED:\n\n                    mOutputBuffers = mDecoder.getOutputBuffers();\n\n                    mOutputBufferInfo = new MediaCodec.BufferInfo[mOutputBuffers.length];\n\n                    mAvailableOutputBuffers.clear();\n\n                    break;\n\n                case MediaCodec.INFO_OUTPUT_FORMAT_CHANGED:\n\n                    if (mOutputFormatChangedListener != null) {\n\n                        mHandler.post(new Runnable() {\n\n                            @Override\n\n                            public void run() {\n\n                                mOutputFormatChangedListener\n\n                                        .outputFormatChanged(MediaCodecWrapper.this,\n\n                                                mDecoder.getOutputFormat());\n\n \n\n                            }\n\n                        });\n\n                    }\n\n                    break;\n\n                default:\n\n                    // Making sure the index is valid before adding to output buffers. We've already\n\n                    // handled INFO_TRY_AGAIN_LATER, INFO_OUTPUT_FORMAT_CHANGED &\n\n                    // INFO_OUTPUT_BUFFERS_CHANGED i.e all the other possible return codes but\n\n                    // asserting index value anyways for future-proofing the code.\n\n                    if(index >= 0) {\n\n                        mOutputBufferInfo[index] = info;\n\n                        mAvailableOutputBuffers.add(index);\n\n                    } else {\n\n                        throw new IllegalStateException(\"Unknown status from dequeueOutputBuffer\");\n\n                    }\n\n                    break;\n\n            }\n\n \n\n        }\n\n \n\n    }\n\n \n\n    private class WriteException extends Throwable {\n\n        private WriteException(final String detailMessage) {\n\n            super(detailMessage);\n\n        }\n\n    }\n\n}\n  "},"rs":{"saturation.rs":"\n    \n\n/*\n\n * Copyright (C) 2014 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\n#pragma version(1)\n\n#pragma rs java_package_name(com.example.android.basicrenderscript)\n\n#pragma rs_fp_relaxed\n\n \n\nconst static float3 gMonoMult = {0.299f, 0.587f, 0.114f};\n\n \n\nfloat saturationValue = 0.f;\n\n \n\n/*\n\nRenderScript kernel that performs saturation manipulation.\n\n*/\n\nuchar4 __attribute__((kernel)) saturation(uchar4 in)\n\n{\n\n    float4 f4 = rsUnpackColor8888(in);\n\n    float3 result = dot(f4.rgb, gMonoMult);\n\n    result = mix( result, f4.rgb, saturationValue );\n\n \n\n    return rsPackColorTo8888(result);\n\n}\n\n \n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?><!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.basicrenderscript\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk\n\n        android:minSdkVersion=\"8\"\n\n        android:targetSdkVersion=\"19\" />\n\n \n\n    <application\n\n        android:allowBackup=\"true\"\n\n        android:label=\"@string/app_name\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:theme=\"@style/AppTheme\">\n\n \n\n        <activity\n\n            android:name=\".MainActivity\"\n\n            android:label=\"@string/app_name\"\n\n            android:theme=\"@style/FullscreenTheme\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n \n\n</manifest>\n  "},"RenderScriptIntrinsic":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com/samples/RenderScriptIntrinsic/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com/samples/RenderScriptIntrinsic/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com/samples/RenderScriptIntrinsic/res/drawable-mdpi/ic_launcher.png"},"drawable-nodpi":{"data.jpg":"http://developer.android.com/samples/RenderScriptIntrinsic/res/drawable-nodpi/data.jpg"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com/samples/RenderScriptIntrinsic/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com/samples/RenderScriptIntrinsic/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleMessageTile\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n            android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n            android:text=\"@string/intro_message\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n  ","main_layout.xml":"\n    \n\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:tools=\"http://schemas.android.com/tools\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:background=\"#0099cc\"\n\n    tools:context=\".MainActivity\">\n\n \n\n    <ImageView\n\n        android:id=\"@+id/imageView\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"match_parent\"\n\n        android:scaleType=\"centerCrop\"\n\n        android:src=\"@drawable/data\" />\n\n \n\n    <RadioGroup\n\n        android:id=\"@+id/radioGroup1\"\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:layout_centerHorizontal=\"true\"\n\n        android:orientation=\"horizontal\"\n\n        android:layout_above=\"@+id/seekBar1\"\n\n        android:layout_marginBottom=\"8dp\">\n\n \n\n        <com.example.android.renderscriptintrinsic.ThumbnailRadioButton\n\n            android:id=\"@+id/radio0\"\n\n            android:layout_width=\"wrap_content\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:checked=\"true\"\n\n            android:text=\"Blur\" />\n\n \n\n        <com.example.android.renderscriptintrinsic.ThumbnailRadioButton\n\n            android:id=\"@+id/radio1\"\n\n            android:layout_width=\"wrap_content\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:text=\"Emboss\" />\n\n \n\n        <com.example.android.renderscriptintrinsic.ThumbnailRadioButton\n\n            android:id=\"@+id/radio2\"\n\n            android:layout_width=\"wrap_content\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:text=\"Hue\" />\n\n    </RadioGroup>\n\n \n\n    <SeekBar\n\n        android:id=\"@+id/seekBar1\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:layout_alignParentBottom=\"true\"\n\n        android:layout_marginBottom=\"16dp\" />\n\n \n\n</RelativeLayout>\n  "},"values":{"attrs.xml":"\n    \n\n<resources>\n\n \n\n    <!--\n\n         Declare custom theme attributes that allow changing which styles are\n\n         used for button bars depending on the API level.\n\n         ?android:attr/buttonBarStyle is new as of API 11 so this is\n\n         necessary to support previous API levels.\n\n    -->\n\n    <declare-styleable name=\"ButtonBarContainerTheme\">\n\n        <attr name=\"buttonBarStyle\" format=\"reference\" />\n\n        <attr name=\"buttonBarButtonStyle\" format=\"reference\" />\n\n    </declare-styleable>\n\n \n\n</resources>\n  ","base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">RenderScriptIntrinsic</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            RenderScriptIntrinsic sample that demonstrates how to use RenderScript intrinsics.\n\n            Creates several RenderScript intrinsics and shows a filtering result with various parameters.\n\n            Also shows how to extends RedioButton with StateListDrawable.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","colors.xml":"\n    \n\n<resources>\n\n \n\n    <color name=\"black_overlay\">#66000000</color>\n\n \n\n</resources>\n  ","styles.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<resources>\n\n \n\n    <!--\n\n        Base application theme, dependent on API level. This theme is replaced\n\n        by AppBaseTheme from res/values-vXX/styles.xml on newer devices.\n\n    -->\n\n    <style name=\"AppBaseTheme\" parent=\"android:Theme.Light\">\n\n        <!--\n\n            Theme customizations available in newer API levels can go in\n\n            res/values-vXX/styles.xml, while customizations related to\n\n            backward-compatibility can go here.\n\n        -->\n\n    </style>\n\n \n\n    <style name=\"FullscreenTheme\" parent=\"android:Theme.NoTitleBar\">\n\n        <item name=\"android:windowContentOverlay\">@null</item>\n\n        <item name=\"android:windowBackground\">@null</item>\n\n        <item name=\"buttonBarStyle\">@style/ButtonBar</item>\n\n        <item name=\"buttonBarButtonStyle\">@style/ButtonBarButton</item>\n\n    </style>\n\n \n\n    <style name=\"ButtonBar\">\n\n        <item name=\"android:paddingLeft\">2dp</item>\n\n        <item name=\"android:paddingTop\">5dp</item>\n\n        <item name=\"android:paddingRight\">2dp</item>\n\n        <item name=\"android:paddingBottom\">0dp</item>\n\n        <item name=\"android:background\">@android:drawable/bottom_bar</item>\n\n    </style>\n\n \n\n    <style name=\"ButtonBarButton\" />\n\n \n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"styles.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<resources>\n\n \n\n    <!--\n\n        Base application theme for API 11+. This theme completely replaces\n\n        AppBaseTheme from res/values/styles.xml on API 11+ devices.\n\n    -->\n\n    <style name=\"AppBaseTheme\" parent=\"android:Theme.Holo.Light\">\n\n        <!-- API 11 theme customizations can go here. -->\n\n    </style>\n\n \n\n    <style name=\"FullscreenTheme\" parent=\"android:Theme.Holo\">\n\n        <item name=\"android:actionBarStyle\">@style/FullscreenActionBarStyle</item>\n\n        <item name=\"android:windowActionBarOverlay\">true</item>\n\n        <item name=\"android:windowBackground\">@null</item>\n\n        <item name=\"buttonBarStyle\">?android:attr/buttonBarStyle</item>\n\n        <item name=\"buttonBarButtonStyle\">?android:attr/buttonBarButtonStyle</item>\n\n    </style>\n\n \n\n    <style name=\"FullscreenActionBarStyle\" parent=\"android:Widget.Holo.ActionBar\">\n\n        <item name=\"android:background\">@color/black_overlay</item>\n\n    </style>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "},"values-v14":{"styles.xml":"\n    \n\n<resources>\n\n \n\n    <!--\n\n        Base application theme for API 14+. This theme completely replaces\n\n        AppBaseTheme from BOTH res/values/styles.xml and\n\n        res/values-v11/styles.xml on API 14+ devices.\n\n    -->\n\n    <style name=\"AppBaseTheme\" parent=\"android:Theme.Holo.Light.DarkActionBar\">\n\n        <!-- API 14 theme customizations can go here. -->\n\n    </style>\n\n \n\n</resources>\n  "}},"src":{"com.example.android.common.logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "},"com.example.android.renderscriptintrinsic":{"MainActivity.java":"\n    \n\n/*\n\n * Copyright (C) 2014 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.renderscriptintrinsic;\n\n \n\nimport android.app.Activity;\n\nimport android.graphics.Bitmap;\n\nimport android.graphics.BitmapFactory;\n\nimport android.os.AsyncTask;\n\nimport android.os.Bundle;\n\nimport android.widget.CompoundButton;\n\nimport android.widget.CompoundButton.OnCheckedChangeListener;\n\nimport android.widget.ImageView;\n\nimport android.widget.RadioButton;\n\nimport android.widget.SeekBar;\n\nimport android.widget.SeekBar.OnSeekBarChangeListener;\n\nimport android.support.v8.renderscript.*;\n\n \n\npublic class MainActivity extends Activity {\n\n    /* Number of bitmaps that is used for renderScript thread and UI thread synchronization.\n\n       Ideally, this can be reduced to 2, however in some devices, 2 buffers still showing tierings on UI.\n\n       Investigating a root cause.\n\n     */\n\n    private final int NUM_BITMAPS = 3;\n\n    private int mCurrentBitmap = 0;\n\n    private Bitmap mBitmapIn;\n\n    private Bitmap[] mBitmapsOut;\n\n    private ImageView mImageView;\n\n \n\n    private RenderScript mRS;\n\n    private Allocation mInAllocation;\n\n    private Allocation[] mOutAllocations;\n\n \n\n    private ScriptIntrinsicBlur mScriptBlur;\n\n    private ScriptIntrinsicConvolve5x5 mScriptConvolve;\n\n    private ScriptIntrinsicColorMatrix mScriptMatrix;\n\n \n\n    private final int MODE_BLUR = 0;\n\n    private final int MODE_CONVOLVE = 1;\n\n    private final int MODE_COLORMATRIX = 2;\n\n \n\n    private int mFilterMode = MODE_BLUR;\n\n \n\n    private RenderScriptTask mLatestTask = null;\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n \n\n        setContentView(R.layout.main_layout);\n\n \n\n        /*\n\n         * Initialize UI\n\n         */\n\n \n\n        //Set up main image view\n\n        mBitmapIn = loadBitmap(R.drawable.data);\n\n        mBitmapsOut = new Bitmap[NUM_BITMAPS];\n\n        for (int i = 0; i < NUM_BITMAPS; ++i) {\n\n            mBitmapsOut[i] = Bitmap.createBitmap(mBitmapIn.getWidth(),\n\n                    mBitmapIn.getHeight(), mBitmapIn.getConfig());\n\n        }\n\n \n\n        mImageView = (ImageView) findViewById(R.id.imageView);\n\n        mImageView.setImageBitmap(mBitmapsOut[mCurrentBitmap]);\n\n        mCurrentBitmap += (mCurrentBitmap + 1) % NUM_BITMAPS;\n\n \n\n        //Set up seekbar\n\n        final SeekBar seekbar = (SeekBar) findViewById(R.id.seekBar1);\n\n        seekbar.setProgress(50);\n\n        seekbar.setOnSeekBarChangeListener(new OnSeekBarChangeListener() {\n\n            public void onProgressChanged(SeekBar seekBar, int progress,\n\n                                          boolean fromUser) {\n\n                updateImage(progress);\n\n            }\n\n \n\n            @Override\n\n            public void onStartTrackingTouch(SeekBar seekBar) {\n\n            }\n\n \n\n            @Override\n\n            public void onStopTrackingTouch(SeekBar seekBar) {\n\n            }\n\n        });\n\n \n\n        //Setup effect selector\n\n        RadioButton radio0 = (RadioButton) findViewById(R.id.radio0);\n\n        radio0.setOnCheckedChangeListener(new OnCheckedChangeListener() {\n\n \n\n            @Override\n\n            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\n\n                if (isChecked) {\n\n                    mFilterMode = MODE_BLUR;\n\n                    updateImage(seekbar.getProgress());\n\n                }\n\n            }\n\n        });\n\n        RadioButton radio1 = (RadioButton) findViewById(R.id.radio1);\n\n        radio1.setOnCheckedChangeListener(new OnCheckedChangeListener() {\n\n \n\n            @Override\n\n            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\n\n                if (isChecked) {\n\n                    mFilterMode = MODE_CONVOLVE;\n\n                    updateImage(seekbar.getProgress());\n\n                }\n\n            }\n\n        });\n\n        RadioButton radio2 = (RadioButton) findViewById(R.id.radio2);\n\n        radio2.setOnCheckedChangeListener(new OnCheckedChangeListener() {\n\n \n\n            @Override\n\n            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\n\n                if (isChecked) {\n\n                    mFilterMode = MODE_COLORMATRIX;\n\n                    updateImage(seekbar.getProgress());\n\n                }\n\n            }\n\n        });\n\n \n\n        /*\n\n         * Create renderScript\n\n         */\n\n        createScript();\n\n \n\n        /*\n\n         * Create thumbnails\n\n         */\n\n        createThumbnail();\n\n \n\n \n\n        /*\n\n         * Invoke renderScript kernel and update imageView\n\n         */\n\n        mFilterMode = MODE_BLUR;\n\n        updateImage(50);\n\n    }\n\n \n\n    private void createScript() {\n\n        mRS = RenderScript.create(this);\n\n \n\n        mInAllocation = Allocation.createFromBitmap(mRS, mBitmapIn);\n\n \n\n        mOutAllocations = new Allocation[NUM_BITMAPS];\n\n        for (int i = 0; i < NUM_BITMAPS; ++i) {\n\n            mOutAllocations[i] = Allocation.createFromBitmap(mRS, mBitmapsOut[i]);\n\n        }\n\n \n\n        /*\n\n        Create intrinsics.\n\n        RenderScript has built-in features such as blur, convolve filter etc.\n\n        These intrinsics are handy for specific operations without writing RenderScript kernel.\n\n        In the sample, it's creating blur, convolve and matrix intrinsics.\n\n         */\n\n \n\n        mScriptBlur = ScriptIntrinsicBlur.create(mRS, Element.U8_4(mRS));\n\n        mScriptConvolve = ScriptIntrinsicConvolve5x5.create(mRS,\n\n                Element.U8_4(mRS));\n\n        mScriptMatrix = ScriptIntrinsicColorMatrix.create(mRS,\n\n                Element.U8_4(mRS));\n\n    }\n\n \n\n    private void performFilter(Allocation inAllocation,\n\n                               Allocation outAllocation, Bitmap bitmapOut, float value) {\n\n        switch (mFilterMode) {\n\n            case MODE_BLUR:\n\n            /*\n\n             * Set blur kernel size\n\n             */\n\n                mScriptBlur.setRadius(value);\n\n \n\n            /*\n\n             * Invoke filter kernel\n\n             */\n\n                mScriptBlur.setInput(inAllocation);\n\n                mScriptBlur.forEach(outAllocation);\n\n                break;\n\n            case MODE_CONVOLVE: {\n\n                float f1 = value;\n\n                float f2 = 1.0f - f1;\n\n \n\n                // Emboss filter kernel\n\n                float coefficients[] = {-f1 * 2, 0, -f1, 0, 0, 0, -f2 * 2, -f2, 0,\n\n                        0, -f1, -f2, 1, f2, f1, 0, 0, f2, f2 * 2, 0, 0, 0, f1, 0,\n\n                        f1 * 2,};\n\n            /*\n\n             * Set kernel parameter\n\n             */\n\n                mScriptConvolve.setCoefficients(coefficients);\n\n \n\n            /*\n\n             * Invoke filter kernel\n\n             */\n\n                mScriptConvolve.setInput(inAllocation);\n\n                mScriptConvolve.forEach(outAllocation);\n\n                break;\n\n            }\n\n            case MODE_COLORMATRIX: {\n\n            /*\n\n             * Set HUE rotation matrix\n\n             * The matrix below performs a combined operation of,\n\n             * RGB->HSV transform * HUE rotation * HSV->RGB transform\n\n             */\n\n                float cos = (float) Math.cos((double) value);\n\n                float sin = (float) Math.sin((double) value);\n\n                Matrix3f mat = new Matrix3f();\n\n                mat.set(0, 0, (float) (.299 + .701 * cos + .168 * sin));\n\n                mat.set(1, 0, (float) (.587 - .587 * cos + .330 * sin));\n\n                mat.set(2, 0, (float) (.114 - .114 * cos - .497 * sin));\n\n                mat.set(0, 1, (float) (.299 - .299 * cos - .328 * sin));\n\n                mat.set(1, 1, (float) (.587 + .413 * cos + .035 * sin));\n\n                mat.set(2, 1, (float) (.114 - .114 * cos + .292 * sin));\n\n                mat.set(0, 2, (float) (.299 - .3 * cos + 1.25 * sin));\n\n                mat.set(1, 2, (float) (.587 - .588 * cos - 1.05 * sin));\n\n                mat.set(2, 2, (float) (.114 + .886 * cos - .203 * sin));\n\n                mScriptMatrix.setColorMatrix(mat);\n\n \n\n            /*\n\n             * Invoke filter kernel\n\n             */\n\n                mScriptMatrix.forEach(inAllocation, outAllocation);\n\n            }\n\n            break;\n\n        }\n\n \n\n        /*\n\n         * Copy to bitmap and invalidate image view\n\n         */\n\n        outAllocation.copyTo(bitmapOut);\n\n    }\n\n \n\n    /*\n\n    Convert seekBar progress parameter (0-100 in range) to parameter for each intrinsic filter.\n\n    (e.g. 1.0-25.0 in Blur filter)\n\n     */\n\n    private float getFilterParameter(int i) {\n\n        float f = 0.f;\n\n        switch (mFilterMode) {\n\n            case MODE_BLUR: {\n\n                final float max = 25.0f;\n\n                final float min = 1.f;\n\n                f = (float) ((max - min) * (i / 100.0) + min);\n\n            }\n\n            break;\n\n            case MODE_CONVOLVE: {\n\n                final float max = 2.f;\n\n                final float min = 0.f;\n\n                f = (float) ((max - min) * (i / 100.0) + min);\n\n            }\n\n            break;\n\n            case MODE_COLORMATRIX: {\n\n                final float max = (float) Math.PI;\n\n                final float min = (float) -Math.PI;\n\n                f = (float) ((max - min) * (i / 100.0) + min);\n\n            }\n\n            break;\n\n        }\n\n        return f;\n\n \n\n    }\n\n \n\n    /*\n\n     * In the AsyncTask, it invokes RenderScript intrinsics to do a filtering.\n\n     * After the filtering is done, an operation blocks at Allication.copyTo() in AsyncTask thread.\n\n     * Once all operation is finished at onPostExecute() in UI thread, it can invalidate and update ImageView UI.\n\n     */\n\n    private class RenderScriptTask extends AsyncTask<Float, Integer, Integer> {\n\n        Boolean issued = false;\n\n \n\n        protected Integer doInBackground(Float... values) {\n\n            int index = -1;\n\n            if (isCancelled() == false) {\n\n                issued = true;\n\n                index = mCurrentBitmap;\n\n \n\n                performFilter(mInAllocation, mOutAllocations[index], mBitmapsOut[index], values[0]);\n\n                mCurrentBitmap = (mCurrentBitmap + 1) % NUM_BITMAPS;\n\n            }\n\n            return index;\n\n        }\n\n \n\n        void updateView(Integer result) {\n\n            if (result != -1) {\n\n                // Request UI update\n\n                mImageView.setImageBitmap(mBitmapsOut[result]);\n\n                mImageView.invalidate();\n\n            }\n\n        }\n\n \n\n        protected void onPostExecute(Integer result) {\n\n            updateView(result);\n\n        }\n\n \n\n        protected void onCancelled(Integer result) {\n\n            if (issued) {\n\n                updateView(result);\n\n            }\n\n        }\n\n    }\n\n \n\n    /*\n\n    Invoke AsynchTask and cancel previous task.\n\n    When AsyncTasks are piled up (typically in slow device with heavy kernel),\n\n    Only the latest (and already started) task invokes RenderScript operation.\n\n     */\n\n    private void updateImage(int progress) {\n\n        float f = getFilterParameter(progress);\n\n \n\n        if (mLatestTask != null)\n\n            mLatestTask.cancel(false);\n\n        mLatestTask = new RenderScriptTask();\n\n \n\n        mLatestTask.execute(f);\n\n    }\n\n \n\n    /*\n\n    Helper to load Bitmap from resource\n\n     */\n\n    private Bitmap loadBitmap(int resource) {\n\n        final BitmapFactory.Options options = new BitmapFactory.Options();\n\n        options.inPreferredConfig = Bitmap.Config.ARGB_8888;\n\n        return BitmapFactory.decodeResource(getResources(), resource, options);\n\n    }\n\n \n\n    /*\n\n    Create thumbNail for UI. It invokes RenderScript kernel synchronously in UI-thread,\n\n    which is OK for small thumbnail (but not ideal).\n\n     */\n\n    private void createThumbnail() {\n\n        int width = 72;\n\n        int height = 96;\n\n        float scale = getResources().getDisplayMetrics().density;\n\n        int pixelsWidth = (int) (width * scale + 0.5f);\n\n        int pixelsHeight = (int) (height * scale + 0.5f);\n\n \n\n        //Temporary image\n\n        Bitmap tempBitmap = Bitmap.createScaledBitmap(mBitmapIn, pixelsWidth, pixelsHeight, false);\n\n        Allocation inAllocation = Allocation.createFromBitmap(mRS, tempBitmap);\n\n \n\n        //Create thumbnail with each RS intrinsic and set it to radio buttons\n\n        int[] modes = {MODE_BLUR, MODE_CONVOLVE, MODE_COLORMATRIX};\n\n        int[] ids = {R.id.radio0, R.id.radio1, R.id.radio2};\n\n        int[] parameter = {50, 100, 25};\n\n        for (int mode : modes) {\n\n            mFilterMode = mode;\n\n            float f = getFilterParameter(parameter[mode]);\n\n \n\n            Bitmap destBitpmap = Bitmap.createBitmap(tempBitmap.getWidth(),\n\n                    tempBitmap.getHeight(), tempBitmap.getConfig());\n\n            Allocation outAllocation = Allocation.createFromBitmap(mRS, destBitpmap);\n\n            performFilter(inAllocation, outAllocation, destBitpmap, f);\n\n \n\n            ThumbnailRadioButton button = (ThumbnailRadioButton) findViewById(ids[mode]);\n\n            button.setThumbnail(destBitpmap);\n\n        }\n\n    }\n\n}\n  ","ThumbnailRadioButton.java":"\n    \n\n/*\n\n * Copyright (C) 2014 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.renderscriptintrinsic;\n\n \n\nimport android.graphics.Bitmap;\n\nimport android.graphics.Color;\n\nimport android.graphics.Paint;\n\nimport android.graphics.drawable.BitmapDrawable;\n\nimport android.graphics.drawable.Drawable;\n\nimport android.graphics.drawable.LayerDrawable;\n\nimport android.graphics.drawable.ShapeDrawable;\n\nimport android.graphics.drawable.StateListDrawable;\n\nimport android.graphics.drawable.shapes.RectShape;\n\nimport android.os.Build;\n\nimport android.view.Gravity;\n\nimport android.widget.RadioButton;\n\nimport android.content.Context;\n\nimport android.util.AttributeSet;\n\n \n\n/*\n\n A button with Thumbnail which extends Radio Button.\n\n The widget override a background drawable of Radio Button with a StateList Drawable.\n\n Each state has a LayerDrawable with a Thumbnail image and a Focus rectangle.\n\n It's using original Radio Buttons text as a label, because LayerDrawable showed some issues with Canvas.drawText().\n\n */\n\npublic class ThumbnailRadioButton extends RadioButton {\n\n    public ThumbnailRadioButton(Context context) {\n\n        super(context);\n\n        init();\n\n    }\n\n \n\n    public ThumbnailRadioButton(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n        init();\n\n    }\n\n \n\n    public ThumbnailRadioButton(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n        init();\n\n    }\n\n \n\n    private void init() {\n\n        setButtonDrawable(android.R.color.transparent);\n\n    }\n\n \n\n    public void setThumbnail(Bitmap bitmap) {\n\n        //Bitmap drawable\n\n        BitmapDrawable bmp = new BitmapDrawable(getResources(), bitmap);\n\n        bmp.setGravity(Gravity.CENTER);\n\n \n\n        int strokeWidth = 24;\n\n        //Checked state\n\n        ShapeDrawable rectChecked = new ShapeDrawable(new RectShape());\n\n        rectChecked.getPaint().setColor(0xFFFFFFFF);\n\n        rectChecked.getPaint().setStyle(Paint.Style.STROKE);\n\n        rectChecked.getPaint().setStrokeWidth(strokeWidth);\n\n        rectChecked.setIntrinsicWidth(bitmap.getWidth() + strokeWidth);\n\n        rectChecked.setIntrinsicHeight(bitmap.getHeight() + strokeWidth);\n\n        Drawable drawableArray[] = new Drawable[]{bmp, rectChecked};\n\n        LayerDrawable layerChecked = new LayerDrawable(drawableArray);\n\n \n\n        //Unchecked state\n\n        ShapeDrawable rectUnchecked = new ShapeDrawable(new RectShape());\n\n        rectUnchecked.getPaint().setColor(0x0);\n\n        rectUnchecked.getPaint().setStyle(Paint.Style.STROKE);\n\n        rectUnchecked.getPaint().setStrokeWidth(strokeWidth);\n\n        rectUnchecked.setIntrinsicWidth(bitmap.getWidth() + strokeWidth);\n\n        rectUnchecked.setIntrinsicHeight(bitmap.getHeight() + strokeWidth);\n\n        Drawable drawableArray2[] = new Drawable[]{bmp, rectUnchecked};\n\n        LayerDrawable layerUnchecked = new LayerDrawable(drawableArray2);\n\n \n\n        //Statelist drawable\n\n        StateListDrawable states = new StateListDrawable();\n\n        states.addState(new int[]{android.R.attr.state_checked},\n\n                layerChecked);\n\n        states.addState(new int[]{},\n\n                layerUnchecked);\n\n \n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN)\n\n            setBackground(states);\n\n        else\n\n            setBackgroundDrawable(states);\n\n \n\n        //Offset text to center/bottom of the checkbox\n\n        Paint paint = new Paint();\n\n        paint.setAntiAlias(true);\n\n        paint.setTextSize(getTextSize());\n\n        paint.setTypeface(getTypeface());\n\n        float w = paint.measureText(getText(), 0, getText().length());\n\n        setPadding(getPaddingLeft() + (int) ((bitmap.getWidth() - w) / 2.f + .5f),\n\n                getPaddingTop() + (int) (bitmap.getHeight() * 0.70),\n\n                getPaddingRight(),\n\n                getPaddingBottom());\n\n \n\n        setShadowLayer(5, 0, 0, Color.BLACK);\n\n    }\n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?><!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.renderscriptintrinsic\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk\n\n        android:minSdkVersion=\"8\"\n\n        android:targetSdkVersion=\"19\" />\n\n \n\n    <application\n\n        android:allowBackup=\"true\"\n\n        android:label=\"RenderScriptIntrinsic\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:theme=\"@style/AppTheme\">\n\n \n\n        <activity\n\n            android:name=\".MainActivity\"\n\n            android:label=\"RenderScriptIntrinsic\"\n\n            android:theme=\"@style/FullscreenTheme\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n \n\n</manifest>\n  "}},"Security":{"BasicAndroidKeyStore":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicAndroidKeyStore/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com/samples/BasicAndroidKeyStore/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicAndroidKeyStore/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicAndroidKeyStore/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicAndroidKeyStore/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n        android:orientation=\"vertical\"\n\n        android:layout_width=\"fill_parent\"\n\n        android:layout_height=\"fill_parent\"\n\n        android:id=\"@+id/sample_main_layout\">\n\n    <TextView android:id=\"@+id/sample_output\"\n\n              style=\"@style/Widget.SampleMessage\"\n\n              android:layout_weight=\"1\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\"\n\n              android:text=\"@string/intro_message\"\n\n              android:padding=\"16dp\" />\n\n    <View\n\n            android:layout_width=\"fill_parent\"\n\n            android:layout_height=\"1dp\"\n\n            android:background=\"@android:color/darker_gray\"/>\n\n    <fragment\n\n            android:name=\"com.example.android.common.logger.LogFragment\"\n\n            android:id=\"@+id/log_fragment\"\n\n            android:layout_weight=\"1\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"match_parent\" />\n\n</LinearLayout>\n  "},"layout-sw600dp":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n        android:orientation=\"vertical\"\n\n        android:layout_width=\"fill_parent\"\n\n        android:layout_height=\"fill_parent\"\n\n        android:id=\"@+id/sample_main_layout\">\n\n    <TextView android:id=\"@+id/sample_output\"\n\n              style=\"@style/Widget.SampleMessage\"\n\n              android:background=\"@android:color/white\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"wrap_content\"\n\n              android:text=\"@string/intro_message\"\n\n              android:padding=\"16dp\"\n\n              android:layout_margin=\"16dp\"/>\n\n    <fragment\n\n            android:name=\"com.example.android.common.logger.LogFragment\"\n\n            android:id=\"@+id/log_fragment\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"match_parent\"\n\n            android:layout_margin=\"16dp\" />\n\n</LinearLayout>\n  "},"layout-sw600dp-land":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n        android:orientation=\"horizontal\"\n\n        android:layout_width=\"fill_parent\"\n\n        android:layout_height=\"fill_parent\"\n\n        android:id=\"@+id/sample_main_layout\">\n\n    <TextView android:id=\"@+id/sample_output\"\n\n              style=\"@style/Widget.SampleMessage\"\n\n              android:background=\"@android:color/white\"\n\n              android:layout_weight=\"1\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\"\n\n              android:text=\"@string/intro_message\"\n\n              android:layout_margin=\"16dp\" />\n\n    <fragment\n\n            android:name=\"com.example.android.common.logger.LogFragment\"\n\n            android:id=\"@+id/log_fragment\"\n\n            android:layout_weight=\"1\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"match_parent\"\n\n            android:layout_margin=\"16dp\" />\n\n</LinearLayout>\n  "},"menu":{"main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:id=\"@+id/btn_create_keys\"\n\n          android:showAsAction=\"always\"\n\n          android:title=\"@string/str_create_keys\" />\n\n \n\n    <item android:id=\"@+id/btn_sign_data\"\n\n          android:showAsAction=\"always\"\n\n          android:title=\"@string/str_sign_data\" />\n\n \n\n    <item android:id=\"@+id/btn_verify_data\"\n\n          android:showAsAction=\"always\"\n\n          android:title=\"@string/str_verify_data\" />\n\n \n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">BasicAndroidKeyStore</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n                Welcome to the <b>Basic Android Key Store</b> sample!\\n\\n\n\n                This sample demonstrates how to use the Android Key Store to safely create and store\n\n                encryption keys that only your application can access.  You can also sign data\n\n                using those keys.\\n\\n\n\n                To create a new KeyPair, click \\\"Create\\\".\\n\\n\n\n                To sign some data using a KeyPair, click \\\"Sign\\\".\\n\\n\n\n                To verify the data using the signature provided, click \\\"Verify\\\".\\n\\n            \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n<resources>\n\n    <string name=\"str_create_keys\">Create</string>\n\n    <string name=\"str_sign_data\">Sign</string>\n\n    <string name=\"str_verify_data\">Verify</string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Base\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:padding\">@dimen/margin_medium</item>\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n        <item name=\"android:layout_margin\">16dp</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n \n\n    <style name=\"Widget.SampleOutput\">\n\n        <item name=\"android:padding\">@dimen/margin_medium</item>\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Log\" parent=\"Widget.SampleOutput\">\n\n        <item name=\"android:typeface\">monospace</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.basicandroidkeystore":{"BasicAndroidKeyStoreFragment.java":"\n    \n\n/*\n\n* Copyright (C) 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*      http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\npackage com.example.android.basicandroidkeystore;\n\n \n\nimport android.content.Context;\n\nimport android.os.Bundle;\n\nimport android.security.KeyPairGeneratorSpec;\n\nimport android.support.v4.app.Fragment;\n\nimport android.util.Base64;\n\nimport android.view.MenuItem;\n\n \n\nimport com.example.android.common.logger.Log;\n\n \n\nimport java.io.IOException;\n\nimport java.math.BigInteger;\n\nimport java.security.InvalidAlgorithmParameterException;\n\nimport java.security.InvalidKeyException;\n\nimport java.security.KeyPair;\n\nimport java.security.KeyPairGenerator;\n\nimport java.security.KeyStore;\n\nimport java.security.KeyStoreException;\n\nimport java.security.NoSuchAlgorithmException;\n\nimport java.security.NoSuchProviderException;\n\nimport java.security.Signature;\n\nimport java.security.SignatureException;\n\nimport java.security.UnrecoverableEntryException;\n\nimport java.security.cert.CertificateException;\n\nimport java.util.Calendar;\n\nimport java.util.GregorianCalendar;\n\n \n\nimport javax.security.auth.x500.X500Principal;\n\n \n\npublic class BasicAndroidKeyStoreFragment extends Fragment {\n\n \n\n    public static final String TAG = \"BasicAndroidKeyStoreFragment\";\n\n \n\n \n\n    public static final String SAMPLE_ALIAS = \"myKey\";\n\n \n\n    // Some sample data to sign, and later verify using the generated signature.\n\n    public static final String SAMPLE_INPUT=\"Hello, Android!\";\n\n \n\n    // Just a handy place to store the signature in between signing and verifying.\n\n    public String mSignatureStr = null;\n\n \n\n    // You can store multiple key pairs in the Key Store.  The string used to refer to the Key you\n\n    // want to store, or later pull, is referred to as an \"alias\" in this case, because calling it\n\n    // a key, when you use it to retrieve a key, would just be irritating.\n\n    private String mAlias = null;\n\n \n\n \n\n    @Override\n\n    public void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setHasOptionsMenu(true);\n\n        setAlias(SAMPLE_ALIAS);\n\n    }\n\n \n\n    @Override\n\n    public void onActivityCreated(Bundle savedInstanceState) {\n\n        super.onActivityCreated(savedInstanceState);\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch (item.getItemId()) {\n\n            case R.id.btn_create_keys:\n\n                try {\n\n                    createKeys(getActivity());\n\n                    Log.d(TAG, \"Keys created\");\n\n                    return true;\n\n                } catch (NoSuchAlgorithmException e) {\n\n                    Log.w(TAG, \"RSA not supported\", e);\n\n                } catch (InvalidAlgorithmParameterException e) {\n\n                    Log.w(TAG, \"No such provider: AndroidKeyStore\");\n\n                } catch (NoSuchProviderException e) {\n\n                    Log.w(TAG, \"Invalid Algorithm Parameter Exception\", e);\n\n                }\n\n                return true;\n\n            case R.id.btn_sign_data:\n\n                try {\n\n                    mSignatureStr = signData(SAMPLE_INPUT);\n\n                } catch (KeyStoreException e) {\n\n                    Log.w(TAG, \"KeyStore not Initialized\", e);\n\n                } catch (UnrecoverableEntryException e) {\n\n                    Log.w(TAG, \"KeyPair not recovered\", e);\n\n                } catch (NoSuchAlgorithmException e) {\n\n                    Log.w(TAG, \"RSA not supported\", e);\n\n                } catch (InvalidKeyException e) {\n\n                    Log.w(TAG, \"Invalid Key\", e);\n\n                } catch (SignatureException e) {\n\n                    Log.w(TAG, \"Invalid Signature\", e);\n\n                } catch (IOException e) {\n\n                    Log.w(TAG, \"IO Exception\", e);\n\n                } catch (CertificateException e) {\n\n                    Log.w(TAG, \"Error occurred while loading certificates\", e);\n\n                }\n\n                Log.d(TAG, \"Signature: \" + mSignatureStr);\n\n                return true;\n\n \n\n            case R.id.btn_verify_data:\n\n                boolean verified = false;\n\n                try {\n\n                    if (mSignatureStr != null) {\n\n                        verified = verifyData(SAMPLE_INPUT, mSignatureStr);\n\n                    }\n\n                } catch (KeyStoreException e) {\n\n                    Log.w(TAG, \"KeyStore not Initialized\", e);\n\n                } catch (CertificateException e) {\n\n                    Log.w(TAG, \"Error occurred while loading certificates\", e);\n\n                } catch (NoSuchAlgorithmException e) {\n\n                    Log.w(TAG, \"RSA not supported\", e);\n\n                } catch (IOException e) {\n\n                    Log.w(TAG, \"IO Exception\", e);\n\n                } catch (UnrecoverableEntryException e) {\n\n                    Log.w(TAG, \"KeyPair not recovered\", e);\n\n                } catch (InvalidKeyException e) {\n\n                    Log.w(TAG, \"Invalid Key\", e);\n\n                } catch (SignatureException e) {\n\n                    Log.w(TAG, \"Invalid Signature\", e);\n\n                }\n\n                if (verified) {\n\n                    Log.d(TAG, \"Data Signature Verified\");\n\n                } else {\n\n                    Log.d(TAG, \"Data not verified.\");\n\n                }\n\n                return true;\n\n        }\n\n        return false;\n\n    }\n\n \n\n    /**\n\n     * Creates a public and private key and stores it using the Android Key Store, so that only\n\n     * this application will be able to access the keys.\n\n     */\n\n    public void createKeys(Context context) throws NoSuchProviderException,\n\n            NoSuchAlgorithmException, InvalidAlgorithmParameterException {\n\n        // Create a start and end time, for the validity range of the key pair that's about to be\n\n        // generated.\n\n        Calendar start = new GregorianCalendar();\n\n        Calendar end = new GregorianCalendar();\n\n        end.add(1, Calendar.YEAR);\n\n \n\n \n\n        // The KeyPairGeneratorSpec object is how parameters for your key pair are passed\n\n        // to the KeyPairGenerator.  For a fun home game, count how many classes in this sample\n\n        // start with the phrase \"KeyPair\".\n\n        KeyPairGeneratorSpec spec =\n\n                new KeyPairGeneratorSpec.Builder(context)\n\n                        // You'll use the alias later to retrieve the key.  It's a key for the key!\n\n                        .setAlias(mAlias)\n\n                                // The subject used for the self-signed certificate of the generated pair\n\n                        .setSubject(new X500Principal(\"CN=\" + mAlias))\n\n                                // The serial number used for the self-signed certificate of the\n\n                                // generated pair.\n\n                        .setSerialNumber(BigInteger.valueOf(1337))\n\n                                // Date range of validity for the generated pair.\n\n                        .setStartDate(start.getTime())\n\n                        .setEndDate(end.getTime())\n\n                        .build();\n\n \n\n        // Initialize a KeyPair generator using the the intended algorithm (in this example, RSA\n\n        // and the KeyStore.  This example uses the AndroidKeyStore.\n\n        KeyPairGenerator kpGenerator = KeyPairGenerator\n\n                .getInstance(SecurityConstants.TYPE_RSA,\n\n                        SecurityConstants.KEYSTORE_PROVIDER_ANDROID_KEYSTORE);\n\n        kpGenerator.initialize(spec);\n\n        KeyPair kp = kpGenerator.generateKeyPair();\n\n        Log.d(TAG, \"Public Key is: \" + kp.getPublic().toString());\n\n    }\n\n \n\n    /**\n\n     * Signs the data using the key pair stored in the Android Key Store.  This signature can be\n\n     * used with the data later to verify it was signed by this application.\n\n     * @return A string encoding of the data signature generated\n\n     */\n\n    public String signData(String inputStr) throws KeyStoreException,\n\n            UnrecoverableEntryException, NoSuchAlgorithmException, InvalidKeyException,\n\n            SignatureException, IOException, CertificateException {\n\n        byte[] data = inputStr.getBytes();\n\n \n\n        KeyStore ks = KeyStore.getInstance(SecurityConstants.KEYSTORE_PROVIDER_ANDROID_KEYSTORE);\n\n \n\n        // Weird artifact of Java API.  If you don't have an InputStream to load, you still need\n\n        // to call \"load\", or it'll crash.\n\n        ks.load(null);\n\n \n\n        // Load the key pair from the Android Key Store\n\n        KeyStore.Entry entry = ks.getEntry(mAlias, null);\n\n \n\n        /* If the entry is null, keys were never stored under this alias.\n\n         * Debug steps in this situation would be:\n\n         * -Check the list of aliases by iterating over Keystore.aliases(), be sure the alias\n\n         *   exists.\n\n         * -If that's empty, verify they were both stored and pulled from the same keystore\n\n         *   \"AndroidKeyStore\"\n\n         */\n\n        if (entry == null) {\n\n            Log.w(TAG, \"No key found under alias: \" + mAlias);\n\n            Log.w(TAG, \"Exiting signData()...\");\n\n            return null;\n\n        }\n\n \n\n        /* If entry is not a KeyStore.PrivateKeyEntry, it might have gotten stored in a previous\n\n         * iteration of your application that was using some other mechanism, or been overwritten\n\n         * by something else using the same keystore with the same alias.\n\n         * You can determine the type using entry.getClass() and debug from there.\n\n         */\n\n        if (!(entry instanceof KeyStore.PrivateKeyEntry)) {\n\n            Log.w(TAG, \"Not an instance of a PrivateKeyEntry\");\n\n            Log.w(TAG, \"Exiting signData()...\");\n\n            return null;\n\n        }\n\n \n\n        // This class doesn't actually represent the signature,\n\n        // just the engine for creating/verifying signatures, using\n\n        // the specified algorithm.\n\n        Signature s = Signature.getInstance(SecurityConstants.SIGNATURE_SHA256withRSA);\n\n \n\n        // Initialize Signature using specified private key\n\n        s.initSign(((KeyStore.PrivateKeyEntry) entry).getPrivateKey());\n\n \n\n        // Sign the data, store the result as a Base64 encoded String.\n\n        s.update(data);\n\n        byte[] signature = s.sign();\n\n        String result = Base64.encodeToString(signature, Base64.DEFAULT);\n\n \n\n        return result;\n\n    }\n\n \n\n    /**\n\n     * Given some data and a signature, uses the key pair stored in the Android Key Store to verify\n\n     * that the data was signed by this application, using that key pair.\n\n     * @param input The data to be verified.\n\n     * @param signatureStr The signature provided for the data.\n\n     * @return A boolean value telling you whether the signature is valid or not.\n\n     */\n\n    public boolean verifyData(String input, String signatureStr) throws KeyStoreException,\n\n            CertificateException, NoSuchAlgorithmException, IOException,\n\n            UnrecoverableEntryException, InvalidKeyException, SignatureException {\n\n        byte[] data = input.getBytes();\n\n        byte[] signature;\n\n \n\n        // Make sure the signature string exists.  If not, bail out, nothing to do.\n\n \n\n        if (signatureStr == null) {\n\n            Log.w(TAG, \"Invalid signature.\");\n\n            Log.w(TAG, \"Exiting verifyData()...\");\n\n            return false;\n\n        }\n\n \n\n        try {\n\n            // The signature is going to be examined as a byte array,\n\n            // not as a base64 encoded string.\n\n            signature = Base64.decode(signatureStr, Base64.DEFAULT);\n\n        } catch (IllegalArgumentException e) {\n\n            // signatureStr wasn't null, but might not have been encoded properly.\n\n            // It's not a valid Base64 string.\n\n            return false;\n\n        }\n\n \n\n        KeyStore ks = KeyStore.getInstance(\"AndroidKeyStore\");\n\n \n\n        // Weird artifact of Java API.  If you don't have an InputStream to load, you still need\n\n        // to call \"load\", or it'll crash.\n\n        ks.load(null);\n\n \n\n        // Load the key pair from the Android Key Store\n\n        KeyStore.Entry entry = ks.getEntry(mAlias, null);\n\n \n\n        if (entry == null) {\n\n            Log.w(TAG, \"No key found under alias: \" + mAlias);\n\n            Log.w(TAG, \"Exiting verifyData()...\");\n\n            return false;\n\n        }\n\n \n\n        if (!(entry instanceof KeyStore.PrivateKeyEntry)) {\n\n            Log.w(TAG, \"Not an instance of a PrivateKeyEntry\");\n\n            return false;\n\n        }\n\n \n\n        // This class doesn't actually represent the signature,\n\n        // just the engine for creating/verifying signatures, using\n\n        // the specified algorithm.\n\n        Signature s = Signature.getInstance(SecurityConstants.SIGNATURE_SHA256withRSA);\n\n \n\n        // Verify the data.\n\n        s.initVerify(((KeyStore.PrivateKeyEntry) entry).getCertificate());\n\n        s.update(data);\n\n        boolean valid = s.verify(signature);\n\n        return valid;\n\n    }\n\n \n\n    public void setAlias(String alias) {\n\n        mAlias = alias;\n\n    }\n\n}\n  ","MainActivity.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.basicandroidkeystore;\n\n \n\nimport android.graphics.Color;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentTransaction;\n\nimport android.view.Menu;\n\n \n\nimport com.example.android.common.activities.SampleActivityBase;\n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogFragment;\n\nimport com.example.android.common.logger.LogWrapper;\n\nimport com.example.android.common.logger.MessageOnlyLogFilter;\n\n \n\n/**\n\n * A simple launcher activity containing a summary sample description\n\n * and a few action bar buttons.\n\n */\n\npublic class MainActivity extends SampleActivityBase {\n\n \n\n    public static final String TAG = \"MainActivity\";\n\n \n\n    public static final String FRAGTAG = \"BasicAndroidKeyStoreFragment\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_main);\n\n \n\n        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n\n        BasicAndroidKeyStoreFragment fragment = new BasicAndroidKeyStoreFragment();\n\n        transaction.add(fragment, FRAGTAG);\n\n        transaction.commit();\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        getMenuInflater().inflate(R.menu.main, menu);\n\n        return true;\n\n    }\n\n \n\n    /** Create a chain of targets that will receive log data */\n\n    @Override\n\n    public void initializeLogging() {\n\n        // Wraps Android's native log framework.\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        Log.setLogNode(logWrapper);\n\n \n\n        // Filter strips out everything except the message text.\n\n        MessageOnlyLogFilter msgFilter = new MessageOnlyLogFilter();\n\n        logWrapper.setNext(msgFilter);\n\n \n\n        // On screen logging via a fragment with a TextView.\n\n        LogFragment logFragment = (LogFragment) getSupportFragmentManager()\n\n                .findFragmentById(R.id.log_fragment);\n\n        msgFilter.setNext(logFragment.getLogView());\n\n        logFragment.getLogView().setTextAppearance(this, R.style.Log);\n\n        logFragment.getLogView().setBackgroundColor(Color.WHITE);\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  ","SecurityConstants.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.basicandroidkeystore;\n\n \n\n/**\n\n * Helper class, contains several constants used when encrypting/decrypting data on Android.\n\n * This class should not be considered a complete list of the algorithms, keystore types,\n\n * or signature types within the Android Platform, only the more common ones.\n\n */\n\npublic class SecurityConstants {\n\n    public static final String KEYSTORE_PROVIDER_ANDROID_KEYSTORE = \"AndroidKeyStore\";\n\n \n\n    public static final String TYPE_RSA = \"RSA\";\n\n    public static final String TYPE_DSA = \"DSA\";\n\n    public static final String TYPE_BKS = \"BKS\";\n\n \n\n    public static final String SIGNATURE_SHA256withRSA = \"SHA256withRSA\";\n\n    public static final String SIGNATURE_SHA512withRSA = \"SHA512withRSA\";\n\n}\n  "},"com.example.android.common":{"activities":{"SampleActivityBase.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\npackage com.example.android.common.activities;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentActivity;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogWrapper;\n\n \n\n/**\n\n * Base launcher activity, to handle most of the common plumbing for samples.\n\n */\n\npublic class SampleActivityBase extends FragmentActivity {\n\n \n\n    public static final String TAG = \"SampleActivityBase\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n    }\n\n \n\n    @Override\n\n    protected  void onStart() {\n\n        super.onStart();\n\n        initializeLogging();\n\n    }\n\n \n\n    /** Set up targets to receive log data */\n\n    public void initializeLogging() {\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        // Wraps Android's native log framework\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        Log.setLogNode(logWrapper);\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "},"logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "}}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.basicandroidkeystore\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk android:minSdkVersion=\"18\" android:targetSdkVersion=\"19\" />\n\n \n\n    <application android:allowBackup=\"true\"\n\n        android:label=\"@string/app_name\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:theme=\"@style/AppTheme\">\n\n \n\n        <activity android:name=\".MainActivity\"\n\n                  android:label=\"@string/app_name\"\n\n                  android:uiOptions=\"splitActionBarWhenNarrow\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n</manifest>\n  "}},"Sensors":{"BatchStepSensor":{"res":{"drawable":{"card_action_bg.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n \n\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:drawable=\"@color/card_action\" android:state_pressed=\"true\" />\n\n    <item android:drawable=\"@color/card_action_focused\" android:state_focused=\"true\" />\n\n    <item android:drawable=\"@color/card_action_item_bg\" />\n\n</selector>\n  ","card_action_bg_negative.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n \n\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:drawable=\"@color/card_action_negative\" android:state_pressed=\"true\" />\n\n    <item android:drawable=\"@color/card_action_negative_focused\" android:state_focused=\"true\" />\n\n    <item android:drawable=\"@color/card_action_item_bg\" />\n\n</selector>\n  ","card_action_bg_positive.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n \n\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:drawable=\"@color/card_action_positive\" android:state_pressed=\"true\" />\n\n    <item android:drawable=\"@color/card_action_positive_focused\" android:state_focused=\"true\" />\n\n    <item android:drawable=\"@color/card_action_item_bg\" />\n\n</selector>\n  ","card_action_icon_negative.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n \n\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:drawable=\"@drawable/ic_cardaction_negative_pressed\" android:state_pressed=\"true\" />\n\n    <item android:drawable=\"@drawable/ic_cardaction_negative\" />\n\n</selector>\n  ","card_action_icon_neutral.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n \n\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:drawable=\"@drawable/ic_cardaction_neutral_pressed\" android:state_pressed=\"true\" />\n\n    <item android:drawable=\"@drawable/ic_cardaction_neutral\" />\n\n</selector>\n  ","card_action_icon_positive.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n \n\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:drawable=\"@drawable/ic_cardaction_positive_pressed\" android:state_pressed=\"true\" />\n\n    <item android:drawable=\"@drawable/ic_cardaction_positive\" />\n\n</selector>\n  ","card_action_text.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n \n\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:state_pressed=\"true\" android:color=\"@color/card_action_inverted\" />\n\n    <item android:state_focused=\"true\" android:color=\"@color/card_action_inverted\" />\n\n    <item android:color=\"@color/card_action\" />\n\n</selector>\n  ","card_action_text_negative.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n \n\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:state_pressed=\"true\" android:color=\"@color/card_action_inverted\"/>\n\n    <item android:state_focused=\"true\" android:color=\"@color/card_action_inverted\"/>\n\n    <item android:color=\"@color/card_action_negative\"/>\n\n</selector>\n  ","card_action_text_positive.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n \n\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:state_pressed=\"true\" android:color=\"@color/card_action_inverted\"/>\n\n    <item android:state_focused=\"true\" android:color=\"@color/card_action_inverted\"/>\n\n    <item android:color=\"@color/card_action_positive\"/>\n\n</selector>\n  ","card_overlay_focused.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n \n\n<shape xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n       android:shape=\"rectangle\">\n\n    <stroke\n\n        android:width=\"5dp\"\n\n        android:color=\"#aa99CC00\"/>\n\n</shape>\n  ","card_separator.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n \n\n<shape xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:shape=\"line\">\n\n    <stroke android:color=\"#CCC\" />\n\n    <size android:height=\"1dp\" />\n\n</shape>\n  "},"drawable-hdpi":{"ic_action_cancel.png":"http://developer.android.com/samples/BatchStepSensor/res/drawable-hdpi/ic_action_cancel.png","ic_launcher.png":"http://developer.android.com/samples/BatchStepSensor/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com/samples/BatchStepSensor/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_action_cancel.png":"http://developer.android.com/samples/BatchStepSensor/res/drawable-mdpi/ic_action_cancel.png","ic_launcher.png":"http://developer.android.com/samples/BatchStepSensor/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"card_bg.9.png":"http://developer.android.com/samples/BatchStepSensor/res/drawable-xhdpi/card_bg.9.png","ic_cardaction_negative.png":"http://developer.android.com/samples/BatchStepSensor/res/drawable-xhdpi/ic_cardaction_negative.png","ic_cardaction_negative_pressed.png":"http://developer.android.com/samples/BatchStepSensor/res/drawable-xhdpi/ic_cardaction_negative_pressed.png","ic_cardaction_neutral.png":"http://developer.android.com/samples/BatchStepSensor/res/drawable-xhdpi/ic_cardaction_neutral.png","ic_cardaction_neutral_pressed.png":"http://developer.android.com/samples/BatchStepSensor/res/drawable-xhdpi/ic_cardaction_neutral_pressed.png","ic_cardaction_positive.png":"http://developer.android.com/samples/BatchStepSensor/res/drawable-xhdpi/ic_cardaction_positive.png","ic_cardaction_positive_pressed.png":"http://developer.android.com/samples/BatchStepSensor/res/drawable-xhdpi/ic_cardaction_positive_pressed.png","ic_launcher.png":"http://developer.android.com/samples/BatchStepSensor/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_action_cancel.png":"http://developer.android.com/samples/BatchStepSensor/res/drawable-xxhdpi/ic_action_cancel.png","ic_launcher.png":"http://developer.android.com/samples/BatchStepSensor/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<fragment\n\n    android:id=\"@+id/fragment_cardstream\"\n\n    android:name=\"com.example.android.batchstepsensor.cardstream.CardStreamFragment\"\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:tools=\"http://schemas.android.com/tools\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    tools:context=\".MainActivity\"\n\n    tools:layout=\"@layout/cardstream\"/>\n  ","card.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<com.example.android.batchstepsensor.cardstream.CardLayout\n\n    android:id=\"@+id/card_layout\"\n\n    style=\"@style/Card\"\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"wrap_content\">\n\n \n\n    <LinearLayout\n\n        android:id=\"@+id/card_actionarea\"\n\n        android:layout_width=\"fill_parent\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:layout_below=\"@+id/card_contentarea\"\n\n        android:background=\"@color/card_action_bg\"\n\n        android:orientation=\"vertical\"\n\n        android:paddingBottom=\"@dimen/card_action_margin\"\n\n        android:visibility=\"gone\"\n\n        >\n\n        <include layout=\"@layout/card_button_seperator\"/>\n\n    </LinearLayout>\n\n \n\n \n\n    <LinearLayout\n\n        android:id=\"@id/card_contentarea\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:orientation=\"vertical\"\n\n        style=\"@style/CardContentArea\">\n\n \n\n        <TextView\n\n            android:id=\"@+id/card_title\"\n\n            style=\"@style/CardTitle\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"/>\n\n \n\n        <TextView\n\n            android:id=\"@+id/card_content\"\n\n            style=\"@style/CardContent\"\n\n            android:layout_width=\"wrap_content\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_below=\"@id/card_title\"/>\n\n \n\n    </LinearLayout>\n\n \n\n    <View\n\n        android:id=\"@+id/card_overlay\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"match_parent\"\n\n        android:layout_alignBottom=\"@id/card_contentarea\"\n\n        android:layout_alignLeft=\"@id/card_contentarea\"\n\n        android:layout_alignRight=\"@id/card_contentarea\"\n\n        android:layout_alignTop=\"@id/card_contentarea\"\n\n        android:layout_alignWithParentIfMissing=\"false\"\n\n        android:visibility=\"invisible\"/>\n\n \n\n</com.example.android.batchstepsensor.cardstream.CardLayout>\n  ","card_button_negative.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<com.example.android.batchstepsensor.cardstream.CardActionButton xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:id=\"@+id/card_button\"\n\n    style=\"@style/CardActionNegative\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"wrap_content\"\n\n    android:gravity=\"center_vertical\" />\n  ","card_button_neutral.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<com.example.android.batchstepsensor.cardstream.CardActionButton xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:id=\"@+id/card_button\"\n\n    style=\"@style/CardActionNeutral\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"wrap_content\"\n\n    android:gravity=\"center_vertical\" />\n  ","card_button_positive.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<com.example.android.batchstepsensor.cardstream.CardActionButton xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:id=\"@+id/card_button\"\n\n    style=\"@style/CardActionPositive\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"wrap_content\"\n\n    android:gravity=\"center_vertical\" />\n  ","card_button_seperator.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n \n\n<merge xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n \n\n    <ImageView\n\n        android:id=\"@+id/card_separator\"\n\n        android:layout_width=\"fill_parent\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:src=\"@drawable/card_separator\" />\n\n \n\n</merge>\n  ","card_progress.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\"\n\n    style=\"@style/CardProgressLayout\">\n\n \n\n    <TextView\n\n        android:id=\"@+id/card_progress_text\"\n\n        style=\"@style/CardProgressText\"\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        />\n\n \n\n    <ProgressBar\n\n        android:id=\"@+id/card_progress\"\n\n        style=\"@android:style/Widget.Holo.ProgressBar.Horizontal\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\"\n\n        />\n\n \n\n</LinearLayout>\n  ","cardstream.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<ScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:fillViewport=\"true\">\n\n \n\n    <com.example.android.batchstepsensor.cardstream.CardStreamLinearLayout\n\n        style=\"@style/CardStream\"\n\n        android:id=\"@+id/card_stream\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"match_parent\"/>\n\n \n\n</ScrollView>\n  "},"values":{"attrs.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<resources>\n\n \n\n    <declare-styleable name=\"CardStream\">\n\n        <attr name=\"animationDuration\" format=\"enum\">\n\n            <enum name=\"slow\" value=\"1001\"/>\n\n            <enum name=\"normal\" value=\"1002\"/>\n\n            <enum name=\"fast\" value=\"1003\"/>\n\n        </attr>\n\n        <attr name=\"animators\" format=\"string\"/>\n\n    </declare-styleable>\n\n \n\n \n\n</resources>\n  ","base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">BatchStepSensor</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            This sample demonstrates the use of the two step sensors (step detector and counter) and\n\n            sensor batching.\\n\\n It shows how to register a SensorEventListener with and without\n\n            batching and shows how these events are received.\\n\\nThe Step Detector sensor fires an\n\n            event when a step is detected, while the step counter returns the total number of\n\n            steps since a listener was first registered for this sensor.\n\n            Both sensors only count steps while a listener is registered. This sample only covers the\n\n            basic case, where a listener is only registered while the app is running. Likewise,\n\n            batched sensors can be used in the background (when the CPU is suspended), which\n\n            requires manually flushing the sensor event queue before it overflows, which is not\n\n            covered in this sample.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","color.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<resources>\n\n \n\n    <color name=\"card_action_inverted\">@android:color/white</color>\n\n \n\n    <color name=\"card_content_textcolor\">#444</color>\n\n \n\n    <color name=\"card_action_bg\">#DDD</color>\n\n    <color name=\"card_action_item_bg\">#F4F4F4</color>\n\n \n\n    <!-- Neutral Actions -->\n\n    <color name=\"card_action_focused\">#FFE3F4FC</color>\n\n    <color name=\"card_action\">#FF47B4EA</color>\n\n \n\n    <!-- Negative Actions -->\n\n    <color name=\"card_action_negative_focused\">#FFFBCBCA</color>\n\n    <color name=\"card_action_negative\">#FFF64940</color>\n\n \n\n    <!-- Positive Actions -->\n\n    <color name=\"card_action_positive_focused\">#FFE4F0AF</color>\n\n    <color name=\"card_action_positive\">#FFA0CC00</color>\n\n</resources>\n  ","dimens.xml":"\n    \n\n<resources>\n\n \n\n    <dimen name=\"card_content_text\">14sp</dimen>\n\n    <dimen name=\"card_content_title\">24sp</dimen>\n\n \n\n    <dimen name=\"card_padding\">15dp</dimen>\n\n    <dimen name=\"card_margin\">10dp</dimen>\n\n \n\n    <dimen name=\"card_action_margin\">3dp</dimen>\n\n    <dimen name=\"card_action_padding\">8dp</dimen>\n\n \n\n    <dimen name=\"card_stream_bottom_padding\">90dp</dimen>\n\n \n\n</resources>\n  ","ids.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<resources>\n\n    <item name=\"card_layout\" type=\"id\"/>\n\n    <item name=\"card_actionarea\" type=\"id\"/>\n\n    <item name=\"card_contentarea\" type=\"id\"/>\n\n    <item name=\"card_title\" type=\"id\"/>\n\n    <item name=\"card_content\" type=\"id\"/>\n\n    <item name=\"card_overlay\" type=\"id\"/>\n\n</resources>\n  ","strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n<resources>\n\n    <string name=\"intro_title\">Introduction</string>\n\n \n\n    <string name=\"batching_queue_title\">Background sensor batching</string>\n\n    <string name=\"batching_queue_description\">Batching allows the sensor to report sensor events at\n\n        a specified frequency.\\n\\nThe system delays calls to the SensorEventListener and deliver\n\n        them in intervals, based on the maximum report latency specified when the listener is\n\n        registered. Note that this only means that the call to onSensorChanged() is delayed, the\n\n        total number of calls is identical as if no batching was used. Sensors only deliver events\n\n        while the CPU is awake. If the CPU is asleep and a batched sensor event listener is still\n\n        registered, the sensor will continue to collect events until it runs out of memory and\n\n        overwrites old values. This use case is not covered by this sample. (The sensor event queue\n\n        should be flushed using a scheduled background thread.) \\n\\nIn this sample app data is only\n\n        collected while the app is running and the CPU is awake. In this case the sensor will\n\n        deliver events before the queue fills up.\n\n    </string>\n\n \n\n    <string name=\"explanation_description\">The age of a sensor event describes the delay between\n\n        when it was recorded by the sensor until it was delivered to the SensorEventListener.\n\n    </string>\n\n \n\n    <string name=\"register_detector_title\">Register step detector sensor</string>\n\n    <string name=\"register_detector_description\">Register a listener for the STEP DETECTOR\n\n        sensor.\\n\\nThis sensor delivers an event when the user takes a step. One event is received\n\n        per step.\n\n    </string>\n\n \n\n    <string name=\"register_counter_title\">Register step counter sensor</string>\n\n    <string name=\"register_counter_description\">Register a listener for the STEP COUNTER\n\n        sensor.\\n\\nThis sensor triggers events when a step is detected, but applies algorithms to\n\n        filter out false positives. Events from this sensor have higher latency than the step\n\n        detector and contain the total number of steps taken since the sensor was first registered.\n\n    </string>\n\n \n\n    <string name=\"register_0\">No batching (delay=0)</string>\n\n    <string name=\"register_5\">5s batching (delay=5000ms)</string>\n\n    <string name=\"register_10\">10s batching (delay=10000ms)</string>\n\n \n\n    <string name=\"counting_title\">Total Steps: %1$d</string>\n\n    <string name=\"sensor_counter\">Step Counter</string>\n\n    <string name=\"sensor_detector\">Step Detector</string>\n\n    <string name=\"counting_description\">Sensor: %1$s\\nMax sensor event delay: %2$,d \\u00B5s\\nAge of\n\n        events in s:\\n%3$s\n\n    </string>\n\n \n\n    <string name=\"error_title\">Error</string>\n\n    <string name=\"error_nosensor\">This sample requires at least Android KitKat (4.4) and a device\n\n        with the step sensor.\\n\\nThis device does not appear to meet these requirements, as an\n\n        alternative you may want to consider using the gyro sensor and implement your own step\n\n        recognition as a fallback.\n\n    </string>\n\n    <string name=\"warning_nobatching\">The listener has been registered, but batch mode could not be\n\n        enabled.\\n\\nIt is likely that it is not supported by this device.\\n\\nSensor events will be\n\n        delivered in continuous mode.\n\n    </string>\n\n \n\n    <string name=\"action_notagain\">Do not show again</string>\n\n</resources>\n  ","styles.xml":"\n    \n\n<resources>\n\n \n\n    <!-- Card Stream -->\n\n    <style name=\"CardStream\">\n\n        <item name=\"android:paddingBottom\">@dimen/card_stream_bottom_padding</item>\n\n        <item name=\"android:divider\">@null</item>\n\n        <item name=\"android:orientation\">vertical</item>\n\n    </style>\n\n \n\n    <!-- Main card -->\n\n    <style name=\"Card\">\n\n        <item name=\"android:background\">@drawable/card_bg</item>\n\n        <item name=\"android:layout_margin\">@dimen/card_margin</item>\n\n    </style>\n\n \n\n    <style name=\"CardContentArea\">\n\n        <item name=\"android:paddingBottom\">@dimen/card_padding</item>\n\n    </style>\n\n \n\n    <style name=\"CardActionArea\">\n\n        <item name=\"android:background\">@color/card_action_bg</item>\n\n        <item name=\"android:orientation\">vertical</item>\n\n        <item name=\"android:paddingBottom\">@dimen/card_action_margin</item>\n\n    </style>\n\n \n\n    <style name=\"CardElement\">\n\n        <item name=\"android:paddingLeft\">@dimen/card_padding</item>\n\n        <item name=\"android:paddingRight\">@dimen/card_padding</item>\n\n    </style>\n\n \n\n    <!-- Content of main card -->\n\n    <style name=\"CardTitleBase\" parent=\"@style/CardElement\">\n\n        <item name=\"android:paddingTop\">@dimen/card_padding</item>\n\n        <item name=\"android:textSize\">@dimen/card_content_title</item>\n\n    </style>\n\n \n\n    <style name=\"CardTitle\" parent=\"@style/CardTitleBase\">\n\n    </style>\n\n \n\n    <style name=\"CardContentBase\" parent=\"@style/CardElement\">\n\n        <item name=\"android:paddingTop\">@dimen/card_padding</item>\n\n        <item name=\"android:textSize\">@dimen/card_content_text</item>\n\n        <item name=\"android:textColor\">@color/card_content_textcolor</item>\n\n    </style>\n\n \n\n    <style name=\"CardContent\" parent=\"@style/CardContentBase\">\n\n    </style>\n\n \n\n    <!-- Action Area Items -->\n\n    <style name=\"CardAction\">\n\n        <item name=\"android:textSize\">17sp</item>\n\n        <item name=\"android:layout_marginTop\">@dimen/card_action_margin</item>\n\n        <item name=\"android:layout_marginLeft\">@dimen/card_action_margin</item>\n\n        <item name=\"android:layout_marginRight\">@dimen/card_action_margin</item>\n\n        <item name=\"android:paddingLeft\">@dimen/card_action_padding</item>\n\n        <item name=\"android:drawablePadding\">@dimen/card_action_padding</item>\n\n    </style>\n\n \n\n    <style name=\"CardActionNeutral\" parent=\"@style/CardAction\">\n\n        <item name=\"android:background\">@drawable/card_action_bg</item>\n\n        <item name=\"android:drawableStart\">@drawable/card_action_icon_neutral</item>\n\n        <item name=\"android:textColor\">@drawable/card_action_text</item>\n\n    </style>\n\n \n\n    <style name=\"CardActionNegative\" parent=\"@style/CardAction\">\n\n        <item name=\"android:background\">@drawable/card_action_bg_negative</item>\n\n        <item name=\"android:drawableStart\">@drawable/card_action_icon_negative</item>\n\n        <item name=\"android:textColor\">@drawable/card_action_text_negative</item>\n\n    </style>\n\n \n\n    <style name=\"CardActionPositive\" parent=\"@style/CardAction\">\n\n        <item name=\"android:background\">@drawable/card_action_bg_positive</item>\n\n        <item name=\"android:drawableStart\">@drawable/card_action_icon_positive</item>\n\n        <item name=\"android:textColor\">@drawable/card_action_text_positive</item>\n\n    </style>\n\n \n\n    <!-- Card Action Progress -->\n\n    <style name=\"CardProgressLayout\" parent=\"@style/CardAction\">\n\n        <item name=\"android:layout_marginLeft\">@dimen/card_action_margin</item>\n\n        <item name=\"android:layout_marginRight\">@dimen/card_action_margin</item>\n\n        <item name=\"android:paddingLeft\">@dimen/card_action_padding</item>\n\n        <item name=\"android:paddingRight\">@dimen/card_action_padding</item>\n\n        <item name=\"android:background\">#EEE</item>\n\n    </style>\n\n \n\n    <style name=\"CardProgressText\" parent=\"@style/CardAction\">\n\n        <item name=\"android:textColor\">#77000000</item>\n\n        <item name=\"android:textSize\">12sp</item>\n\n        <item name=\"android:paddingLeft\">0dp</item>\n\n    </style>\n\n \n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw720dp-land":{"dimens.xml":"\n    \n\n<resources>\n\n    <!-- Customize dimensions originally defined in res/values/dimens.xml (such as\n\n         screen margins) for sw720dp devices (e.g. 10\" tablets) in landscape here. -->\n\n    <dimen name=\"activity_horizontal_margin\">128dp</dimen>\n\n</resources>\n  "},"values-v11":{"styles.xml":"\n    \n\n<resources>\n\n \n\n    <!--\n\n        Base application theme for API 11+. This theme completely replaces\n\n        AppBaseTheme from res/values/styles.xml on API 11+ devices.\n\n    -->\n\n    <style name=\"AppBaseTheme\" parent=\"android:Theme.Holo.Light\">\n\n        <!-- API 11 theme customizations can go here. -->\n\n    </style>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "},"values-v14":{"styles.xml":"\n    \n\n<resources>\n\n \n\n    <!--\n\n        Base application theme for API 14+. This theme completely replaces\n\n        AppBaseTheme from BOTH res/values/styles.xml and\n\n        res/values-v11/styles.xml on API 14+ devices.\n\n    -->\n\n    <style name=\"AppBaseTheme\" parent=\"android:Theme.Holo.Light.DarkActionBar\">\n\n        <!-- API 14 theme customizations can go here. -->\n\n    </style>\n\n \n\n</resources>\n  "},"values-v16":{"styles.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<resources>\n\n \n\n    <style name=\"CardTitle\" parent=\"@style/CardTitleBase\">\n\n        <item name=\"android:fontFamily\">sans-serif-condensed</item>\n\n    </style>\n\n \n\n    <style name=\"CardContent\" parent=\"@style/CardContentBase\">\n\n        <item name=\"android:fontFamily\">sans-serif-light</item>\n\n    </style>\n\n</resources>\n  "}},"src":{"com.example.android.batchstepsensor":{"cardstream":{"Card.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.batchstepsensor.cardstream;\n\n \n\nimport android.animation.Animator;\n\nimport android.animation.AnimatorListenerAdapter;\n\nimport android.animation.ObjectAnimator;\n\nimport android.app.Activity;\n\nimport android.graphics.Color;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.Button;\n\nimport android.widget.ProgressBar;\n\nimport android.widget.TextView;\n\n \n\nimport com.example.android.batchstepsensor.R;\n\n \n\nimport java.util.ArrayList;\n\n \n\n/**\n\n * A Card contains a description and has a visual state. Optionally a card also contains a title,\n\n * progress indicator and zero or more actions. It is constructed through the {@link Builder}.\n\n */\n\npublic class Card {\n\n \n\n    public static final int ACTION_POSITIVE = 1;\n\n    public static final int ACTION_NEGATIVE = 2;\n\n    public static final int ACTION_NEUTRAL = 3;\n\n \n\n    public static final int PROGRESS_TYPE_NO_PROGRESS = 0;\n\n    public static final int PROGRESS_TYPE_NORMAL = 1;\n\n    public static final int PROGRESS_TYPE_INDETERMINATE = 2;\n\n    public static final int PROGRESS_TYPE_LABEL = 3;\n\n \n\n    private OnCardClickListener mClickListener;\n\n \n\n \n\n    // The card model contains a reference to its desired layout (for extensibility), title,\n\n    // description, zero to many action buttons, and zero or 1 progress indicators.\n\n    private int mLayoutId = R.layout.card;\n\n \n\n    /**\n\n     * Tag that uniquely identifies this card.\n\n     */\n\n    private String mTag = null;\n\n \n\n    private String mTitle = null;\n\n    private String mDescription = null;\n\n \n\n    private View mCardView = null;\n\n    private View mOverlayView = null;\n\n    private TextView mTitleView = null;\n\n    private TextView mDescView = null;\n\n    private View mActionAreaView = null;\n\n \n\n    private Animator mOngoingAnimator = null;\n\n \n\n    /**\n\n     * Visual state, either {@link #CARD_STATE_NORMAL}, {@link #CARD_STATE_FOCUSED} or\n\n     * {@link #CARD_STATE_INACTIVE}.\n\n     */\n\n    private int mCardState = CARD_STATE_NORMAL;\n\n    public static final int CARD_STATE_NORMAL = 1;\n\n    public static final int CARD_STATE_FOCUSED = 2;\n\n    public static final int CARD_STATE_INACTIVE = 3;\n\n \n\n    /**\n\n     * Represent actions that can be taken from the card.  Stylistically the developer can\n\n     * designate the action as positive, negative (ok/cancel, for instance), or neutral.\n\n     * This \"type\" can be used as a UI hint.\n\n     * @see com.example.android.sensors.batchstepsensor.Card.CardAction\n\n     */\n\n    private ArrayList<CardAction> mCardActions = new ArrayList<CardAction>();\n\n \n\n    /**\n\n     * Some cards will have a sense of \"progress\" which should be associated with, but separated\n\n     * from its \"parent\" card.  To push for simplicity in samples, Cards are designed to have\n\n     * a maximum of one progress indicator per Card.\n\n     */\n\n    private CardProgress mCardProgress = null;\n\n \n\n    public Card() {\n\n    }\n\n \n\n    public String getTag() {\n\n        return mTag;\n\n    }\n\n \n\n    public View getView() {\n\n        return mCardView;\n\n    }\n\n \n\n \n\n    public Card setDescription(String desc) {\n\n        if (mDescView != null) {\n\n            mDescription = desc;\n\n            mDescView.setText(desc);\n\n        }\n\n        return this;\n\n    }\n\n \n\n    public Card setTitle(String title) {\n\n        if (mTitleView != null) {\n\n            mTitle = title;\n\n            mTitleView.setText(title);\n\n        }\n\n        return this;\n\n    }\n\n \n\n \n\n    /**\n\n     * Return the UI state, either {@link #CARD_STATE_NORMAL}, {@link #CARD_STATE_FOCUSED}\n\n     * or {@link #CARD_STATE_INACTIVE}.\n\n     */\n\n    public int getState() {\n\n        return mCardState;\n\n    }\n\n \n\n    /**\n\n     * Set the UI state. The parameter describes the state and must be either\n\n     * {@link #CARD_STATE_NORMAL}, {@link #CARD_STATE_FOCUSED} or {@link #CARD_STATE_INACTIVE}.\n\n     * Note: This method must be called from the UI Thread.\n\n     * @param state\n\n     * @return The card itself, allows for chaining of calls\n\n     */\n\n    public Card setState(int state) {\n\n        mCardState = state;\n\n        if (null != mOverlayView) {\n\n            if (null != mOngoingAnimator) {\n\n                mOngoingAnimator.end();\n\n                mOngoingAnimator = null;\n\n            }\n\n            switch (state) {\n\n                case CARD_STATE_NORMAL: {\n\n                    mOverlayView.setVisibility(View.GONE);\n\n                    mOverlayView.setAlpha(1.f);\n\n                    break;\n\n                }\n\n                case CARD_STATE_FOCUSED: {\n\n                    mOverlayView.setVisibility(View.VISIBLE);\n\n                    mOverlayView.setBackgroundResource(R.drawable.card_overlay_focused);\n\n                    ObjectAnimator animator = ObjectAnimator.ofFloat(mOverlayView, \"alpha\", 0.f);\n\n                    animator.setRepeatMode(ObjectAnimator.REVERSE);\n\n                    animator.setRepeatCount(ObjectAnimator.INFINITE);\n\n                    animator.setDuration(1000);\n\n                    animator.start();\n\n                    mOngoingAnimator = animator;\n\n                    break;\n\n                }\n\n                case CARD_STATE_INACTIVE: {\n\n                    mOverlayView.setVisibility(View.VISIBLE);\n\n                    mOverlayView.setAlpha(1.f);\n\n                    mOverlayView.setBackgroundColor(Color.argb(0xaa, 0xcc, 0xcc, 0xcc));\n\n                    break;\n\n                }\n\n            }\n\n        }\n\n        return this;\n\n    }\n\n \n\n    /**\n\n     * Set the type of progress indicator.\n\n     * The progress type can only be changed if the Card was initially build with a progress\n\n     * indicator.\n\n     * See {@link Builder#setProgressType(int)}.\n\n     * Must be a value of either {@link #PROGRESS_TYPE_NORMAL},\n\n     * {@link #PROGRESS_TYPE_INDETERMINATE}, {@link #PROGRESS_TYPE_LABEL} or\n\n     * {@link #PROGRESS_TYPE_NO_PROGRESS}.\n\n     * @param progressType\n\n     * @return The card itself, allows for chaining of calls\n\n     */\n\n    public Card setProgressType(int progressType) {\n\n        if (mCardProgress == null) {\n\n            mCardProgress = new CardProgress();\n\n        }\n\n        mCardProgress.setProgressType(progressType);\n\n        return this;\n\n    }\n\n \n\n    /**\n\n     * Return the progress indicator type. A value of either {@link #PROGRESS_TYPE_NORMAL},\n\n     * {@link #PROGRESS_TYPE_INDETERMINATE}, {@link #PROGRESS_TYPE_LABEL}. Otherwise if no progress\n\n     * indicator is enabled, {@link #PROGRESS_TYPE_NO_PROGRESS} is returned.\n\n     * @return\n\n     */\n\n    public int getProgressType() {\n\n        if (mCardProgress == null) {\n\n            return PROGRESS_TYPE_NO_PROGRESS;\n\n        }\n\n        return mCardProgress.progressType;\n\n    }\n\n \n\n    /**\n\n     * Set the progress to the specified value. Only applicable if the card has a\n\n     * {@link #PROGRESS_TYPE_NORMAL} progress type.\n\n     * @param progress\n\n     * @return\n\n     * @see #setMaxProgress(int)\n\n     */\n\n    public Card setProgress(int progress) {\n\n        if (mCardProgress != null) {\n\n            mCardProgress.setProgress(progress);\n\n        }\n\n        return this;\n\n    }\n\n \n\n    /**\n\n     * Set the range of the progress to 0...max. Only applicable if the card has a\n\n     * {@link #PROGRESS_TYPE_NORMAL} progress type.\n\n     * @return\n\n     */\n\n    public Card setMaxProgress(int max){\n\n        if (mCardProgress != null) {\n\n            mCardProgress.setMax(max);\n\n        }\n\n        return this;\n\n    }\n\n \n\n    /**\n\n     * Set the label text for the progress if the card has a progress type of\n\n     * {@link #PROGRESS_TYPE_NORMAL}, {@link #PROGRESS_TYPE_INDETERMINATE} or\n\n     * {@link #PROGRESS_TYPE_LABEL}\n\n     * @param text\n\n     * @return\n\n     */\n\n    public Card setProgressLabel(String text) {\n\n        if (mCardProgress != null) {\n\n            mCardProgress.setProgressLabel(text);\n\n        }\n\n        return this;\n\n    }\n\n \n\n    /**\n\n     * Toggle the visibility of the progress section of the card. Only applicable if\n\n     * the card has a progress type of\n\n     * {@link #PROGRESS_TYPE_NORMAL}, {@link #PROGRESS_TYPE_INDETERMINATE} or\n\n     * {@link #PROGRESS_TYPE_LABEL}.\n\n     * @param isVisible\n\n     * @return\n\n     */\n\n    public Card setProgressVisibility(boolean isVisible) {\n\n        if (mCardProgress.progressView == null) {\n\n            return this; // Card does not have progress\n\n        }\n\n        mCardProgress.progressView.setVisibility(isVisible ? View.VISIBLE : View.GONE);\n\n \n\n        return this;\n\n    }\n\n \n\n    /**\n\n     * Adds an action to this card during build time.\n\n     *\n\n     * @param label\n\n     * @param id\n\n     * @param type\n\n     */\n\n    private void addAction(String label, int id, int type) {\n\n        CardAction cardAction = new CardAction();\n\n        cardAction.label = label;\n\n        cardAction.id = id;\n\n        cardAction.type = type;\n\n        mCardActions.add(cardAction);\n\n    }\n\n \n\n    /**\n\n     * Toggles the visibility of a card action.\n\n     * @param actionId\n\n     * @param isVisible\n\n     * @return\n\n     */\n\n    public Card setActionVisibility(int actionId, boolean isVisible) {\n\n        int visibilityFlag = isVisible ? View.VISIBLE : View.GONE;\n\n        for (CardAction action : mCardActions) {\n\n            if (action.id == actionId && action.actionView != null) {\n\n                action.actionView.setVisibility(visibilityFlag);\n\n            }\n\n        }\n\n        return this;\n\n    }\n\n \n\n    /**\n\n     * Toggles visibility of the action area of this Card through an animation.\n\n     * @param isVisible\n\n     * @return\n\n     */\n\n    public Card setActionAreaVisibility(boolean isVisible) {\n\n        if (mActionAreaView == null) {\n\n            return this; // Card does not have an action area\n\n        }\n\n \n\n        if (isVisible) {\n\n            // Show the action area\n\n            mActionAreaView.setVisibility(View.VISIBLE);\n\n            mActionAreaView.setPivotY(0.f);\n\n            mActionAreaView.setPivotX(mCardView.getWidth() / 2.f);\n\n            mActionAreaView.setAlpha(0.5f);\n\n            mActionAreaView.setRotationX(-90.f);\n\n            mActionAreaView.animate().rotationX(0.f).alpha(1.f).setDuration(400);\n\n        } else {\n\n            // Hide the action area\n\n            mActionAreaView.setPivotY(0.f);\n\n            mActionAreaView.setPivotX(mCardView.getWidth() / 2.f);\n\n            mActionAreaView.animate().rotationX(-90.f).alpha(0.f).setDuration(400).setListener(\n\n                    new AnimatorListenerAdapter() {\n\n                        @Override\n\n                        public void onAnimationEnd(Animator animation) {\n\n                            mActionAreaView.setVisibility(View.GONE);\n\n                        }\n\n                    });\n\n        }\n\n        return this;\n\n    }\n\n \n\n \n\n    /**\n\n     * Creates a shallow clone of the card.  Shallow means all values are present, but no views.\n\n     * This is useful for saving/restoring in the case of configuration changes, like screen\n\n     * rotation.\n\n     *\n\n     * @return A shallow clone of the card instance\n\n     */\n\n    public Card createShallowClone() {\n\n        Card cloneCard = new Card();\n\n \n\n        // Outer card values\n\n        cloneCard.mTitle = mTitle;\n\n        cloneCard.mDescription = mDescription;\n\n        cloneCard.mTag = mTag;\n\n        cloneCard.mLayoutId = mLayoutId;\n\n        cloneCard.mCardState = mCardState;\n\n \n\n        // Progress\n\n        if (mCardProgress != null) {\n\n            cloneCard.mCardProgress = mCardProgress.createShallowClone();\n\n        }\n\n \n\n        // Actions\n\n        for (CardAction action : mCardActions) {\n\n            cloneCard.mCardActions.add(action.createShallowClone());\n\n        }\n\n \n\n        return cloneCard;\n\n    }\n\n \n\n \n\n    /**\n\n     * Prepare the card to be stored for configuration change.\n\n     */\n\n    public void prepareForConfigurationChange() {\n\n        // Null out views.\n\n        mCardView = null;\n\n        for (CardAction action : mCardActions) {\n\n            action.actionView = null;\n\n        }\n\n        mCardProgress.progressView = null;\n\n    }\n\n \n\n    /**\n\n     * Creates a new {@link #Card}.\n\n     */\n\n    public static class Builder {\n\n        private Card mCard;\n\n \n\n        /**\n\n         * Instantiate the builder with data from a shallow clone.\n\n         * @param listener\n\n         * @param card\n\n         * @see Card#createShallowClone()\n\n         */\n\n        protected Builder(OnCardClickListener listener, Card card) {\n\n            mCard = card;\n\n            mCard.mClickListener = listener;\n\n        }\n\n \n\n        /**\n\n         * Instantiate the builder with the tag of the card.\n\n         * @param listener\n\n         * @param tag\n\n         */\n\n        public Builder(OnCardClickListener listener, String tag) {\n\n            mCard = new Card();\n\n            mCard.mTag = tag;\n\n            mCard.mClickListener = listener;\n\n        }\n\n \n\n        public Builder setTitle(String title) {\n\n            mCard.mTitle = title;\n\n            return this;\n\n        }\n\n \n\n        public Builder setDescription(String desc) {\n\n            mCard.mDescription = desc;\n\n            return this;\n\n        }\n\n \n\n        /**\n\n         * Add an action.\n\n         * The type describes how this action will be displayed. Accepted values are\n\n         * {@link #ACTION_NEUTRAL}, {@link #ACTION_POSITIVE} or {@link #ACTION_NEGATIVE}.\n\n         *\n\n         * @param label The text to display for this action\n\n         * @param id Identifier for this action, supplied in the click listener\n\n         * @param type UI style of action\n\n         * @return\n\n         */\n\n        public Builder addAction(String label, int id, int type) {\n\n            mCard.addAction(label, id, type);\n\n            return this;\n\n        }\n\n \n\n        /**\n\n         * Override the default layout.\n\n         * The referenced layout file has to contain the same identifiers as defined in the default\n\n         * layout configuration.\n\n         * @param layout\n\n         * @return\n\n         * @see R.layout.card\n\n         */\n\n        public Builder setLayout(int layout) {\n\n            mCard.mLayoutId = layout;\n\n            return this;\n\n        }\n\n \n\n        /**\n\n         * Set the type of progress bar to display.\n\n         * Accepted values are:\n\n         * <ul>\n\n         *     <li>{@link #PROGRESS_TYPE_NO_PROGRESS} disables the progress indicator</li>\n\n         *     <li>{@link #PROGRESS_TYPE_NORMAL} \n\n         *     displays a standard, linear progress indicator.</li>\n\n         *     <li>{@link #PROGRESS_TYPE_INDETERMINATE} displays an indeterminate (infite) progress\n\n         *     indicator.</li>\n\n         *     <li>{@link #PROGRESS_TYPE_LABEL} only displays a label text in the progress area\n\n         *     of the card.</li>\n\n         * </ul>\n\n         *\n\n         * @param progressType\n\n         * @return\n\n         */\n\n        public Builder setProgressType(int progressType) {\n\n            mCard.setProgressType(progressType);\n\n            return this;\n\n        }\n\n \n\n        public Builder setProgressLabel(String label) {\n\n            // ensure the progress layout has been initialized, use 'no progress' by default\n\n            if (mCard.mCardProgress == null) {\n\n                mCard.setProgressType(PROGRESS_TYPE_NO_PROGRESS);\n\n            }\n\n            mCard.mCardProgress.label = label;\n\n            return this;\n\n        }\n\n \n\n        public Builder setProgressMaxValue(int maxValue) {\n\n            // ensure the progress layout has been initialized, use 'no progress' by default\n\n            if (mCard.mCardProgress == null) {\n\n                mCard.setProgressType(PROGRESS_TYPE_NO_PROGRESS);\n\n            }\n\n            mCard.mCardProgress.maxValue = maxValue;\n\n            return this;\n\n        }\n\n \n\n        public Builder setStatus(int status) {\n\n            mCard.setState(status);\n\n            return this;\n\n        }\n\n \n\n        public Card build(Activity activity) {\n\n            LayoutInflater inflater = activity.getLayoutInflater();\n\n            // Inflating the card.\n\n            ViewGroup cardView = (ViewGroup) inflater.inflate(mCard.mLayoutId,\n\n                    (ViewGroup) activity.findViewById(R.id.card_stream), false);\n\n \n\n            // Check that the layout contains a TextView with the card_title id\n\n            View viewTitle = cardView.findViewById(R.id.card_title);\n\n            if (mCard.mTitle != null && viewTitle != null) {\n\n                mCard.mTitleView = (TextView) viewTitle;\n\n                mCard.mTitleView.setText(mCard.mTitle);\n\n            } else if (viewTitle != null) {\n\n                viewTitle.setVisibility(View.GONE);\n\n            }\n\n \n\n            // Check that the layout contains a TextView with the card_content id\n\n            View viewDesc = cardView.findViewById(R.id.card_content);\n\n            if (mCard.mDescription != null && viewDesc != null) {\n\n                mCard.mDescView = (TextView) viewDesc;\n\n                mCard.mDescView.setText(mCard.mDescription);\n\n            } else if (viewDesc != null) {\n\n                cardView.findViewById(R.id.card_content).setVisibility(View.GONE);\n\n            }\n\n \n\n \n\n            ViewGroup actionArea = (ViewGroup) cardView.findViewById(R.id.card_actionarea);\n\n \n\n            // Inflate Progress\n\n            initializeProgressView(inflater, actionArea);\n\n \n\n            // Inflate all action views.\n\n            initializeActionViews(inflater, cardView, actionArea);\n\n \n\n            mCard.mCardView = cardView;\n\n            mCard.mOverlayView = cardView.findViewById(R.id.card_overlay);\n\n \n\n            return mCard;\n\n        }\n\n \n\n        /**\n\n         * Initialize data from the given card.\n\n         * @param card\n\n         * @return\n\n         * @see Card#createShallowClone()\n\n         */\n\n        public Builder cloneFromCard(Card card) {\n\n            mCard = card.createShallowClone();\n\n            return this;\n\n        }\n\n \n\n        /**\n\n         * Build the action views by inflating the appropriate layouts and setting the text and \n\n         * values.\n\n         * @param inflater\n\n         * @param cardView\n\n         * @param actionArea\n\n         */\n\n        private void initializeActionViews(LayoutInflater inflater, ViewGroup cardView,\n\n                                           ViewGroup actionArea) {\n\n            if (!mCard.mCardActions.isEmpty()) {\n\n                // Set action area to visible only when actions are visible\n\n                actionArea.setVisibility(View.VISIBLE);\n\n                mCard.mActionAreaView = actionArea;\n\n            }\n\n \n\n            // Inflate all card actions\n\n            for (final CardAction action : mCard.mCardActions) {\n\n \n\n                int useActionLayout = 0;\n\n                switch (action.type) {\n\n                    case Card.ACTION_POSITIVE:\n\n                        useActionLayout = R.layout.card_button_positive;\n\n                        break;\n\n                    case Card.ACTION_NEGATIVE:\n\n                        useActionLayout = R.layout.card_button_negative;\n\n                        break;\n\n                    case Card.ACTION_NEUTRAL:\n\n                    default:\n\n                        useActionLayout = R.layout.card_button_neutral;\n\n                        break;\n\n                }\n\n \n\n                action.actionView = inflater.inflate(useActionLayout, actionArea, false);\n\n                Button actionButton = (Button) action.actionView.findViewById(R.id.card_button);\n\n \n\n                actionButton.setText(action.label);\n\n                actionButton.setOnClickListener(new View.OnClickListener() {\n\n                    @Override\n\n                    public void onClick(View v) {\n\n                        mCard.mClickListener.onCardClick(action.id, mCard.mTag);\n\n                    }\n\n                });\n\n                actionArea.addView(action.actionView);\n\n            }\n\n        }\n\n \n\n        /**\n\n         * Build the progress view into the given ViewGroup.\n\n         *\n\n         * @param inflater\n\n         * @param actionArea\n\n         */\n\n        private void initializeProgressView(LayoutInflater inflater, ViewGroup actionArea) {\n\n \n\n            // Only inflate progress layout if a progress type other than NO_PROGRESS was set.\n\n            if (mCard.mCardProgress != null) {\n\n                //Setup progress card.\n\n                View progressView = inflater.inflate(R.layout.card_progress, actionArea, false);\n\n                ProgressBar progressBar = \n\n                        (ProgressBar) progressView.findViewById(R.id.card_progress);\n\n                ((TextView) progressView.findViewById(R.id.card_progress_text))\n\n                        .setText(mCard.mCardProgress.label);\n\n                progressBar.setMax(mCard.mCardProgress.maxValue);\n\n                progressBar.setProgress(0);\n\n                mCard.mCardProgress.progressView = progressView;\n\n                mCard.mCardProgress.setProgressType(mCard.getProgressType());\n\n                actionArea.addView(progressView);\n\n            }\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Represents a clickable action, accessible from the bottom of the card.\n\n     * Fields include the label, an ID to specify the action that was performed in the callback,\n\n     * an action type (positive, negative, neutral), and the callback.\n\n     */\n\n    public class CardAction {\n\n \n\n        public String label;\n\n        public int id;\n\n        public int type;\n\n        public View actionView;\n\n \n\n        public CardAction createShallowClone() {\n\n            CardAction actionClone = new CardAction();\n\n            actionClone.label = label;\n\n            actionClone.id = id;\n\n            actionClone.type = type;\n\n            return actionClone;\n\n            // Not the view.  Never the view (don't want to hold view references for\n\n            // onConfigurationChange.\n\n        }\n\n \n\n    }\n\n \n\n    /**\n\n     * Describes the progress of a {@link Card}.\n\n     * Three types of progress are supported:\n\n     * <ul><li>{@link Card#PROGRESS_TYPE_NORMAL: Standard progress bar with label text</li>\n\n     * <li>{@link Card#PROGRESS_TYPE_INDETERMINATE}: Indeterminate progress bar with label txt</li>\n\n     * <li>{@link Card#PROGRESS_TYPE_LABEL}: Label only, no progresss bar</li>\n\n     * </ul>\n\n     */\n\n    public class CardProgress {\n\n        private int progressType = Card.PROGRESS_TYPE_NO_PROGRESS;\n\n        private String label = \"\";\n\n        private int currProgress = 0;\n\n        private int maxValue = 100;\n\n \n\n        public View progressView = null;\n\n        private ProgressBar progressBar = null;\n\n        private TextView progressLabel = null;\n\n \n\n        public CardProgress createShallowClone() {\n\n            CardProgress progressClone = new CardProgress();\n\n            progressClone.label = label;\n\n            progressClone.currProgress = currProgress;\n\n            progressClone.maxValue = maxValue;\n\n            progressClone.progressType = progressType;\n\n            return progressClone;\n\n        }\n\n \n\n        /**\n\n         * Set the progress. Only useful for the type {@link #PROGRESS_TYPE_NORMAL}.\n\n         * @param progress\n\n         * @see android.widget.ProgressBar#setProgress(int)\n\n         */\n\n        public void setProgress(int progress) {\n\n            currProgress = progress;\n\n            final ProgressBar bar = getProgressBar();\n\n            if (bar != null) {\n\n                bar.setProgress(currProgress);\n\n                bar.invalidate();\n\n            }\n\n        }\n\n \n\n        /**\n\n         * Set the range of the progress to 0...max.\n\n         * Only useful for the type {@link #PROGRESS_TYPE_NORMAL}.\n\n         * @param max\n\n         * @see android.widget.ProgressBar#setMax(int)\n\n         */\n\n        public void setMax(int max) {\n\n            maxValue = max;\n\n            final ProgressBar bar = getProgressBar();\n\n            if (bar != null) {\n\n                bar.setMax(maxValue);\n\n            }\n\n        }\n\n \n\n        /**\n\n         * Set the label text that appears near the progress indicator.\n\n         * @param text\n\n         */\n\n        public void setProgressLabel(String text) {\n\n            label = text;\n\n            final TextView labelView = getProgressLabel();\n\n            if (labelView != null) {\n\n                labelView.setText(text);\n\n            }\n\n        }\n\n \n\n        /**\n\n         * Set how progress is displayed. The parameter must be one of three supported types:\n\n         * <ul><li>{@link Card#PROGRESS_TYPE_NORMAL: Standard progress bar with label text</li>\n\n         * <li>{@link Card#PROGRESS_TYPE_INDETERMINATE}: \n\n         * Indeterminate progress bar with label txt</li>\n\n         * <li>{@link Card#PROGRESS_TYPE_LABEL}: Label only, no progresss bar</li>\n\n         * @param type\n\n         */\n\n        public void setProgressType(int type) {\n\n            progressType = type;\n\n            if (progressView != null) {\n\n                switch (type) {\n\n                    case PROGRESS_TYPE_NO_PROGRESS: {\n\n                        progressView.setVisibility(View.GONE);\n\n                        break;\n\n                    }\n\n                    case PROGRESS_TYPE_NORMAL: {\n\n                        progressView.setVisibility(View.VISIBLE);\n\n                        getProgressBar().setIndeterminate(false);\n\n                        break;\n\n                    }\n\n                    case PROGRESS_TYPE_INDETERMINATE: {\n\n                        progressView.setVisibility(View.VISIBLE);\n\n                        getProgressBar().setIndeterminate(true);\n\n                        break;\n\n                    }\n\n                }\n\n            }\n\n        }\n\n \n\n        private TextView getProgressLabel() {\n\n            if (progressLabel != null) {\n\n                return progressLabel;\n\n            } else if (progressView != null) {\n\n                progressLabel = (TextView) progressView.findViewById(R.id.card_progress_text);\n\n                return progressLabel;\n\n            } else {\n\n                return null;\n\n            }\n\n        }\n\n \n\n        private ProgressBar getProgressBar() {\n\n            if (progressBar != null) {\n\n                return progressBar;\n\n            } else if (progressView != null) {\n\n                progressBar = (ProgressBar) progressView.findViewById(R.id.card_progress);\n\n                return progressBar;\n\n            } else {\n\n                return null;\n\n            }\n\n        }\n\n \n\n    }\n\n}\n\n \n  ","CardActionButton.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.batchstepsensor.cardstream;\n\n \n\nimport android.content.Context;\n\nimport android.util.AttributeSet;\n\nimport android.view.MotionEvent;\n\nimport android.view.animation.BounceInterpolator;\n\nimport android.view.animation.DecelerateInterpolator;\n\nimport android.widget.Button;\n\n \n\n/**\n\n * Custom Button with a special 'pressed' effect for touch events.\n\n */\n\npublic class CardActionButton extends Button {\n\n \n\n    public CardActionButton(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public CardActionButton(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public CardActionButton(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    @Override\n\n    public boolean onTouchEvent(MotionEvent event) {\n\n \n\n        switch(event.getAction()){\n\n            case MotionEvent.ACTION_DOWN:\n\n                setPressed(true);\n\n                animate().scaleX(0.98f).scaleY(0.98f).alpha(0.8f).setDuration(100).\n\n                        setInterpolator(new DecelerateInterpolator());\n\n                break;\n\n            case MotionEvent.ACTION_UP:\n\n                animate().scaleX(1.0f).scaleY(1.f).alpha(1.0f).setDuration(50).\n\n                        setInterpolator(new BounceInterpolator());\n\n                break;\n\n            case MotionEvent.ACTION_CANCEL:\n\n                animate().scaleX(1.0f).scaleY(1.f).alpha(1.0f).setDuration(50).\n\n                        setInterpolator(new BounceInterpolator());\n\n                break;\n\n        }\n\n \n\n        return super.onTouchEvent(event);\n\n    }\n\n \n\n}\n\n \n  ","CardLayout.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.batchstepsensor.cardstream;\n\n \n\nimport android.content.Context;\n\nimport android.util.AttributeSet;\n\nimport android.view.MotionEvent;\n\nimport android.view.ViewConfiguration;\n\nimport android.widget.RelativeLayout;\n\n \n\n/**\n\n * Custom Button with a special 'pressed' effect for touch events.\n\n */\n\npublic class CardLayout extends RelativeLayout {\n\n \n\n    private boolean mSwiping = false;\n\n    private float mDownX = 0.f;\n\n    private float mDownY = 0.f;\n\n    private float mTouchSlop = 0.f;\n\n \n\n    public CardLayout(Context context) {\n\n        super(context);\n\n        init();\n\n    }\n\n \n\n    public CardLayout(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n        init();\n\n    }\n\n \n\n    public CardLayout(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n        init();\n\n    }\n\n \n\n    private void init(){\n\n        setFocusable(true);\n\n        setDescendantFocusability(FOCUS_AFTER_DESCENDANTS);\n\n        setWillNotDraw(false);\n\n        setClickable(true);\n\n \n\n        mTouchSlop = ViewConfiguration.get(getContext()).getScaledTouchSlop() * 2.f;\n\n    }\n\n \n\n    @Override\n\n    public boolean onTouchEvent(MotionEvent event) {\n\n        switch(event.getAction()){\n\n            case MotionEvent.ACTION_CANCEL:\n\n            case MotionEvent.ACTION_UP:\n\n                mSwiping = false;\n\n                break;\n\n        }\n\n        return super.onTouchEvent(event);\n\n    }\n\n \n\n    @Override\n\n    public boolean onInterceptTouchEvent(MotionEvent event) {\n\n \n\n        switch(event.getAction()){\n\n            case MotionEvent.ACTION_MOVE:\n\n                if( !mSwiping ){\n\n                    mSwiping = Math.abs(mDownX - event.getX()) > mTouchSlop;\n\n                }\n\n                break;\n\n            case MotionEvent.ACTION_DOWN:\n\n                mDownX = event.getX();\n\n                mDownY = event.getY();\n\n                mSwiping = false;\n\n                break;\n\n            case MotionEvent.ACTION_CANCEL:\n\n            case MotionEvent.ACTION_UP:\n\n                mSwiping = false;\n\n                break;\n\n        }\n\n        return mSwiping;\n\n    }\n\n}\n  ","CardStream.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.batchstepsensor.cardstream;\n\n \n\npublic interface CardStream {\n\n    public CardStreamFragment getCardStream();\n\n}\n\n \n  ","CardStreamAnimator.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.batchstepsensor.cardstream;\n\n \n\nimport android.animation.ObjectAnimator;\n\nimport android.content.Context;\n\nimport android.view.View;\n\n \n\n/**\n\n * An abstract class which defines animators for CardStreamLinearLayout.\n\n */\n\nabstract class CardStreamAnimator {\n\n \n\n    protected float mSpeedFactor = 1.f;\n\n \n\n    /**\n\n     * Set speed factor of animations. Higher value means longer duration & slow animation.\n\n     *\n\n     * @param speedFactor speed type 1: SLOW, 2: NORMAL, 3:FAST\n\n     */\n\n    public void setSpeedFactor(float speedFactor) {\n\n        mSpeedFactor = speedFactor;\n\n    }\n\n \n\n    /**\n\n     * Define initial animation of each child which fired when a user rotate a screen.\n\n     *\n\n     * @param context\n\n     * @return ObjectAnimator for initial animation\n\n     */\n\n    public abstract ObjectAnimator getInitalAnimator(Context context);\n\n \n\n    /**\n\n     * Define disappearing animation of a child which fired when a view is removed programmatically\n\n     *\n\n     * @param context\n\n     * @return ObjectAnimator for disappearing animation\n\n     */\n\n    public abstract ObjectAnimator getDisappearingAnimator(Context context);\n\n \n\n    /**\n\n     * Define appearing animation of a child which fired when a view is added programmatically\n\n     *\n\n     * @param context\n\n     * @return ObjectAnimator for appearing animation\n\n     */\n\n    public abstract ObjectAnimator getAppearingAnimator(Context context);\n\n \n\n    /**\n\n     * Define swipe-in (back to the origin position) animation of a child\n\n     * which fired when a view is not moved enough to be removed.\n\n     *\n\n     * @param view   target view\n\n     * @param deltaX delta distance by x-axis\n\n     * @param deltaY delta distance by y-axis\n\n     * @return ObjectAnimator for swipe-in animation\n\n     */\n\n    public abstract ObjectAnimator getSwipeInAnimator(View view, float deltaX, float deltaY);\n\n \n\n    /**\n\n     * Define swipe-out animation of a child\n\n     * which fired when a view is removing by a user swipe action.\n\n     *\n\n     * @param view   target view\n\n     * @param deltaX delta distance by x-axis\n\n     * @param deltaY delta distance by y-axis\n\n     * @return ObjectAnimator for swipe-out animation\n\n     */\n\n    public abstract ObjectAnimator getSwipeOutAnimator(View view, float deltaX, float deltaY);\n\n \n\n    /**\n\n     * A simple CardStreamAnimator implementation which is used to turn animations off.\n\n     */\n\n    public static class EmptyAnimator extends CardStreamAnimator {\n\n \n\n        @Override\n\n        public ObjectAnimator getInitalAnimator(Context context) {\n\n            return null;\n\n        }\n\n \n\n        @Override\n\n        public ObjectAnimator getDisappearingAnimator(Context context) {\n\n            return null;\n\n        }\n\n \n\n        @Override\n\n        public ObjectAnimator getAppearingAnimator(Context context) {\n\n            return null;\n\n        }\n\n \n\n        @Override\n\n        public ObjectAnimator getSwipeInAnimator(View view, float deltaX, float deltaY) {\n\n            return null;\n\n        }\n\n \n\n        @Override\n\n        public ObjectAnimator getSwipeOutAnimator(View view, float deltaX, float deltaY) {\n\n            return null;\n\n        }\n\n    }\n\n \n\n}\n\n \n  ","CardStreamFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.batchstepsensor.cardstream;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\n \n\nimport java.util.Collection;\n\nimport java.util.HashMap;\n\nimport java.util.HashSet;\n\nimport java.util.LinkedHashMap;\n\n \n\nimport com.example.android.batchstepsensor.R;\n\n \n\n/**\n\n * A Fragment that handles a stream of cards.\n\n * Cards can be shown or hidden. When a card is shown it can also be marked as not-dismissible, see\n\n * {@link CardStreamLinearLayout#addCard(android.view.View, boolean)}.\n\n */\n\npublic class CardStreamFragment extends Fragment {\n\n \n\n    private static final int INITIAL_SIZE = 15;\n\n    private CardStreamLinearLayout mLayout = null;\n\n    private LinkedHashMap<String, Card> mVisibleCards = new LinkedHashMap<String, Card>(INITIAL_SIZE);\n\n    private HashMap<String, Card> mHiddenCards = new HashMap<String, Card>(INITIAL_SIZE);\n\n    private HashSet<String> mDismissibleCards = new HashSet<String>(INITIAL_SIZE);\n\n \n\n    // Set the listener to handle dismissed cards by moving them to the hidden cards map.\n\n    private CardStreamLinearLayout.OnDissmissListener mCardDismissListener =\n\n            new CardStreamLinearLayout.OnDissmissListener() {\n\n                @Override\n\n                public void onDismiss(String tag) {\n\n                    dismissCard(tag);\n\n                }\n\n            };\n\n \n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View view = inflater.inflate(R.layout.cardstream, container, false);\n\n        mLayout = (CardStreamLinearLayout) view.findViewById(R.id.card_stream);\n\n        mLayout.setOnDismissListener(mCardDismissListener);\n\n \n\n        return view;\n\n    }\n\n \n\n    /**\n\n     * Add a visible, dismissible card to the card stream.\n\n     *\n\n     * @param card\n\n     */\n\n    public void addCard(Card card) {\n\n        final String tag = card.getTag();\n\n \n\n        if (!mVisibleCards.containsKey(tag) && !mHiddenCards.containsKey(tag)) {\n\n            final View view = card.getView();\n\n            view.setTag(tag);\n\n            mHiddenCards.put(tag, card);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Add and show a card.\n\n     *\n\n     * @param card\n\n     * @param show\n\n     */\n\n    public void addCard(Card card, boolean show) {\n\n        addCard(card);\n\n        if (show) {\n\n            showCard(card.getTag());\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Remove a card and return true if it has been successfully removed.\n\n     *\n\n     * @param tag\n\n     * @return\n\n     */\n\n    public boolean removeCard(String tag) {\n\n        // Attempt to remove a visible card first\n\n        Card card = mVisibleCards.get(tag);\n\n        if (card != null) {\n\n            // Card is visible, also remove from layout\n\n            mVisibleCards.remove(tag);\n\n            mLayout.removeView(card.getView());\n\n            return true;\n\n        } else {\n\n            // Card is hidden, no need to remove from layout\n\n            card = mHiddenCards.remove(tag);\n\n            return card != null;\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Show a dismissible card, returns false if the card could not be shown.\n\n     *\n\n     * @param tag\n\n     * @return\n\n     */\n\n    public boolean showCard(String tag) {\n\n        return showCard(tag, true);\n\n    }\n\n \n\n    /**\n\n     * Show a card, returns false if the card could not be shown.\n\n     *\n\n     * @param tag\n\n     * @param dismissible\n\n     * @return\n\n     */\n\n    public boolean showCard(String tag, boolean dismissible) {\n\n        final Card card = mHiddenCards.get(tag);\n\n        // ensure the card is hidden and not already visible\n\n        if (card != null && !mVisibleCards.containsValue(tag)) {\n\n            mHiddenCards.remove(tag);\n\n            mVisibleCards.put(tag, card);\n\n            mLayout.addCard(card.getView(), dismissible);\n\n            if (dismissible) {\n\n                mDismissibleCards.add(tag);\n\n            }\n\n            return true;\n\n        }\n\n        return false;\n\n    }\n\n \n\n    /**\n\n     * Hides the card, returns false if the card could not be hidden.\n\n     *\n\n     * @param tag\n\n     * @return\n\n     */\n\n    public boolean hideCard(String tag) {\n\n        final Card card = mVisibleCards.get(tag);\n\n        if (card != null) {\n\n            mVisibleCards.remove(tag);\n\n            mDismissibleCards.remove(tag);\n\n            mHiddenCards.put(tag, card);\n\n \n\n            mLayout.removeView(card.getView());\n\n            return true;\n\n        }\n\n        return mHiddenCards.containsValue(tag);\n\n    }\n\n \n\n \n\n    private void dismissCard(String tag) {\n\n        final Card card = mVisibleCards.get(tag);\n\n        if (card != null) {\n\n            mDismissibleCards.remove(tag);\n\n            mVisibleCards.remove(tag);\n\n            mHiddenCards.put(tag, card);\n\n        }\n\n    }\n\n \n\n \n\n    public boolean isCardVisible(String tag) {\n\n        return mVisibleCards.containsValue(tag);\n\n    }\n\n \n\n    /**\n\n     * Returns true if the card is shown and is dismissible.\n\n     *\n\n     * @param tag\n\n     * @return\n\n     */\n\n    public boolean isCardDismissible(String tag) {\n\n        return mDismissibleCards.contains(tag);\n\n    }\n\n \n\n    /**\n\n     * Returns the Card for this tag.\n\n     *\n\n     * @param tag\n\n     * @return\n\n     */\n\n    public Card getCard(String tag) {\n\n        final Card card = mVisibleCards.get(tag);\n\n        if (card != null) {\n\n            return card;\n\n        } else {\n\n            return mHiddenCards.get(tag);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Moves the view port to show the card with this tag.\n\n     *\n\n     * @param tag\n\n     * @see CardStreamLinearLayout#setFirstVisibleCard(String)\n\n     */\n\n    public void setFirstVisibleCard(String tag) {\n\n        final Card card = mVisibleCards.get(tag);\n\n        if (card != null) {\n\n            mLayout.setFirstVisibleCard(tag);\n\n        }\n\n    }\n\n \n\n    public int getVisibleCardCount() {\n\n        return mVisibleCards.size();\n\n    }\n\n \n\n    public Collection<Card> getVisibleCards() {\n\n        return mVisibleCards.values();\n\n    }\n\n \n\n    public void restoreState(CardStreamState state, OnCardClickListener callback) {\n\n        // restore hidden cards\n\n        for (Card c : state.hiddenCards) {\n\n            Card card = new Card.Builder(callback,c).build(getActivity());\n\n            mHiddenCards.put(card.getTag(), card);\n\n        }\n\n \n\n        // temporarily set up list of dismissible\n\n        final HashSet<String> dismissibleCards = state.dismissibleCards;\n\n \n\n        //restore shown cards\n\n        for (Card c : state.visibleCards) {\n\n            Card card = new Card.Builder(callback,c).build(getActivity());\n\n            addCard(card);\n\n            final String tag = card.getTag();\n\n            showCard(tag, dismissibleCards.contains(tag));\n\n        }\n\n \n\n        // move to first visible card\n\n        final String firstShown = state.shownTag;\n\n        if (firstShown != null) {\n\n            mLayout.setFirstVisibleCard(firstShown);\n\n        }\n\n \n\n        mLayout.triggerShowInitialAnimation();\n\n    }\n\n \n\n    public CardStreamState dumpState() {\n\n        final Card[] visible = cloneCards(mVisibleCards.values());\n\n        final Card[] hidden = cloneCards(mHiddenCards.values());\n\n        final HashSet<String> dismissible = new HashSet<String>(mDismissibleCards);\n\n        final String firstVisible = mLayout.getFirstVisibleCardTag();\n\n \n\n        return new CardStreamState(visible, hidden, dismissible, firstVisible);\n\n    }\n\n \n\n    private Card[] cloneCards(Collection<Card> cards) {\n\n        Card[] cardArray = new Card[cards.size()];\n\n        int i = 0;\n\n        for (Card c : cards) {\n\n            cardArray[i++] = c.createShallowClone();\n\n        }\n\n \n\n        return cardArray;\n\n    }\n\n \n\n}\n  ","CardStreamLinearLayout.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.batchstepsensor.cardstream;\n\n \n\nimport android.animation.Animator;\n\nimport android.animation.LayoutTransition;\n\nimport android.animation.ObjectAnimator;\n\nimport android.annotation.SuppressLint;\n\nimport android.annotation.TargetApi;\n\nimport android.content.Context;\n\nimport android.content.res.TypedArray;\n\nimport android.graphics.Rect;\n\nimport android.os.Build;\n\nimport android.util.AttributeSet;\n\nimport android.view.MotionEvent;\n\nimport android.view.View;\n\nimport android.view.ViewConfiguration;\n\nimport android.view.ViewGroup;\n\nimport android.view.ViewParent;\n\nimport android.widget.LinearLayout;\n\nimport android.widget.ScrollView;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.batchstepsensor.R;\n\n \n\nimport java.util.ArrayList;\n\n \n\n/**\n\n * A Layout that contains a stream of card views.\n\n */\n\npublic class CardStreamLinearLayout extends LinearLayout {\n\n \n\n    public static final int ANIMATION_SPEED_SLOW = 1001;\n\n    public static final int ANIMATION_SPEED_NORMAL = 1002;\n\n    public static final int ANIMATION_SPEED_FAST = 1003;\n\n \n\n    private static final String TAG = \"CardStreamLinearLayout\";\n\n    private final ArrayList<View> mFixedViewList = new ArrayList<View>();\n\n    private final Rect mChildRect = new Rect();\n\n    private CardStreamAnimator mAnimators;\n\n    private OnDissmissListener mDismissListener = null;\n\n    private boolean mLayouted = false;\n\n    private boolean mSwiping = false;\n\n    private String mFirstVisibleCardTag = null;\n\n    private boolean mShowInitialAnimation = false;\n\n \n\n    /**\n\n     * Handle touch events to fade/move dragged items as they are swiped out\n\n     */\n\n    private OnTouchListener mTouchListener = new OnTouchListener() {\n\n \n\n        private float mDownX;\n\n        private float mDownY;\n\n \n\n        @Override\n\n        public boolean onTouch(final View v, MotionEvent event) {\n\n \n\n            switch (event.getAction()) {\n\n                case MotionEvent.ACTION_DOWN:\n\n                    mDownX = event.getX();\n\n                    mDownY = event.getY();\n\n                    break;\n\n                case MotionEvent.ACTION_CANCEL:\n\n                    resetAnimatedView(v);\n\n                    mSwiping = false;\n\n                    mDownX = 0.f;\n\n                    mDownY = 0.f;\n\n                    break;\n\n                case MotionEvent.ACTION_MOVE: {\n\n \n\n                    float x = event.getX() + v.getTranslationX();\n\n                    float y = event.getY() + v.getTranslationY();\n\n \n\n                    mDownX = mDownX == 0.f ? x : mDownX;\n\n                    mDownY = mDownY == 0.f ? x : mDownY;\n\n \n\n                    float deltaX = x - mDownX;\n\n                    float deltaY = y - mDownY;\n\n \n\n                    if (!mSwiping && isSwiping(deltaX, deltaY)) {\n\n                        mSwiping = true;\n\n                        v.getParent().requestDisallowInterceptTouchEvent(true);\n\n                    } else {\n\n                        swipeView(v, deltaX, deltaY);\n\n                    }\n\n                }\n\n                break;\n\n                case MotionEvent.ACTION_UP: {\n\n                    // User let go - figure out whether to animate the view out, or back into place\n\n                    if (mSwiping) {\n\n                        float x = event.getX() + v.getTranslationX();\n\n                        float y = event.getY() + v.getTranslationY();\n\n \n\n                        float deltaX = x - mDownX;\n\n                        float deltaY = y - mDownX;\n\n                        float deltaXAbs = Math.abs(deltaX);\n\n \n\n                        // User let go - figure out whether to animate the view out, or back into place\n\n                        boolean remove = deltaXAbs > v.getWidth() / 4 && !isFixedView(v);\n\n                        if( remove )\n\n                            handleViewSwipingOut(v, deltaX, deltaY);\n\n                        else\n\n                            handleViewSwipingIn(v, deltaX, deltaY);\n\n                    }\n\n                    mDownX = 0.f;\n\n                    mDownY = 0.f;\n\n                    mSwiping = false;\n\n                }\n\n                break;\n\n                default:\n\n                    return false;\n\n            }\n\n            return false;\n\n        }\n\n    };\n\n    private int mSwipeSlop = -1;\n\n    /**\n\n     * Handle end-transition animation event of each child and launch a following animation.\n\n     */\n\n    private LayoutTransition.TransitionListener mTransitionListener\n\n            = new LayoutTransition.TransitionListener() {\n\n \n\n        @Override\n\n        public void startTransition(LayoutTransition transition, ViewGroup container, View\n\n                view, int transitionType) {\n\n            Log.d(TAG, \"Start LayoutTransition animation:\" + transitionType);\n\n        }\n\n \n\n        @Override\n\n        public void endTransition(LayoutTransition transition, ViewGroup container,\n\n                                  final View view, int transitionType) {\n\n \n\n            Log.d(TAG, \"End LayoutTransition animation:\" + transitionType);\n\n            if (transitionType == LayoutTransition.APPEARING) {\n\n                final View area = view.findViewById(R.id.card_actionarea);\n\n                if (area != null) {\n\n                    runShowActionAreaAnimation(container, area);\n\n                }\n\n            }\n\n        }\n\n    };\n\n    /**\n\n     * Handle a hierarchy change event\n\n     * when a new child is added, scroll to bottom and hide action area..\n\n     */\n\n    private OnHierarchyChangeListener mOnHierarchyChangeListener\n\n            = new OnHierarchyChangeListener() {\n\n        @Override\n\n        public void onChildViewAdded(final View parent, final View child) {\n\n \n\n            Log.d(TAG, \"child is added: \" + child);\n\n \n\n            ViewParent scrollView = parent.getParent();\n\n            if (scrollView != null && scrollView instanceof ScrollView) {\n\n                ((ScrollView) scrollView).fullScroll(FOCUS_DOWN);\n\n            }\n\n \n\n            if (getLayoutTransition() != null) {\n\n                View view = child.findViewById(R.id.card_actionarea);\n\n                if (view != null)\n\n                    view.setAlpha(0.f);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void onChildViewRemoved(View parent, View child) {\n\n            Log.d(TAG, \"child is removed: \" + child);\n\n            mFixedViewList.remove(child);\n\n        }\n\n    };\n\n    private int mLastDownX;\n\n \n\n    public CardStreamLinearLayout(Context context) {\n\n        super(context);\n\n        initialize(null, 0);\n\n    }\n\n \n\n    public CardStreamLinearLayout(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n        initialize(attrs, 0);\n\n    }\n\n \n\n    @SuppressLint(\"NewApi\")\n\n    public CardStreamLinearLayout(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n        initialize(attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * add a card view w/ canDismiss flag.\n\n     *\n\n     * @param cardView   a card view\n\n     * @param canDismiss flag to indicate this card is dismissible or not.\n\n     */\n\n    public void addCard(View cardView, boolean canDismiss) {\n\n        if (cardView.getParent() == null) {\n\n            initCard(cardView, canDismiss);\n\n \n\n            ViewGroup.LayoutParams param = cardView.getLayoutParams();\n\n            if(param == null)\n\n                param = generateDefaultLayoutParams();\n\n \n\n            super.addView(cardView, -1, param);\n\n        }\n\n    }\n\n \n\n    @Override\n\n    public void addView(View child, int index, ViewGroup.LayoutParams params) {\n\n        if (child.getParent() == null) {\n\n            initCard(child, true);\n\n            super.addView(child, index, params);\n\n        }\n\n    }\n\n \n\n    @TargetApi(Build.VERSION_CODES.HONEYCOMB)\n\n    @Override\n\n    protected void onLayout(boolean changed, int l, int t, int r, int b) {\n\n        super.onLayout(changed, l, t, r, b);\n\n        Log.d(TAG, \"onLayout: \" + changed);\n\n \n\n        if( changed && !mLayouted ){\n\n            mLayouted = true;\n\n \n\n            ObjectAnimator animator;\n\n            LayoutTransition layoutTransition = new LayoutTransition();\n\n \n\n            animator = mAnimators.getDisappearingAnimator(getContext());\n\n            layoutTransition.setAnimator(LayoutTransition.DISAPPEARING, animator);\n\n \n\n            animator = mAnimators.getAppearingAnimator(getContext());\n\n            layoutTransition.setAnimator(LayoutTransition.APPEARING, animator);\n\n \n\n            layoutTransition.addTransitionListener(mTransitionListener);\n\n \n\n            if( animator != null )\n\n                layoutTransition.setDuration(animator.getDuration());\n\n \n\n            setLayoutTransition(layoutTransition);\n\n \n\n            if( mShowInitialAnimation )\n\n                runInitialAnimations();\n\n \n\n            if (mFirstVisibleCardTag != null) {\n\n                scrollToCard(mFirstVisibleCardTag);\n\n                mFirstVisibleCardTag = null;\n\n            }\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Check whether a user moved enough distance to start a swipe action or not.\n\n     *\n\n     * @param deltaX\n\n     * @param deltaY\n\n     * @return true if a user is swiping.\n\n     */\n\n    protected boolean isSwiping(float deltaX, float deltaY) {\n\n \n\n        if (mSwipeSlop < 0) {\n\n            //get swipping slop from ViewConfiguration;\n\n            mSwipeSlop = ViewConfiguration.get(getContext()).getScaledTouchSlop();\n\n        }\n\n \n\n        boolean swipping = false;\n\n        float absDeltaX = Math.abs(deltaX);\n\n \n\n        if( absDeltaX > mSwipeSlop )\n\n            return true;\n\n \n\n        return swipping;\n\n    }\n\n \n\n    /**\n\n     * Swipe a view by moving distance\n\n     *\n\n     * @param child a target view\n\n     * @param deltaX x moving distance by x-axis.\n\n     * @param deltaY y moving distance by y-axis.\n\n     */\n\n    @TargetApi(Build.VERSION_CODES.HONEYCOMB)\n\n    protected void swipeView(View child, float deltaX, float deltaY) {\n\n        if (isFixedView(child)){\n\n            deltaX = deltaX / 4;\n\n        }\n\n \n\n        float deltaXAbs = Math.abs(deltaX);\n\n        float fractionCovered = deltaXAbs / (float) child.getWidth();\n\n \n\n        child.setTranslationX(deltaX);\n\n        child.setAlpha(1.f - fractionCovered);\n\n \n\n        if (deltaX > 0)\n\n            child.setRotationY(-15.f * fractionCovered);\n\n        else\n\n            child.setRotationY(15.f * fractionCovered);\n\n    }\n\n \n\n    protected void notifyOnDismissEvent( View child ){\n\n        if( child == null || mDismissListener == null )\n\n            return;\n\n \n\n        mDismissListener.onDismiss((String) child.getTag());\n\n    }\n\n \n\n    /**\n\n     * get the tag of the first visible child in this layout\n\n     *\n\n     * @return tag of the first visible child or null\n\n     */\n\n    public String getFirstVisibleCardTag() {\n\n \n\n        final int count = getChildCount();\n\n \n\n        if (count == 0)\n\n            return null;\n\n \n\n        for (int index = 0; index < count; ++index) {\n\n            //check the position of each view.\n\n            View child = getChildAt(index);\n\n            if (child.getGlobalVisibleRect(mChildRect) == true)\n\n                return (String) child.getTag();\n\n        }\n\n \n\n        return null;\n\n    }\n\n \n\n    /**\n\n     * Set the first visible card of this linear layout.\n\n     *\n\n     * @param tag tag of a card which should already added to this layout.\n\n     */\n\n    public void setFirstVisibleCard(String tag) {\n\n        if (tag == null)\n\n            return; //do nothing.\n\n \n\n        if (mLayouted) {\n\n            scrollToCard(tag);\n\n        } else {\n\n            //keep the tag for next use.\n\n            mFirstVisibleCardTag = tag;\n\n        }\n\n    }\n\n \n\n    /**\n\n     * If this flag is set,\n\n     * after finishing initial onLayout event, an initial animation which is defined in DefaultCardStreamAnimator is launched.\n\n     */\n\n    public void triggerShowInitialAnimation(){\n\n        mShowInitialAnimation = true;\n\n    }\n\n \n\n    @TargetApi(Build.VERSION_CODES.HONEYCOMB)\n\n    public void setCardStreamAnimator( CardStreamAnimator animators ){\n\n \n\n        if( animators == null )\n\n            mAnimators = new CardStreamAnimator.EmptyAnimator();\n\n        else\n\n            mAnimators = animators;\n\n \n\n        LayoutTransition layoutTransition = getLayoutTransition();\n\n \n\n        if( layoutTransition != null ){\n\n            layoutTransition.setAnimator( LayoutTransition.APPEARING,\n\n                    mAnimators.getAppearingAnimator(getContext()) );\n\n            layoutTransition.setAnimator( LayoutTransition.DISAPPEARING,\n\n                    mAnimators.getDisappearingAnimator(getContext()) );\n\n        }\n\n    }\n\n \n\n    /**\n\n     * set a OnDismissListener which called when user dismiss a card.\n\n     *\n\n     * @param listener\n\n     */\n\n    public void setOnDismissListener(OnDissmissListener listener) {\n\n        mDismissListener = listener;\n\n    }\n\n \n\n    @TargetApi(Build.VERSION_CODES.HONEYCOMB)\n\n    private void initialize(AttributeSet attrs, int defStyle) {\n\n \n\n        float speedFactor = 1.f;\n\n \n\n        if (attrs != null) {\n\n            TypedArray a = getContext().obtainStyledAttributes(attrs,\n\n                    R.styleable.CardStream, defStyle, 0);\n\n \n\n            if( a != null ){\n\n                int speedType = a.getInt(R.styleable.CardStream_animationDuration, 1001);\n\n                switch (speedType){\n\n                    case ANIMATION_SPEED_FAST:\n\n                        speedFactor = 0.5f;\n\n                        break;\n\n                    case ANIMATION_SPEED_NORMAL:\n\n                        speedFactor = 1.f;\n\n                        break;\n\n                    case ANIMATION_SPEED_SLOW:\n\n                        speedFactor = 2.f;\n\n                        break;\n\n                }\n\n \n\n                String animatorName = a.getString(R.styleable.CardStream_animators);\n\n \n\n                try {\n\n                    if( animatorName != null )\n\n                        mAnimators = (CardStreamAnimator) getClass().getClassLoader()\n\n                                .loadClass(animatorName).newInstance();\n\n                } catch (Exception e) {\n\n                    Log.e(TAG, \"Fail to load animator:\" + animatorName, e);\n\n                } finally {\n\n                    if(mAnimators == null)\n\n                        mAnimators = new DefaultCardStreamAnimator();\n\n                }\n\n                a.recycle();\n\n            }\n\n        }\n\n \n\n        mAnimators.setSpeedFactor(speedFactor);\n\n        mSwipeSlop = ViewConfiguration.get(getContext()).getScaledTouchSlop();\n\n        setOnHierarchyChangeListener(mOnHierarchyChangeListener);\n\n    }\n\n \n\n    private void initCard(View cardView, boolean canDismiss) {\n\n        resetAnimatedView(cardView);\n\n        cardView.setOnTouchListener(mTouchListener);\n\n        if (!canDismiss)\n\n            mFixedViewList.add(cardView);\n\n    }\n\n \n\n    private boolean isFixedView(View v) {\n\n        return mFixedViewList.contains(v);\n\n    }\n\n \n\n    private void resetAnimatedView(View child) {\n\n        child.setAlpha(1.f);\n\n        child.setTranslationX(0.f);\n\n        child.setTranslationY(0.f);\n\n        child.setRotation(0.f);\n\n        child.setRotationY(0.f);\n\n        child.setRotationX(0.f);\n\n        child.setScaleX(1.f);\n\n        child.setScaleY(1.f);\n\n    }\n\n \n\n    @TargetApi(Build.VERSION_CODES.HONEYCOMB)\n\n    private void runInitialAnimations() {\n\n        if( mAnimators == null )\n\n            return;\n\n \n\n        final int count = getChildCount();\n\n \n\n        for (int index = 0; index < count; ++index) {\n\n            final View child = getChildAt(index);\n\n            ObjectAnimator animator =  mAnimators.getInitalAnimator(getContext());\n\n            if( animator != null ){\n\n                animator.setTarget(child);\n\n                animator.start();\n\n            }\n\n        }\n\n    }\n\n \n\n    private void runShowActionAreaAnimation(View parent, View area) {\n\n        area.setPivotY(0.f);\n\n        area.setPivotX(parent.getWidth() / 2.f);\n\n \n\n        area.setAlpha(0.5f);\n\n        area.setRotationX(-90.f);\n\n        area.animate().rotationX(0.f).alpha(1.f).setDuration(400);\n\n    }\n\n \n\n    private void handleViewSwipingOut(final View child, float deltaX, float deltaY) {\n\n        ObjectAnimator animator = mAnimators.getSwipeOutAnimator(child, deltaX, deltaY);\n\n        if( animator != null ){\n\n            animator.addListener(new EndAnimationWrapper() {\n\n                @Override\n\n                public void onAnimationEnd(Animator animation) {\n\n                    removeView(child);\n\n                    notifyOnDismissEvent(child);\n\n                }\n\n            });\n\n        } else {\n\n            removeView(child);\n\n            notifyOnDismissEvent(child);\n\n        }\n\n \n\n        if( animator != null ){\n\n            animator.setTarget(child);\n\n            animator.start();\n\n        }\n\n    }\n\n \n\n    private void handleViewSwipingIn(final View child, float deltaX, float deltaY) {\n\n        ObjectAnimator animator = mAnimators.getSwipeInAnimator(child, deltaX, deltaY);\n\n        if( animator != null ){\n\n            animator.addListener(new EndAnimationWrapper() {\n\n                @Override\n\n                public void onAnimationEnd(Animator animation) {\n\n                    child.setTranslationY(0.f);\n\n                    child.setTranslationX(0.f);\n\n                }\n\n            });\n\n        } else {\n\n            child.setTranslationY(0.f);\n\n            child.setTranslationX(0.f);\n\n        }\n\n \n\n        if( animator != null ){\n\n            animator.setTarget(child);\n\n            animator.start();\n\n        }\n\n    }\n\n \n\n    private void scrollToCard(String tag) {\n\n \n\n \n\n        final int count = getChildCount();\n\n        for (int index = 0; index < count; ++index) {\n\n            View child = getChildAt(index);\n\n \n\n            if (tag.equals(child.getTag())) {\n\n \n\n                ViewParent parent = getParent();\n\n                if( parent != null && parent instanceof ScrollView ){\n\n                    ((ScrollView)parent).smoothScrollTo(\n\n                            0, child.getTop() - getPaddingTop() - child.getPaddingTop());\n\n                }\n\n                return;\n\n            }\n\n        }\n\n    }\n\n \n\n    public interface OnDissmissListener {\n\n        public void onDismiss(String tag);\n\n    }\n\n \n\n    /**\n\n     * Empty default AnimationListener\n\n     */\n\n    private abstract class EndAnimationWrapper implements Animator.AnimatorListener {\n\n \n\n        @Override\n\n        public void onAnimationStart(Animator animation) {\n\n        }\n\n \n\n        @Override\n\n        public void onAnimationCancel(Animator animation) {\n\n        }\n\n \n\n        @Override\n\n        public void onAnimationRepeat(Animator animation) {\n\n        }\n\n    }//end of inner class\n\n}\n  ","CardStreamState.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.batchstepsensor.cardstream;\n\n \n\nimport java.util.HashSet;\n\n \n\n/**\n\n * A struct object that holds the state of a {@link CardStreamFragment}.\n\n */\n\npublic class CardStreamState {\n\n    protected Card[] visibleCards;\n\n    protected Card[] hiddenCards;\n\n    protected HashSet<String> dismissibleCards;\n\n    protected String shownTag;\n\n \n\n    protected CardStreamState(Card[] visible, Card[] hidden, HashSet<String> dismissible, String shownTag) {\n\n        visibleCards = visible;\n\n        hiddenCards = hidden;\n\n        dismissibleCards = dismissible;\n\n        this.shownTag = shownTag;\n\n    }\n\n \n\n}\n  ","DefaultCardStreamAnimator.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.batchstepsensor.cardstream;\n\n \n\nimport android.animation.ObjectAnimator;\n\nimport android.animation.PropertyValuesHolder;\n\nimport android.annotation.TargetApi;\n\nimport android.content.Context;\n\nimport android.graphics.Point;\n\nimport android.os.Build;\n\nimport android.view.View;\n\nimport android.view.WindowManager;\n\nimport android.view.animation.BounceInterpolator;\n\n \n\nclass DefaultCardStreamAnimator extends CardStreamAnimator {\n\n \n\n    @TargetApi(Build.VERSION_CODES.HONEYCOMB)\n\n    @Override\n\n    public ObjectAnimator getDisappearingAnimator(Context context){\n\n \n\n        ObjectAnimator animator = ObjectAnimator.ofPropertyValuesHolder(new Object(),\n\n                PropertyValuesHolder.ofFloat(\"alpha\", 1.f, 0.f),\n\n                PropertyValuesHolder.ofFloat(\"scaleX\", 1.f, 0.f),\n\n                PropertyValuesHolder.ofFloat(\"scaleY\", 1.f, 0.f),\n\n                PropertyValuesHolder.ofFloat(\"rotation\", 0.f, 270.f));\n\n \n\n        animator.setDuration((long) (200 * mSpeedFactor));\n\n        return animator;\n\n    }\n\n \n\n    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2)\n\n    @Override\n\n    public ObjectAnimator getAppearingAnimator(Context context){\n\n \n\n        final Point outPoint = new Point();\n\n        WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);\n\n        wm.getDefaultDisplay().getSize(outPoint);\n\n \n\n        ObjectAnimator animator = ObjectAnimator.ofPropertyValuesHolder(new Object(),\n\n                PropertyValuesHolder.ofFloat(\"alpha\", 0.f, 1.f),\n\n                PropertyValuesHolder.ofFloat(\"translationY\", outPoint.y / 2.f, 0.f),\n\n                PropertyValuesHolder.ofFloat(\"rotation\", -45.f, 0.f));\n\n \n\n        animator.setDuration((long) (200 * mSpeedFactor));\n\n        return animator;\n\n    }\n\n \n\n    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2)\n\n    @Override\n\n    public ObjectAnimator getInitalAnimator(Context context){\n\n \n\n        ObjectAnimator animator = ObjectAnimator.ofPropertyValuesHolder(new Object(),\n\n                PropertyValuesHolder.ofFloat(\"alpha\", 0.5f, 1.f),\n\n                PropertyValuesHolder.ofFloat(\"rotation\", 60.f, 0.f));\n\n \n\n        animator.setDuration((long) (200 * mSpeedFactor));\n\n        return animator;\n\n    }\n\n \n\n    @TargetApi(Build.VERSION_CODES.HONEYCOMB)\n\n    @Override\n\n    public ObjectAnimator getSwipeInAnimator(View view, float deltaX, float deltaY){\n\n \n\n        float deltaXAbs = Math.abs(deltaX);\n\n \n\n        float fractionCovered = 1.f - (deltaXAbs / view.getWidth());\n\n        long duration = Math.abs((int) ((1 - fractionCovered) * 200 * mSpeedFactor));\n\n \n\n        // Animate position and alpha of swiped item\n\n \n\n        ObjectAnimator animator = ObjectAnimator.ofPropertyValuesHolder(view,\n\n                PropertyValuesHolder.ofFloat(\"alpha\", 1.f),\n\n                PropertyValuesHolder.ofFloat(\"translationX\", 0.f),\n\n                PropertyValuesHolder.ofFloat(\"rotationY\", 0.f));\n\n \n\n        animator.setDuration(duration).setInterpolator(new BounceInterpolator());\n\n \n\n        return  animator;\n\n    }\n\n \n\n    @TargetApi(Build.VERSION_CODES.HONEYCOMB)\n\n    @Override\n\n    public ObjectAnimator getSwipeOutAnimator(View view, float deltaX, float deltaY){\n\n \n\n        float endX;\n\n        float endRotationY;\n\n \n\n        float deltaXAbs = Math.abs(deltaX);\n\n \n\n        float fractionCovered = 1.f - (deltaXAbs / view.getWidth());\n\n        long duration = Math.abs((int) ((1 - fractionCovered) * 200 * mSpeedFactor));\n\n \n\n        endX = deltaX < 0 ? -view.getWidth() : view.getWidth();\n\n        if (deltaX > 0)\n\n            endRotationY = -15.f;\n\n        else\n\n            endRotationY = 15.f;\n\n \n\n        // Animate position and alpha of swiped item\n\n        return ObjectAnimator.ofPropertyValuesHolder(view,\n\n                PropertyValuesHolder.ofFloat(\"alpha\", 0.f),\n\n                PropertyValuesHolder.ofFloat(\"translationX\", endX),\n\n                PropertyValuesHolder.ofFloat(\"rotationY\", endRotationY)).setDuration(duration);\n\n \n\n    }\n\n \n\n}\n  ","OnCardClickListener.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.batchstepsensor.cardstream;\n\n \n\npublic interface OnCardClickListener {\n\n    public void onCardClick(int cardActionId, String cardTag);\n\n}\n  ","StreamRetentionFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\npackage com.example.android.batchstepsensor.cardstream;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\n \n\npublic class StreamRetentionFragment extends Fragment {\n\n \n\n    CardStreamState mState;\n\n \n\n    @Override\n\n    public void onActivityCreated(Bundle savedInstanceState) {\n\n        super.onActivityCreated(savedInstanceState);\n\n        setRetainInstance(true);\n\n    }\n\n \n\n    public void storeCardStream(CardStreamState state) {\n\n        mState = state;\n\n    }\n\n \n\n    public CardStreamState getCardStream() {\n\n        return mState;\n\n    }\n\n}\n  "},"BatchStepSensorFragment.java":"\n    \n\n/*\n\n* Copyright 2014 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\npackage com.example.android.batchstepsensor;\n\n \n\nimport android.app.Activity;\n\nimport android.content.pm.PackageManager;\n\nimport android.hardware.Sensor;\n\nimport android.hardware.SensorEvent;\n\nimport android.hardware.SensorEventListener;\n\nimport android.hardware.SensorManager;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.batchstepsensor.cardstream.Card;\n\nimport com.example.android.batchstepsensor.cardstream.CardStream;\n\nimport com.example.android.batchstepsensor.cardstream.CardStreamFragment;\n\nimport com.example.android.batchstepsensor.cardstream.OnCardClickListener;\n\n \n\npublic class BatchStepSensorFragment extends Fragment implements OnCardClickListener {\n\n \n\n    public static final String TAG = \"StepSensorSample\";\n\n    // Cards\n\n    private CardStreamFragment mCards = null;\n\n \n\n    // Card tags\n\n    public static final String CARD_INTRO = \"intro\";\n\n    public static final String CARD_REGISTER_DETECTOR = \"register_detector\";\n\n    public static final String CARD_REGISTER_COUNTER = \"register_counter\";\n\n    public static final String CARD_BATCHING_DESCRIPTION = \"register_batching_description\";\n\n    public static final String CARD_COUNTING = \"counting\";\n\n    public static final String CARD_EXPLANATION = \"explanation\";\n\n    public static final String CARD_NOBATCHSUPPORT = \"error\";\n\n \n\n    // Actions from REGISTER cards\n\n    public static final int ACTION_REGISTER_DETECT_NOBATCHING = 10;\n\n    public static final int ACTION_REGISTER_DETECT_BATCHING_5s = 11;\n\n    public static final int ACTION_REGISTER_DETECT_BATCHING_10s = 12;\n\n    public static final int ACTION_REGISTER_COUNT_NOBATCHING = 21;\n\n    public static final int ACTION_REGISTER_COUNT_BATCHING_5s = 22;\n\n    public static final int ACTION_REGISTER_COUNT_BATCHING_10s = 23;\n\n    // Action from COUNTING card\n\n    public static final int ACTION_UNREGISTER = 1;\n\n    // Actions from description cards\n\n    private static final int ACTION_BATCHING_DESCRIPTION_DISMISS = 2;\n\n    private static final int ACTION_EXPLANATION_DISMISS = 3;\n\n \n\n    // State of application, used to register for sensors when app is restored\n\n    public static final int STATE_OTHER = 0;\n\n    public static final int STATE_COUNTER = 1;\n\n    public static final int STATE_DETECTOR = 2;\n\n \n\n    // Bundle tags used to store data when restoring application state\n\n    private static final String BUNDLE_STATE = \"state\";\n\n    private static final String BUNDLE_LATENCY = \"latency\";\n\n    private static final String BUNDLE_STEPS = \"steps\";\n\n \n\n    // max batch latency is specified in microseconds\n\n    private static final int BATCH_LATENCY_0 = 0; // no batching\n\n    private static final int BATCH_LATENCY_10s = 10000000;\n\n    private static final int BATCH_LATENCY_5s = 5000000;\n\n \n\n    /*\n\n    For illustration we keep track of the last few events and show their delay from when the\n\n    event occurred until it was received by the event listener.\n\n    These variables keep track of the list of timestamps and the number of events.\n\n     */\n\n    // Number of events to keep in queue and display on card\n\n    private static final int EVENT_QUEUE_LENGTH = 10;\n\n    // List of timestamps when sensor events occurred\n\n    private float[] mEventDelays = new float[EVENT_QUEUE_LENGTH];\n\n \n\n    // number of events in event list\n\n    private int mEventLength = 0;\n\n    // pointer to next entry in sensor event list\n\n    private int mEventData = 0;\n\n \n\n    // Steps counted in current session\n\n    private int mSteps = 0;\n\n    // Value of the step counter sensor when the listener was registered.\n\n    // (Total steps are calculated from this value.)\n\n    private int mCounterSteps = 0;\n\n    // Steps counted by the step counter previously. Used to keep counter consistent across rotation\n\n    // changes\n\n    private int mPreviousCounterSteps = 0;\n\n    // State of the app (STATE_OTHER, STATE_COUNTER or STATE_DETECTOR)\n\n    private int mState = STATE_OTHER;\n\n    // When a listener is registered, the batch sensor delay in microseconds\n\n    private int mMaxDelay = 0;\n\n \n\n    @Override\n\n    public void onResume() {\n\n        super.onResume();\n\n \n\n        CardStreamFragment stream = getCardStream();\n\n        if (stream.getVisibleCardCount() < 1) {\n\n            // No cards are visible, started for the first time\n\n            // Prepare all cards and show the intro card.\n\n            initialiseCards();\n\n            showIntroCard();\n\n            // Show the registration card if the hardware is supported, show an error otherwise\n\n            if (isKitkatWithStepSensor()) {\n\n                showRegisterCard();\n\n            } else {\n\n                showErrorCard();\n\n            }\n\n        }\n\n    }\n\n \n\n    @Override\n\n    public void onPause() {\n\n        super.onPause();\n\n        // Unregister the listener when the application is paused\n\n        unregisterListeners();\n\n    }\n\n \n\n    /**\n\n     * Returns true if this device is supported. It needs to be running Android KitKat (4.4) or\n\n     * higher and has a step counter and step detector sensor.\n\n     * This check is useful when an app provides an alternative implementation or different\n\n     * functionality if the step sensors are not available or this code runs on a platform version\n\n     * below Android KitKat. If this functionality is required, then the minSDK parameter should\n\n     * be specified appropriately in the AndroidManifest.\n\n     *\n\n     * @return True iff the device can run this sample\n\n     */\n\n    private boolean isKitkatWithStepSensor() {\n\n        // Require at least Android KitKat\n\n        int currentApiVersion = android.os.Build.VERSION.SDK_INT;\n\n        // Check that the device supports the step counter and detector sensors\n\n        PackageManager packageManager = getActivity().getPackageManager();\n\n        return currentApiVersion >= android.os.Build.VERSION_CODES.KITKAT\n\n                && packageManager.hasSystemFeature(PackageManager.FEATURE_SENSOR_STEP_COUNTER)\n\n                && packageManager.hasSystemFeature(PackageManager.FEATURE_SENSOR_STEP_DETECTOR);\n\n    }\n\n \n\n    /**\n\n     * Handles a click on a card action.\n\n     * Registers a SensorEventListener (see {@link #registerEventListener(int, int)}) with the\n\n     * selected delay, dismisses cards and unregisters the listener\n\n     * (see {@link #unregisterListeners()}).\n\n     * Actions are defined when a card is created.\n\n     *\n\n     * @param cardActionId\n\n     * @param cardTag\n\n     */\n\n    @Override\n\n    public void onCardClick(int cardActionId, String cardTag) {\n\n \n\n        switch (cardActionId) {\n\n            // Register Step Counter card\n\n            case ACTION_REGISTER_COUNT_NOBATCHING:\n\n                registerEventListener(BATCH_LATENCY_0, Sensor.TYPE_STEP_COUNTER);\n\n                break;\n\n            case ACTION_REGISTER_COUNT_BATCHING_5s:\n\n                registerEventListener(BATCH_LATENCY_5s, Sensor.TYPE_STEP_COUNTER);\n\n                break;\n\n            case ACTION_REGISTER_COUNT_BATCHING_10s:\n\n                registerEventListener(BATCH_LATENCY_10s, Sensor.TYPE_STEP_COUNTER);\n\n                break;\n\n \n\n            // Register Step Detector card\n\n            case ACTION_REGISTER_DETECT_NOBATCHING:\n\n                registerEventListener(BATCH_LATENCY_0, Sensor.TYPE_STEP_DETECTOR);\n\n                break;\n\n            case ACTION_REGISTER_DETECT_BATCHING_5s:\n\n                registerEventListener(BATCH_LATENCY_5s, Sensor.TYPE_STEP_DETECTOR);\n\n                break;\n\n            case ACTION_REGISTER_DETECT_BATCHING_10s:\n\n                registerEventListener(BATCH_LATENCY_10s, Sensor.TYPE_STEP_DETECTOR);\n\n                break;\n\n \n\n            // Unregister card\n\n            case ACTION_UNREGISTER:\n\n                showRegisterCard();\n\n                unregisterListeners();\n\n                // reset the application state when explicitly unregistered\n\n                mState = STATE_OTHER;\n\n                break;\n\n            // Explanation cards\n\n            case ACTION_BATCHING_DESCRIPTION_DISMISS:\n\n                // permanently remove the batch description card, it will not be shown again\n\n                getCardStream().removeCard(CARD_BATCHING_DESCRIPTION);\n\n                break;\n\n            case ACTION_EXPLANATION_DISMISS:\n\n                // permanently remove the explanation card, it will not be shown again\n\n                getCardStream().removeCard(CARD_EXPLANATION);\n\n        }\n\n \n\n        // For register cards, display the counting card\n\n        if (cardTag.equals(CARD_REGISTER_COUNTER) || cardTag.equals(CARD_REGISTER_DETECTOR)) {\n\n            showCountingCards();\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Register a {@link android.hardware.SensorEventListener} for the sensor and max batch delay.\n\n     * The maximum batch delay specifies the maximum duration in microseconds for which subsequent\n\n     * sensor events can be temporarily stored by the sensor before they are delivered to the\n\n     * registered SensorEventListener. A larger delay allows the system to handle sensor events more\n\n     * efficiently, allowing the system to switch to a lower power state while the sensor is\n\n     * capturing events. Once the max delay is reached, all stored events are delivered to the\n\n     * registered listener. Note that this value only specifies the maximum delay, the listener may\n\n     * receive events quicker. A delay of 0 disables batch mode and registers the listener in\n\n     * continuous mode.\n\n     * The optimium batch delay depends on the application. For example, a delay of 5 seconds or\n\n     * higher may be appropriate for an  application that does not update the UI in real time.\n\n     *\n\n     * @param maxdelay\n\n     * @param sensorType\n\n     */\n\n    private void registerEventListener(int maxdelay, int sensorType) {\n\n \n\n        // Keep track of state so that the correct sensor type and batch delay can be set up when\n\n        // the app is restored (for example on screen rotation).\n\n        mMaxDelay = maxdelay;\n\n        if (sensorType == Sensor.TYPE_STEP_COUNTER) {\n\n            mState = STATE_COUNTER;\n\n            /*\n\n            Reset the initial step counter value, the first event received by the event listener is\n\n            stored in mCounterSteps and used to calculate the total number of steps taken.\n\n             */\n\n            mCounterSteps = 0;\n\n            Log.i(TAG, \"Event listener for step counter sensor registered with a max delay of \"\n\n                    + mMaxDelay);\n\n        } else {\n\n            mState = STATE_DETECTOR;\n\n            Log.i(TAG, \"Event listener for step detector sensor registered with a max delay of \"\n\n                    + mMaxDelay);\n\n        }\n\n \n\n        // Get the default sensor for the sensor type from the SenorManager\n\n        SensorManager sensorManager =\n\n                (SensorManager) getActivity().getSystemService(Activity.SENSOR_SERVICE);\n\n        // sensorType is either Sensor.TYPE_STEP_COUNTER or Sensor.TYPE_STEP_DETECTOR\n\n        Sensor sensor = sensorManager.getDefaultSensor(sensorType);\n\n \n\n        // Register the listener for this sensor in batch mode.\n\n        // If the max delay is 0, events will be delivered in continuous mode without batching.\n\n        final boolean batchMode = sensorManager.registerListener(\n\n                mListener, sensor, SensorManager.SENSOR_DELAY_NORMAL, maxdelay);\n\n \n\n        if (!batchMode) {\n\n            // Batch mode could not be enabled, show a warning message and switch to continuous mode\n\n            getCardStream().getCard(CARD_NOBATCHSUPPORT)\n\n                    .setDescription(getString(R.string.warning_nobatching));\n\n            getCardStream().showCard(CARD_NOBATCHSUPPORT);\n\n            Log.w(TAG, \"Could not register sensor listener in batch mode, \" +\n\n                    \"falling back to continuous mode.\");\n\n        }\n\n \n\n        if (maxdelay > 0 && batchMode) {\n\n            // Batch mode was enabled successfully, show a description card\n\n            getCardStream().showCard(CARD_BATCHING_DESCRIPTION);\n\n        }\n\n \n\n        // Show the explanation card\n\n        getCardStream().showCard(CARD_EXPLANATION);\n\n \n\n \n\n    }\n\n \n\n    /**\n\n     * Unregisters the sensor listener if it is registered.\n\n     */\n\n    private void unregisterListeners() {\n\n        SensorManager sensorManager =\n\n                (SensorManager) getActivity().getSystemService(Activity.SENSOR_SERVICE);\n\n        sensorManager.unregisterListener(mListener);\n\n        Log.i(TAG, \"Sensor listener unregistered.\");\n\n \n\n    }\n\n \n\n    /**\n\n     * Resets the step counter by clearing all counting variables and lists.\n\n     */\n\n    private void resetCounter() {\n\n        mSteps = 0;\n\n        mCounterSteps = 0;\n\n        mEventLength = 0;\n\n        mEventDelays = new float[EVENT_QUEUE_LENGTH];\n\n        mPreviousCounterSteps = 0;\n\n    }\n\n \n\n \n\n    /**\n\n     * Listener that handles step sensor events for step detector and step counter sensors.\n\n     */\n\n    private final SensorEventListener mListener = new SensorEventListener() {\n\n        @Override\n\n        public void onSensorChanged(SensorEvent event) {\n\n            // store the delay of this event\n\n            recordDelay(event);\n\n            final String delayString = getDelayString();\n\n \n\n            if (event.sensor.getType() == Sensor.TYPE_STEP_DETECTOR) {\n\n                // A step detector event is received for each step.\n\n                // This means we need to count steps ourselves\n\n \n\n                mSteps += event.values.length;\n\n \n\n                // Update the card with the latest step count\n\n                getCardStream().getCard(CARD_COUNTING)\n\n                        .setTitle(getString(R.string.counting_title, mSteps))\n\n                        .setDescription(getString(R.string.counting_description,\n\n                                getString(R.string.sensor_detector), mMaxDelay, delayString));\n\n \n\n                Log.i(TAG,\n\n                        \"New step detected by STEP_DETECTOR sensor. Total step count: \" + mSteps);\n\n \n\n            } else if (event.sensor.getType() == Sensor.TYPE_STEP_COUNTER) {\n\n \n\n                /*\n\n                A step counter event contains the total number of steps since the listener\n\n                was first registered. We need to keep track of this initial value to calculate the\n\n                number of steps taken, as the first value a listener receives is undefined.\n\n                 */\n\n                if (mCounterSteps < 1) {\n\n                    // initial value\n\n                    mCounterSteps = (int) event.values[0];\n\n                }\n\n \n\n                // Calculate steps taken based on first counter value received.\n\n                mSteps = (int) event.values[0] - mCounterSteps;\n\n \n\n                // Add the number of steps previously taken, otherwise the counter would start at 0.\n\n                // This is needed to keep the counter consistent across rotation changes.\n\n                mSteps = mSteps + mPreviousCounterSteps;\n\n \n\n                // Update the card with the latest step count\n\n                getCardStream().getCard(CARD_COUNTING)\n\n                        .setTitle(getString(R.string.counting_title, mSteps))\n\n                        .setDescription(getString(R.string.counting_description,\n\n                                getString(R.string.sensor_counter), mMaxDelay, delayString));\n\n                Log.i(TAG, \"New step detected by STEP_COUNTER sensor. Total step count: \" + mSteps);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void onAccuracyChanged(Sensor sensor, int accuracy) {\n\n \n\n        }\n\n    };\n\n \n\n    /**\n\n     * Records the delay for the event.\n\n     *\n\n     * @param event\n\n     */\n\n    private void recordDelay(SensorEvent event) {\n\n        // Calculate the delay from when event was recorded until it was received here in ms\n\n        // Event timestamp is recorded in us accuracy, but ms accuracy is sufficient here\n\n        mEventDelays[mEventData] = System.currentTimeMillis() - (event.timestamp / 1000000L);\n\n \n\n        // Increment length counter\n\n        mEventLength = Math.min(EVENT_QUEUE_LENGTH, mEventLength + 1);\n\n        // Move pointer to the next (oldest) location\n\n        mEventData = (mEventData + 1) % EVENT_QUEUE_LENGTH;\n\n    }\n\n \n\n    private final StringBuffer mDelayStringBuffer = new StringBuffer();\n\n \n\n    /**\n\n     * Returns a string describing the sensor delays recorded in\n\n     * {@link #recordDelay(android.hardware.SensorEvent)}.\n\n     *\n\n     * @return\n\n     */\n\n    private String getDelayString() {\n\n        // Empty the StringBuffer\n\n        mDelayStringBuffer.setLength(0);\n\n \n\n        // Loop over all recorded delays and append them to the buffer as a decimal\n\n        for (int i = 0; i < mEventLength; i++) {\n\n            if (i > 0) {\n\n                mDelayStringBuffer.append(\", \");\n\n            }\n\n            final int index = (mEventData + i) % EVENT_QUEUE_LENGTH;\n\n            final float delay = mEventDelays[index] / 1000f; // convert delay from ms into s\n\n            mDelayStringBuffer.append(String.format(\"%1.1f\", delay));\n\n        }\n\n \n\n        return mDelayStringBuffer.toString();\n\n    }\n\n \n\n    /**\n\n     * Records the state of the application into the {@link android.os.Bundle}.\n\n     *\n\n     * @param outState\n\n     */\n\n    @Override\n\n    public void onSaveInstanceState(Bundle outState) {\n\n        super.onSaveInstanceState(outState);\n\n        // Store all variables required to restore the state of the application\n\n        outState.putInt(BUNDLE_LATENCY, mMaxDelay);\n\n        outState.putInt(BUNDLE_STATE, mState);\n\n        outState.putInt(BUNDLE_STEPS, mSteps);\n\n    }\n\n \n\n    @Override\n\n    public void onActivityCreated(Bundle savedInstanceState) {\n\n        super.onActivityCreated(savedInstanceState);\n\n        // Fragment is being restored, reinitialise its state with data from the bundle\n\n        if (savedInstanceState != null) {\n\n            resetCounter();\n\n            mSteps = savedInstanceState.getInt(BUNDLE_STEPS);\n\n            mState = savedInstanceState.getInt(BUNDLE_STATE);\n\n            mMaxDelay = savedInstanceState.getInt(BUNDLE_LATENCY);\n\n \n\n            // Register listeners again if in detector or counter states with restored delay\n\n            if (mState == STATE_DETECTOR) {\n\n                registerEventListener(mMaxDelay, Sensor.TYPE_STEP_DETECTOR);\n\n            } else if (mState == STATE_COUNTER) {\n\n                // store the previous number of steps to keep  step counter count consistent\n\n                mPreviousCounterSteps = mSteps;\n\n                registerEventListener(mMaxDelay, Sensor.TYPE_STEP_COUNTER);\n\n            }\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Hides the registration cards, reset the counter and show the step counting card.\n\n     */\n\n    private void showCountingCards() {\n\n        // Hide the registration cards\n\n        getCardStream().hideCard(CARD_REGISTER_DETECTOR);\n\n        getCardStream().hideCard(CARD_REGISTER_COUNTER);\n\n \n\n        // Show the explanation card if it has not been dismissed\n\n        getCardStream().showCard(CARD_EXPLANATION);\n\n \n\n        // Reset the step counter, then show the step counting card\n\n        resetCounter();\n\n \n\n        // Set the inital text for the step counting card before a step is recorded\n\n        String sensor = \"-\";\n\n        if (mState == STATE_COUNTER) {\n\n            sensor = getString(R.string.sensor_counter);\n\n        } else if (mState == STATE_DETECTOR) {\n\n            sensor = getString(R.string.sensor_detector);\n\n        }\n\n        // Set initial text\n\n        getCardStream().getCard(CARD_COUNTING)\n\n                .setTitle(getString(R.string.counting_title, 0))\n\n                .setDescription(getString(R.string.counting_description, sensor, mMaxDelay, \"-\"));\n\n \n\n        // Show the counting card and make it undismissable\n\n        getCardStream().showCard(CARD_COUNTING, false);\n\n \n\n    }\n\n \n\n    /**\n\n     * Show the introduction card\n\n     */\n\n    private void showIntroCard() {\n\n        Card c = new Card.Builder(this, CARD_INTRO)\n\n                .setTitle(getString(R.string.intro_title))\n\n                .setDescription(getString(R.string.intro_message))\n\n                .build(getActivity());\n\n        getCardStream().addCard(c, true);\n\n    }\n\n \n\n    /**\n\n     * Show two registration cards, one for the step detector and counter sensors.\n\n     */\n\n    private void showRegisterCard() {\n\n        // Hide the counting and explanation cards\n\n        getCardStream().hideCard(CARD_BATCHING_DESCRIPTION);\n\n        getCardStream().hideCard(CARD_EXPLANATION);\n\n        getCardStream().hideCard(CARD_COUNTING);\n\n \n\n        // Show two undismissable registration cards, one for each step sensor\n\n        getCardStream().showCard(CARD_REGISTER_DETECTOR, false);\n\n        getCardStream().showCard(CARD_REGISTER_COUNTER, false);\n\n    }\n\n \n\n    /**\n\n     * Show the error card.\n\n     */\n\n    private void showErrorCard() {\n\n        getCardStream().showCard(CARD_NOBATCHSUPPORT, false);\n\n    }\n\n \n\n    /**\n\n     * Initialise Cards.\n\n     */\n\n    private void initialiseCards() {\n\n        // Step counting\n\n        Card c = new Card.Builder(this, CARD_COUNTING)\n\n                .setTitle(\"Steps\")\n\n                .setDescription(\"\")\n\n                .addAction(\"Unregister Listener\", ACTION_UNREGISTER, Card.ACTION_NEGATIVE)\n\n                .build(getActivity());\n\n        getCardStream().addCard(c);\n\n \n\n        // Register step detector listener\n\n        c = new Card.Builder(this, CARD_REGISTER_DETECTOR)\n\n                .setTitle(getString(R.string.register_detector_title))\n\n                .setDescription(getString(R.string.register_detector_description))\n\n                .addAction(getString(R.string.register_0),\n\n                        ACTION_REGISTER_DETECT_NOBATCHING, Card.ACTION_NEUTRAL)\n\n                .addAction(getString(R.string.register_5),\n\n                        ACTION_REGISTER_DETECT_BATCHING_5s, Card.ACTION_NEUTRAL)\n\n                .addAction(getString(R.string.register_10),\n\n                        ACTION_REGISTER_DETECT_BATCHING_10s, Card.ACTION_NEUTRAL)\n\n                .build(getActivity());\n\n        getCardStream().addCard(c);\n\n \n\n        // Register step counter listener\n\n        c = new Card.Builder(this, CARD_REGISTER_COUNTER)\n\n                .setTitle(getString(R.string.register_counter_title))\n\n                .setDescription(getString(R.string.register_counter_description))\n\n                .addAction(getString(R.string.register_0),\n\n                        ACTION_REGISTER_COUNT_NOBATCHING, Card.ACTION_NEUTRAL)\n\n                .addAction(getString(R.string.register_5),\n\n                        ACTION_REGISTER_COUNT_BATCHING_5s, Card.ACTION_NEUTRAL)\n\n                .addAction(getString(R.string.register_10),\n\n                        ACTION_REGISTER_COUNT_BATCHING_10s, Card.ACTION_NEUTRAL)\n\n                .build(getActivity());\n\n        getCardStream().addCard(c);\n\n \n\n \n\n        // Batching description\n\n        c = new Card.Builder(this, CARD_BATCHING_DESCRIPTION)\n\n                .setTitle(getString(R.string.batching_queue_title))\n\n                .setDescription(getString(R.string.batching_queue_description))\n\n                .addAction(getString(R.string.action_notagain),\n\n                        ACTION_BATCHING_DESCRIPTION_DISMISS, Card.ACTION_POSITIVE)\n\n                .build(getActivity());\n\n        getCardStream().addCard(c);\n\n \n\n        // Explanation\n\n        c = new Card.Builder(this, CARD_EXPLANATION)\n\n                .setDescription(getString(R.string.explanation_description))\n\n                .addAction(getString(R.string.action_notagain),\n\n                        ACTION_EXPLANATION_DISMISS, Card.ACTION_POSITIVE)\n\n                .build(getActivity());\n\n        getCardStream().addCard(c);\n\n \n\n        // Error\n\n        c = new Card.Builder(this, CARD_NOBATCHSUPPORT)\n\n                .setTitle(getString(R.string.error_title))\n\n                .setDescription(getString(R.string.error_nosensor))\n\n                .build(getActivity());\n\n        getCardStream().addCard(c);\n\n    }\n\n \n\n    /**\n\n     * Returns the cached CardStreamFragment used to show cards.\n\n     *\n\n     * @return\n\n     */\n\n    private CardStreamFragment getCardStream() {\n\n        if (mCards == null) {\n\n            mCards = ((CardStream) getActivity()).getCardStream();\n\n        }\n\n        return mCards;\n\n    }\n\n \n\n}\n  ","MainActivity.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\npackage com.example.android.batchstepsensor;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentManager;\n\nimport android.support.v4.app.FragmentTransaction;\n\nimport android.view.Menu;\n\n \n\nimport com.example.android.common.activities.SampleActivityBase;\n\nimport com.example.android.common.logger.Log;\n\n \n\nimport com.example.android.batchstepsensor.cardstream.CardStream;\n\nimport com.example.android.batchstepsensor.cardstream.CardStreamFragment;\n\nimport com.example.android.batchstepsensor.cardstream.CardStreamState;\n\nimport com.example.android.batchstepsensor.cardstream.OnCardClickListener;\n\nimport com.example.android.batchstepsensor.cardstream.StreamRetentionFragment;\n\n \n\npublic class MainActivity extends SampleActivityBase implements CardStream {\n\n    public static final String TAG = \"MainActivity\";\n\n    public static final String FRAGTAG = \"BatchStepSensorFragment\";\n\n \n\n    private CardStreamFragment mCardStreamFragment;\n\n \n\n    private StreamRetentionFragment mRetentionFragment;\n\n    private static final String RETENTION_TAG = \"retention\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_main);\n\n \n\n        FragmentManager fm = getSupportFragmentManager();\n\n        BatchStepSensorFragment fragment =\n\n                (BatchStepSensorFragment) fm.findFragmentByTag(FRAGTAG);\n\n \n\n        if (fragment == null) {\n\n            FragmentTransaction transaction = fm.beginTransaction();\n\n            fragment = new BatchStepSensorFragment();\n\n            transaction.add(fragment, FRAGTAG);\n\n            transaction.commit();\n\n        }\n\n \n\n        // Use fragment as click listener for cards, but must implement correct interface\n\n        if(!(fragment instanceof OnCardClickListener)){\n\n            throw new ClassCastException(\"BatchStepSensorFragment must \" +\n\n                    \"implement OnCardClickListener interface.\");\n\n        }\n\n        OnCardClickListener clickListener = (OnCardClickListener) fm.findFragmentByTag(FRAGTAG);\n\n \n\n        mRetentionFragment = (StreamRetentionFragment) fm.findFragmentByTag(RETENTION_TAG);\n\n        if (mRetentionFragment == null) {\n\n            mRetentionFragment = new StreamRetentionFragment();\n\n            fm.beginTransaction().add(mRetentionFragment, RETENTION_TAG).commit();\n\n        } else {\n\n            // If the retention fragment already existed, we need to pull some state.\n\n            // pull state out\n\n            CardStreamState state = mRetentionFragment.getCardStream();\n\n \n\n            // dump it in CardStreamFragment.\n\n            mCardStreamFragment =\n\n                    (CardStreamFragment) fm.findFragmentById(R.id.fragment_cardstream);\n\n            mCardStreamFragment.restoreState(state, clickListener);\n\n        }\n\n    }\n\n \n\n    public CardStreamFragment getCardStream() {\n\n        if (mCardStreamFragment == null) {\n\n            mCardStreamFragment = (CardStreamFragment)\n\n                    getSupportFragmentManager().findFragmentById(R.id.fragment_cardstream);\n\n        }\n\n        return mCardStreamFragment;\n\n    }\n\n \n\n    @Override\n\n    protected void onSaveInstanceState(Bundle outState) {\n\n        super.onSaveInstanceState(outState);\n\n        CardStreamState state = getCardStream().dumpState();\n\n        mRetentionFragment.storeCardStream(state);\n\n    }\n\n}\n  "},"com.example.android.common":{"activities":{"SampleActivityBase.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\npackage com.example.android.common.activities;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentActivity;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogWrapper;\n\n \n\n/**\n\n * Base launcher activity, to handle most of the common plumbing for samples.\n\n */\n\npublic class SampleActivityBase extends FragmentActivity {\n\n \n\n    public static final String TAG = \"SampleActivityBase\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n    }\n\n \n\n    @Override\n\n    protected  void onStart() {\n\n        super.onStart();\n\n        initializeLogging();\n\n    }\n\n \n\n    /** Set up targets to receive log data */\n\n    public void initializeLogging() {\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        // Wraps Android's native log framework\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        Log.setLogNode(logWrapper);\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "},"logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "}}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.batchstepsensor\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <!-- This sample requires at least Android KitKat for sensor batching support -->\n\n    <uses-sdk android:minSdkVersion=\"19\" android:targetSdkVersion=\"19\" />\n\n \n\n    <!-- Require the step counter and step detector sensors.\n\n    See the method BatchStepSensorFragment#isKitkatWithStepSensor() for a programmatic check if\n\n    support is optional and the application supports a case where these sensors are not available.\n\n    -->\n\n    <uses-feature android:name=\"android.hardware.sensor.stepcounter\" />\n\n    <uses-feature android:name=\"android.hardware.sensor.stepdetector\" />\n\n \n\n \n\n    <application android:allowBackup=\"true\"\n\n        android:label=\"@string/app_name\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:theme=\"@style/AppTheme\">\n\n \n\n        <activity android:name=\".MainActivity\"\n\n                  android:label=\"@string/app_name\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n \n\n</manifest>\n  "}},"Testing":{"ActivityInstrumentation":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com/samples/ActivityInstrumentation/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com/samples/ActivityInstrumentation/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com/samples/ActivityInstrumentation/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com/samples/ActivityInstrumentation/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com/samples/ActivityInstrumentation/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleMessageTile\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n            android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n            android:text=\"@string/intro_message\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n  ","sample_main.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  ~ Copyright 2013 The Android Open Source Project\n\n  ~\n\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  ~ you may not use this file except in compliance with the License.\n\n  ~ You may obtain a copy of the License at\n\n  ~\n\n  ~      http://www.apache.org/licenses/LICENSE-2.0\n\n  ~\n\n  ~ Unless required by applicable law or agreed to in writing, software\n\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  ~ See the License for the specific language governing permissions and\n\n  ~ limitations under the License.\n\n  -->\n\n \n\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n                xmlns:tools=\"http://schemas.android.com/tools\"\n\n                android:layout_width=\"match_parent\"\n\n                android:layout_height=\"match_parent\"\n\n                android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n\n                android:paddingRight=\"@dimen/activity_horizontal_margin\"\n\n                android:paddingTop=\"@dimen/activity_vertical_margin\"\n\n                android:paddingBottom=\"@dimen/activity_vertical_margin\"\n\n                tools:context=\".MainActivity\">\n\n \n\n    <TextView\n\n            android:layout_width=\"wrap_content\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:text=\"@string/instructions\"\n\n            android:id=\"@+id/instructions\"/>\n\n \n\n    <Spinner\n\n            android:layout_width=\"wrap_content\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:id=\"@+id/spinner\"\n\n            android:layout_below=\"@+id/instructions\"\n\n            android:layout_centerHorizontal=\"true\"/>\n\n \n\n</RelativeLayout>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">ActivityInstrumentation</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            This sample provides a basic example of using an InstrumentationTest to probe the\n\n            internal state of an Activity.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","dimens.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  ~ Copyright 2013 The Android Open Source Project\n\n  ~\n\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  ~ you may not use this file except in compliance with the License.\n\n  ~ You may obtain a copy of the License at\n\n  ~\n\n  ~      http://www.apache.org/licenses/LICENSE-2.0\n\n  ~\n\n  ~ Unless required by applicable law or agreed to in writing, software\n\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  ~ See the License for the specific language governing permissions and\n\n  ~ limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n    <!-- Default screen margins, per the Android Design guidelines. -->\n\n    <dimen name=\"activity_horizontal_margin\">16dp</dimen>\n\n    <dimen name=\"activity_vertical_margin\">16dp</dimen>\n\n</resources>\n  ","strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  ~ Copyright 2013 The Android Open Source Project\n\n  ~\n\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  ~ you may not use this file except in compliance with the License.\n\n  ~ You may obtain a copy of the License at\n\n  ~\n\n  ~      http://www.apache.org/licenses/LICENSE-2.0\n\n  ~\n\n  ~ Unless required by applicable law or agreed to in writing, software\n\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  ~ See the License for the specific language governing permissions and\n\n  ~ limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n    <string name=\"instructions\">The value of the spinner below should be persisted when this activity is destroyed.</string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw720dp-land":{"dimens.xml":"\n    \n\n<!--\n\n  ~ Copyright 2013 The Android Open Source Project\n\n  ~\n\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  ~ you may not use this file except in compliance with the License.\n\n  ~ You may obtain a copy of the License at\n\n  ~\n\n  ~      http://www.apache.org/licenses/LICENSE-2.0\n\n  ~\n\n  ~ Unless required by applicable law or agreed to in writing, software\n\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  ~ See the License for the specific language governing permissions and\n\n  ~ limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n    <!-- Customize dimensions originally defined in res/values/dimens.xml (such as\n\n         screen margins) for sw720dp devices (e.g. 10\" tablets) in landscape here. -->\n\n    <dimen name=\"activity_horizontal_margin\">128dp</dimen>\n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.activityinstrumentation":{"MainActivity.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.activityinstrumentation;\n\n \n\nimport android.app.Activity;\n\nimport android.content.SharedPreferences;\n\nimport android.os.Bundle;\n\nimport android.preference.PreferenceManager;\n\nimport android.view.View;\n\nimport android.widget.AdapterView;\n\nimport android.widget.ArrayAdapter;\n\nimport android.widget.Spinner;\n\n \n\nimport java.util.ArrayList;\n\nimport java.util.Arrays;\n\n \n\n/**\n\n * Basic activity with a spinner. The spinner should persist its position to disk every time a\n\n * new selection is made.\n\n */\n\npublic class MainActivity extends Activity {\n\n \n\n    /** Shared preferences key: Holds spinner position. Must not be negative. */\n\n    private static final String PREF_SPINNER_POS = \"spinner_pos\";\n\n    /** Magic constant to indicate that no value is stored for PREF_SPINNER_POS. */\n\n    private static final int PREF_SPINNER_VALUE_ISNULL = -1;\n\n    /** Values for display in spinner. */\n\n    private static final String[] SPINNER_VALUES = new String[] {\n\n            \"Select Weather...\", \"Sunny\", \"Partly Cloudy\", \"Cloudy\", \"Rain\", \"Snow\", \"Hurricane\"};\n\n \n\n    // Constants representing each of the options in SPINNER_VALUES. Declared package-private\n\n    // so that they can be accessed from our test suite.\n\n    static final int WEATHER_NOSELECTION = 0;\n\n    static final int WEATHER_SUNNY = 1;\n\n    static final int WEATHER_PARTLY_CLOUDY = 2;\n\n    static final int WEATHER_CLOUDY = 3;\n\n    static final int WEATHER_RAIN = 4;\n\n    static final int WEATHER_SNOW = 5;\n\n    static final int WEATHER_HURRICANE = 6;\n\n \n\n    /** Handle to default shared preferences for this activity. */\n\n    private SharedPreferences mPrefs;\n\n    /** Handle to the spinner in this Activity's layout. */\n\n    private Spinner mSpinner;\n\n \n\n    /**\n\n     * Setup activity state.\n\n     *\n\n     * @param savedInstanceState\n\n     */\n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n \n\n        // Inflate UI from res/layout/activity_main.xml\n\n        setContentView(R.layout.sample_main);\n\n \n\n        // Get handle to default shared preferences for this activity\n\n        mPrefs = PreferenceManager.getDefaultSharedPreferences(MainActivity.this);\n\n \n\n        // Populate spinner with sample values from an array\n\n        mSpinner = (Spinner) findViewById(R.id.spinner);\n\n        mSpinner.setAdapter(\n\n                new ArrayAdapter<String>(\n\n                        this,                                                   // Context\n\n                        android.R.layout.simple_list_item_1,                    // Layout\n\n                        new ArrayList<String>(Arrays.asList(SPINNER_VALUES))    // Data source\n\n                ));\n\n \n\n        // Read in a sample value, if it's not set.\n\n        int selection = mPrefs.getInt(PREF_SPINNER_POS, PREF_SPINNER_VALUE_ISNULL);\n\n        if (selection != PREF_SPINNER_VALUE_ISNULL) {\n\n            mSpinner.setSelection(selection);\n\n        }\n\n \n\n        // Callback to persist spinner data whenever a new value is selected. This will be the\n\n        // focus of our sample unit test.\n\n        mSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\n\n \n\n            // The methods below commit the ID of the currently selected item in the spinner\n\n            // to disk, using a SharedPreferences file.\n\n            //\n\n            // Note: A common mistake here is to forget to call .commit(). Try removing this\n\n            // statement and running the tests to watch them fail.\n\n            @Override\n\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n\n                mPrefs.edit().putInt(PREF_SPINNER_POS, position).commit();\n\n            }\n\n \n\n            @Override\n\n            public void onNothingSelected(AdapterView<?> parent) {\n\n                mPrefs.edit().remove(PREF_SPINNER_POS).commit();\n\n            }\n\n        });\n\n    }\n\n}\n  "},"com.example.android.common.logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.activityinstrumentation\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk android:minSdkVersion=\"4\" android:targetSdkVersion=\"17\" />\n\n \n\n    <application android:allowBackup=\"true\"\n\n        android:label=\"@string/app_name\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:theme=\"@style/AppTheme\">\n\n \n\n        <activity android:name=\".MainActivity\"\n\n                  android:label=\"@string/app_name\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n \n\n</manifest>\n  "}},"UI":{"ActionBarCompat-Basic":{"res":{"drawable-hdpi":{"ic_action_location.png":"http://developer.android.com/samples/ActionBarCompat-Basic/res/drawable-hdpi/ic_action_location.png","ic_action_refresh.png":"http://developer.android.com/samples/ActionBarCompat-Basic/res/drawable-hdpi/ic_action_refresh.png","ic_action_settings.png":"http://developer.android.com/samples/ActionBarCompat-Basic/res/drawable-hdpi/ic_action_settings.png","ic_launcher.png":"http://developer.android.com/samples/ActionBarCompat-Basic/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com/samples/ActionBarCompat-Basic/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_action_location.png":"http://developer.android.com/samples/ActionBarCompat-Basic/res/drawable-mdpi/ic_action_location.png","ic_action_refresh.png":"http://developer.android.com/samples/ActionBarCompat-Basic/res/drawable-mdpi/ic_action_refresh.png","ic_action_settings.png":"http://developer.android.com/samples/ActionBarCompat-Basic/res/drawable-mdpi/ic_action_settings.png","ic_launcher.png":"http://developer.android.com/samples/ActionBarCompat-Basic/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_action_location.png":"http://developer.android.com/samples/ActionBarCompat-Basic/res/drawable-xhdpi/ic_action_location.png","ic_action_refresh.png":"http://developer.android.com/samples/ActionBarCompat-Basic/res/drawable-xhdpi/ic_action_refresh.png","ic_action_settings.png":"http://developer.android.com/samples/ActionBarCompat-Basic/res/drawable-xhdpi/ic_action_settings.png","ic_launcher.png":"http://developer.android.com/samples/ActionBarCompat-Basic/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com/samples/ActionBarCompat-Basic/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleMessageTile\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n            android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n            android:text=\"@string/intro_message\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n  ","sample_main.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<TextView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:padding=\"16dp\"\n\n    android:text=\"@string/intro_message\"\n\n    android:gravity=\"center\" />\n  "},"menu":{"main.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<!--\n\n    As we're using ActionBarCompat, any action item attributes come from ActionBarCompat's XML\n\n    namespace instead of the android namespace. Here we've added a new support namespace added to\n\n    the menu element allowing us to use the 'showAsAction' attribute in a backwards compatible way.\n\n    Any other action item attributes used should be referenced from this namespace too\n\n    (actionProviderClass, actionViewClass, actionLayout).\n\n-->\n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:support=\"http://schemas.android.com/apk/res-auto\" >\n\n \n\n    <!--\n\n        Here we create an item, setting support:showAsAction to display the item as an action if\n\n        there's room on the compatible Action Bar.\n\n    -->\n\n    <item\n\n        android:id=\"@+id/menu_refresh\"\n\n        android:icon=\"@drawable/ic_action_refresh\"\n\n        android:title=\"@string/menu_refresh\"\n\n        support:showAsAction=\"ifRoom\"/>\n\n \n\n    <!-- Location item is added in onCreateOptionsMenu() -->\n\n \n\n    <!--\n\n        Here we set the settings item to always be in the overflow menu, by setting\n\n        support:showAsAction to never, so it is never displayed as an action item on the compatible\n\n        Action Bar.\n\n    -->\n\n    <item\n\n        android:id=\"@+id/menu_settings\"\n\n        android:icon=\"@drawable/ic_action_settings\"\n\n        android:title=\"@string/menu_settings\"\n\n        support:showAsAction=\"never\"/>\n\n \n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">ActionBarCompat-Basic</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            This sample shows you how to use ActionBarCompat to create a basic Activity which\n\n            displays action items. It covers inflating items from a menu resource, as well as adding\n\n            an item in code. Items that are not shown as action items on the Action Bar are\n\n            displayed in the action bar overflow.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","ids.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<resources>\n\n \n\n    <!--\n\n        Generate an id which can be used when the location menu item is added in MainActivity\n\n    -->\n\n    <item name=\"menu_location\" type=\"id\"/>\n\n \n\n</resources>\n  ","strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<resources>\n\n    <string name=\"menu_refresh\">Refresh</string>\n\n    <string name=\"menu_location\">Location</string>\n\n    <string name=\"menu_settings\">Settings</string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.actionbarcompat.basic":{"MainActivity.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.actionbarcompat.basic;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.view.MenuItemCompat;\n\nimport android.support.v7.app.ActionBarActivity;\n\nimport android.view.Menu;\n\nimport android.view.MenuItem;\n\n \n\n/**\n\n * This sample shows you how to use ActionBarCompat to create a basic Activity which displays\n\n * action items. It covers inflating items from a menu resource, as well as adding an item in code.\n\n *\n\n * This Activity extends from {@link ActionBarActivity}, which provides all of the function\n\n * necessary to display a compatible Action Bar on devices running Android v2.1+.\n\n */\n\npublic class MainActivity extends ActionBarActivity {\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.sample_main);\n\n    }\n\n \n\n    /**\n\n     * Use this method to instantiate your menu, and add your items to it. You\n\n     * should return true if you have added items to it and want the menu to be displayed.\n\n     */\n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        // Inflate our menu from the resources by using the menu inflater.\n\n        getMenuInflater().inflate(R.menu.main, menu);\n\n \n\n        // It is also possible add items here. Use a generated id from\n\n        // resources (ids.xml) to ensure that all menu ids are distinct.\n\n        MenuItem locationItem = menu.add(0, R.id.menu_location, 0, R.string.menu_location);\n\n        locationItem.setIcon(R.drawable.ic_action_location);\n\n \n\n        // Need to use MenuItemCompat methods to call any action item related methods\n\n        MenuItemCompat.setShowAsAction(locationItem, MenuItem.SHOW_AS_ACTION_IF_ROOM);\n\n \n\n        return true;\n\n    }\n\n \n\n    /**\n\n     * This method is called when one of the menu items to selected. These items\n\n     * can be on the Action Bar, the overflow menu, or the standard options menu. You\n\n     * should return true if you handle the selection.\n\n     */\n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch (item.getItemId()) {\n\n            case R.id.menu_refresh:\n\n                // Here we might start a background refresh task\n\n                return true;\n\n \n\n            case R.id.menu_location:\n\n                // Here we might call LocationManager.requestLocationUpdates()\n\n                return true;\n\n \n\n            case R.id.menu_settings:\n\n                // Here we would open up our settings activity\n\n                return true;\n\n        }\n\n \n\n        return super.onOptionsItemSelected(item);\n\n    }\n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.actionbarcompat.basic\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <!-- ActionBarCompat provides an Action Bar from API v7 onwards -->\n\n    <uses-sdk\n\n        android:minSdkVersion=\"7\"\n\n        android:targetSdkVersion=\"17\" />\n\n \n\n    <application\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:label=\"@string/app_name\"\n\n        android:theme=\"@style/Theme.AppCompat\"\n\n        android:allowBackup=\"true\">\n\n \n\n        <activity android:name=\".MainActivity\">\n\n            <!-- Launcher Intent filter -->\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n</manifest>\n  "},"ActionBarCompat-ListPopupMenu":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com/samples/ActionBarCompat-ListPopupMenu/res/drawable-hdpi/ic_launcher.png","ic_overflow.png":"http://developer.android.com/samples/ActionBarCompat-ListPopupMenu/res/drawable-hdpi/ic_overflow.png","tile.9.png":"http://developer.android.com/samples/ActionBarCompat-ListPopupMenu/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com/samples/ActionBarCompat-ListPopupMenu/res/drawable-mdpi/ic_launcher.png","ic_overflow.png":"http://developer.android.com/samples/ActionBarCompat-ListPopupMenu/res/drawable-mdpi/ic_overflow.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com/samples/ActionBarCompat-ListPopupMenu/res/drawable-xhdpi/ic_launcher.png","ic_overflow.png":"http://developer.android.com/samples/ActionBarCompat-ListPopupMenu/res/drawable-xhdpi/ic_overflow.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com/samples/ActionBarCompat-ListPopupMenu/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleMessageTile\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n            android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n            android:text=\"@string/intro_message\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n  ","list_item.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:orientation=\"horizontal\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"?attr/listPreferredItemHeight\">\n\n \n\n    <TextView\n\n        android:id=\"@android:id/text1\"\n\n        android:layout_height=\"match_parent\"\n\n        android:layout_width=\"0dp\"\n\n        android:layout_weight=\"1\"\n\n        android:gravity=\"center_vertical\"\n\n        android:paddingLeft=\"8dp\"\n\n        android:paddingRight=\"8dp\"\n\n        android:maxLines=\"1\"\n\n        android:ellipsize=\"end\"\n\n        android:textAppearance=\"?android:attr/textAppearanceMedium\" />\n\n \n\n    <ImageView\n\n        android:id=\"@+id/button_popup\"\n\n        android:layout_height=\"match_parent\"\n\n        android:layout_width=\"56dip\"\n\n        android:background=\"?attr/selectableItemBackground\"\n\n        android:src=\"@drawable/ic_overflow\"\n\n        android:contentDescription=\"@string/content_open_popup\"/>\n\n \n\n</LinearLayout>\n  ","sample_main.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<fragment xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:name=\"com.example.android.actionbarcompat.listpopupmenu.PopupListFragment\" />\n  "},"menu":{"popup.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n \n\n    <item\n\n        android:id=\"@+id/menu_remove\"\n\n        android:title=\"@string/menu_remove\" />\n\n \n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">ActionBarCompat-ListPopupMenu</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            This sample shows you how to use {@link android.support.v7.widget.PopupMenu PopupMenu}\n\n            from ActionBarCompat to create a list, with each item having a dropdown menu.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<resources>\n\n \n\n    <string name=\"menu_remove\">Remove</string>\n\n    <string name=\"content_open_popup\">Open Popup Menu</string>\n\n \n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.actionbarcompat.listpopupmenu":{"Cheeses.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.actionbarcompat.listpopupmenu;\n\n \n\n/**\n\n * Dummy data.\n\n */\n\npublic class Cheeses {\n\n    public static final String[] CHEESES = {\n\n            \"Abbaye de Belloc\", \"Abbaye du Mont des Cats\", \"Abertam\", \"Abondance\", \"Ackawi\",\n\n            \"Acorn\", \"Adelost\", \"Affidelice au Chablis\", \"Afuega'l Pitu\", \"Airag\", \"Airedale\",\n\n            \"Aisy Cendre\", \"Allgauer Emmentaler\", \"Alverca\", \"Ambert\", \"American Cheese\",\n\n            \"Ami du Chambertin\", \"Anejo Enchilado\", \"Anneau du Vic-Bilh\", \"Anthoriro\", \"Appenzell\",\n\n            \"Aragon\", \"Ardi Gasna\", \"Ardrahan\", \"Armenian String\", \"Aromes au Gene de Marc\",\n\n            \"Asadero\", \"Asiago\", \"Aubisque Pyrenees\", \"Autun\", \"Avaxtskyr\", \"Baby Swiss\",\n\n            \"Babybel\", \"Baguette Laonnaise\", \"Bakers\", \"Baladi\", \"Balaton\", \"Bandal\", \"Banon\",\n\n            \"Barry's Bay Cheddar\", \"Basing\", \"Basket Cheese\", \"Bath Cheese\", \"Bavarian Bergkase\",\n\n            \"Baylough\", \"Beaufort\", \"Beauvoorde\", \"Beenleigh Blue\", \"Beer Cheese\", \"Bel Paese\",\n\n            \"Bergader\", \"Bergere Bleue\", \"Berkswell\", \"Beyaz Peynir\", \"Bierkase\", \"Bishop Kennedy\",\n\n            \"Blarney\", \"Bleu d'Auvergne\", \"Bleu de Gex\", \"Bleu de Laqueuille\",\n\n            \"Bleu de Septmoncel\", \"Bleu Des Causses\", \"Blue\", \"Blue Castello\", \"Blue Rathgore\",\n\n            \"Blue Vein (Australian)\", \"Blue Vein Cheeses\", \"Bocconcini\", \"Bocconcini (Australian)\",\n\n            \"Boeren Leidenkaas\", \"Bonchester\", \"Bosworth\", \"Bougon\", \"Boule Du Roves\",\n\n            \"Boulette d'Avesnes\", \"Boursault\", \"Boursin\", \"Bouyssou\", \"Bra\", \"Braudostur\",\n\n            \"Breakfast Cheese\", \"Brebis du Lavort\", \"Brebis du Lochois\", \"Brebis du Puyfaucon\",\n\n            \"Bresse Bleu\", \"Brick\", \"Brie\", \"Brie de Meaux\", \"Brie de Melun\", \"Brillat-Savarin\",\n\n            \"Brin\", \"Brin d' Amour\", \"Brin d'Amour\", \"Brinza (Burduf Brinza)\",\n\n            \"Briquette de Brebis\", \"Briquette du Forez\", \"Broccio\", \"Broccio Demi-Affine\",\n\n            \"Brousse du Rove\", \"Bruder Basil\", \"Brusselae Kaas (Fromage de Bruxelles)\", \"Bryndza\",\n\n            \"Buchette d'Anjou\", \"Buffalo\", \"Burgos\", \"Butte\", \"Butterkase\", \"Button (Innes)\",\n\n            \"Buxton Blue\", \"Cabecou\", \"Caboc\", \"Cabrales\", \"Cachaille\", \"Caciocavallo\", \"Caciotta\",\n\n            \"Caerphilly\", \"Cairnsmore\", \"Calenzana\", \"Cambazola\", \"Camembert de Normandie\",\n\n            \"Canadian Cheddar\", \"Canestrato\", \"Cantal\", \"Caprice des Dieux\", \"Capricorn Goat\",\n\n            \"Capriole Banon\", \"Carre de l'Est\", \"Casciotta di Urbino\", \"Cashel Blue\", \"Castellano\",\n\n            \"Castelleno\", \"Castelmagno\", \"Castelo Branco\", \"Castigliano\", \"Cathelain\",\n\n            \"Celtic Promise\", \"Cendre d'Olivet\", \"Cerney\", \"Chabichou\", \"Chabichou du Poitou\",\n\n            \"Chabis de Gatine\", \"Chaource\", \"Charolais\", \"Chaumes\", \"Cheddar\",\n\n            \"Cheddar Clothbound\", \"Cheshire\", \"Chevres\", \"Chevrotin des Aravis\", \"Chontaleno\",\n\n            \"Civray\", \"Coeur de Camembert au Calvados\", \"Coeur de Chevre\", \"Colby\", \"Cold Pack\",\n\n            \"Comte\", \"Coolea\", \"Cooleney\", \"Coquetdale\", \"Corleggy\", \"Cornish Pepper\",\n\n            \"Cotherstone\", \"Cotija\", \"Cottage Cheese\", \"Cottage Cheese (Australian)\",\n\n            \"Cougar Gold\", \"Coulommiers\", \"Coverdale\", \"Crayeux de Roncq\", \"Cream Cheese\",\n\n            \"Cream Havarti\", \"Crema Agria\", \"Crema Mexicana\", \"Creme Fraiche\", \"Crescenza\",\n\n            \"Croghan\", \"Crottin de Chavignol\", \"Crottin du Chavignol\", \"Crowdie\", \"Crowley\",\n\n            \"Cuajada\", \"Curd\", \"Cure Nantais\", \"Curworthy\", \"Cwmtawe Pecorino\",\n\n            \"Cypress Grove Chevre\", \"Danablu (Danish Blue)\", \"Danbo\", \"Danish Fontina\",\n\n            \"Daralagjazsky\", \"Dauphin\", \"Delice des Fiouves\", \"Denhany Dorset Drum\", \"Derby\",\n\n            \"Dessertnyj Belyj\", \"Devon Blue\", \"Devon Garland\", \"Dolcelatte\", \"Doolin\",\n\n            \"Doppelrhamstufel\", \"Dorset Blue Vinney\", \"Double Gloucester\", \"Double Worcester\",\n\n            \"Dreux a la Feuille\", \"Dry Jack\", \"Duddleswell\", \"Dunbarra\", \"Dunlop\", \"Dunsyre Blue\",\n\n            \"Duroblando\", \"Durrus\", \"Dutch Mimolette (Commissiekaas)\", \"Edam\", \"Edelpilz\",\n\n            \"Emental Grand Cru\", \"Emlett\", \"Emmental\", \"Epoisses de Bourgogne\", \"Esbareich\",\n\n            \"Esrom\", \"Etorki\", \"Evansdale Farmhouse Brie\", \"Evora De L'Alentejo\", \"Exmoor Blue\",\n\n            \"Explorateur\", \"Feta\", \"Feta (Australian)\", \"Figue\", \"Filetta\", \"Fin-de-Siecle\",\n\n            \"Finlandia Swiss\", \"Finn\", \"Fiore Sardo\", \"Fleur du Maquis\", \"Flor de Guia\",\n\n            \"Flower Marie\", \"Folded\", \"Folded cheese with mint\", \"Fondant de Brebis\",\n\n            \"Fontainebleau\", \"Fontal\", \"Fontina Val d'Aosta\", \"Formaggio di capra\", \"Fougerus\",\n\n            \"Four Herb Gouda\", \"Fourme d' Ambert\", \"Fourme de Haute Loire\", \"Fourme de Montbrison\",\n\n            \"Fresh Jack\", \"Fresh Mozzarella\", \"Fresh Ricotta\", \"Fresh Truffles\", \"Fribourgeois\",\n\n            \"Friesekaas\", \"Friesian\", \"Friesla\", \"Frinault\", \"Fromage a Raclette\", \"Fromage Corse\",\n\n            \"Fromage de Montagne de Savoie\", \"Fromage Frais\", \"Fruit Cream Cheese\",\n\n            \"Frying Cheese\", \"Fynbo\", \"Gabriel\", \"Galette du Paludier\", \"Galette Lyonnaise\",\n\n            \"Galloway Goat's Milk Gems\", \"Gammelost\", \"Gaperon a l'Ail\", \"Garrotxa\", \"Gastanberra\",\n\n            \"Geitost\", \"Gippsland Blue\", \"Gjetost\", \"Gloucester\", \"Golden Cross\", \"Gorgonzola\",\n\n            \"Gornyaltajski\", \"Gospel Green\", \"Gouda\", \"Goutu\", \"Gowrie\", \"Grabetto\", \"Graddost\",\n\n            \"Grafton Village Cheddar\", \"Grana\", \"Grana Padano\", \"Grand Vatel\",\n\n            \"Grataron d' Areches\", \"Gratte-Paille\", \"Graviera\", \"Greuilh\", \"Greve\",\n\n            \"Gris de Lille\", \"Gruyere\", \"Gubbeen\", \"Guerbigny\", \"Halloumi\",\n\n            \"Halloumy (Australian)\", \"Haloumi-Style Cheese\", \"Harbourne Blue\", \"Havarti\",\n\n            \"Heidi Gruyere\", \"Hereford Hop\", \"Herrgardsost\", \"Herriot Farmhouse\", \"Herve\",\n\n            \"Hipi Iti\", \"Hubbardston Blue Cow\", \"Hushallsost\", \"Iberico\", \"Idaho Goatster\",\n\n            \"Idiazabal\", \"Il Boschetto al Tartufo\", \"Ile d'Yeu\", \"Isle of Mull\", \"Jarlsberg\",\n\n            \"Jermi Tortes\", \"Jibneh Arabieh\", \"Jindi Brie\", \"Jubilee Blue\", \"Juustoleipa\",\n\n            \"Kadchgall\", \"Kaseri\", \"Kashta\", \"Kefalotyri\", \"Kenafa\", \"Kernhem\", \"Kervella Affine\",\n\n            \"Kikorangi\", \"King Island Cape Wickham Brie\", \"King River Gold\", \"Klosterkaese\",\n\n            \"Knockalara\", \"Kugelkase\", \"L'Aveyronnais\", \"L'Ecir de l'Aubrac\", \"La Taupiniere\",\n\n            \"La Vache Qui Rit\", \"Laguiole\", \"Lairobell\", \"Lajta\", \"Lanark Blue\", \"Lancashire\",\n\n            \"Langres\", \"Lappi\", \"Laruns\", \"Lavistown\", \"Le Brin\", \"Le Fium Orbo\", \"Le Lacandou\",\n\n            \"Le Roule\", \"Leafield\", \"Lebbene\", \"Leerdammer\", \"Leicester\", \"Leyden\", \"Limburger\",\n\n            \"Lincolnshire Poacher\", \"Lingot Saint Bousquet d'Orb\", \"Liptauer\", \"Little Rydings\",\n\n            \"Livarot\", \"Llanboidy\", \"Llanglofan Farmhouse\", \"Loch Arthur Farmhouse\",\n\n            \"Loddiswell Avondale\", \"Longhorn\", \"Lou Palou\", \"Lou Pevre\", \"Lyonnais\", \"Maasdam\",\n\n            \"Macconais\", \"Mahoe Aged Gouda\", \"Mahon\", \"Malvern\", \"Mamirolle\", \"Manchego\",\n\n            \"Manouri\", \"Manur\", \"Marble Cheddar\", \"Marbled Cheeses\", \"Maredsous\", \"Margotin\",\n\n            \"Maribo\", \"Maroilles\", \"Mascares\", \"Mascarpone\", \"Mascarpone (Australian)\",\n\n            \"Mascarpone Torta\", \"Matocq\", \"Maytag Blue\", \"Meira\", \"Menallack Farmhouse\",\n\n            \"Menonita\", \"Meredith Blue\", \"Mesost\", \"Metton (Cancoillotte)\", \"Meyer Vintage Gouda\",\n\n            \"Mihalic Peynir\", \"Milleens\", \"Mimolette\", \"Mine-Gabhar\", \"Mini Baby Bells\", \"Mixte\",\n\n            \"Molbo\", \"Monastery Cheeses\", \"Mondseer\", \"Mont D'or Lyonnais\", \"Montasio\",\n\n            \"Monterey Jack\", \"Monterey Jack Dry\", \"Morbier\", \"Morbier Cru de Montagne\",\n\n            \"Mothais a la Feuille\", \"Mozzarella\", \"Mozzarella (Australian)\",\n\n            \"Mozzarella di Bufala\", \"Mozzarella Fresh, in water\", \"Mozzarella Rolls\", \"Munster\",\n\n            \"Murol\", \"Mycella\", \"Myzithra\", \"Naboulsi\", \"Nantais\", \"Neufchatel\",\n\n            \"Neufchatel (Australian)\", \"Niolo\", \"Nokkelost\", \"Northumberland\", \"Oaxaca\",\n\n            \"Olde York\", \"Olivet au Foin\", \"Olivet Bleu\", \"Olivet Cendre\",\n\n            \"Orkney Extra Mature Cheddar\", \"Orla\", \"Oschtjepka\", \"Ossau Fermier\", \"Ossau-Iraty\",\n\n            \"Oszczypek\", \"Oxford Blue\", \"P'tit Berrichon\", \"Palet de Babligny\", \"Paneer\", \"Panela\",\n\n            \"Pannerone\", \"Pant ys Gawn\", \"Parmesan (Parmigiano)\", \"Parmigiano Reggiano\",\n\n            \"Pas de l'Escalette\", \"Passendale\", \"Pasteurized Processed\", \"Pate de Fromage\",\n\n            \"Patefine Fort\", \"Pave d'Affinois\", \"Pave d'Auge\", \"Pave de Chirac\", \"Pave du Berry\",\n\n            \"Pecorino\", \"Pecorino in Walnut Leaves\", \"Pecorino Romano\", \"Peekskill Pyramid\",\n\n            \"Pelardon des Cevennes\", \"Pelardon des Corbieres\", \"Penamellera\", \"Penbryn\",\n\n            \"Pencarreg\", \"Perail de Brebis\", \"Petit Morin\", \"Petit Pardou\", \"Petit-Suisse\",\n\n            \"Picodon de Chevre\", \"Picos de Europa\", \"Piora\", \"Pithtviers au Foin\",\n\n            \"Plateau de Herve\", \"Plymouth Cheese\", \"Podhalanski\", \"Poivre d'Ane\", \"Polkolbin\",\n\n            \"Pont l'Eveque\", \"Port Nicholson\", \"Port-Salut\", \"Postel\", \"Pouligny-Saint-Pierre\",\n\n            \"Pourly\", \"Prastost\", \"Pressato\", \"Prince-Jean\", \"Processed Cheddar\", \"Provolone\",\n\n            \"Provolone (Australian)\", \"Pyengana Cheddar\", \"Pyramide\", \"Quark\",\n\n            \"Quark (Australian)\", \"Quartirolo Lombardo\", \"Quatre-Vents\", \"Quercy Petit\",\n\n            \"Queso Blanco\", \"Queso Blanco con Frutas --Pina y Mango\", \"Queso de Murcia\",\n\n            \"Queso del Montsec\", \"Queso del Tietar\", \"Queso Fresco\", \"Queso Fresco (Adobera)\",\n\n            \"Queso Iberico\", \"Queso Jalapeno\", \"Queso Majorero\", \"Queso Media Luna\",\n\n            \"Queso Para Frier\", \"Queso Quesadilla\", \"Rabacal\", \"Raclette\", \"Ragusano\", \"Raschera\",\n\n            \"Reblochon\", \"Red Leicester\", \"Regal de la Dombes\", \"Reggianito\", \"Remedou\",\n\n            \"Requeson\", \"Richelieu\", \"Ricotta\", \"Ricotta (Australian)\", \"Ricotta Salata\", \"Ridder\",\n\n            \"Rigotte\", \"Rocamadour\", \"Rollot\", \"Romano\", \"Romans Part Dieu\", \"Roncal\", \"Roquefort\",\n\n            \"Roule\", \"Rouleau De Beaulieu\", \"Royalp Tilsit\", \"Rubens\", \"Rustinu\", \"Saaland Pfarr\",\n\n            \"Saanenkaese\", \"Saga\", \"Sage Derby\", \"Sainte Maure\", \"Saint-Marcellin\",\n\n            \"Saint-Nectaire\", \"Saint-Paulin\", \"Salers\", \"Samso\", \"San Simon\", \"Sancerre\",\n\n            \"Sap Sago\", \"Sardo\", \"Sardo Egyptian\", \"Sbrinz\", \"Scamorza\", \"Schabzieger\", \"Schloss\",\n\n            \"Selles sur Cher\", \"Selva\", \"Serat\", \"Seriously Strong Cheddar\", \"Serra da Estrela\",\n\n            \"Sharpam\", \"Shelburne Cheddar\", \"Shropshire Blue\", \"Siraz\", \"Sirene\", \"Smoked Gouda\",\n\n            \"Somerset Brie\", \"Sonoma Jack\", \"Sottocenare al Tartufo\", \"Soumaintrain\",\n\n            \"Sourire Lozerien\", \"Spenwood\", \"Sraffordshire Organic\", \"St. Agur Blue Cheese\",\n\n            \"Stilton\", \"Stinking Bishop\", \"String\", \"Sussex Slipcote\", \"Sveciaost\", \"Swaledale\",\n\n            \"Sweet Style Swiss\", \"Swiss\", \"Syrian (Armenian String)\", \"Tala\", \"Taleggio\", \"Tamie\",\n\n            \"Tasmania Highland Chevre Log\", \"Taupiniere\", \"Teifi\", \"Telemea\", \"Testouri\",\n\n            \"Tete de Moine\", \"Tetilla\", \"Texas Goat Cheese\", \"Tibet\", \"Tillamook Cheddar\",\n\n            \"Tilsit\", \"Timboon Brie\", \"Toma\", \"Tomme Brulee\", \"Tomme d'Abondance\",\n\n            \"Tomme de Chevre\", \"Tomme de Romans\", \"Tomme de Savoie\", \"Tomme des Chouans\", \"Tommes\",\n\n            \"Torta del Casar\", \"Toscanello\", \"Touree de L'Aubier\", \"Tourmalet\",\n\n            \"Trappe (Veritable)\", \"Trois Cornes De Vendee\", \"Tronchon\", \"Trou du Cru\", \"Truffe\",\n\n            \"Tupi\", \"Turunmaa\", \"Tymsboro\", \"Tyn Grug\", \"Tyning\", \"Ubriaco\", \"Ulloa\",\n\n            \"Vacherin-Fribourgeois\", \"Valencay\", \"Vasterbottenost\", \"Venaco\", \"Vendomois\",\n\n            \"Vieux Corse\", \"Vignotte\", \"Vulscombe\", \"Waimata Farmhouse Blue\",\n\n            \"Washed Rind Cheese (Australian)\", \"Waterloo\", \"Weichkaese\", \"Wellington\",\n\n            \"Wensleydale\", \"White Stilton\", \"Whitestone Farmhouse\", \"Wigmore\", \"Woodside Cabecou\",\n\n            \"Xanadu\", \"Xynotyro\", \"Yarg Cornish\", \"Yarra Valley Pyramid\", \"Yorkshire Blue\",\n\n            \"Zamorano\", \"Zanetti Grana Padano\", \"Zanetti Parmigiano Reggiano\"\n\n    };\n\n}\n  ","MainActivity.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.actionbarcompat.listpopupmenu;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v7.app.ActionBarActivity;\n\n \n\n/**\n\n * This sample shows you how to use {@link android.support.v7.widget.PopupMenu PopupMenu} from\n\n * ActionBarCompat to create a list, with each item having a dropdown menu.\n\n * <p>\n\n * The interesting part of this sample is in {@link PopupListFragment}.\n\n *\n\n * This Activity extends from {@link ActionBarActivity}, which provides all of the function\n\n * necessary to display a compatible Action Bar on devices running Android v2.1+.\n\n */\n\npublic class MainActivity extends ActionBarActivity {\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n \n\n        // Set content view (which contains a PopupListFragment)\n\n        setContentView(R.layout.sample_main);\n\n    }\n\n \n\n}\n  ","PopupListFragment.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.actionbarcompat.listpopupmenu;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.ListFragment;\n\nimport android.support.v7.widget.PopupMenu;\n\nimport android.view.MenuItem;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ArrayAdapter;\n\nimport android.widget.ListView;\n\nimport android.widget.Toast;\n\n \n\nimport java.util.ArrayList;\n\n \n\n/**\n\n * This ListFragment displays a list of cheeses, with a clickable view on each item whichs displays\n\n * a {@link android.support.v7.widget.PopupMenu PopupMenu} when clicked, allowing the user to\n\n * remove the item from the list.\n\n */\n\npublic class PopupListFragment extends ListFragment implements View.OnClickListener {\n\n \n\n    @Override\n\n    public void onActivityCreated(Bundle savedInstanceState) {\n\n        super.onActivityCreated(savedInstanceState);\n\n \n\n        // We want to allow modifications to the list so copy the dummy data array into an ArrayList\n\n        ArrayList<String> items = new ArrayList<String>();\n\n        for (int i = 0, z = Cheeses.CHEESES.length ; i < z ; i++) {\n\n            items.add(Cheeses.CHEESES[i]);\n\n        }\n\n \n\n        // Set the ListAdapter\n\n        setListAdapter(new PopupAdapter(items));\n\n    }\n\n \n\n    @Override\n\n    public void onListItemClick(ListView listView, View v, int position, long id) {\n\n        String item = (String) listView.getItemAtPosition(position);\n\n \n\n        // Show a toast if the user clicks on an item\n\n        Toast.makeText(getActivity(), \"Item Clicked: \" + item, Toast.LENGTH_SHORT).show();\n\n    }\n\n \n\n    @Override\n\n    public void onClick(final View view) {\n\n        // We need to post a Runnable to show the popup to make sure that the PopupMenu is\n\n        // correctly positioned. The reason being that the view may change position before the\n\n        // PopupMenu is shown.\n\n        view.post(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                showPopupMenu(view);\n\n            }\n\n        });\n\n    }\n\n \n\n    private void showPopupMenu(View view) {\n\n        final PopupAdapter adapter = (PopupAdapter) getListAdapter();\n\n \n\n        // Retrieve the clicked item from view's tag\n\n        final String item = (String) view.getTag();\n\n \n\n        // Create a PopupMenu, giving it the clicked view for an anchor\n\n        PopupMenu popup = new PopupMenu(getActivity(), view);\n\n \n\n        // Inflate our menu resource into the PopupMenu's Menu\n\n        popup.getMenuInflater().inflate(R.menu.popup, popup.getMenu());\n\n \n\n        // Set a listener so we are notified if a menu item is clicked\n\n        popup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {\n\n            @Override\n\n            public boolean onMenuItemClick(MenuItem menuItem) {\n\n                switch (menuItem.getItemId()) {\n\n                    case R.id.menu_remove:\n\n                        // Remove the item from the adapter\n\n                        adapter.remove(item);\n\n                        return true;\n\n                }\n\n                return false;\n\n            }\n\n        });\n\n \n\n        // Finally show the PopupMenu\n\n        popup.show();\n\n    }\n\n \n\n    /**\n\n     * A simple array adapter that creates a list of cheeses.\n\n     */\n\n    class PopupAdapter extends ArrayAdapter<String> {\n\n \n\n        PopupAdapter(ArrayList<String> items) {\n\n            super(getActivity(), R.layout.list_item, android.R.id.text1, items);\n\n        }\n\n \n\n        @Override\n\n        public View getView(int position, View convertView, ViewGroup container) {\n\n            // Let ArrayAdapter inflate the layout and set the text\n\n            View view = super.getView(position, convertView, container);\n\n \n\n            // Retrieve the popup button from the inflated view\n\n            View popupButton = view.findViewById(R.id.button_popup);\n\n \n\n            // Set the item as the button's tag so it can be retrieved later\n\n            popupButton.setTag(getItem(position));\n\n \n\n            // Set the fragment instance as the OnClickListener\n\n            popupButton.setOnClickListener(PopupListFragment.this);\n\n \n\n            // Finally return the view to be displayed\n\n            return view;\n\n        }\n\n    }\n\n \n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.actionbarcompat.listpopupmenu\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <!-- ActionBarCompat provides an implementation of Popup Menu from API v7 onwards -->\n\n    <uses-sdk\n\n        android:minSdkVersion=\"7\"\n\n        android:targetSdkVersion=\"17\" />\n\n \n\n    <application\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:label=\"@string/app_name\"\n\n        android:theme=\"@style/Theme.AppCompat\"\n\n        android:allowBackup=\"true\">\n\n \n\n        <activity android:name=\".MainActivity\">\n\n            <!-- Launcher Intent filter -->\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n</manifest>\n  "},"ActionBarCompat-ShareActionProvider":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com/samples/ActionBarCompat-ShareActionProvider/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com/samples/ActionBarCompat-ShareActionProvider/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com/samples/ActionBarCompat-ShareActionProvider/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com/samples/ActionBarCompat-ShareActionProvider/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com/samples/ActionBarCompat-ShareActionProvider/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleMessageTile\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n            android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n            android:text=\"@string/intro_message\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n  ","item_image.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<ImageView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:scaleType=\"fitCenter\" />\n  ","item_text.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<TextView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:padding=\"16dp\"\n\n    android:textAppearance=\"?android:textAppearanceLarge\"\n\n    android:lineSpacingMultiplier=\"1.1\"\n\n    android:gravity=\"center\"/>\n  ","sample_main.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <android.support.v4.view.ViewPager\n\n        android:id=\"@+id/viewpager\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"0dp\"\n\n        android:layout_weight=\"1\" />\n\n \n\n    <TextView\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:text=\"@string/intro_message\"\n\n        android:padding=\"16dp\"\n\n        android:textAppearance=\"?android:textAppearanceMedium\"\n\n        android:lineSpacingMultiplier=\"1.1\"\n\n        android:background=\"#fb3\"/>\n\n \n\n</LinearLayout>\n  "},"menu":{"main_menu.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<!--\n\n  As we're using ActionBarCompat, any action item attributes come from ActionBarCompat's XML\n\n  namespace instead of the android namespace. Here we've added a new support namespace added to\n\n  the menu element allowing us to use the 'showAsAction' attribute in a backwards compatible way.\n\n  Any other action item attributes used should be referenced from this namespace too\n\n  (actionProviderClass, actionViewClass, actionLayout).\n\n-->\n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:support=\"http://schemas.android.com/apk/res-auto\">\n\n \n\n    <!--\n\n      To use ShareActionProvider provided by ActionBarCompat, we reference the class by set the\n\n      support:actionProviderClass attribute with the full class name of ShareActionProvider.\n\n    -->\n\n    <item\n\n        android:id=\"@+id/menu_share\"\n\n        android:title=\"@string/menu_share\"\n\n        support:actionProviderClass=\"android.support.v7.widget.ShareActionProvider\"\n\n        support:showAsAction=\"always\" />\n\n \n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">ActionBarCompat-ShareActionProvider</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            This sample shows you how a provide a context-sensitive ShareActionProvider with\n\n            ActionBarCompat, backwards compatible to API v7.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<resources>\n\n    <string name=\"menu_share\">Share</string>\n\n    <string name=\"quote_1\">Expectation is the root of all heartache - William Shakespeare</string>\n\n    <string name=\"quote_2\">The true sign of intelligence is not knowledge but imagination - Albert\n\n        Einstein</string>\n\n    <string name=\"quote_3\">As for me, all I know is that I know nothing - Socrates</string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.actionbarcompat.shareactionprovider":{"content":{"AssetProvider.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.actionbarcompat.shareactionprovider.content;\n\n \n\nimport android.content.ContentProvider;\n\nimport android.content.ContentValues;\n\nimport android.content.res.AssetFileDescriptor;\n\nimport android.content.res.AssetManager;\n\nimport android.database.Cursor;\n\nimport android.net.Uri;\n\nimport android.text.TextUtils;\n\n \n\nimport java.io.FileNotFoundException;\n\nimport java.io.IOException;\n\n \n\n/**\n\n * A simple ContentProvider which can serve files from this application's assets. The majority of\n\n * functionality is in {@link #openAssetFile(android.net.Uri, String)}.\n\n */\n\npublic class AssetProvider extends ContentProvider {\n\n \n\n    public static String CONTENT_URI = \"com.example.android.actionbarcompat.shareactionprovider\";\n\n \n\n    @Override\n\n    public boolean onCreate() {\n\n        return true;\n\n    }\n\n \n\n    @Override\n\n    public int delete(Uri uri, String selection, String[] selectionArgs) {\n\n        // Do not support delete requests.\n\n        return 0;\n\n    }\n\n \n\n    @Override\n\n    public String getType(Uri uri) {\n\n        // Do not support returning the data type\n\n        return null;\n\n    }\n\n \n\n    @Override\n\n    public Uri insert(Uri uri, ContentValues values) {\n\n        // Do not support insert requests.\n\n        return null;\n\n    }\n\n \n\n    @Override\n\n    public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs,\n\n            String sortOrder) {\n\n        // Do not support query requests.\n\n        return null;\n\n    }\n\n \n\n    @Override\n\n    public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {\n\n        // Do not support update requests.\n\n        return 0;\n\n    }\n\n \n\n    @Override\n\n    public AssetFileDescriptor openAssetFile(Uri uri, String mode) throws FileNotFoundException {\n\n        // The asset file name should be the last path segment\n\n        final String assetName = uri.getLastPathSegment();\n\n \n\n        // If the given asset name is empty, throw an exception\n\n        if (TextUtils.isEmpty(assetName)) {\n\n            throw new FileNotFoundException();\n\n        }\n\n \n\n        try {\n\n            // Try and return a file descriptor for the given asset name\n\n            AssetManager am = getContext().getAssets();\n\n            return am.openFd(assetName);\n\n        } catch (IOException e) {\n\n            e.printStackTrace();\n\n            return super.openAssetFile(uri, mode);\n\n        }\n\n    }\n\n}\n  ","ContentItem.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.actionbarcompat.shareactionprovider.content;\n\n \n\nimport android.content.Context;\n\nimport android.content.Intent;\n\nimport android.net.Uri;\n\nimport android.text.TextUtils;\n\n \n\n/**\n\n * This class encapsulates a content item. Referencing the content's type, and the differing way\n\n * to reference the content (asset URI or resource id).\n\n */\n\npublic class ContentItem {\n\n    // Used to signify an image content type\n\n    public static final int CONTENT_TYPE_IMAGE = 0;\n\n    // Used to signify a text/string content type\n\n    public static final int CONTENT_TYPE_TEXT = 1;\n\n \n\n    public final int contentType;\n\n    public final int contentResourceId;\n\n    public final String contentAssetFilePath;\n\n \n\n    /**\n\n     * Creates a ContentItem with the specified type, referencing a resource id.\n\n     *\n\n     * @param type - One of {@link #CONTENT_TYPE_IMAGE} or {@link #CONTENT_TYPE_TEXT}\n\n     * @param resourceId - Resource ID to use for this item's content\n\n     */\n\n    public ContentItem(int type, int resourceId) {\n\n        contentType = type;\n\n        contentResourceId = resourceId;\n\n        contentAssetFilePath = null;\n\n    }\n\n \n\n    /**\n\n     * Creates a ContentItem with the specified type, referencing an asset file path.\n\n     *\n\n     * @param type - One of {@link #CONTENT_TYPE_IMAGE} or {@link #CONTENT_TYPE_TEXT}\n\n     * @param assetFilePath - File path from the application's asset for this item's content\n\n     */\n\n    public ContentItem(int type, String assetFilePath) {\n\n        contentType = type;\n\n        contentAssetFilePath = assetFilePath;\n\n        contentResourceId = 0;\n\n    }\n\n \n\n    /**\n\n     * @return Uri to the content\n\n     */\n\n    public Uri getContentUri() {\n\n        if (!TextUtils.isEmpty(contentAssetFilePath)) {\n\n            // If this content has an asset, then return a AssetProvider Uri\n\n            return Uri.parse(\"content://\" + AssetProvider.CONTENT_URI + \"/\" + contentAssetFilePath);\n\n        } else {\n\n            return null;\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns an {@link android.content.Intent} which can be used to share this item's content with other\n\n     * applications.\n\n     *\n\n     * @param context - Context to be used for fetching resources if needed\n\n     * @return Intent to be given to a ShareActionProvider.\n\n     */\n\n    public Intent getShareIntent(Context context) {\n\n        Intent intent = new Intent(Intent.ACTION_SEND);\n\n \n\n        switch (contentType) {\n\n            case CONTENT_TYPE_IMAGE:\n\n                intent.setType(\"image/jpg\");\n\n                // Bundle the asset content uri as the EXTRA_STREAM uri\n\n                intent.putExtra(Intent.EXTRA_STREAM, getContentUri());\n\n                break;\n\n \n\n            case CONTENT_TYPE_TEXT:\n\n                intent.setType(\"text/plain\");\n\n                // Get the string resource and bundle it as an intent extra\n\n                intent.putExtra(Intent.EXTRA_TEXT, context.getString(contentResourceId));\n\n                break;\n\n        }\n\n \n\n        return intent;\n\n    }\n\n \n\n}\n  "},"MainActivity.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.actionbarcompat.shareactionprovider;\n\n \n\nimport android.content.Intent;\n\nimport android.os.Bundle;\n\nimport android.support.v4.view.MenuItemCompat;\n\nimport android.support.v4.view.PagerAdapter;\n\nimport android.support.v4.view.ViewPager;\n\nimport android.support.v7.app.ActionBarActivity;\n\nimport android.support.v7.widget.ShareActionProvider;\n\nimport android.view.LayoutInflater;\n\nimport android.view.Menu;\n\nimport android.view.MenuItem;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ImageView;\n\nimport android.widget.TextView;\n\n \n\nimport com.example.android.actionbarcompat.shareactionprovider.content.ContentItem;\n\n \n\nimport java.util.ArrayList;\n\n \n\n/**\n\n * This sample shows you how a provide a {@link ShareActionProvider} with ActionBarCompat,\n\n * backwards compatible to API v7.\n\n * <p>\n\n * The sample contains a {@link ViewPager} which displays content of differing types: image and\n\n * text. When a new item is selected in the ViewPager, the ShareActionProvider is updated with\n\n * a share intent specific to that content.\n\n * <p>\n\n * This Activity extends from {@link ActionBarActivity}, which provides all of the function\n\n * necessary to display a compatible Action Bar on devices running Android v2.1+.\n\n */\n\npublic class MainActivity extends ActionBarActivity {\n\n \n\n    // The items to be displayed in the ViewPager\n\n    private final ArrayList<ContentItem> mItems = getSampleContent();\n\n \n\n    // Keep reference to the ShareActionProvider from the menu\n\n    private ShareActionProvider mShareActionProvider;\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n \n\n        // Set content view (which contains a CheeseListFragment)\n\n        setContentView(R.layout.sample_main);\n\n \n\n        // Retrieve the ViewPager from the content view\n\n        ViewPager vp = (ViewPager) findViewById(R.id.viewpager);\n\n \n\n        // Set an OnPageChangeListener so we are notified when a new item is selected\n\n        vp.setOnPageChangeListener(mOnPageChangeListener);\n\n \n\n        // Finally set the adapter so the ViewPager can display items\n\n        vp.setAdapter(mPagerAdapter);\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        // Inflate the menu resource\n\n        getMenuInflater().inflate(R.menu.main_menu, menu);\n\n \n\n        // Retrieve the share menu item\n\n        MenuItem shareItem = menu.findItem(R.id.menu_share);\n\n \n\n        // Now get the ShareActionProvider from the item\n\n        mShareActionProvider = (ShareActionProvider) MenuItemCompat.getActionProvider(shareItem);\n\n \n\n        return super.onCreateOptionsMenu(menu);\n\n    }\n\n \n\n    /**\n\n     * A PagerAdapter which instantiates views based on the ContentItem's content type.\n\n     */\n\n    private final PagerAdapter mPagerAdapter = new PagerAdapter() {\n\n        LayoutInflater mInflater;\n\n \n\n        @Override\n\n        public int getCount() {\n\n            return mItems.size();\n\n        }\n\n \n\n        @Override\n\n        public boolean isViewFromObject(View view, Object o) {\n\n            return view == o;\n\n        }\n\n \n\n        @Override\n\n        public void destroyItem(ViewGroup container, int position, Object object) {\n\n            // Just remove the view from the ViewPager\n\n            container.removeView((View) object);\n\n        }\n\n \n\n        @Override\n\n        public Object instantiateItem(ViewGroup container, int position) {\n\n            // Ensure that the LayoutInflater is instantiated\n\n            if (mInflater == null) {\n\n                mInflater = LayoutInflater.from(MainActivity.this);\n\n            }\n\n \n\n            // Get the item for the requested position\n\n            final ContentItem item = mItems.get(position);\n\n \n\n            // The view we need to inflate changes based on the type of content\n\n            switch (item.contentType) {\n\n                case ContentItem.CONTENT_TYPE_TEXT: {\n\n                    // Inflate item layout for text\n\n                    TextView tv = (TextView) mInflater\n\n                            .inflate(R.layout.item_text, container, false);\n\n \n\n                    // Set text content using it's resource id\n\n                    tv.setText(item.contentResourceId);\n\n \n\n                    // Add the view to the ViewPager\n\n                    container.addView(tv);\n\n                    return tv;\n\n                }\n\n                case ContentItem.CONTENT_TYPE_IMAGE: {\n\n                    // Inflate item layout for images\n\n                    ImageView iv = (ImageView) mInflater\n\n                            .inflate(R.layout.item_image, container, false);\n\n \n\n                    // Load the image from it's content URI\n\n                    iv.setImageURI(item.getContentUri());\n\n \n\n                    // Add the view to the ViewPager\n\n                    container.addView(iv);\n\n                    return iv;\n\n                }\n\n            }\n\n \n\n            return null;\n\n        }\n\n    };\n\n \n\n    /**\n\n     * A OnPageChangeListener used to update the ShareActionProvider's share intent when a new item\n\n     * is selected in the ViewPager.\n\n     */\n\n    private final ViewPager.OnPageChangeListener mOnPageChangeListener\n\n            = new ViewPager.OnPageChangeListener() {\n\n \n\n        @Override\n\n        public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\n\n            // NO-OP\n\n        }\n\n \n\n        @Override\n\n        public void onPageSelected(int position) {\n\n            if (mShareActionProvider != null) {\n\n                // Get the currently selected item, and retrieve it's share intent\n\n                ContentItem item = mItems.get(position);\n\n                Intent shareIntent = item.getShareIntent(MainActivity.this);\n\n \n\n                // Now update the ShareActionProvider with the new share intent\n\n                mShareActionProvider.setShareIntent(shareIntent);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void onPageScrollStateChanged(int state) {\n\n            // NO-OP\n\n        }\n\n    };\n\n \n\n    /**\n\n     * @return An ArrayList of ContentItem's to be displayed in this sample\n\n     */\n\n    static ArrayList<ContentItem> getSampleContent() {\n\n        ArrayList<ContentItem> items = new ArrayList<ContentItem>();\n\n \n\n        items.add(new ContentItem(ContentItem.CONTENT_TYPE_IMAGE, \"photo_1.jpg\"));\n\n        items.add(new ContentItem(ContentItem.CONTENT_TYPE_TEXT, R.string.quote_1));\n\n        items.add(new ContentItem(ContentItem.CONTENT_TYPE_TEXT, R.string.quote_2));\n\n        items.add(new ContentItem(ContentItem.CONTENT_TYPE_IMAGE, \"photo_2.jpg\"));\n\n        items.add(new ContentItem(ContentItem.CONTENT_TYPE_TEXT, R.string.quote_3));\n\n        items.add(new ContentItem(ContentItem.CONTENT_TYPE_IMAGE, \"photo_3.jpg\"));\n\n \n\n        return items;\n\n    }\n\n \n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.actionbarcompat.shareactionprovider\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <!--\n\n        ActionBarCompat provides an Action Bar from API v7 onwards\n\n    -->\n\n    <uses-sdk\n\n        android:minSdkVersion=\"7\"\n\n        android:targetSdkVersion=\"17\" />\n\n \n\n    <application\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:label=\"@string/app_name\"\n\n        android:theme=\"@style/Theme.AppCompat\"\n\n        android:allowBackup=\"true\">\n\n \n\n        <activity\n\n            android:name=\".MainActivity\">\n\n            <!-- Launcher Intent filter -->\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n \n\n        <!-- ContentProvider which serves files from this application's asset folder -->\n\n        <provider\n\n            android:name=\".content.AssetProvider\"\n\n            android:authorities=\"com.example.android.actionbarcompat.shareactionprovider\"\n\n            android:grantUriPermissions=\"true\"\n\n            android:exported=\"true\" />\n\n \n\n    </application>\n\n \n\n</manifest>\n  "},"ActionBarCompat-Styled":{"res":{"drawable":{"pressed_background.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<!--\n\n  This drawable is used in our custom selected item background drawable: selectable_background.xml.\n\n  It is required as selector items need to be drawables, and not a raw color value as we are using.\n\n-->\n\n<shape xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n       android:shape=\"rectangle\">\n\n \n\n    <solid android:color=\"@color/pressed_styled\"/>\n\n \n\n</shape>\n  ","progress_horizontal.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<!--\n\n  This drawable is used in our custom horizontal Progress Bar style:\n\n  Widget.Styled.ProgressBar.Horizontal\n\n-->\n\n<layer-list xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n \n\n    <item\n\n        android:id=\"@android:id/background\"\n\n        android:drawable=\"@drawable/progress_bg_styled\" />\n\n \n\n    <item android:id=\"@android:id/secondaryProgress\">\n\n        <scale\n\n            android:drawable=\"@drawable/progress_secondary_styled\"\n\n            android:scaleWidth=\"100%\" />\n\n    </item>\n\n \n\n    <item android:id=\"@android:id/progress\">\n\n        <scale\n\n            android:drawable=\"@drawable/progress_primary_styled\"\n\n            android:scaleWidth=\"100%\" />\n\n    </item>\n\n \n\n</layer-list>\n  ","selectable_background.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<!--\n\n  This drawable is used as the main touch feedback drawable for the Action Bar. By default it is\n\n  used as the action item button background, amongst other things.\n\n \n\n  The different items in this drawable are displayed when their selector state matches the view's\n\n  state.\n\n-->\n\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n \n\n    <item android:drawable=\"@drawable/list_focused_styled\" android:state_focused=\"true\"\n\n          android:state_pressed=\"false\"/>\n\n    <item android:drawable=\"@drawable/pressed_background\" android:state_pressed=\"true\"/>\n\n    <item android:drawable=\"@android:color/transparent\"/>\n\n \n\n</selector>\n  ","spinner_background_ab.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<!--\n\n  This drawable is used to style the list navigation spinner in our custom Action Bar theme.\n\n \n\n  The different items in this drawable are displayed when their selector state matches the view's\n\n  state.\n\n-->\n\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n \n\n    <item android:drawable=\"@drawable/spinner_ab_disabled_styled\" android:state_enabled=\"false\" />\n\n    <item android:drawable=\"@drawable/spinner_ab_pressed_styled\" android:state_pressed=\"true\" />\n\n    <item android:drawable=\"@drawable/spinner_ab_focused_styled\" android:state_focused=\"true\"\n\n        android:state_pressed=\"false\" />\n\n    <item android:drawable=\"@drawable/spinner_ab_default_styled\" />\n\n \n\n</selector>\n  ","tab_indicator_ab.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<!--\n\n  This drawable is used as the background drawable for each tab displayed on the Action Bar.\n\n \n\n  The different items in this drawable are displayed when their selector state matches the view's\n\n  state.\n\n-->\n\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n \n\n    <!-- Non focused states -->\n\n    <item android:drawable=\"@android:color/transparent\" android:state_focused=\"false\"\n\n        android:state_pressed=\"false\" android:state_selected=\"false\" />\n\n    <item android:drawable=\"@drawable/tab_selected_styled\" android:state_focused=\"false\"\n\n        android:state_pressed=\"false\" android:state_selected=\"true\" />\n\n \n\n    <!-- Focused states -->\n\n    <item android:drawable=\"@drawable/tab_unselected_focused_styled\" android:state_focused=\"true\"\n\n        android:state_pressed=\"false\" android:state_selected=\"false\" />\n\n    <item android:drawable=\"@drawable/tab_selected_focused_styled\" android:state_focused=\"true\"\n\n        android:state_pressed=\"false\" android:state_selected=\"true\" />\n\n \n\n    <!-- Pressed & Non-focused -->\n\n    <item android:drawable=\"@drawable/tab_unselected_pressed_styled\" android:state_focused=\"false\"\n\n        android:state_pressed=\"true\" android:state_selected=\"false\" />\n\n    <item android:drawable=\"@drawable/tab_selected_pressed_styled\" android:state_focused=\"false\"\n\n        android:state_pressed=\"true\" android:state_selected=\"true\" />\n\n \n\n    <!-- Pressed & focused states -->\n\n    <item android:drawable=\"@drawable/tab_unselected_pressed_styled\" android:state_focused=\"true\"\n\n        android:state_pressed=\"true\" android:state_selected=\"false\" />\n\n    <item android:drawable=\"@drawable/tab_selected_pressed_styled\" android:state_focused=\"true\"\n\n        android:state_pressed=\"true\" android:state_selected=\"true\" />\n\n \n\n</selector>\n  "},"drawable-hdpi":{"ab_bottom_solid_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-hdpi/ab_bottom_solid_styled.9.png","ab_solid_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-hdpi/ab_solid_styled.9.png","ab_stacked_solid_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-hdpi/ab_stacked_solid_styled.9.png","ic_action_location.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-hdpi/ic_action_location.png","ic_action_refresh.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-hdpi/ic_action_refresh.png","ic_action_settings.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-hdpi/ic_action_settings.png","ic_launcher.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-hdpi/ic_launcher.png","list_focused_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-hdpi/list_focused_styled.9.png","menu_dropdown_panel_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-hdpi/menu_dropdown_panel_styled.9.png","progress_bg_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-hdpi/progress_bg_styled.9.png","progress_primary_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-hdpi/progress_primary_styled.9.png","progress_secondary_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-hdpi/progress_secondary_styled.9.png","spinner_ab_default_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-hdpi/spinner_ab_default_styled.9.png","spinner_ab_disabled_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-hdpi/spinner_ab_disabled_styled.9.png","spinner_ab_focused_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-hdpi/spinner_ab_focused_styled.9.png","spinner_ab_pressed_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-hdpi/spinner_ab_pressed_styled.9.png","tab_selected_focused_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-hdpi/tab_selected_focused_styled.9.png","tab_selected_pressed_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-hdpi/tab_selected_pressed_styled.9.png","tab_selected_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-hdpi/tab_selected_styled.9.png","tab_unselected_focused_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-hdpi/tab_unselected_focused_styled.9.png","tab_unselected_pressed_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-hdpi/tab_unselected_pressed_styled.9.png","tile.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ab_bottom_solid_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-mdpi/ab_bottom_solid_styled.9.png","ab_solid_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-mdpi/ab_solid_styled.9.png","ab_stacked_solid_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-mdpi/ab_stacked_solid_styled.9.png","ic_action_location.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-mdpi/ic_action_location.png","ic_action_refresh.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-mdpi/ic_action_refresh.png","ic_action_settings.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-mdpi/ic_action_settings.png","ic_launcher.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-mdpi/ic_launcher.png","list_focused_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-mdpi/list_focused_styled.9.png","menu_dropdown_panel_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-mdpi/menu_dropdown_panel_styled.9.png","progress_bg_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-mdpi/progress_bg_styled.9.png","progress_primary_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-mdpi/progress_primary_styled.9.png","progress_secondary_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-mdpi/progress_secondary_styled.9.png","spinner_ab_default_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-mdpi/spinner_ab_default_styled.9.png","spinner_ab_disabled_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-mdpi/spinner_ab_disabled_styled.9.png","spinner_ab_focused_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-mdpi/spinner_ab_focused_styled.9.png","spinner_ab_pressed_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-mdpi/spinner_ab_pressed_styled.9.png","tab_selected_focused_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-mdpi/tab_selected_focused_styled.9.png","tab_selected_pressed_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-mdpi/tab_selected_pressed_styled.9.png","tab_selected_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-mdpi/tab_selected_styled.9.png","tab_unselected_focused_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-mdpi/tab_unselected_focused_styled.9.png","tab_unselected_pressed_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-mdpi/tab_unselected_pressed_styled.9.png"},"drawable-xhdpi":{"ab_bottom_solid_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-xhdpi/ab_bottom_solid_styled.9.png","ab_solid_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-xhdpi/ab_solid_styled.9.png","ab_stacked_solid_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-xhdpi/ab_stacked_solid_styled.9.png","ic_action_location.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-xhdpi/ic_action_location.png","ic_action_refresh.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-xhdpi/ic_action_refresh.png","ic_action_settings.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-xhdpi/ic_action_settings.png","ic_launcher.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-xhdpi/ic_launcher.png","list_focused_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-xhdpi/list_focused_styled.9.png","menu_dropdown_panel_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-xhdpi/menu_dropdown_panel_styled.9.png","progress_bg_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-xhdpi/progress_bg_styled.9.png","progress_primary_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-xhdpi/progress_primary_styled.9.png","progress_secondary_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-xhdpi/progress_secondary_styled.9.png","spinner_ab_default_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-xhdpi/spinner_ab_default_styled.9.png","spinner_ab_disabled_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-xhdpi/spinner_ab_disabled_styled.9.png","spinner_ab_focused_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-xhdpi/spinner_ab_focused_styled.9.png","spinner_ab_pressed_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-xhdpi/spinner_ab_pressed_styled.9.png","tab_selected_focused_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-xhdpi/tab_selected_focused_styled.9.png","tab_selected_pressed_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-xhdpi/tab_selected_pressed_styled.9.png","tab_selected_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-xhdpi/tab_selected_styled.9.png","tab_unselected_focused_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-xhdpi/tab_unselected_focused_styled.9.png","tab_unselected_pressed_styled.9.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-xhdpi/tab_unselected_pressed_styled.9.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com/samples/ActionBarCompat-Styled/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleMessageTile\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n            android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n            android:text=\"@string/intro_message\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n  ","sample_main.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<TextView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:text=\"@string/main_description\"\n\n    android:padding=\"16dp\"\n\n    android:gravity=\"center\"/>\n\n \n  "},"menu":{"main.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<!--\n\n  As we're using ActionBarCompat, any action item attributes come from ActionBarCompat's XML\n\n  namespace instead of the android namespace. Here we've added a new support namespace added to\n\n  the menu element allowing us to use the 'showAsAction' attribute in a backwards compatible way.\n\n  Any other action item attributes used should be referenced from this namespace too\n\n  (actionProviderClass, actionViewClass, actionLayout).\n\n-->\n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:support=\"http://schemas.android.com/apk/res-auto\" >\n\n \n\n    <!--\n\n       Here we create all of the items to be displayed in the menu, setting support:showAsAction to\n\n       define how the item should be displayed on the compatible Action Bar.\n\n    -->\n\n    <item\n\n        android:id=\"@+id/menu_refresh\"\n\n        android:icon=\"@drawable/ic_action_refresh\"\n\n        android:title=\"@string/menu_refresh\"\n\n        support:showAsAction=\"ifRoom\"/>\n\n \n\n    <item\n\n        android:id=\"@+id/menu_location\"\n\n        android:icon=\"@drawable/ic_action_location\"\n\n        android:title=\"@string/menu_location\"\n\n        support:showAsAction=\"ifRoom\"/>\n\n \n\n    <item\n\n        android:id=\"@+id/menu_settings\"\n\n        android:icon=\"@drawable/ic_action_settings\"\n\n        android:title=\"@string/menu_settings\"\n\n        support:showAsAction=\"never\"/>\n\n \n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">ActionBarCompat-Styled</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            This sample shows you how to use ActionBarCompat with a customized theme. It utilizes a\n\n            split action bar when running on a device with a narrow display, and show three tabs.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","colors.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <color name=\"pressed_styled\">#CC669900</color>\n\n \n\n</resources>\n  ","strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<resources>\n\n \n\n    <string name=\"menu_refresh\">Refresh</string>\n\n    <string name=\"menu_location\">Location</string>\n\n    <string name=\"menu_settings\">Settings</string>\n\n    <string name=\"main_description\">This is a basic Activity showing an Action Bar which has been\n\n        styled.\n\n    </string>\n\n \n\n</resources>\n  ","styles.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <!--\n\n        This is the styled theme.\n\n \n\n        It extends from Theme.AppCompat.Light, but it could extend from any of\n\n        the Theme.AppCompat themes depending on your color scheme. This theme can be applied to\n\n        your application or individual activities in the AndroidManifest.xml. In this sample it is\n\n        set on the application.\n\n \n\n        This differs from the version of this theme in 'res/values-v14', as not all of the\n\n        necessary attributes are available in the android: namespace on older versions of Android.\n\n        This means that for certain attributes we must set the attributes provided in\n\n        ActionBarCompat's namespace instead.\n\n    -->\n\n \n\n    <style name=\"Theme.Styled\" parent=\"@style/Theme.AppCompat.Light\">\n\n        <item name=\"actionBarItemBackground\">@drawable/selectable_background</item>\n\n        <item name=\"actionBarTabStyle\">@style/Widget.Styled.ActionBar.TabView</item>\n\n        <item name=\"actionBarStyle\">@style/Widget.Styled.ActionBar</item>\n\n        <item name=\"actionDropDownStyle\">@style/Widget.Styled.Spinner.DropDown.ActionBar</item>\n\n        <item name=\"dropDownListViewStyle\">@style/Widget.Styled.ListView.DropDown</item>\n\n        <item name=\"popupMenuStyle\">@style/Widget.Styled.PopupMenu</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.Styled.ActionBar\" parent=\"@style/Widget.AppCompat.Light.ActionBar.Solid\">\n\n        <item name=\"background\">@drawable/ab_solid_styled</item>\n\n        <item name=\"backgroundStacked\">@drawable/ab_stacked_solid_styled</item>\n\n        <item name=\"backgroundSplit\">@drawable/ab_bottom_solid_styled</item>\n\n        <item name=\"progressBarStyle\">@style/Widget.Styled.ProgressBar.Horizontal</item>\n\n    </style>\n\n \n\n \n\n    <!--\n\n        For the following styles, the attributes are available in the android namespace which\n\n        means that we can set them here for all platforms (v7 through to the latest).\n\n    -->\n\n \n\n    <style name=\"Widget.Styled.ActionBar.TabView\"\n\n           parent=\"@style/Widget.AppCompat.Light.ActionBar.TabView\">\n\n        <item name=\"android:background\">@drawable/tab_indicator_ab</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.Styled.Spinner.DropDown.ActionBar\"\n\n           parent=\"@style/Widget.AppCompat.Light.Spinner.DropDown.ActionBar\">\n\n        <item name=\"android:background\">@drawable/spinner_background_ab</item>\n\n        <item name=\"android:popupBackground\">@drawable/menu_dropdown_panel_styled</item>\n\n        <item name=\"android:dropDownSelector\">@drawable/selectable_background</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.Styled.ProgressBar.Horizontal\"\n\n           parent=\"@style/Widget.AppCompat.ProgressBar.Horizontal\">\n\n        <item name=\"android:progressDrawable\">@drawable/progress_horizontal</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.Styled.PopupMenu\" parent=\"@style/Widget.AppCompat.Light.PopupMenu\">\n\n        <item name=\"android:popupBackground\">@drawable/menu_dropdown_panel_styled</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.Styled.ListView.DropDown\"\n\n           parent=\"@style/Widget.AppCompat.Light.ListView.DropDown\">\n\n        <item name=\"android:listSelector\">@drawable/selectable_background</item>\n\n    </style>\n\n \n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "},"values-v14":{"styles.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <!--\n\n        This is the styled theme.\n\n \n\n        It extends from Theme.AppCompat.Light, but it could extend from any of\n\n        the Theme.AppCompat themes depending on your color scheme. This theme can be applied to\n\n        your application or individual activities in the AndroidManifest.xml. In this sample it is\n\n        set on the application.\n\n \n\n        This differs from the version of this theme in 'res/values', as we revert back to\n\n        setting the attributes from the android namespace in ICS+.\n\n    -->\n\n \n\n    <style name=\"Theme.Styled\" parent=\"@style/Theme.AppCompat.Light\">\n\n        <item name=\"android:actionBarItemBackground\">@drawable/selectable_background</item>\n\n        <item name=\"android:actionBarTabStyle\">@style/Widget.Styled.ActionBar.TabView</item>\n\n        <item name=\"android:actionBarStyle\">@style/Widget.Styled.ActionBar</item>\n\n        <item name=\"android:actionDropDownStyle\">\n\n            @style/Widget.Styled.Spinner.DropDown.ActionBar\n\n        </item>\n\n        <item name=\"android:dropDownListViewStyle\">@style/Widget.Styled.ListView.DropDown</item>\n\n        <item name=\"android:popupMenuStyle\">@style/Widget.Styled.PopupMenu</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.Styled.ActionBar\" parent=\"@style/Widget.AppCompat.Light.ActionBar.Solid\">\n\n        <item name=\"android:background\">@drawable/ab_solid_styled</item>\n\n        <item name=\"android:backgroundStacked\">@drawable/ab_stacked_solid_styled</item>\n\n        <item name=\"android:backgroundSplit\">@drawable/ab_bottom_solid_styled</item>\n\n        <item name=\"android:progressBarStyle\">@style/Widget.Styled.ProgressBar.Horizontal</item>\n\n    </style>\n\n \n\n</resources>\n  "}},"src":{"com.example.android.actionbarcompat.styled":{"MainActivity.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.actionbarcompat.styled;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentTransaction;\n\nimport android.support.v7.app.ActionBar;\n\nimport android.support.v7.app.ActionBarActivity;\n\nimport android.view.Menu;\n\n \n\n/**\n\n * This sample shows you how to use ActionBarCompat with a customized theme. It utilizes a split\n\n * action bar when running on a device with a narrow display, and show three tabs.\n\n *\n\n * This Activity extends from {@link ActionBarActivity}, which provides all of the function\n\n * necessary to display a compatible Action Bar on devices running Android v2.1+.\n\n *\n\n * The interesting bits of this sample start in the theme files\n\n * ('res/values/styles.xml' and 'res/values-v14</styles.xml').\n\n *\n\n * Many of the drawables used in this sample were generated with the\n\n * 'Android Action Bar Style Generator': http://jgilfelt.github.io/android-actionbarstylegenerator\n\n */\n\npublic class MainActivity extends ActionBarActivity implements ActionBar.TabListener {\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.sample_main);\n\n \n\n        // Set the Action Bar to use tabs for navigation\n\n        ActionBar ab = getSupportActionBar();\n\n        ab.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);\n\n \n\n        // Add three tabs to the Action Bar for display\n\n        ab.addTab(ab.newTab().setText(\"Tab 1\").setTabListener(this));\n\n        ab.addTab(ab.newTab().setText(\"Tab 2\").setTabListener(this));\n\n        ab.addTab(ab.newTab().setText(\"Tab 3\").setTabListener(this));\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        // Inflate menu from menu resource (res/menu/main)\n\n        getMenuInflater().inflate(R.menu.main, menu);\n\n \n\n        return super.onCreateOptionsMenu(menu);\n\n    }\n\n \n\n    // Implemented from ActionBar.TabListener\n\n    @Override\n\n    public void onTabSelected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {\n\n        // This is called when a tab is selected.\n\n    }\n\n \n\n    // Implemented from ActionBar.TabListener\n\n    @Override\n\n    public void onTabUnselected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {\n\n        // This is called when a previously selected tab is unselected.\n\n    }\n\n \n\n    // Implemented from ActionBar.TabListener\n\n    @Override\n\n    public void onTabReselected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {\n\n        // This is called when a previously selected tab is selected again.\n\n    }\n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.actionbarcompat.styled\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\" >\n\n \n\n    <uses-sdk\n\n        android:minSdkVersion=\"7\"\n\n        android:targetSdkVersion=\"17\" />\n\n \n\n    <!--\n\n        Theme is set on the application so that our custom theme is used by\n\n        default by all Activities\n\n    -->\n\n    <application\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:label=\"@string/app_name\"\n\n        android:theme=\"@style/Theme.Styled\" >\n\n \n\n        <activity android:name=\".MainActivity\">\n\n \n\n            <!-- Launcher Intent filter -->\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n \n\n            <!--\n\n                In this example set the Activity to have a split action bar when the device's\n\n                display is narrow. In ActionBarCompat this is done by setting the\n\n                'android.support.UI_OPTIONS' metadata field to 'splitActionBarWhenNarrow'.\n\n            -->\n\n            <meta-data\n\n                android:name=\"android.support.UI_OPTIONS\"\n\n                android:value=\"splitActionBarWhenNarrow\" />\n\n \n\n        </activity>\n\n    </application>\n\n \n\n</manifest>\n  "},"AdapterTransition":{"res":{"drawable-hdpi":{"ic_action_grid.png":"http://developer.android.com/samples/AdapterTransition/res/drawable-hdpi/ic_action_grid.png","ic_action_list.png":"http://developer.android.com/samples/AdapterTransition/res/drawable-hdpi/ic_action_list.png","ic_launcher.png":"http://developer.android.com/samples/AdapterTransition/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com/samples/AdapterTransition/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_action_grid.png":"http://developer.android.com/samples/AdapterTransition/res/drawable-mdpi/ic_action_grid.png","ic_action_list.png":"http://developer.android.com/samples/AdapterTransition/res/drawable-mdpi/ic_action_list.png","ic_launcher.png":"http://developer.android.com/samples/AdapterTransition/res/drawable-mdpi/ic_launcher.png"},"drawable-nodpi":{"p1.jpg":"http://developer.android.com/samples/AdapterTransition/res/drawable-nodpi/p1.jpg","p10.jpg":"http://developer.android.com/samples/AdapterTransition/res/drawable-nodpi/p10.jpg","p11.jpg":"http://developer.android.com/samples/AdapterTransition/res/drawable-nodpi/p11.jpg","p2.jpg":"http://developer.android.com/samples/AdapterTransition/res/drawable-nodpi/p2.jpg","p3.jpg":"http://developer.android.com/samples/AdapterTransition/res/drawable-nodpi/p3.jpg","p4.jpg":"http://developer.android.com/samples/AdapterTransition/res/drawable-nodpi/p4.jpg","p5.jpg":"http://developer.android.com/samples/AdapterTransition/res/drawable-nodpi/p5.jpg","p6.jpg":"http://developer.android.com/samples/AdapterTransition/res/drawable-nodpi/p6.jpg","p7.jpg":"http://developer.android.com/samples/AdapterTransition/res/drawable-nodpi/p7.jpg","p8.jpg":"http://developer.android.com/samples/AdapterTransition/res/drawable-nodpi/p8.jpg","p9.jpg":"http://developer.android.com/samples/AdapterTransition/res/drawable-nodpi/p9.jpg"},"drawable-xhdpi":{"ic_action_grid.png":"http://developer.android.com/samples/AdapterTransition/res/drawable-xhdpi/ic_action_grid.png","ic_action_list.png":"http://developer.android.com/samples/AdapterTransition/res/drawable-xhdpi/ic_action_list.png","ic_launcher.png":"http://developer.android.com/samples/AdapterTransition/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_action_grid.png":"http://developer.android.com/samples/AdapterTransition/res/drawable-xxhdpi/ic_action_grid.png","ic_action_list.png":"http://developer.android.com/samples/AdapterTransition/res/drawable-xxhdpi/ic_action_list.png","ic_launcher.png":"http://developer.android.com/samples/AdapterTransition/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"vertical\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <ViewAnimator\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\"\n\n          android:layout_weight=\"1\">\n\n \n\n        <ScrollView\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingRight=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingTop=\"@dimen/vertical_page_margin\"\n\n                  android:paddingBottom=\"@dimen/vertical_page_margin\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </ScrollView>\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\" />\n\n \n\n    </ViewAnimator>\n\n \n\n    <View\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"1dp\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\" />\n\n \n\n</LinearLayout>\n\n \n  ","fragment_adapter_transition.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\nCopyright 2014 The Android Open Source Project\n\n \n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n \n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n \n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n-->\n\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:tools=\"http://schemas.android.com/tools\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\"\n\n    tools:context=\"com.example.android.adaptertransition.AdapterTransitionFragment\">\n\n \n\n    <FrameLayout\n\n        android:id=\"@+id/content\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"match_parent\"/>\n\n \n\n    <FrameLayout\n\n        android:id=\"@+id/cover\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"match_parent\"\n\n        android:background=\"#f3f3f3\"\n\n        android:visibility=\"invisible\"/>\n\n \n\n</FrameLayout>\n  ","fragment_meat_grid.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\nCopyright 2014 The Android Open Source Project\n\n \n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n \n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n \n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n-->\n\n<GridView\n\n    android:id=\"@+id/abs_list_view\"\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:clipToPadding=\"false\"\n\n    android:columnWidth=\"150dp\"\n\n    android:horizontalSpacing=\"1dp\"\n\n    android:numColumns=\"auto_fit\"\n\n    android:padding=\"1dp\"\n\n    android:scrollbars=\"none\"\n\n    android:stretchMode=\"columnWidth\"\n\n    android:verticalSpacing=\"1dp\"/>\n  ","fragment_meat_list.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\nCopyright 2014 The Android Open Source Project\n\n \n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n \n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n \n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n-->\n\n<ListView\n\n    android:id=\"@+id/abs_list_view\"\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"/>\n  ","item_meat_grid.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\nCopyright 2014 The Android Open Source Project\n\n \n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n \n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n \n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n-->\n\n<RelativeLayout\n\n    android:id=\"@+id/meat_container\"\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:tools=\"http://schemas.android.com/tools\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"150dp\">\n\n \n\n    <ImageView\n\n        android:id=\"@+id/meat_image\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"match_parent\"\n\n        android:scaleType=\"centerCrop\"\n\n        tools:src=\"@drawable/p1\"/>\n\n \n\n    <TextView\n\n        android:id=\"@+id/meat_title\"\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:layout_alignParentBottom=\"true\"\n\n        android:layout_alignParentEnd=\"true\"\n\n        android:layout_gravity=\"bottom|end\"\n\n        android:layout_marginEnd=\"16dp\"\n\n        android:layout_marginStart=\"16dp\"\n\n        android:gravity=\"center_horizontal\"\n\n        android:shadowColor=\"#000000\"\n\n        android:shadowDx=\"0\"\n\n        android:shadowDy=\"0\"\n\n        android:shadowRadius=\"10\"\n\n        android:textColor=\"#ffffff\"\n\n        android:textSize=\"24sp\"\n\n        android:textStyle=\"bold\"\n\n        tools:text=\"Hello\"/>\n\n \n\n</RelativeLayout>\n  ","item_meat_list.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\nCopyright 2014 The Android Open Source Project\n\n \n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n \n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n \n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n-->\n\n<RelativeLayout\n\n    android:id=\"@+id/meat_container\"\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:tools=\"http://schemas.android.com/tools\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"horizontal\"\n\n    android:paddingEnd=\"?android:attr/listPreferredItemPaddingEnd\"\n\n    android:paddingStart=\"?android:attr/listPreferredItemPaddingStart\">\n\n \n\n    <ImageView\n\n        android:id=\"@+id/meat_image\"\n\n        android:layout_width=\"64dp\"\n\n        android:layout_height=\"64dp\"\n\n        android:scaleType=\"centerCrop\"\n\n        tools:src=\"@drawable/p1\"/>\n\n \n\n    <TextView\n\n        android:id=\"@+id/meat_title\"\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:layout_centerVertical=\"true\"\n\n        android:layout_marginStart=\"?android:attr/listPreferredItemPaddingStart\"\n\n        android:layout_toEndOf=\"@id/meat_image\"\n\n        android:layout_centerInParent=\"true\"\n\n        android:gravity=\"center_vertical\"\n\n        android:textSize=\"24sp\"\n\n        tools:text=\"Title\"/>\n\n \n\n</RelativeLayout>\n  "},"layout-w720dp":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"horizontal\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <LinearLayout\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\"\n\n          android:layout_weight=\"1\"\n\n          android:orientation=\"vertical\">\n\n \n\n        <FrameLayout\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"wrap_content\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/margin_medium\"\n\n                  android:paddingRight=\"@dimen/margin_medium\"\n\n                  android:paddingTop=\"@dimen/margin_large\"\n\n                  android:paddingBottom=\"@dimen/margin_large\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </FrameLayout>\n\n \n\n        <View\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"1dp\"\n\n              android:background=\"@android:color/darker_gray\" />\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"0px\"\n\n              android:layout_weight=\"1\" />\n\n \n\n    </LinearLayout>\n\n \n\n    <View\n\n          android:layout_width=\"1dp\"\n\n          android:layout_height=\"match_parent\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\" />\n\n \n\n</LinearLayout>\n\n \n\n \n  "},"menu":{"fragment_adapter_transition.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\nCopyright 2014 The Android Open Source Project\n\n \n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n \n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n \n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n-->\n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item\n\n        android:id=\"@+id/action_toggle\"\n\n        android:icon=\"@drawable/ic_action_grid\"\n\n        android:showAsAction=\"always|withText\"\n\n        android:title=\"@string/show_as_grid\"/>\n\n</menu>\n  ","main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:id=\"@+id/menu_toggle_log\"\n\n          android:showAsAction=\"always\"\n\n          android:title=\"@string/sample_show_log\" />\n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">AdapterTransition</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n\t    Transition cannot be directly applied to AdapterViews. In this sample, we demonstrate how to create an overlay layout and run a Transition on it. Press the action bar button to toggle between ListView and GridView.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","strings.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<resources>\n\n    <string name=\"sample_show_log\">Show Log</string>\n\n    <string name=\"sample_hide_log\">Hide Log</string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.adaptertransition":{"AdapterTransitionFragment.java":"\n    \n\n/*\n\n * Copyright 2014 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.adaptertransition;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.ActivityCompat;\n\nimport android.support.v4.app.Fragment;\n\nimport android.transition.AutoTransition;\n\nimport android.transition.Scene;\n\nimport android.transition.Transition;\n\nimport android.transition.TransitionManager;\n\nimport android.view.LayoutInflater;\n\nimport android.view.Menu;\n\nimport android.view.MenuInflater;\n\nimport android.view.MenuItem;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.AbsListView;\n\nimport android.widget.FrameLayout;\n\nimport android.widget.GridView;\n\nimport android.widget.ListView;\n\nimport android.widget.Toast;\n\n \n\n/**\n\n * Main screen for AdapterTransition sample.\n\n */\n\npublic class AdapterTransitionFragment extends Fragment implements Transition.TransitionListener {\n\n \n\n    /**\n\n     * Since the transition framework requires all relevant views in a view hierarchy to be marked\n\n     * with IDs, we use this ID to mark the root view.\n\n     */\n\n    private static final int ROOT_ID = 1;\n\n \n\n    /**\n\n     * A tag for saving state whether the mAbsListView is ListView or GridView.\n\n     */\n\n    private static final String STATE_IS_LISTVIEW = \"is_listview\";\n\n \n\n    /**\n\n     * This is where we place our AdapterView (ListView / GridView).\n\n     */\n\n    private FrameLayout mContent;\n\n \n\n    /**\n\n     * This is where we carry out the transition.\n\n     */\n\n    private FrameLayout mCover;\n\n \n\n    /**\n\n     * This list shows our contents. It can be ListView or GridView, and we toggle between them\n\n     * using the transition framework.\n\n     */\n\n    private AbsListView mAbsListView;\n\n \n\n    /**\n\n     * This is our contents.\n\n     */\n\n    private MeatAdapter mAdapter;\n\n \n\n    public static AdapterTransitionFragment newInstance() {\n\n        return new AdapterTransitionFragment();\n\n    }\n\n \n\n    public AdapterTransitionFragment() {\n\n    }\n\n \n\n    @Override\n\n    public void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setHasOptionsMenu(true);\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n        // If savedInstanceState is available, we restore the state whether the list is a ListView\n\n        // or a GridView.\n\n        boolean isListView;\n\n        if (null == savedInstanceState) {\n\n            isListView = true;\n\n        } else {\n\n            isListView = savedInstanceState.getBoolean(STATE_IS_LISTVIEW, true);\n\n        }\n\n        inflateAbsList(inflater, container, isListView);\n\n        return inflater.inflate(R.layout.fragment_adapter_transition, container, false);\n\n    }\n\n \n\n    @Override\n\n    public void onSaveInstanceState(Bundle outState) {\n\n        super.onSaveInstanceState(outState);\n\n        outState.putBoolean(STATE_IS_LISTVIEW, mAbsListView instanceof ListView);\n\n    }\n\n \n\n    @Override\n\n    public void onViewCreated(View view, Bundle savedInstanceState) {\n\n        // Retaining references for FrameLayouts that we use later.\n\n        mContent = (FrameLayout) view.findViewById(R.id.content);\n\n        mCover = (FrameLayout) view.findViewById(R.id.cover);\n\n        // We are attaching the list to the screen here.\n\n        mContent.addView(mAbsListView);\n\n    }\n\n \n\n    @Override\n\n    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {\n\n        inflater.inflate(R.menu.fragment_adapter_transition, menu);\n\n    }\n\n \n\n    @Override\n\n    public void onPrepareOptionsMenu(Menu menu) {\n\n        // We change the look of the icon every time the user toggles between list and grid.\n\n        MenuItem item = menu.findItem(R.id.action_toggle);\n\n        if (null != item) {\n\n            if (mAbsListView instanceof ListView) {\n\n                item.setIcon(R.drawable.ic_action_grid);\n\n                item.setTitle(R.string.show_as_grid);\n\n            } else {\n\n                item.setIcon(R.drawable.ic_action_list);\n\n                item.setTitle(R.string.show_as_list);\n\n            }\n\n        }\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch (item.getItemId()) {\n\n            case R.id.action_toggle: {\n\n                toggle();\n\n                return true;\n\n            }\n\n        }\n\n        return false;\n\n    }\n\n \n\n    @Override\n\n    public void onTransitionStart(Transition transition) {\n\n    }\n\n \n\n    @Override\n\n    public void onTransitionEnd(Transition transition) {\n\n        // When the transition ends, we remove all the views from the overlay and hide it.\n\n        mCover.removeAllViews();\n\n        mCover.setVisibility(View.INVISIBLE);\n\n    }\n\n \n\n    @Override\n\n    public void onTransitionCancel(Transition transition) {\n\n    }\n\n \n\n    @Override\n\n    public void onTransitionPause(Transition transition) {\n\n    }\n\n \n\n    @Override\n\n    public void onTransitionResume(Transition transition) {\n\n    }\n\n \n\n    /**\n\n     * Inflate a ListView or a GridView with a corresponding ListAdapter.\n\n     *\n\n     * @param inflater The LayoutInflater.\n\n     * @param container The ViewGroup that contains this AbsListView. The AbsListView won't be\n\n     *                  attached to it.\n\n     * @param inflateListView Pass true to inflate a ListView, or false to inflate a GridView.\n\n     */\n\n    private void inflateAbsList(LayoutInflater inflater, ViewGroup container,\n\n                                boolean inflateListView) {\n\n        if (inflateListView) {\n\n            mAbsListView = (AbsListView) inflater.inflate(R.layout.fragment_meat_list,\n\n                    container, false);\n\n            mAdapter = new MeatAdapter(inflater, R.layout.item_meat_list);\n\n        } else {\n\n            mAbsListView = (AbsListView) inflater.inflate(R.layout.fragment_meat_grid,\n\n                    container, false);\n\n            mAdapter = new MeatAdapter(inflater, R.layout.item_meat_grid);\n\n        }\n\n        mAbsListView.setAdapter(mAdapter);\n\n        mAbsListView.setOnItemClickListener(mAdapter);\n\n    }\n\n \n\n    /**\n\n     * Toggle the UI between ListView and GridView.\n\n     */\n\n    private void toggle() {\n\n        // We use mCover as the overlay on which we carry out the transition.\n\n        mCover.setVisibility(View.VISIBLE);\n\n        // This FrameLayout holds all the visible views in the current list or grid. We use this as\n\n        // the starting Scene of the Transition later.\n\n        FrameLayout before = copyVisibleViews();\n\n        FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(\n\n                FrameLayout.LayoutParams.MATCH_PARENT, FrameLayout.LayoutParams.MATCH_PARENT);\n\n        mCover.addView(before, params);\n\n        // Swap the actual list.\n\n        swapAbsListView();\n\n        // We also swap the icon for the toggle button.\n\n        ActivityCompat.invalidateOptionsMenu(getActivity());\n\n        // It is now ready to start the transition.\n\n        mAbsListView.post(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                Scene scene = new Scene(mCover, copyVisibleViews());\n\n                Transition transition = new AutoTransition();\n\n                transition.addListener(AdapterTransitionFragment.this);\n\n                TransitionManager.go(scene, transition);\n\n            }\n\n        });\n\n    }\n\n \n\n    /**\n\n     * Swap ListView with GridView, or GridView with ListView.\n\n     */\n\n    private void swapAbsListView() {\n\n        // We save the current scrolling position before removing the current list.\n\n        int first = mAbsListView.getFirstVisiblePosition();\n\n        // If the current list is a GridView, we replace it with a ListView. If it is a ListView,\n\n        // a GridView.\n\n        LayoutInflater inflater = LayoutInflater.from(getActivity());\n\n        inflateAbsList(inflater, (ViewGroup) mAbsListView.getParent(),\n\n                mAbsListView instanceof GridView);\n\n        mAbsListView.setAdapter(mAdapter);\n\n        // We restore the scrolling position here.\n\n        mAbsListView.setSelection(first);\n\n        // The new list is ready, and we replace the existing one with it.\n\n        mContent.removeAllViews();\n\n        mContent.addView(mAbsListView);\n\n    }\n\n \n\n    /**\n\n     * Copy all the visible views in the mAbsListView into a new FrameLayout and return it.\n\n     *\n\n     * @return a FrameLayout with all the visible views inside.\n\n     */\n\n    private FrameLayout copyVisibleViews() {\n\n        // This is the FrameLayout we return afterwards.\n\n        FrameLayout layout = new FrameLayout(getActivity());\n\n        // The transition framework requires to set ID for all views to be animated.\n\n        layout.setId(ROOT_ID);\n\n        // We only copy visible views.\n\n        int first = mAbsListView.getFirstVisiblePosition();\n\n        int index = 0;\n\n        while (true) {\n\n            // This is one of the views that we copy. Note that the argument for getChildAt is a\n\n            // zero-oriented index, and it doesn't usually match with its position in the list.\n\n            View source = mAbsListView.getChildAt(index);\n\n            if (null == source) {\n\n                break;\n\n            }\n\n            // This is the copy of the original view.\n\n            View destination = mAdapter.getView(first + index, null, layout);\n\n            assert destination != null;\n\n            destination.setId(ROOT_ID + first + index);\n\n            FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(\n\n                    source.getWidth(), source.getHeight());\n\n            params.leftMargin = (int) source.getX();\n\n            params.topMargin = (int) source.getY();\n\n            layout.addView(destination, params);\n\n            ++index;\n\n        }\n\n        return layout;\n\n    }\n\n \n\n}\n  ","MainActivity.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.adaptertransition;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentTransaction;\n\nimport android.view.Menu;\n\nimport android.view.MenuItem;\n\nimport android.widget.ViewAnimator;\n\n \n\nimport com.example.android.common.activities.SampleActivityBase;\n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogFragment;\n\nimport com.example.android.common.logger.LogWrapper;\n\nimport com.example.android.common.logger.MessageOnlyLogFilter;\n\n \n\n/**\n\n * A simple launcher activity containing a summary sample description, sample log and a custom\n\n * {@link android.support.v4.app.Fragment} which can display a view.\n\n * <p>\n\n * For devices with displays with a width of 720dp or greater, the sample log is always visible,\n\n * on other devices it's visibility is controlled by an item on the Action Bar.\n\n */\n\npublic class MainActivity extends SampleActivityBase {\n\n \n\n    public static final String TAG = \"MainActivity\";\n\n \n\n    // Whether the Log Fragment is currently shown\n\n    private boolean mLogShown;\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_main);\n\n \n\n        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n\n        AdapterTransitionFragment fragment = new AdapterTransitionFragment();\n\n        transaction.replace(R.id.sample_content_fragment, fragment);\n\n        transaction.commit();\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        getMenuInflater().inflate(R.menu.main, menu);\n\n        return true;\n\n    }\n\n \n\n    @Override\n\n    public boolean onPrepareOptionsMenu(Menu menu) {\n\n        MenuItem logToggle = menu.findItem(R.id.menu_toggle_log);\n\n        logToggle.setVisible(findViewById(R.id.sample_output) instanceof ViewAnimator);\n\n        logToggle.setTitle(mLogShown ? R.string.sample_hide_log : R.string.sample_show_log);\n\n \n\n        return super.onPrepareOptionsMenu(menu);\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch(item.getItemId()) {\n\n            case R.id.menu_toggle_log:\n\n                mLogShown = !mLogShown;\n\n                ViewAnimator output = (ViewAnimator) findViewById(R.id.sample_output);\n\n                if (mLogShown) {\n\n                    output.setDisplayedChild(1);\n\n                } else {\n\n                    output.setDisplayedChild(0);\n\n                }\n\n                supportInvalidateOptionsMenu();\n\n                return true;\n\n        }\n\n        return super.onOptionsItemSelected(item);\n\n    }\n\n \n\n    /** Create a chain of targets that will receive log data */\n\n    @Override\n\n    public void initializeLogging() {\n\n        // Wraps Android's native log framework.\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        Log.setLogNode(logWrapper);\n\n \n\n        // Filter strips out everything except the message text.\n\n        MessageOnlyLogFilter msgFilter = new MessageOnlyLogFilter();\n\n        logWrapper.setNext(msgFilter);\n\n \n\n        // On screen logging via a fragment with a TextView.\n\n        LogFragment logFragment = (LogFragment) getSupportFragmentManager()\n\n                .findFragmentById(R.id.log_fragment);\n\n        msgFilter.setNext(logFragment.getLogView());\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  ","Meat.java":"\n    \n\n/*\n\n * Copyright 2014 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.adaptertransition;\n\n \n\n/**\n\n * Sample data.\n\n */\n\npublic class Meat {\n\n \n\n    public int resourceId;\n\n    public String title;\n\n \n\n    public Meat(int resourceId, String title) {\n\n        this.resourceId = resourceId;\n\n        this.title = title;\n\n    }\n\n \n\n    public static final Meat[] MEATS = {\n\n            new Meat(R.drawable.p1, \"First\"),\n\n            new Meat(R.drawable.p2, \"Second\"),\n\n            new Meat(R.drawable.p3, \"Third\"),\n\n            new Meat(R.drawable.p4, \"Fourth\"),\n\n            new Meat(R.drawable.p5, \"Fifth\"),\n\n            new Meat(R.drawable.p6, \"Sixth\"),\n\n            new Meat(R.drawable.p7, \"Seventh\"),\n\n            new Meat(R.drawable.p8, \"Eighth\"),\n\n            new Meat(R.drawable.p9, \"Ninth\"),\n\n            new Meat(R.drawable.p10, \"Tenth\"),\n\n            new Meat(R.drawable.p11, \"Eleventh\"),\n\n    };\n\n \n\n}\n  ","MeatAdapter.java":"\n    \n\n/*\n\n * Copyright 2014 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.adaptertransition;\n\n \n\nimport android.content.Context;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.AbsListView;\n\nimport android.widget.AdapterView;\n\nimport android.widget.BaseAdapter;\n\nimport android.widget.ImageView;\n\nimport android.widget.TextView;\n\nimport android.widget.Toast;\n\n \n\n/**\n\n * This class provides data as Views. It is designed to support both ListView and GridView by\n\n * changing a layout resource file to inflate.\n\n */\n\npublic class MeatAdapter extends BaseAdapter implements AbsListView.OnItemClickListener {\n\n \n\n    private final LayoutInflater mLayoutInflater;\n\n    private final int mResourceId;\n\n \n\n    /**\n\n     * Create a new instance of {@link MeatAdapter}.\n\n     *\n\n     * @param inflater   The layout inflater.\n\n     * @param resourceId The resource ID for the layout to be used. The layout should contain an\n\n     *                   ImageView with ID of \"meat_image\" and a TextView with ID of \"meat_title\".\n\n     */\n\n    public MeatAdapter(LayoutInflater inflater, int resourceId) {\n\n        mLayoutInflater = inflater;\n\n        mResourceId = resourceId;\n\n    }\n\n \n\n    @Override\n\n    public int getCount() {\n\n        return Meat.MEATS.length;\n\n    }\n\n \n\n    @Override\n\n    public Meat getItem(int position) {\n\n        return Meat.MEATS[position];\n\n    }\n\n \n\n    @Override\n\n    public long getItemId(int position) {\n\n        return Meat.MEATS[position].resourceId;\n\n    }\n\n \n\n    @Override\n\n    public View getView(int position, View convertView, ViewGroup parent) {\n\n        final View view;\n\n        final ViewHolder holder;\n\n        if (null == convertView) {\n\n            view = mLayoutInflater.inflate(mResourceId, parent, false);\n\n            holder = new ViewHolder();\n\n            assert view != null;\n\n            holder.image = (ImageView) view.findViewById(R.id.meat_image);\n\n            holder.title = (TextView) view.findViewById(R.id.meat_title);\n\n            view.setTag(holder);\n\n        } else {\n\n            view = convertView;\n\n            holder = (ViewHolder) view.getTag();\n\n        }\n\n        Meat meat = getItem(position);\n\n        holder.image.setImageResource(meat.resourceId);\n\n        holder.title.setText(meat.title);\n\n        return view;\n\n    }\n\n \n\n    @Override\n\n    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n\n        ViewHolder holder = (ViewHolder) view.getTag();\n\n        Context context = view.getContext();\n\n        if (null != holder && null != holder.title && null != context) {\n\n            Toast.makeText(context, context.getString(R.string.item_clicked,\n\n                    holder.title.getText()), Toast.LENGTH_SHORT).show();\n\n        }\n\n    }\n\n \n\n    private static class ViewHolder {\n\n        public ImageView image;\n\n        public TextView title;\n\n    }\n\n \n\n}\n  "},"com.example.android.common":{"activities":{"SampleActivityBase.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\npackage com.example.android.common.activities;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentActivity;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogWrapper;\n\n \n\n/**\n\n * Base launcher activity, to handle most of the common plumbing for samples.\n\n */\n\npublic class SampleActivityBase extends FragmentActivity {\n\n \n\n    public static final String TAG = \"SampleActivityBase\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n    }\n\n \n\n    @Override\n\n    protected  void onStart() {\n\n        super.onStart();\n\n        initializeLogging();\n\n    }\n\n \n\n    /** Set up targets to receive log data */\n\n    public void initializeLogging() {\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        // Wraps Android's native log framework\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        Log.setLogNode(logWrapper);\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "},"logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "},"view":{"SlidingTabLayout.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.view;\n\n \n\nimport android.content.Context;\n\nimport android.graphics.Typeface;\n\nimport android.os.Build;\n\nimport android.support.v4.view.PagerAdapter;\n\nimport android.support.v4.view.ViewPager;\n\nimport android.util.AttributeSet;\n\nimport android.util.TypedValue;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.widget.HorizontalScrollView;\n\nimport android.widget.TextView;\n\n \n\n/**\n\n * To be used with ViewPager to provide a tab indicator component which give constant feedback as to\n\n * the user's scroll progress.\n\n * <p>\n\n * To use the component, simply add it to your view hierarchy. Then in your\n\n * {@link android.app.Activity} or {@link android.support.v4.app.Fragment} call\n\n * {@link #setViewPager(ViewPager)} providing it the ViewPager this layout is being used for.\n\n * <p>\n\n * The colors can be customized in two ways. The first and simplest is to provide an array of colors\n\n * via {@link #setSelectedIndicatorColors(int...)} and {@link #setDividerColors(int...)}. The\n\n * alternative is via the {@link TabColorizer} interface which provides you complete control over\n\n * which color is used for any individual position.\n\n * <p>\n\n * The views used as tabs can be customized by calling {@link #setCustomTabView(int, int)},\n\n * providing the layout ID of your custom layout.\n\n */\n\npublic class SlidingTabLayout extends HorizontalScrollView {\n\n \n\n    /**\n\n     * Allows complete control over the colors drawn in the tab layout. Set with\n\n     * {@link #setCustomTabColorizer(TabColorizer)}.\n\n     */\n\n    public interface TabColorizer {\n\n \n\n        /**\n\n         * @return return the color of the indicator used when {@code position} is selected.\n\n         */\n\n        int getIndicatorColor(int position);\n\n \n\n        /**\n\n         * @return return the color of the divider drawn to the right of {@code position}.\n\n         */\n\n        int getDividerColor(int position);\n\n \n\n    }\n\n \n\n    private static final int TITLE_OFFSET_DIPS = 24;\n\n    private static final int TAB_VIEW_PADDING_DIPS = 16;\n\n    private static final int TAB_VIEW_TEXT_SIZE_SP = 12;\n\n \n\n    private int mTitleOffset;\n\n \n\n    private int mTabViewLayoutId;\n\n    private int mTabViewTextViewId;\n\n \n\n    private ViewPager mViewPager;\n\n    private ViewPager.OnPageChangeListener mViewPagerPageChangeListener;\n\n \n\n    private final SlidingTabStrip mTabStrip;\n\n \n\n    public SlidingTabLayout(Context context) {\n\n        this(context, null);\n\n    }\n\n \n\n    public SlidingTabLayout(Context context, AttributeSet attrs) {\n\n        this(context, attrs, 0);\n\n    }\n\n \n\n    public SlidingTabLayout(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n \n\n        // Disable the Scroll Bar\n\n        setHorizontalScrollBarEnabled(false);\n\n        // Make sure that the Tab Strips fills this View\n\n        setFillViewport(true);\n\n \n\n        mTitleOffset = (int) (TITLE_OFFSET_DIPS * getResources().getDisplayMetrics().density);\n\n \n\n        mTabStrip = new SlidingTabStrip(context);\n\n        addView(mTabStrip, LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);\n\n    }\n\n \n\n    /**\n\n     * Set the custom {@link TabColorizer} to be used.\n\n     *\n\n     * If you only require simple custmisation then you can use\n\n     * {@link #setSelectedIndicatorColors(int...)} and {@link #setDividerColors(int...)} to achieve\n\n     * similar effects.\n\n     */\n\n    public void setCustomTabColorizer(TabColorizer tabColorizer) {\n\n        mTabStrip.setCustomTabColorizer(tabColorizer);\n\n    }\n\n \n\n    /**\n\n     * Sets the colors to be used for indicating the selected tab. These colors are treated as a\n\n     * circular array. Providing one color will mean that all tabs are indicated with the same color.\n\n     */\n\n    public void setSelectedIndicatorColors(int... colors) {\n\n        mTabStrip.setSelectedIndicatorColors(colors);\n\n    }\n\n \n\n    /**\n\n     * Sets the colors to be used for tab dividers. These colors are treated as a circular array.\n\n     * Providing one color will mean that all tabs are indicated with the same color.\n\n     */\n\n    public void setDividerColors(int... colors) {\n\n        mTabStrip.setDividerColors(colors);\n\n    }\n\n \n\n    /**\n\n     * Set the {@link ViewPager.OnPageChangeListener}. When using {@link SlidingTabLayout} you are\n\n     * required to set any {@link ViewPager.OnPageChangeListener} through this method. This is so\n\n     * that the layout can update it's scroll position correctly.\n\n     *\n\n     * @see ViewPager#setOnPageChangeListener(ViewPager.OnPageChangeListener)\n\n     */\n\n    public void setOnPageChangeListener(ViewPager.OnPageChangeListener listener) {\n\n        mViewPagerPageChangeListener = listener;\n\n    }\n\n \n\n    /**\n\n     * Set the custom layout to be inflated for the tab views.\n\n     *\n\n     * @param layoutResId Layout id to be inflated\n\n     * @param textViewId id of the {@link TextView} in the inflated view\n\n     */\n\n    public void setCustomTabView(int layoutResId, int textViewId) {\n\n        mTabViewLayoutId = layoutResId;\n\n        mTabViewTextViewId = textViewId;\n\n    }\n\n \n\n    /**\n\n     * Sets the associated view pager. Note that the assumption here is that the pager content\n\n     * (number of tabs and tab titles) does not change after this call has been made.\n\n     */\n\n    public void setViewPager(ViewPager viewPager) {\n\n        mTabStrip.removeAllViews();\n\n \n\n        mViewPager = viewPager;\n\n        if (viewPager != null) {\n\n            viewPager.setOnPageChangeListener(new InternalViewPagerListener());\n\n            populateTabStrip();\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Create a default view to be used for tabs. This is called if a custom tab view is not set via\n\n     * {@link #setCustomTabView(int, int)}.\n\n     */\n\n    protected TextView createDefaultTabView(Context context) {\n\n        TextView textView = new TextView(context);\n\n        textView.setGravity(Gravity.CENTER);\n\n        textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, TAB_VIEW_TEXT_SIZE_SP);\n\n        textView.setTypeface(Typeface.DEFAULT_BOLD);\n\n \n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {\n\n            // If we're running on Honeycomb or newer, then we can use the Theme's\n\n            // selectableItemBackground to ensure that the View has a pressed state\n\n            TypedValue outValue = new TypedValue();\n\n            getContext().getTheme().resolveAttribute(android.R.attr.selectableItemBackground,\n\n                    outValue, true);\n\n            textView.setBackgroundResource(outValue.resourceId);\n\n        }\n\n \n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {\n\n            // If we're running on ICS or newer, enable all-caps to match the Action Bar tab style\n\n            textView.setAllCaps(true);\n\n        }\n\n \n\n        int padding = (int) (TAB_VIEW_PADDING_DIPS * getResources().getDisplayMetrics().density);\n\n        textView.setPadding(padding, padding, padding, padding);\n\n \n\n        return textView;\n\n    }\n\n \n\n    private void populateTabStrip() {\n\n        final PagerAdapter adapter = mViewPager.getAdapter();\n\n        final View.OnClickListener tabClickListener = new TabClickListener();\n\n \n\n        for (int i = 0; i < adapter.getCount(); i++) {\n\n            View tabView = null;\n\n            TextView tabTitleView = null;\n\n \n\n            if (mTabViewLayoutId != 0) {\n\n                // If there is a custom tab view layout id set, try and inflate it\n\n                tabView = LayoutInflater.from(getContext()).inflate(mTabViewLayoutId, mTabStrip,\n\n                        false);\n\n                tabTitleView = (TextView) tabView.findViewById(mTabViewTextViewId);\n\n            }\n\n \n\n            if (tabView == null) {\n\n                tabView = createDefaultTabView(getContext());\n\n            }\n\n \n\n            if (tabTitleView == null && TextView.class.isInstance(tabView)) {\n\n                tabTitleView = (TextView) tabView;\n\n            }\n\n \n\n            tabTitleView.setText(adapter.getPageTitle(i));\n\n            tabView.setOnClickListener(tabClickListener);\n\n \n\n            mTabStrip.addView(tabView);\n\n        }\n\n    }\n\n \n\n    @Override\n\n    protected void onAttachedToWindow() {\n\n        super.onAttachedToWindow();\n\n \n\n        if (mViewPager != null) {\n\n            scrollToTab(mViewPager.getCurrentItem(), 0);\n\n        }\n\n    }\n\n \n\n    private void scrollToTab(int tabIndex, int positionOffset) {\n\n        final int tabStripChildCount = mTabStrip.getChildCount();\n\n        if (tabStripChildCount == 0 || tabIndex < 0 || tabIndex >= tabStripChildCount) {\n\n            return;\n\n        }\n\n \n\n        View selectedChild = mTabStrip.getChildAt(tabIndex);\n\n        if (selectedChild != null) {\n\n            int targetScrollX = selectedChild.getLeft() + positionOffset;\n\n \n\n            if (tabIndex > 0 || positionOffset > 0) {\n\n                // If we're not at the first child and are mid-scroll, make sure we obey the offset\n\n                targetScrollX -= mTitleOffset;\n\n            }\n\n \n\n            scrollTo(targetScrollX, 0);\n\n        }\n\n    }\n\n \n\n    private class InternalViewPagerListener implements ViewPager.OnPageChangeListener {\n\n        private int mScrollState;\n\n \n\n        @Override\n\n        public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\n\n            int tabStripChildCount = mTabStrip.getChildCount();\n\n            if ((tabStripChildCount == 0) || (position < 0) || (position >= tabStripChildCount)) {\n\n                return;\n\n            }\n\n \n\n            mTabStrip.onViewPagerPageChanged(position, positionOffset);\n\n \n\n            View selectedTitle = mTabStrip.getChildAt(position);\n\n            int extraOffset = (selectedTitle != null)\n\n                    ? (int) (positionOffset * selectedTitle.getWidth())\n\n                    : 0;\n\n            scrollToTab(position, extraOffset);\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageScrolled(position, positionOffset,\n\n                        positionOffsetPixels);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void onPageScrollStateChanged(int state) {\n\n            mScrollState = state;\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageScrollStateChanged(state);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void onPageSelected(int position) {\n\n            if (mScrollState == ViewPager.SCROLL_STATE_IDLE) {\n\n                mTabStrip.onViewPagerPageChanged(position, 0f);\n\n                scrollToTab(position, 0);\n\n            }\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageSelected(position);\n\n            }\n\n        }\n\n \n\n    }\n\n \n\n    private class TabClickListener implements View.OnClickListener {\n\n        @Override\n\n        public void onClick(View v) {\n\n            for (int i = 0; i < mTabStrip.getChildCount(); i++) {\n\n                if (v == mTabStrip.getChildAt(i)) {\n\n                    mViewPager.setCurrentItem(i);\n\n                    return;\n\n                }\n\n            }\n\n        }\n\n    }\n\n \n\n}\n  ","SlidingTabStrip.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.view;\n\n \n\nimport android.R;\n\nimport android.content.Context;\n\nimport android.graphics.Canvas;\n\nimport android.graphics.Color;\n\nimport android.graphics.Paint;\n\nimport android.util.AttributeSet;\n\nimport android.util.TypedValue;\n\nimport android.view.View;\n\nimport android.widget.LinearLayout;\n\n \n\nclass SlidingTabStrip extends LinearLayout {\n\n \n\n    private static final int DEFAULT_BOTTOM_BORDER_THICKNESS_DIPS = 2;\n\n    private static final byte DEFAULT_BOTTOM_BORDER_COLOR_ALPHA = 0x26;\n\n    private static final int SELECTED_INDICATOR_THICKNESS_DIPS = 8;\n\n    private static final int DEFAULT_SELECTED_INDICATOR_COLOR = 0xFF33B5E5;\n\n \n\n    private static final int DEFAULT_DIVIDER_THICKNESS_DIPS = 1;\n\n    private static final byte DEFAULT_DIVIDER_COLOR_ALPHA = 0x20;\n\n    private static final float DEFAULT_DIVIDER_HEIGHT = 0.5f;\n\n \n\n    private final int mBottomBorderThickness;\n\n    private final Paint mBottomBorderPaint;\n\n \n\n    private final int mSelectedIndicatorThickness;\n\n    private final Paint mSelectedIndicatorPaint;\n\n \n\n    private final int mDefaultBottomBorderColor;\n\n \n\n    private final Paint mDividerPaint;\n\n    private final float mDividerHeight;\n\n \n\n    private int mSelectedPosition;\n\n    private float mSelectionOffset;\n\n \n\n    private SlidingTabLayout.TabColorizer mCustomTabColorizer;\n\n    private final SimpleTabColorizer mDefaultTabColorizer;\n\n \n\n    SlidingTabStrip(Context context) {\n\n        this(context, null);\n\n    }\n\n \n\n    SlidingTabStrip(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n        setWillNotDraw(false);\n\n \n\n        final float density = getResources().getDisplayMetrics().density;\n\n \n\n        TypedValue outValue = new TypedValue();\n\n        context.getTheme().resolveAttribute(R.attr.colorForeground, outValue, true);\n\n        final int themeForegroundColor =  outValue.data;\n\n \n\n        mDefaultBottomBorderColor = setColorAlpha(themeForegroundColor,\n\n                DEFAULT_BOTTOM_BORDER_COLOR_ALPHA);\n\n \n\n        mDefaultTabColorizer = new SimpleTabColorizer();\n\n        mDefaultTabColorizer.setIndicatorColors(DEFAULT_SELECTED_INDICATOR_COLOR);\n\n        mDefaultTabColorizer.setDividerColors(setColorAlpha(themeForegroundColor,\n\n                DEFAULT_DIVIDER_COLOR_ALPHA));\n\n \n\n        mBottomBorderThickness = (int) (DEFAULT_BOTTOM_BORDER_THICKNESS_DIPS * density);\n\n        mBottomBorderPaint = new Paint();\n\n        mBottomBorderPaint.setColor(mDefaultBottomBorderColor);\n\n \n\n        mSelectedIndicatorThickness = (int) (SELECTED_INDICATOR_THICKNESS_DIPS * density);\n\n        mSelectedIndicatorPaint = new Paint();\n\n \n\n        mDividerHeight = DEFAULT_DIVIDER_HEIGHT;\n\n        mDividerPaint = new Paint();\n\n        mDividerPaint.setStrokeWidth((int) (DEFAULT_DIVIDER_THICKNESS_DIPS * density));\n\n    }\n\n \n\n    void setCustomTabColorizer(SlidingTabLayout.TabColorizer customTabColorizer) {\n\n        mCustomTabColorizer = customTabColorizer;\n\n        invalidate();\n\n    }\n\n \n\n    void setSelectedIndicatorColors(int... colors) {\n\n        // Make sure that the custom colorizer is removed\n\n        mCustomTabColorizer = null;\n\n        mDefaultTabColorizer.setIndicatorColors(colors);\n\n        invalidate();\n\n    }\n\n \n\n    void setDividerColors(int... colors) {\n\n        // Make sure that the custom colorizer is removed\n\n        mCustomTabColorizer = null;\n\n        mDefaultTabColorizer.setDividerColors(colors);\n\n        invalidate();\n\n    }\n\n \n\n    void onViewPagerPageChanged(int position, float positionOffset) {\n\n        mSelectedPosition = position;\n\n        mSelectionOffset = positionOffset;\n\n        invalidate();\n\n    }\n\n \n\n    @Override\n\n    protected void onDraw(Canvas canvas) {\n\n        final int height = getHeight();\n\n        final int childCount = getChildCount();\n\n        final int dividerHeightPx = (int) (Math.min(Math.max(0f, mDividerHeight), 1f) * height);\n\n        final SlidingTabLayout.TabColorizer tabColorizer = mCustomTabColorizer != null\n\n                ? mCustomTabColorizer\n\n                : mDefaultTabColorizer;\n\n \n\n        // Thick colored underline below the current selection\n\n        if (childCount > 0) {\n\n            View selectedTitle = getChildAt(mSelectedPosition);\n\n            int left = selectedTitle.getLeft();\n\n            int right = selectedTitle.getRight();\n\n            int color = tabColorizer.getIndicatorColor(mSelectedPosition);\n\n \n\n            if (mSelectionOffset > 0f && mSelectedPosition < (getChildCount() - 1)) {\n\n                int nextColor = tabColorizer.getIndicatorColor(mSelectedPosition + 1);\n\n                if (color != nextColor) {\n\n                    color = blendColors(nextColor, color, mSelectionOffset);\n\n                }\n\n \n\n                // Draw the selection partway between the tabs\n\n                View nextTitle = getChildAt(mSelectedPosition + 1);\n\n                left = (int) (mSelectionOffset * nextTitle.getLeft() +\n\n                        (1.0f - mSelectionOffset) * left);\n\n                right = (int) (mSelectionOffset * nextTitle.getRight() +\n\n                        (1.0f - mSelectionOffset) * right);\n\n            }\n\n \n\n            mSelectedIndicatorPaint.setColor(color);\n\n \n\n            canvas.drawRect(left, height - mSelectedIndicatorThickness, right,\n\n                    height, mSelectedIndicatorPaint);\n\n        }\n\n \n\n        // Thin underline along the entire bottom edge\n\n        canvas.drawRect(0, height - mBottomBorderThickness, getWidth(), height, mBottomBorderPaint);\n\n \n\n        // Vertical separators between the titles\n\n        int separatorTop = (height - dividerHeightPx) / 2;\n\n        for (int i = 0; i < childCount - 1; i++) {\n\n            View child = getChildAt(i);\n\n            mDividerPaint.setColor(tabColorizer.getDividerColor(i));\n\n            canvas.drawLine(child.getRight(), separatorTop, child.getRight(),\n\n                    separatorTop + dividerHeightPx, mDividerPaint);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Set the alpha value of the {@code color} to be the given {@code alpha} value.\n\n     */\n\n    private static int setColorAlpha(int color, byte alpha) {\n\n        return Color.argb(alpha, Color.red(color), Color.green(color), Color.blue(color));\n\n    }\n\n \n\n    /**\n\n     * Blend {@code color1} and {@code color2} using the given ratio.\n\n     *\n\n     * @param ratio of which to blend. 1.0 will return {@code color1}, 0.5 will give an even blend,\n\n     *              0.0 will return {@code color2}.\n\n     */\n\n    private static int blendColors(int color1, int color2, float ratio) {\n\n        final float inverseRation = 1f - ratio;\n\n        float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRation);\n\n        float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRation);\n\n        float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRation);\n\n        return Color.rgb((int) r, (int) g, (int) b);\n\n    }\n\n \n\n    private static class SimpleTabColorizer implements SlidingTabLayout.TabColorizer {\n\n        private int[] mIndicatorColors;\n\n        private int[] mDividerColors;\n\n \n\n        @Override\n\n        public final int getIndicatorColor(int position) {\n\n            return mIndicatorColors[position % mIndicatorColors.length];\n\n        }\n\n \n\n        @Override\n\n        public final int getDividerColor(int position) {\n\n            return mDividerColors[position % mDividerColors.length];\n\n        }\n\n \n\n        void setIndicatorColors(int... colors) {\n\n            mIndicatorColors = colors;\n\n        }\n\n \n\n        void setDividerColors(int... colors) {\n\n            mDividerColors = colors;\n\n        }\n\n    }\n\n}\n  "}}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\nCopyright 2014 The Android Open Source Project\n\n \n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n \n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n \n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n-->\n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.adaptertransition\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk\n\n        android:minSdkVersion=\"19\"\n\n        android:targetSdkVersion=\"19\"/>\n\n \n\n    <application\n\n        android:allowBackup=\"true\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:label=\"@string/app_name\"\n\n        android:theme=\"@style/AppTheme\">\n\n        <activity\n\n            android:name=\"com.example.android.adaptertransition.MainActivity\"\n\n            android:label=\"@string/app_name\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\"/>\n\n \n\n                <category android:name=\"android.intent.category.LAUNCHER\"/>\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n</manifest>\n  "},"AdvancedImmersiveMode":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com/samples/AdvancedImmersiveMode/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com/samples/AdvancedImmersiveMode/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com/samples/AdvancedImmersiveMode/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com/samples/AdvancedImmersiveMode/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com/samples/AdvancedImmersiveMode/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"vertical\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <ViewAnimator\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\"\n\n          android:layout_weight=\"1\">\n\n \n\n        <ScrollView\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingRight=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingTop=\"@dimen/vertical_page_margin\"\n\n                  android:paddingBottom=\"@dimen/vertical_page_margin\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </ScrollView>\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\" />\n\n \n\n    </ViewAnimator>\n\n \n\n    <View\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"1dp\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\" />\n\n \n\n</LinearLayout>\n\n \n  ","fragment_flags.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:orientation=\"vertical\" android:layout_width=\"match_parent\"\n\n    android:layout_height=\"wrap_content\">\n\n \n\n    <CheckBox\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:id=\"@+id/flag_enable_lowprof\"\n\n        android:text=\"Enable Low Profile Mode\" />\n\n \n\n    <CheckBox\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:id=\"@+id/flag_hide_navbar\"\n\n        android:text=\"Hide Navigation bar\" />\n\n \n\n    <CheckBox\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:id=\"@+id/flag_hide_statbar\"\n\n        android:text=\"Hide Status Bar\" />\n\n \n\n    <CheckBox\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:id=\"@+id/flag_enable_immersive\"\n\n        android:text=\"Enable Immersive Mode\" />\n\n \n\n    <CheckBox\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:id=\"@+id/flag_enable_immersive_sticky\"\n\n        android:text=\"Enable Immersive Mode (Sticky)\" />\n\n \n\n    <Button\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:text=\"Do things!\"\n\n        android:id=\"@+id/btn_changeFlags\" />\n\n \n\n \n\n    <TextView\n\n        android:layout_marginTop=\"@dimen/margin_large\"\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:text=\"Common flag presets\"/>\n\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n        android:orientation=\"horizontal\" android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\">\n\n \n\n        <Button\n\n            android:layout_width=\"wrap_content\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:text=\"Immersive Mode\"\n\n            android:id=\"@+id/btn_immersive\" />\n\n \n\n        <Button\n\n            android:layout_width=\"wrap_content\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:text=\"Leanback Mode\"\n\n            android:id=\"@+id/btn_leanback\" />\n\n \n\n    </LinearLayout>\n\n \n\n \n\n \n\n</LinearLayout>\n  "},"layout-w720dp":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"horizontal\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <LinearLayout\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\"\n\n          android:layout_weight=\"1\"\n\n          android:orientation=\"vertical\">\n\n \n\n        <FrameLayout\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"wrap_content\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/margin_medium\"\n\n                  android:paddingRight=\"@dimen/margin_medium\"\n\n                  android:paddingTop=\"@dimen/margin_large\"\n\n                  android:paddingBottom=\"@dimen/margin_large\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </FrameLayout>\n\n \n\n        <View\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"1dp\"\n\n              android:background=\"@android:color/darker_gray\" />\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"0px\"\n\n              android:layout_weight=\"1\" />\n\n \n\n    </LinearLayout>\n\n \n\n    <View\n\n          android:layout_width=\"1dp\"\n\n          android:layout_height=\"match_parent\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\" />\n\n \n\n</LinearLayout>\n\n \n\n \n  "},"menu":{"main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:id=\"@+id/menu_toggle_log\"\n\n          android:showAsAction=\"always\"\n\n          android:title=\"@string/sample_show_log\" />\n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">AdvancedImmersiveMode</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            \\n\\n\\n\\\"Immersive Mode\\\", added in Android 4.4, improves the \\\"hide full screen\\\" and\n\n            \\\"hide nav bar\\\" modes, by letting users swipe the bars in and out.  This sample\n\n            lets the user experiment with immersive mode by seeing how it interacts\n\n            with some of the other UI flags related to full-screen apps.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","strings.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<resources>\n\n    <string name=\"sample_show_log\">Show Log</string>\n\n    <string name=\"sample_hide_log\">Hide Log</string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.advancedimmersivemode":{"AdvancedImmersiveModeFragment.java":"\n    \n\n/*\n\n* Copyright (C) 2012 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*      http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\npackage com.example.android.advancedimmersivemode;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.Button;\n\nimport android.widget.CheckBox;\n\n \n\nimport com.example.android.common.logger.Log;\n\n \n\n/**\n\n * Demonstrates how to update the app's UI by toggling immersive mode.\n\n * Checkboxes are also made available for toggling other UI flags which can\n\n * alter the behavior of immersive mode.\n\n */\n\npublic class AdvancedImmersiveModeFragment extends Fragment {\n\n \n\n    public static final String TAG = \"AdvancedImmersiveModeFragment\";\n\n    public CheckBox mHideNavCheckbox;\n\n    public CheckBox mHideStatusBarCheckBox;\n\n    public CheckBox mImmersiveModeCheckBox;\n\n    public CheckBox mImmersiveModeStickyCheckBox;\n\n    public CheckBox mLowProfileCheckBox;\n\n \n\n \n\n    @Override\n\n    public void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setHasOptionsMenu(true);\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle state) {\n\n        final View flagsView = inflater.inflate(R.layout.fragment_flags, container, false);\n\n        mLowProfileCheckBox = (CheckBox) flagsView.findViewById(R.id.flag_enable_lowprof);\n\n        mHideNavCheckbox = (CheckBox) flagsView.findViewById(R.id.flag_hide_navbar);\n\n        mHideStatusBarCheckBox = (CheckBox) flagsView.findViewById(R.id.flag_hide_statbar);\n\n        mImmersiveModeCheckBox = (CheckBox) flagsView.findViewById(R.id.flag_enable_immersive);\n\n        mImmersiveModeStickyCheckBox =\n\n                (CheckBox) flagsView.findViewById(R.id.flag_enable_immersive_sticky);\n\n \n\n        Button toggleFlagsButton = (Button) flagsView.findViewById(R.id.btn_changeFlags);\n\n        toggleFlagsButton.setOnClickListener(new View.OnClickListener() {\n\n            @Override\n\n            public void onClick(View view) {\n\n                toggleUiFlags();\n\n            }\n\n        });\n\n \n\n        Button presetsImmersiveModeButton = (Button) flagsView.findViewById(R.id.btn_immersive);\n\n        presetsImmersiveModeButton.setOnClickListener(new View.OnClickListener() {\n\n            @Override\n\n            public void onClick(View view) {\n\n \n\n                // For immersive mode, the FULLSCREEN, HIDE_HAVIGATION and IMMERSIVE\n\n                // flags should be set (you can use IMMERSIVE_STICKY instead of IMMERSIVE\n\n                // as appropriate for your app).  The LOW_PROFILE flag should be cleared.\n\n \n\n                // Immersive mode is primarily for situations where the user will be\n\n                // interacting with the screen, like games or reading books.\n\n                int uiOptions = flagsView.getSystemUiVisibility();\n\n                uiOptions &= ~View.SYSTEM_UI_FLAG_LOW_PROFILE;\n\n                uiOptions |= View.SYSTEM_UI_FLAG_FULLSCREEN;\n\n                uiOptions |= View.SYSTEM_UI_FLAG_HIDE_NAVIGATION;\n\n                uiOptions |= View.SYSTEM_UI_FLAG_IMMERSIVE;\n\n                uiOptions &= ~View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;\n\n                flagsView.setSystemUiVisibility(uiOptions);\n\n \n\n                dumpFlagStateToLog(uiOptions);\n\n \n\n                // The below code just updates the checkboxes to reflect which flags have been set.\n\n                mLowProfileCheckBox.setChecked(false);\n\n                mHideNavCheckbox.setChecked(true);\n\n                mHideStatusBarCheckBox.setChecked(true);\n\n                mImmersiveModeCheckBox.setChecked(true);\n\n                mImmersiveModeStickyCheckBox.setChecked(false);\n\n            }\n\n        });\n\n \n\n \n\n        Button presetsLeanbackModeButton = (Button) flagsView.findViewById(R.id.btn_leanback);\n\n        presetsLeanbackModeButton.setOnClickListener(new View.OnClickListener() {\n\n            @Override\n\n            public void onClick(View view) {\n\n                // For leanback mode, only the HIDE_NAVE and HIDE_STATUSBAR flags\n\n                // should be checked.  In this case IMMERSIVE should *not* be set,\n\n                // since this mode is left as soon as the user touches the screen.\n\n                int uiOptions = flagsView.getSystemUiVisibility();\n\n                uiOptions &= ~View.SYSTEM_UI_FLAG_LOW_PROFILE;\n\n                uiOptions |= View.SYSTEM_UI_FLAG_FULLSCREEN;\n\n                uiOptions |= View.SYSTEM_UI_FLAG_HIDE_NAVIGATION;\n\n                uiOptions &= ~View.SYSTEM_UI_FLAG_IMMERSIVE;\n\n                uiOptions &= ~View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;\n\n                flagsView.setSystemUiVisibility(uiOptions);\n\n \n\n                dumpFlagStateToLog(uiOptions);\n\n \n\n                // The below code just updates the checkboxes to reflect which flags have been set.\n\n                mLowProfileCheckBox.setChecked(false);\n\n                mHideNavCheckbox.setChecked(true);\n\n                mHideStatusBarCheckBox.setChecked(true);\n\n                mImmersiveModeCheckBox.setChecked(false);\n\n                mImmersiveModeStickyCheckBox.setChecked(false);\n\n            }\n\n        });\n\n \n\n        // Setting these flags makes the content appear under the navigation\n\n        // bars, so that showing/hiding the nav bars doesn't resize the content\n\n        // window, which can be jarring.\n\n        int uiOptions = flagsView.getSystemUiVisibility();\n\n        uiOptions |= View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION;\n\n        uiOptions |= View.SYSTEM_UI_FLAG_LAYOUT_STABLE;\n\n        uiOptions |= View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN;\n\n        flagsView.setSystemUiVisibility(uiOptions);\n\n \n\n        return flagsView;\n\n    }\n\n \n\n    /**\n\n     * Helper method to dump flag state to the log.\n\n     * @param uiFlags Set of UI flags to inspect\n\n     */\n\n    public void dumpFlagStateToLog(int uiFlags) {\n\n        if ((uiFlags & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0) {\n\n            Log.i(TAG, \"SYSTEM_UI_FLAG_LOW_PROFILE is set\");\n\n        } else {\n\n            Log.i(TAG, \"SYSTEM_UI_FLAG_LOW_PROFILE is unset\");\n\n        }\n\n \n\n        if ((uiFlags & View.SYSTEM_UI_FLAG_FULLSCREEN) != 0) {\n\n            Log.i(TAG, \"SYSTEM_UI_FLAG_FULLSCREEN is set\");\n\n        } else {\n\n            Log.i(TAG, \"SYSTEM_UI_FLAG_FULLSCREEN is unset\");\n\n        }\n\n \n\n        if ((uiFlags & View.SYSTEM_UI_FLAG_HIDE_NAVIGATION) != 0) {\n\n            Log.i(TAG, \"SYSTEM_UI_FLAG_HIDE_NAVIGATION is set\");\n\n        } else {\n\n            Log.i(TAG, \"SYSTEM_UI_FLAG_HIDE_NAVIGATION is unset\");\n\n        }\n\n \n\n        if ((uiFlags & View.SYSTEM_UI_FLAG_IMMERSIVE) != 0) {\n\n            Log.i(TAG, \"SYSTEM_UI_FLAG_IMMERSIVE is set\");\n\n        } else {\n\n            Log.i(TAG, \"SYSTEM_UI_FLAG_IMMERSIVE is unset\");\n\n        }\n\n \n\n        if ((uiFlags & View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY) != 0) {\n\n            Log.i(TAG, \"SYSTEM_UI_FLAG_IMMERSIVE_STICKY is set\");\n\n        } else {\n\n            Log.i(TAG, \"SYSTEM_UI_FLAG_IMMERSIVE_STICKY is unset\");\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Detects and toggles immersive mode (also known as \"hidey bar\" mode).\n\n     */\n\n    public void toggleUiFlags() {\n\n \n\n        // The \"Decor View\" is the parent view of the Activity.  It's also conveniently the easiest\n\n        // one to find from within a fragment, since there's a handy helper method to pull it, and\n\n        // we don't have to bother with picking a view somewhere deeper in the hierarchy and calling\n\n        // \"findViewById\" on it.\n\n        View decorView = getActivity().getWindow().getDecorView();\n\n        int uiOptions = decorView.getSystemUiVisibility();\n\n        int newUiOptions = uiOptions;\n\n \n\n        // Low profile mode doesn't resize the screen at all, but it covers the nav & status bar\n\n        // icons with black so they're less distracting.  Unlike \"full screen\" and \"hide nav bar,\"\n\n        // this mode doesn't interact with immersive mode at all, but it's instructive when running\n\n        // this sample to observe the differences in behavior.\n\n        if (mLowProfileCheckBox.isChecked()) {\n\n            newUiOptions |= View.SYSTEM_UI_FLAG_LOW_PROFILE;\n\n        } else {\n\n            newUiOptions &= ~View.SYSTEM_UI_FLAG_LOW_PROFILE;\n\n        }\n\n \n\n        // When enabled, this flag hides non-critical UI, such as the status bar,\n\n        // which usually shows notification icons, battery life, etc\n\n        // on phone-sized devices.  The bar reappears when the user swipes it down.  When immersive\n\n        // mode is also enabled, the app-drawable area expands, and when the status bar is swiped\n\n        // down, it appears semi-transparently and slides in over the app, instead of pushing it\n\n        // down.\n\n        if (mHideStatusBarCheckBox.isChecked()) {\n\n            newUiOptions |= View.SYSTEM_UI_FLAG_FULLSCREEN;\n\n        } else {\n\n            newUiOptions &= ~View.SYSTEM_UI_FLAG_FULLSCREEN;\n\n        }\n\n \n\n        // When enabled, this flag hides the black nav bar along the bottom,\n\n        // where the home/back buttons are.  The nav bar normally instantly reappears\n\n        // when the user touches the screen.  When immersive mode is also enabled, the nav bar\n\n        // stays hidden until the user swipes it back.\n\n        if (mHideNavCheckbox.isChecked()) {\n\n            newUiOptions |= View.SYSTEM_UI_FLAG_HIDE_NAVIGATION;\n\n        } else {\n\n            newUiOptions &= ~View.SYSTEM_UI_FLAG_HIDE_NAVIGATION;\n\n        }\n\n \n\n        // Immersive mode doesn't do anything without at least one of the previous flags\n\n        // enabled.  When enabled, it allows the user to swipe the status and/or nav bars\n\n        // off-screen.  When the user swipes the bars back onto the screen, the flags are cleared\n\n        // and immersive mode is automatically disabled.\n\n        if (mImmersiveModeCheckBox.isChecked()) {\n\n            newUiOptions |= View.SYSTEM_UI_FLAG_IMMERSIVE;\n\n        } else {\n\n            newUiOptions &= ~View.SYSTEM_UI_FLAG_IMMERSIVE;\n\n        }\n\n \n\n        // There's actually two forms of immersive mode, normal and \"sticky\".  Sticky immersive mode\n\n        // is different in 2 key ways:\n\n        //\n\n        // * Uses semi-transparent bars for the nav and status bars\n\n        // * This UI flag will *not* be cleared when the user interacts with the UI.\n\n        //   When the user swipes, the bars will temporarily appear for a few seconds and then\n\n        //   disappear again.\n\n        if (mImmersiveModeStickyCheckBox.isChecked()) {\n\n            newUiOptions |= View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;\n\n        } else {\n\n            newUiOptions &= ~View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;\n\n        }\n\n \n\n        //Set the new UI flags.\n\n        decorView.setSystemUiVisibility(newUiOptions);\n\n \n\n        dumpFlagStateToLog(uiOptions);\n\n    }\n\n}\n  ","MainActivity.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.advancedimmersivemode;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentTransaction;\n\nimport android.view.Menu;\n\nimport android.view.MenuItem;\n\nimport android.widget.ViewAnimator;\n\n \n\nimport com.example.android.common.activities.SampleActivityBase;\n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogFragment;\n\nimport com.example.android.common.logger.LogWrapper;\n\nimport com.example.android.common.logger.MessageOnlyLogFilter;\n\n \n\n/**\n\n * A simple launcher activity containing a summary sample description, sample log and a custom\n\n * {@link android.support.v4.app.Fragment} which can display a view.\n\n * <p>\n\n * For devices with displays with a width of 720dp or greater, the sample log is always visible,\n\n * on other devices it's visibility is controlled by an item on the Action Bar.\n\n */\n\npublic class MainActivity extends SampleActivityBase {\n\n \n\n    public static final String TAG = \"MainActivity\";\n\n \n\n    // Whether the Log Fragment is currently shown\n\n    private boolean mLogShown;\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_main);\n\n \n\n        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n\n        AdvancedImmersiveModeFragment fragment = new AdvancedImmersiveModeFragment();\n\n        transaction.replace(R.id.sample_content_fragment, fragment);\n\n        transaction.commit();\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        getMenuInflater().inflate(R.menu.main, menu);\n\n        return true;\n\n    }\n\n \n\n    @Override\n\n    public boolean onPrepareOptionsMenu(Menu menu) {\n\n        MenuItem logToggle = menu.findItem(R.id.menu_toggle_log);\n\n        logToggle.setVisible(findViewById(R.id.sample_output) instanceof ViewAnimator);\n\n        logToggle.setTitle(mLogShown ? R.string.sample_hide_log : R.string.sample_show_log);\n\n \n\n        return super.onPrepareOptionsMenu(menu);\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch(item.getItemId()) {\n\n            case R.id.menu_toggle_log:\n\n                mLogShown = !mLogShown;\n\n                ViewAnimator output = (ViewAnimator) findViewById(R.id.sample_output);\n\n                if (mLogShown) {\n\n                    output.setDisplayedChild(1);\n\n                } else {\n\n                    output.setDisplayedChild(0);\n\n                }\n\n                supportInvalidateOptionsMenu();\n\n                return true;\n\n        }\n\n        return super.onOptionsItemSelected(item);\n\n    }\n\n \n\n    /** Create a chain of targets that will receive log data */\n\n    @Override\n\n    public void initializeLogging() {\n\n        // Wraps Android's native log framework.\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        Log.setLogNode(logWrapper);\n\n \n\n        // Filter strips out everything except the message text.\n\n        MessageOnlyLogFilter msgFilter = new MessageOnlyLogFilter();\n\n        logWrapper.setNext(msgFilter);\n\n \n\n        // On screen logging via a fragment with a TextView.\n\n        LogFragment logFragment = (LogFragment) getSupportFragmentManager()\n\n                .findFragmentById(R.id.log_fragment);\n\n        msgFilter.setNext(logFragment.getLogView());\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "},"com.example.android.common":{"activities":{"SampleActivityBase.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\npackage com.example.android.common.activities;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentActivity;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogWrapper;\n\n \n\n/**\n\n * Base launcher activity, to handle most of the common plumbing for samples.\n\n */\n\npublic class SampleActivityBase extends FragmentActivity {\n\n \n\n    public static final String TAG = \"SampleActivityBase\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n    }\n\n \n\n    @Override\n\n    protected  void onStart() {\n\n        super.onStart();\n\n        initializeLogging();\n\n    }\n\n \n\n    /** Set up targets to receive log data */\n\n    public void initializeLogging() {\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        // Wraps Android's native log framework\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        Log.setLogNode(logWrapper);\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "},"logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "}}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n<!-- the versionCode is an integer representation of this version of your application.  New\n\n     versions get higher numbers, so the upgrade system can avoid dealing with the ambiguity\n\n     of \"1.9\" vs \"1.10\".  versionName, on the other hand, can be whatever you want, as the code\n\n     that handles upgrading Android apps between versions on your device just ignores it.-->\n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.advancedimmersivemode\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <!-- This sample is to demonstrate features released in API 19.\n\n         So while it would technically run on an earlier version of Android,\n\n         there wouldn't be much point) -->\n\n    <uses-sdk android:minSdkVersion=\"19\" android:targetSdkVersion=\"19\" />\n\n    <!-- allowBackup declares if the app can be part of device-wide backups such as \"adb backup\" -->\n\n    <!-- theme is a way of applying UI decisions across your entire application.  You can also\n\n         define it on a per-application basis. -->\n\n    <application\n\n        android:allowBackup=\"true\"\n\n        android:label=\"@string/app_name\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:theme=\"@style/AppTheme\">\n\n \n\n        <!-- Every activity needs its own Manifest element.  The intent-filter contained in the\n\n             element declares the intents that can be used to activate this Activity.  For instance,\n\n             the one below flags this Activity as a \"main\" entry point of this app, and suitable\n\n             for creating a shortcut to in the Launcher.  If you wanted your app to have 5\n\n             different Activities available in the launcher, you could just make 5 activities\n\n             with that intent filter.  Please don't do that.  Just because it's a good example\n\n             doesn't mean it's a good idea. -->\n\n        <activity android:name=\".MainActivity\"\n\n                  android:label=\"@string/app_name\"\n\n                  android:uiOptions=\"splitActionBarWhenNarrow\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n</manifest>\n  "},"BasicAccessibility":{"res":{"drawable-hdpi":{"ic_action_discard.png":"http://developer.android.com/samples/BasicAccessibility/res/drawable-hdpi/ic_action_discard.png","ic_action_info.png":"http://developer.android.com/samples/BasicAccessibility/res/drawable-hdpi/ic_action_info.png","ic_launcher.png":"http://developer.android.com/samples/BasicAccessibility/res/drawable-hdpi/ic_launcher.png","partly_cloudy.png":"http://developer.android.com/samples/BasicAccessibility/res/drawable-hdpi/partly_cloudy.png","tile.9.png":"http://developer.android.com/samples/BasicAccessibility/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_action_discard.png":"http://developer.android.com/samples/BasicAccessibility/res/drawable-mdpi/ic_action_discard.png","ic_action_info.png":"http://developer.android.com/samples/BasicAccessibility/res/drawable-mdpi/ic_action_info.png","ic_launcher.png":"http://developer.android.com/samples/BasicAccessibility/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_action_discard.png":"http://developer.android.com/samples/BasicAccessibility/res/drawable-xhdpi/ic_action_discard.png","ic_action_info.png":"http://developer.android.com/samples/BasicAccessibility/res/drawable-xhdpi/ic_action_info.png","ic_launcher.png":"http://developer.android.com/samples/BasicAccessibility/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicAccessibility/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleMessageTile\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n            android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n            android:text=\"@string/intro_message\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n  ","sample_main.xml":"\n    \n\n<!--\n\nCopyright (C) 2013 The Android Open Source Project\n\n \n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n-->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n              xmlns:tools=\"http://schemas.android.com/tools\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\"\n\n              android:gravity=\"center_horizontal\">\n\n    <ScrollView\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"match_parent\"\n\n            android:fillViewport=\"false\">\n\n        <RelativeLayout\n\n                android:layout_width=\"match_parent\"\n\n                android:layout_height=\"match_parent\"\n\n                android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n\n                android:paddingRight=\"@dimen/activity_horizontal_margin\"\n\n                android:paddingTop=\"@dimen/activity_vertical_margin\"\n\n                android:paddingBottom=\"@dimen/activity_vertical_margin\"\n\n                tools:context=\".MainActivity\"\n\n                >\n\n \n\n            <!-- Notice the presence of nextFocusDown/nextFocusUp on the elements below. You can\n\n            also use nextFocusLeft/nextFocusRight. This tells the system in what order elements\n\n            should be navigated through. If not present, the system will make a guess based on\n\n            element location in the layout. -->\n\n            <TextView\n\n                    android:layout_width=\"wrap_content\"\n\n                    android:layout_height=\"wrap_content\"\n\n                    android:text=\"Buttons\"\n\n                    android:id=\"@+id/buttonsLabel\"\n\n                    android:layout_alignParentTop=\"true\"\n\n                    android:layout_alignParentLeft=\"true\"\n\n                    android:nextFocusDown=\"@+id/composeButton\"/>\n\n \n\n            <!-- This is a regular, text-based button. No contentDescription is needed, since the\n\n                 text field sufficiently describes the action performed. -->\n\n            <Button\n\n                    android:layout_width=\"wrap_content\"\n\n                    android:layout_height=\"wrap_content\"\n\n                    android:text=\"@string/composeButtonLabel\"\n\n                    android:id=\"@+id/composeButton\"\n\n                    android:layout_below=\"@+id/buttonsLabel\"\n\n                    android:layout_alignLeft=\"@+id/buttonsLabel\"\n\n                    android:nextFocusUp=\"@+id/buttonsLabel\"\n\n                    android:nextFocusDown=\"@+id/checkboxesLabel\"\n\n                    />\n\n \n\n            <!-- The next two buttons are different types of image-based buttons. -->\n\n \n\n            <!-- Adding a contentDescription is needed for accessibility, since no text is present.\n\n            Since the contentDescription is read verbatim, you may want to be a bit more\n\n            descriptive than usual, such as adding \"button\" to the end of your description, if\n\n            appropriate. -->\n\n            <ImageButton\n\n                    android:layout_width=\"wrap_content\"\n\n                    android:layout_height=\"wrap_content\"\n\n                    android:id=\"@+id/discardButton\"\n\n                    android:layout_alignTop=\"@+id/composeButton\"\n\n                    android:layout_toRightOf=\"@+id/composeButton\"\n\n                    android:src=\"@drawable/ic_action_discard\"\n\n                    android:layout_alignBottom=\"@+id/composeButton\"\n\n                    android:contentDescription=\"@string/discardButtonDescription\"\n\n                    android:scaleType=\"fitCenter\"\n\n                    android:nextFocusUp=\"@+id/buttonsLabel\"\n\n                    android:nextFocusDown=\"@+id/checkboxesLabel\"\n\n                    />\n\n \n\n            <ImageButton\n\n                    android:layout_width=\"wrap_content\"\n\n                    android:layout_height=\"wrap_content\"\n\n                    android:id=\"@+id/infoButton\"\n\n                    android:layout_alignTop=\"@+id/discardButton\"\n\n                    android:layout_toRightOf=\"@+id/discardButton\"\n\n                    android:src=\"@drawable/ic_action_info\"\n\n                    android:layout_alignBottom=\"@+id/discardButton\"\n\n                    android:layout_alignRight=\"@+id/hyperspaceCheckbox\"\n\n                    android:scaleType=\"fitCenter\"\n\n                    android:background=\"?android:selectableItemBackground\"\n\n                    android:padding=\"5dp\"\n\n                    android:contentDescription=\"@string/infoButtonDescription\"\n\n                    android:nextFocusUp=\"@+id/buttonsLabel\"\n\n                    android:nextFocusDown=\"@+id/checkboxesLabel\"\n\n            />\n\n \n\n            <TextView\n\n                    android:layout_width=\"wrap_content\"\n\n                    android:layout_height=\"wrap_content\"\n\n                    android:text=\"@string/checkboxesLabel\"\n\n                    android:id=\"@+id/checkboxesLabel\"\n\n                    android:layout_below=\"@+id/composeButton\"\n\n                    android:layout_alignLeft=\"@+id/composeButton\"\n\n                    android:nextFocusUp=\"@+id/composeButton\"\n\n                    android:nextFocusDown=\"@+id/jetpackCheckbox\"\n\n                    />\n\n \n\n            <!-- Like a text-based button, checkboxes with text will often work correctly as-is.\n\n                 If your checkboxes do not have a text attribute, you will need to add a\n\n                 contentDescriptoin. -->\n\n            <CheckBox\n\n                    android:layout_width=\"wrap_content\"\n\n                    android:layout_height=\"wrap_content\"\n\n                    android:text=\"@string/jetpackCheckboxLabel\"\n\n                    android:id=\"@+id/jetpackCheckbox\"\n\n                    android:layout_below=\"@+id/checkboxesLabel\"\n\n                    android:layout_alignLeft=\"@+id/checkboxesLabel\"\n\n                    android:checked=\"false\"\n\n                    android:nextFocusUp=\"@+id/checkboxesLabel\"\n\n                    android:nextFocusDown=\"@+id/hyperspaceCheckbox\"\n\n                    />\n\n \n\n            <CheckBox\n\n                    android:layout_width=\"wrap_content\"\n\n                    android:layout_height=\"wrap_content\"\n\n                    android:text=\"@string/hyperspaceCheckboxLabel\"\n\n                    android:id=\"@+id/hyperspaceCheckbox\"\n\n                    android:layout_below=\"@+id/jetpackCheckbox\"\n\n                    android:layout_alignLeft=\"@+id/jetpackCheckbox\"\n\n                    android:checked=\"false\"\n\n                    android:nextFocusUp=\"@+id/jetpackCheckbox\"\n\n                    android:nextFocusDown=\"@+id/imagesAndTextLabel\"\n\n                    />\n\n \n\n            <TextView\n\n                    android:layout_width=\"wrap_content\"\n\n                    android:layout_height=\"wrap_content\"\n\n                    android:text=\"@string/imagesAndTextLabel\"\n\n                    android:id=\"@+id/imagesAndTextLabel\"\n\n                    android:layout_below=\"@+id/hyperspaceCheckbox\"\n\n                    android:layout_alignLeft=\"@+id/hyperspaceCheckbox\"\n\n                    android:nextFocusUp=\"@+id/hyperspaceCheckbox\"\n\n                    android:nextFocusDown=\"@+id/partlyCloudImage\"\n\n                    />\n\n \n\n            <!-- Images should have a contentDescription if they convey any meaningful\n\n                 information. Images that are purely decorative may not need a contentDescription,\n\n                 however. -->\n\n            <ImageView\n\n                    android:layout_width=\"wrap_content\"\n\n                    android:layout_height=\"wrap_content\"\n\n                    android:id=\"@+id/partlyCloudyImage\"\n\n                    android:layout_below=\"@+id/imagesAndTextLabel\"\n\n                    android:layout_alignLeft=\"@+id/imagesAndTextLabel\"\n\n                    android:src=\"@drawable/partly_cloudy\"\n\n                    android:contentDescription=\"@string/partlyCloudyDescription\"\n\n                    android:layout_alignRight=\"@+id/discardButton\"\n\n                    android:nextFocusUp=\"@+id/imagesAndTextLabel\"\n\n                    android:nextFocusDown=\"@+id/customViewLabel\"\n\n                    />\n\n \n\n            <!-- TextViews are typically self describing, so do not need extra modifications. -->\n\n            <TextView\n\n                    android:layout_width=\"wrap_content\"\n\n                    android:layout_height=\"wrap_content\"\n\n                    android:textAppearance=\"?android:attr/textAppearanceLarge\"\n\n                    android:text=\"@string/temperature\"\n\n                    android:textSize=\"60sp\"\n\n                    android:id=\"@+id/temperatureText\"\n\n                    android:layout_alignTop=\"@+id/partlyCloudyImage\"\n\n                    android:layout_toRightOf=\"@+id/partlyCloudyImage\"\n\n                    android:layout_alignBottom=\"@+id/partlyCloudyImage\"\n\n                    android:gravity=\"center_vertical\"\n\n                    android:nextFocusUp=\"@+id/imagesAndTextLabel\"\n\n                    android:nextFocusDown=\"@+id/customViewLabel\"\n\n                    />\n\n \n\n            <TextView\n\n                    android:layout_width=\"wrap_content\"\n\n                    android:layout_height=\"wrap_content\"\n\n                    android:text=\"@string/customViewLabel\"\n\n                    android:id=\"@+id/customViewLabel\"\n\n                    android:layout_below=\"@+id/partlyCloudyImage\"\n\n                    android:layout_alignLeft=\"@+id/partlyCloudyImage\"\n\n                    android:nextFocusUp=\"@+id/partlyCloudImage\"\n\n                    android:nextFocusDown=\"@+id/dialView\"\n\n                    />\n\n \n\n            <!-- Custom views require additonal code changes. See DialView.java for more\n\n                 details. -->\n\n            <com.example.android.basicaccessibility.DialView\n\n                    android:layout_width=\"200dp\"\n\n                    android:layout_height=\"200dp\"\n\n                    android:id=\"@+id/dialView\"\n\n                    android:layout_below=\"@+id/customViewLabel\"\n\n                    android:layout_alignLeft=\"@+id/partlyCloudyImage\"\n\n                    android:nextFocusUp=\"@+id/customViewLabel\"\n\n                    />\n\n \n\n        </RelativeLayout>\n\n    </ScrollView>\n\n</LinearLayout>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">BasicAccessibility</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            This sample demonstrates how to create an accessible application, using a mix of different widgets demonstrating different ways of adding accessibility markup to a UI.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","dimens.xml":"\n    \n\n<!--\n\nCopyright (C) 2013 The Android Open Source Project\n\n \n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n-->\n\n<resources>\n\n    <!-- Default screen margins, per the Android Design guidelines. -->\n\n    <dimen name=\"activity_horizontal_margin\">16dp</dimen>\n\n    <dimen name=\"activity_vertical_margin\">16dp</dimen>\n\n</resources>\n  ","strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\nCopyright (C) 2013 The Android Open Source Project\n\n \n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n-->\n\n \n\n<resources>\n\n    <string name=\"composeButtonPressed\">(Compose button pressed.)</string>\n\n    <string name=\"discardButtonPressed\">(Discard button pressed.)</string>\n\n    <string name=\"infoButtonPressed\">(Info button pressed.)</string>\n\n    <string name=\"composeButtonLabel\">Compose</string>\n\n    <string name=\"discardButtonDescription\">Discard Button</string>\n\n    <string name=\"infoButtonDescription\">Info Button</string>\n\n    <string name=\"partlyCloudyDescription\">Partly Cloudy</string>\n\n    <string name=\"checkboxesLabel\">Checkboxes</string>\n\n    <string name=\"jetpackCheckboxLabel\">Enable Jetpack</string>\n\n    <string name=\"hyperspaceCheckboxLabel\">Enable Hyperspace Engines</string>\n\n    <string name=\"imagesAndTextLabel\">Images &amp; Text</string>\n\n    <string name=\"temperature\">53 °F</string>\n\n    <string name=\"customViewLabel\">Custom View</string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw720dp-land":{"dimens.xml":"\n    \n\n<!--\n\nCopyright (C) 2013 The Android Open Source Project\n\n \n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n-->\n\n \n\n<resources>\n\n    <!-- Customize dimensions originally defined in res/values/dimens.xml (such as\n\n         screen margins) for sw720dp devices (e.g. 10\" tablets) in landscape here. -->\n\n    <dimen name=\"activity_horizontal_margin\">128dp</dimen>\n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.basicaccessibility":{"DialView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.basicaccessibility;\n\n \n\nimport android.annotation.TargetApi;\n\nimport android.content.Context;\n\nimport android.graphics.Canvas;\n\nimport android.graphics.Color;\n\nimport android.graphics.Paint;\n\nimport android.os.Build;\n\nimport android.util.AttributeSet;\n\nimport android.view.View;\n\nimport android.view.accessibility.AccessibilityEvent;\n\n \n\n/**\n\n * Custom view to demonstrate accessibility.\n\n *\n\n * <p>This view does not use any framework widgets, so does not get any accessibility features\n\n * automatically. Instead, we use {@link android.view.accessibility.AccessibilityEvent} to provide accessibility hints to\n\n * the OS.\n\n *\n\n * <p>For example, if TalkBack is enabled, users will be able to receive spoken feedback as they\n\n * interact with this view.\n\n *\n\n * <p>More generally, this view renders a multi-position \"dial\" that can be used to select a value\n\n * between 1 and 4. Each time the dial is clicked, the next position will be selected (modulo\n\n * the maximum number of positions).\n\n */\n\npublic class DialView extends View {\n\n    private static int SELECTION_COUNT = 4;\n\n \n\n    private static float FONT_SIZE = 40f;\n\n    private float mWidth;\n\n    private float mHeight;\n\n    private float mWidthPadded;\n\n    private float mHeightPadded;\n\n    private Paint mTextPaint;\n\n    private Paint mDialPaint;\n\n    private float mRadius;\n\n    private int mActiveSelection;\n\n \n\n    /**\n\n     * Constructor that is called when inflating a view from XML. This is called\n\n     * when a view is being constructed from an XML file, supplying attributes\n\n     * that were specified in the XML file.\n\n     *\n\n     * <p>In our case, this constructor just calls init().\n\n     *\n\n     * @param context The Context the view is running in, through which it can\n\n     *                access the current theme, resources, etc.\n\n     * @param attrs   The attributes of the XML tag that is inflating the view.\n\n     * @see #View(android.content.Context, android.util.AttributeSet, int)\n\n     */\n\n    public DialView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n        init();\n\n    }\n\n \n\n    /**\n\n     * Helper method to initialize instance variables. Called by constructor.\n\n     */\n\n    private void init() {\n\n        // Paint styles used for rendering are created here, rather than at render-time. This\n\n        // is a performance optimization, since onDraw() will get called frequently.\n\n        mTextPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n\n        mTextPaint.setColor(Color.BLACK);\n\n        mTextPaint.setStyle(Paint.Style.FILL_AND_STROKE);\n\n        mTextPaint.setTextAlign(Paint.Align.CENTER);\n\n        mTextPaint.setTextSize(FONT_SIZE);\n\n \n\n        mDialPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n\n        mDialPaint.setColor(Color.GRAY);\n\n \n\n        // Initialize current selection. This will store where the dial's \"indicator\" is pointing.\n\n        mActiveSelection = 0;\n\n \n\n        // Setup onClick listener for this view. Rotates between each of the different selection\n\n        // states on each click.\n\n        //\n\n        // Notice that we call sendAccessibilityEvent here. Some AccessibilityEvents are generated\n\n        // by the system. However, custom views will typically need to send events manually as the\n\n        // user interacts with the view. The type of event sent will vary, depending on the nature\n\n        // of the view and how the user interacts with it.\n\n        //\n\n        // In this case, we are sending TYPE_VIEW_SELECTED rather than TYPE_VIEW_CLICKED, because\n\n        // clicking on this view selects a new value.\n\n        //\n\n        // We will give our AccessibilityEvent further information about the state of the view in\n\n        // onPopulateAccessibilityEvent(), which will be called automatically by the system\n\n        // for each AccessibilityEvent.\n\n        setOnClickListener(new OnClickListener() {\n\n            @Override\n\n            public void onClick(View v) {\n\n                // Rotate selection to the next valid choice.\n\n                mActiveSelection = (mActiveSelection + 1) % SELECTION_COUNT;\n\n                // Send an AccessibilityEvent, since the user has interacted with the view.\n\n                sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_SELECTED);\n\n                // Redraw the entire view. (Inefficient, but this is sufficient for demonstration\n\n                // purposes.)\n\n                invalidate();\n\n            }\n\n        });\n\n    }\n\n \n\n    /**\n\n     * This is where a View should populate outgoing accessibility events with its text content.\n\n     * While this method is free to modify event attributes other than text content, doing so\n\n     * should normally be performed in\n\n     * {@link #onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)}.\n\n     * <p/>\n\n     * <p>Note that the behavior of this method will typically vary, depending on the type of\n\n     * accessibility event is passed into it. The allowed values also very, and are documented\n\n     * in {@link android.view.accessibility.AccessibilityEvent}.\n\n     * <p/>\n\n     * <p>Typically, this is where you'll describe the state of your custom view. You may also\n\n     * want to provide custom directions when the user has focused your view.\n\n     *\n\n     * @param event The accessibility event which to populate.\n\n     */\n\n    @Override\n\n    @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)\n\n    public void onPopulateAccessibilityEvent(AccessibilityEvent event) {\n\n        super.onPopulateAccessibilityEvent(event);\n\n \n\n        // Detect what type of accessibility event is being passed in.\n\n        int eventType = event.getEventType();\n\n \n\n        // Common case: The user has interacted with our view in some way. State may or may not\n\n        // have been changed. Read out the current status of the view.\n\n        //\n\n        // We also set some other metadata which is not used by TalkBack, but could be used by\n\n        // other TTS engines.\n\n        if (eventType == AccessibilityEvent.TYPE_VIEW_SELECTED ||\n\n                eventType == AccessibilityEvent.TYPE_VIEW_ACCESSIBILITY_FOCUSED) {\n\n            event.getText().add(\"Mode selected: \" + Integer.toString(mActiveSelection + 1) + \".\");\n\n            event.setItemCount(SELECTION_COUNT);\n\n            event.setCurrentItemIndex(mActiveSelection);\n\n        }\n\n \n\n        // When a user first focuses on our view, we'll also read out some simple instructions to\n\n        // make it clear that this is an interactive element.\n\n        if (eventType == AccessibilityEvent.TYPE_VIEW_ACCESSIBILITY_FOCUSED) {\n\n            event.getText().add(\"Tap to change.\");\n\n        }\n\n    }\n\n \n\n    /**\n\n     * This is called during layout when the size of this view has changed. If\n\n     * you were just added to the view hierarchy, you're called with the old\n\n     * values of 0.\n\n     *\n\n     * <p>This is where we determine the drawing bounds for our custom view.\n\n     *\n\n     * @param w    Current width of this view.\n\n     * @param h    Current height of this view.\n\n     * @param oldw Old width of this view.\n\n     * @param oldh Old height of this view.\n\n     */\n\n    @Override\n\n    protected void onSizeChanged(int w, int h, int oldw, int oldh) {\n\n        // Account for padding\n\n        float xPadding = (float) (getPaddingLeft() + getPaddingRight());\n\n        float yPadding = (float) (getPaddingTop() + getPaddingBottom());\n\n \n\n        // Compute available width/height\n\n        mWidth = w;\n\n        mHeight = h;\n\n        mWidthPadded = w - xPadding;\n\n        mHeightPadded = h - yPadding;\n\n        mRadius = (float) (Math.min(mWidth, mHeight) / 2 * 0.8);\n\n    }\n\n \n\n    /**\n\n     * Render view content.\n\n     *\n\n     * <p>We render an outer grey circle to serve as our \"dial\", and then render a smaller black\n\n     * circle to server as our indicator. The position for the indicator is determined based\n\n     * on mActiveSelection.\n\n     *\n\n     * @param canvas the canvas on which the background will be drawn\n\n     */\n\n    @Override\n\n    protected void onDraw(Canvas canvas) {\n\n        super.onDraw(canvas);\n\n        // Draw dial\n\n        canvas.drawCircle(mWidth / 2, mHeight / 2, (float) mRadius, mDialPaint);\n\n \n\n        // Draw text labels\n\n        final float labelRadius = mRadius + 10;\n\n        for (int i = 0; i < SELECTION_COUNT; i++) {\n\n            float[] xyData = computeXYForPosition(i, labelRadius);\n\n            float x = xyData[0];\n\n            float y = xyData[1];\n\n            canvas.drawText(Integer.toString(i + 1), x, y, mTextPaint);\n\n        }\n\n \n\n        // Draw indicator mark\n\n        final float markerRadius = mRadius - 35;\n\n        float[] xyData = computeXYForPosition(mActiveSelection, markerRadius);\n\n        float x = xyData[0];\n\n        float y = xyData[1];\n\n        canvas.drawCircle(x, y, 20, mTextPaint);\n\n    }\n\n \n\n    /**\n\n     * Compute the X/Y-coordinates for a label or indicator, given the position number and radius\n\n     * where the label should be drawn.\n\n     *\n\n     * @param pos    Zero based position index\n\n     * @param radius Radius where label/indicator is to be drawn.\n\n     * @return 2-element array. Element 0 is X-coordinate, element 1 is Y-coordinate.\n\n     */\n\n    private float[] computeXYForPosition(final int pos, final float radius) {\n\n        float[] result = new float[2];\n\n        Double startAngle = Math.PI * (9 / 8d);   // Angles are in radiansq\n\n        Double angle = startAngle + (pos * (Math.PI / 4));\n\n        result[0] = (float) (radius * Math.cos(angle)) + (mWidth / 2);\n\n        result[1] = (float) (radius * Math.sin(angle)) + (mHeight / 2);\n\n        return result;\n\n    }\n\n}\n  ","MainActivity.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.basicaccessibility;\n\n \n\nimport android.app.Activity;\n\nimport android.os.Bundle;\n\n \n\n/**\n\n * Basic activity class.\n\n *\n\n * <p>Responsible for rendering layout, and displaying some toasts to give buttons feedback.\n\n * There's nothing terribly interesting in this class. All the interesting stuff is in\n\n * res/layout/activity_main.xml and {@link DialView}.\n\n */\n\npublic class MainActivity extends Activity {\n\n \n\n    /**\n\n     * Standard onCreate() implementation. Sets R.layout.activity_main as the layout.\n\n     */\n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.sample_main);\n\n    }\n\n}\n  "},"com.example.android.common.logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.basicaccessibility\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk\n\n        android:minSdkVersion=\"11\"\n\n        android:targetSdkVersion=\"16\" />\n\n \n\n    <application\n\n        android:allowBackup=\"true\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:label=\"@string/app_name\"\n\n        android:theme=\"@style/AppTheme\" >\n\n        <activity\n\n            android:name=\".MainActivity\"\n\n            android:label=\"@string/app_name\" >\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n</manifest>\n  "},"BasicImmersiveMode":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicImmersiveMode/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com/samples/BasicImmersiveMode/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicImmersiveMode/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicImmersiveMode/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicImmersiveMode/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n        android:orientation=\"vertical\"\n\n        android:layout_width=\"fill_parent\"\n\n        android:layout_height=\"fill_parent\"\n\n        android:id=\"@+id/sample_main_layout\">\n\n    <TextView android:id=\"@+id/sample_output\"\n\n              style=\"@style/Widget.SampleMessage\"\n\n              android:layout_weight=\"1\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\"\n\n              android:text=\"@string/intro_message\"\n\n              android:padding=\"16dp\" />\n\n    <View\n\n            android:layout_width=\"fill_parent\"\n\n            android:layout_height=\"1dp\"\n\n            android:background=\"@android:color/darker_gray\"/>\n\n    <fragment\n\n            android:name=\"com.example.android.common.logger.LogFragment\"\n\n            android:id=\"@+id/log_fragment\"\n\n            android:layout_weight=\"1\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"match_parent\" />\n\n</LinearLayout>\n  "},"layout-sw600dp":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:orientation=\"vertical\"\n\n    android:layout_width=\"fill_parent\"\n\n    android:layout_height=\"fill_parent\"\n\n    android:id=\"@+id/sample_main_layout\" >\n\n \n\n    <TextView android:id=\"@+id/sample_output\"\n\n        style=\"@style/Widget.SampleMessage\"\n\n        android:background=\"@android:color/white\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:text=\"@string/intro_message\"\n\n        android:padding=\"16dp\"\n\n        android:layout_margin=\"16dp\"/>\n\n    <fragment\n\n        android:name=\"com.example.android.common.logger.LogFragment\"\n\n        android:id=\"@+id/log_fragment\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"match_parent\"\n\n        android:layout_margin=\"16dp\" />\n\n</LinearLayout>\n  "},"layout-sw600dp-land":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n        android:orientation=\"horizontal\"\n\n        android:layout_width=\"fill_parent\"\n\n        android:layout_height=\"fill_parent\"\n\n        android:id=\"@+id/sample_main_layout\">\n\n    <TextView android:id=\"@+id/sample_output\"\n\n              style=\"@style/Widget.SampleMessage\"\n\n              android:background=\"@android:color/white\"\n\n              android:layout_weight=\"1\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\"\n\n              android:text=\"@string/intro_message\"\n\n              android:layout_margin=\"16dp\" />\n\n    <fragment\n\n            android:name=\"com.example.android.common.logger.LogFragment\"\n\n            android:id=\"@+id/log_fragment\"\n\n            android:layout_weight=\"1\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"match_parent\"\n\n            android:layout_margin=\"16dp\" />\n\n</LinearLayout>\n  "},"menu":{"main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:id=\"@+id/sample_action\"\n\n          android:showAsAction=\"ifRoom|withText\"\n\n          android:title=\"@string/sample_action\" />\n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">BasicImmersiveMode</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            \\\"Immersive Mode\\\" is a new UI mode which improves \\\"hide full screen\\\" and\n\n            \\\"hide nav bar\\\" modes, by letting users swipe the bars in and out.  This sample\n\n            demonstrates how to enable and disable immersive mode programmatically.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n        <string name=\"sample_action\">Toggle Immersive Mode!</string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Base\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n \n\n    <style name=\"Widget.SampleOutput\">\n\n        <item name=\"android:padding\">@dimen/margin_medium</item>\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Log\" parent=\"Widget.SampleOutput\">\n\n        <item name=\"android:typeface\">monospace</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:padding\">@dimen/margin_medium</item>\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n \n\n        <item name=\"android:layout_margin\">16dp</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n    <style name=\"Log\" parent=\"Widget.SampleOutput\">\n\n        <item name=\"android:typeface\">monospace</item>\n\n    </style>\n\n \n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.basicimmersivemode":{"BasicImmersiveModeFragment.java":"\n    \n\n/*\n\n* Copyright (C) 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*      http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\npackage com.example.android.basicimmersivemode;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.view.MenuItem;\n\nimport android.view.View;\n\n \n\nimport com.example.android.common.logger.Log;\n\n \n\npublic class BasicImmersiveModeFragment extends Fragment {\n\n \n\n    public static final String TAG = \"BasicImmersiveModeFragment\";\n\n \n\n    @Override\n\n    public void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setHasOptionsMenu(true);\n\n    }\n\n \n\n    @Override\n\n    public void onActivityCreated(Bundle savedInstanceState) {\n\n        super.onActivityCreated(savedInstanceState);\n\n        final View decorView = getActivity().getWindow().getDecorView();\n\n        decorView.setOnSystemUiVisibilityChangeListener(\n\n                new View.OnSystemUiVisibilityChangeListener() {\n\n                    @Override\n\n                    public void onSystemUiVisibilityChange(int i) {\n\n                        int height = decorView.getHeight();\n\n                        Log.i(TAG, \"Current height: \" + height);\n\n                    }\n\n                });\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        if (item.getItemId() == R.id.sample_action) {\n\n            toggleHideyBar();\n\n        }\n\n        return true;\n\n    }\n\n \n\n    /**\n\n     * Detects and toggles immersive mode.\n\n     */\n\n    public void toggleHideyBar() {\n\n        // The UI options currently enabled are represented by a bitfield.\n\n        // getSystemUiVisibility() gives us that bitfield.\n\n        int uiOptions = getActivity().getWindow().getDecorView().getSystemUiVisibility();\n\n        int newUiOptions = uiOptions;\n\n        boolean isImmersiveModeEnabled =\n\n                ((uiOptions | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY) == uiOptions);\n\n        if (isImmersiveModeEnabled) {\n\n            Log.i(TAG, \"Turning immersive mode mode off. \");\n\n        } else {\n\n            Log.i(TAG, \"Turning immersive mode mode on.\");\n\n        }\n\n \n\n        // Immersive mode: Backward compatible to KitKat (API 19).\n\n        // Note that this flag doesn't do anything by itself, it only augments the behavior\n\n        // of HIDE_NAVIGATION and FLAG_FULLSCREEN.  For the purposes of this sample\n\n        // all three flags are being toggled together.\n\n        // This sample uses the \"sticky\" form of immersive mode, which will let the user swipe\n\n        // the bars back in again, but will automatically make them disappear a few seconds later.\n\n        newUiOptions ^= View.SYSTEM_UI_FLAG_HIDE_NAVIGATION;\n\n        newUiOptions ^= View.SYSTEM_UI_FLAG_FULLSCREEN;\n\n        newUiOptions ^= View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;\n\n        getActivity().getWindow().getDecorView().setSystemUiVisibility(newUiOptions);\n\n    }\n\n}\n  ","MainActivity.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.basicimmersivemode;\n\n \n\nimport android.graphics.Color;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentTransaction;\n\nimport android.view.Menu;\n\n \n\nimport com.example.android.common.activities.SampleActivityBase;\n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogFragment;\n\nimport com.example.android.common.logger.LogWrapper;\n\nimport com.example.android.common.logger.MessageOnlyLogFilter;\n\n \n\n/**\n\n * A simple launcher activity containing a summary sample description\n\n * and a few action bar buttons.\n\n */\n\npublic class MainActivity extends SampleActivityBase {\n\n \n\n    public static final String TAG = \"MainActivity\";\n\n \n\n    public static final String FRAGTAG = \"BasicImmersiveModeFragment\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_main);\n\n \n\n        if (getSupportFragmentManager().findFragmentByTag(FRAGTAG) == null ) {\n\n            FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n\n            BasicImmersiveModeFragment fragment = new BasicImmersiveModeFragment();\n\n            transaction.add(fragment, FRAGTAG);\n\n            transaction.commit();\n\n        }\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        getMenuInflater().inflate(R.menu.main, menu);\n\n        return true;\n\n    }\n\n \n\n    /** Create a chain of targets that will receive log data */\n\n    @Override\n\n    public void initializeLogging() {\n\n        // Wraps Android's native log framework.\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        Log.setLogNode(logWrapper);\n\n \n\n        // Filter strips out everything except the message text.\n\n        MessageOnlyLogFilter msgFilter = new MessageOnlyLogFilter();\n\n        logWrapper.setNext(msgFilter);\n\n \n\n        // On screen logging via a fragment with a TextView.\n\n        LogFragment logFragment = (LogFragment) getSupportFragmentManager()\n\n                .findFragmentById(R.id.log_fragment);\n\n        msgFilter.setNext(logFragment.getLogView());\n\n        logFragment.getLogView().setTextAppearance(this, R.style.Log);\n\n        logFragment.getLogView().setBackgroundColor(Color.WHITE);\n\n \n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "},"com.example.android.common":{"activities":{"SampleActivityBase.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\npackage com.example.android.common.activities;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentActivity;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogWrapper;\n\n \n\n/**\n\n * Base launcher activity, to handle most of the common plumbing for samples.\n\n */\n\npublic class SampleActivityBase extends FragmentActivity {\n\n \n\n    public static final String TAG = \"SampleActivityBase\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n    }\n\n \n\n    @Override\n\n    protected  void onStart() {\n\n        super.onStart();\n\n        initializeLogging();\n\n    }\n\n \n\n    /** Set up targets to receive log data */\n\n    public void initializeLogging() {\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        // Wraps Android's native log framework\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        Log.setLogNode(logWrapper);\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "},"logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "}}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.basicimmersivemode\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk android:minSdkVersion=\"19\" android:targetSdkVersion=\"19\" />\n\n \n\n    <application android:allowBackup=\"true\"\n\n        android:label=\"@string/app_name\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:theme=\"@style/AppTheme\">\n\n \n\n        <activity android:name=\".MainActivity\"\n\n                  android:label=\"@string/app_name\"\n\n                  android:uiOptions=\"splitActionBarWhenNarrow\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n</manifest>\n  "},"BasicNotifications":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicNotifications/res/drawable-hdpi/ic_launcher.png","ic_stat_notification.png":"http://developer.android.com/samples/BasicNotifications/res/drawable-hdpi/ic_stat_notification.png","tile.9.png":"http://developer.android.com/samples/BasicNotifications/res/drawable-hdpi/tile.9.png"},"drawable-hdpi-v11":{"ic_stat_notification.png":"http://developer.android.com/samples/BasicNotifications/res/drawable-hdpi-v11/ic_stat_notification.png"},"drawable-hdpi-v9":{"ic_stat_notification.png":"http://developer.android.com/samples/BasicNotifications/res/drawable-hdpi-v9/ic_stat_notification.png"},"drawable-ldpi-v11":{"ic_stat_notification.png":"http://developer.android.com/samples/BasicNotifications/res/drawable-ldpi-v11/ic_stat_notification.png"},"drawable-ldpi-v9":{"ic_stat_notification.png":"http://developer.android.com/samples/BasicNotifications/res/drawable-ldpi-v9/ic_stat_notification.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicNotifications/res/drawable-mdpi/ic_launcher.png","ic_stat_notification.png":"http://developer.android.com/samples/BasicNotifications/res/drawable-mdpi/ic_stat_notification.png"},"drawable-mdpi-v11":{"ic_stat_notification.png":"http://developer.android.com/samples/BasicNotifications/res/drawable-mdpi-v11/ic_stat_notification.png"},"drawable-mdpi-v9":{"ic_stat_notification.png":"http://developer.android.com/samples/BasicNotifications/res/drawable-mdpi-v9/ic_stat_notification.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicNotifications/res/drawable-xhdpi/ic_launcher.png","ic_stat_notification.png":"http://developer.android.com/samples/BasicNotifications/res/drawable-xhdpi/ic_stat_notification.png"},"drawable-xhdpi-v11":{"ic_stat_notification.png":"http://developer.android.com/samples/BasicNotifications/res/drawable-xhdpi-v11/ic_stat_notification.png"},"drawable-xhdpi-v9":{"ic_stat_notification.png":"http://developer.android.com/samples/BasicNotifications/res/drawable-xhdpi-v9/ic_stat_notification.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicNotifications/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleMessageTile\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n            android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n            android:text=\"@string/intro_message\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n  ","sample_layout.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\nCopyright 2013 The Android Open Source Project\n\n \n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n \n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n \n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n-->\n\n<LinearLayout\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:id=\"@+id/coreLayout\"\n\n    android:orientation=\"vertical\"\n\n    android:layout_width=\"wrap_content\"\n\n    android:layout_height=\"wrap_content\"\n\n    android:layout_gravity=\"center_vertical\">\n\n \n\n    <TextView\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:text=\"@string/description\"\n\n        android:id=\"@+id/description\"\n\n        android:scrollbars=\"vertical\"\n\n        android:layout_gravity=\"fill_vertical\"\n\n        android:layout_weight=\"1\"/>\n\n \n\n    <Button\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:text=\"Do it!\"\n\n        android:id=\"@+id/button\"\n\n        android:layout_gravity=\"center\"\n\n        android:onClick=\"sendNotification\"/>\n\n \n\n</LinearLayout>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">BasicNotifications</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            This sample demonstrates how to display events in the system\\'s notification bar. The\n\n            NotificationCompat API is used for compatibility with older devices, running Android\n\n            2.2 (Froyo) or newer.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\nCopyright 2013 The Android Open Source Project\n\n \n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n \n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n \n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n-->\n\n<resources>\n\n \n\n    <string name=\"description\">\n\n        Tap the button below to send a notification.\\n\\nThe notification\\'s icon will immediately\n\n        appear in the notification bar. Drag the notification bar open to see the full\n\n        notification. Depending on which version of Android you\\'re running, the full\n\n        notification will display an icon and two or three lines of text.\n\n        \\n\\nTap the notification to execute the notification\\'s \\\"action,\\\" which is an intent\n\n        that we associate with the notification when it\\'s created. This sample notification\\'s\n\n        action is to send a browse intent with the url of the Notification docs on\n\n        developer.android.com.\n\n        \\n\\nThis sample uses the NotificationCompat API for maximum compatibility with versions\n\n        of Android from Froyo (Android 2.2) to the present. Try it on devices or AVDs that are\n\n        running different versions of Android. You\\'ll see that while the presentation varies\n\n        slightly, the basic functionality is the same. NotificationCompat automatically takes\n\n        advantage of the expanded notification format in newer versions of Android, and\n\n        falls back gracefully to a reduced set of functionality on earlier versions.\n\n    </string>\n\n \n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.basicnotifications":{"MainActivity.java":"\n    \n\npackage com.example.android.basicnotifications;\n\n \n\nimport android.app.Activity;\n\nimport android.app.NotificationManager;\n\nimport android.app.PendingIntent;\n\nimport android.content.Intent;\n\nimport android.graphics.BitmapFactory;\n\nimport android.net.Uri;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.NotificationCompat;\n\nimport android.view.View;\n\n \n\n/**\n\n * The entry point to the BasicNotification sample.\n\n */\n\npublic class MainActivity extends Activity {\n\n    /**\n\n     * A numeric value that identifies the notification that we'll be sending.\n\n     * This value needs to be unique within this app, but it doesn't need to be\n\n     * unique system-wide.\n\n     */\n\n    public static final int NOTIFICATION_ID = 1;\n\n \n\n    public void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.sample_layout);\n\n \n\n    }\n\n \n\n    /**\n\n     * Send a sample notification using the NotificationCompat API.\n\n     */\n\n    public void sendNotification(View view) {\n\n \n\n        /** Create an intent that will be fired when the user clicks the notification.\n\n         * The intent needs to be packaged into a {@link android.app.PendingIntent} so that the\n\n         * notification service can fire it on our behalf.\n\n         */\n\n        Intent intent = new Intent(Intent.ACTION_VIEW,\n\n                Uri.parse(\"http://developer.android.com/reference/android/app/Notification.html\"));\n\n        PendingIntent pendingIntent = PendingIntent.getActivity(this, 0, intent, 0);\n\n \n\n        /**\n\n         * Use NotificationCompat.Builder to set up our notification.\n\n         */\n\n        NotificationCompat.Builder builder = new NotificationCompat.Builder(this);\n\n \n\n        /** Set the icon that will appear in the notification bar. This icon also appears\n\n         * in the lower right hand corner of the notification itself.\n\n         *\n\n         * Important note: although you can use any drawable as the small icon, Android\n\n         * design guidelines state that the icon should be simple and monochrome. Full-color\n\n         * bitmaps or busy images don't render well on smaller screens and can end up\n\n         * confusing the user.\n\n         */\n\n        builder.setSmallIcon(R.drawable.ic_stat_notification);\n\n \n\n        // Set the intent that will fire when the user taps the notification.\n\n        builder.setContentIntent(pendingIntent);\n\n \n\n        // Set the notification to auto-cancel. This means that the notification will disappear\n\n        // after the user taps it, rather than remaining until it's explicitly dismissed.\n\n        builder.setAutoCancel(true);\n\n \n\n        /**\n\n         *Build the notification's appearance.\n\n         * Set the large icon, which appears on the left of the notification. In this\n\n         * sample we'll set the large icon to be the same as our app icon. The app icon is a\n\n         * reasonable default if you don't have anything more compelling to use as an icon.\n\n         */\n\n        builder.setLargeIcon(BitmapFactory.decodeResource(getResources(), R.drawable.ic_launcher));\n\n \n\n        /**\n\n         * Set the text of the notification. This sample sets the three most commononly used\n\n         * text areas:\n\n         * 1. The content title, which appears in large type at the top of the notification\n\n         * 2. The content text, which appears in smaller text below the title\n\n         * 3. The subtext, which appears under the text on newer devices. Devices running\n\n         *    versions of Android prior to 4.2 will ignore this field, so don't use it for\n\n         *    anything vital!\n\n         */\n\n        builder.setContentTitle(\"BasicNotifications Sample\");\n\n        builder.setContentText(\"Time to learn about notifications!\");\n\n        builder.setSubText(\"Tap to view documentation about notifications.\");\n\n \n\n \n\n        /**\n\n         * Send the notification. This will immediately display the notification icon in the\n\n         * notification bar.\n\n         */\n\n        NotificationManager notificationManager = (NotificationManager) getSystemService(\n\n                NOTIFICATION_SERVICE);\n\n        notificationManager.notify(NOTIFICATION_ID, builder.build());\n\n    }\n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.basicnotifications\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk\n\n        android:minSdkVersion=\"8\"\n\n        android:targetSdkVersion=\"17\"/>\n\n \n\n    <application\n\n        android:allowBackup=\"true\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:label=\"@string/app_name\"\n\n        android:theme=\"@style/AppTheme\">\n\n        <activity\n\n            android:name=\".MainActivity\"\n\n            android:label=\"@string/app_name\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\"/>\n\n                <category android:name=\"android.intent.category.LAUNCHER\"/>\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n</manifest>\n  "},"BasicTransition":{"res":{"drawable":{"oval.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n<shape xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:shape=\"oval\">\n\n    <solid android:color=\"#0000ff\"/>\n\n</shape>\n  "},"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicTransition/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com/samples/BasicTransition/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicTransition/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicTransition/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com/samples/BasicTransition/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_basic_transition.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:tools=\"http://schemas.android.com/tools\"\n\n    android:id=\"@+id/container\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    tools:context=\"com.example.android.basictransition.BasicTransitionActivity\"/>\n  ","activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"vertical\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <ViewAnimator\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\"\n\n          android:layout_weight=\"1\">\n\n \n\n        <ScrollView\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingRight=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingTop=\"@dimen/vertical_page_margin\"\n\n                  android:paddingBottom=\"@dimen/vertical_page_margin\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </ScrollView>\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\" />\n\n \n\n    </ViewAnimator>\n\n \n\n    <View\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"1dp\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\" />\n\n \n\n</LinearLayout>\n\n \n  ","fragment_basic_transition.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:tools=\"http://schemas.android.com/tools\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\"\n\n    android:paddingBottom=\"@dimen/activity_vertical_margin\"\n\n    android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n\n    android:paddingRight=\"@dimen/activity_horizontal_margin\"\n\n    android:paddingTop=\"@dimen/activity_vertical_margin\"\n\n    tools:context=\"com.example.android.basictransition.BasicTransitionFragment\">\n\n \n\n    <RadioGroup\n\n        android:id=\"@+id/select_scene\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:layout_gravity=\"center_horizontal\"\n\n        android:orientation=\"horizontal\">\n\n \n\n        <TextView\n\n            android:layout_width=\"wrap_content\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_weight=\"1\"\n\n            android:text=\"@string/scene\"/>\n\n \n\n        <RadioButton\n\n            android:id=\"@+id/select_scene_1\"\n\n            android:layout_width=\"wrap_content\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_weight=\"1\"\n\n            android:checked=\"true\"\n\n            android:text=\"@string/scene_1\"/>\n\n \n\n        <RadioButton\n\n            android:id=\"@+id/select_scene_2\"\n\n            android:layout_width=\"wrap_content\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_weight=\"1\"\n\n            android:text=\"@string/scene_2\"/>\n\n \n\n        <RadioButton\n\n            android:id=\"@+id/select_scene_3\"\n\n            android:layout_width=\"wrap_content\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_weight=\"1\"\n\n            android:text=\"@string/scene_3\"/>\n\n \n\n        <RadioButton\n\n            android:id=\"@+id/select_scene_4\"\n\n            android:layout_width=\"wrap_content\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_weight=\"1\"\n\n            android:text=\"@string/scene_4\"/>\n\n \n\n    </RadioGroup>\n\n \n\n    <FrameLayout\n\n        android:id=\"@+id/scene_root\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"0dp\"\n\n        android:layout_weight=\"1\">\n\n \n\n        <include layout=\"@layout/scene1\"/>\n\n \n\n    </FrameLayout>\n\n \n\n</LinearLayout>\n  ","scene1.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n<RelativeLayout\n\n    android:id=\"@+id/container\"\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\">\n\n \n\n    <View\n\n        android:id=\"@+id/transition_square\"\n\n        android:layout_width=\"@dimen/square_size_normal\"\n\n        android:layout_height=\"@dimen/square_size_normal\"\n\n        android:background=\"#990000\"\n\n        android:gravity=\"center\"/>\n\n \n\n    <ImageView\n\n        android:id=\"@+id/transition_image\"\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:layout_below=\"@id/transition_square\"\n\n        android:src=\"@drawable/ic_launcher\"/>\n\n \n\n    <ImageView\n\n        android:id=\"@+id/transition_oval\"\n\n        android:layout_width=\"32dp\"\n\n        android:layout_height=\"32dp\"\n\n        android:layout_below=\"@id/transition_image\"\n\n        android:src=\"@drawable/oval\"/>\n\n \n\n</RelativeLayout>\n  ","scene2.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n<RelativeLayout\n\n    android:id=\"@+id/container\"\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\">\n\n \n\n    <View\n\n        android:id=\"@+id/transition_square\"\n\n        android:layout_width=\"@dimen/square_size_normal\"\n\n        android:layout_height=\"@dimen/square_size_normal\"\n\n        android:layout_alignParentBottom=\"true\"\n\n        android:background=\"#990000\"\n\n        android:gravity=\"center\"/>\n\n \n\n    <ImageView\n\n        android:id=\"@+id/transition_image\"\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:layout_alignParentBottom=\"true\"\n\n        android:layout_alignParentRight=\"true\"\n\n        android:src=\"@drawable/ic_launcher\"/>\n\n \n\n    <ImageView\n\n        android:id=\"@+id/transition_oval\"\n\n        android:layout_width=\"32dp\"\n\n        android:layout_height=\"32dp\"\n\n        android:layout_centerHorizontal=\"true\"\n\n        android:src=\"@drawable/oval\"/>\n\n \n\n</RelativeLayout>\n  ","scene3.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n<RelativeLayout\n\n    android:id=\"@+id/container\"\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\">\n\n \n\n    <View\n\n        android:id=\"@+id/transition_square\"\n\n        android:layout_width=\"@dimen/square_size_normal\"\n\n        android:layout_height=\"@dimen/square_size_normal\"\n\n        android:layout_centerHorizontal=\"true\"\n\n        android:background=\"#990000\"\n\n        android:gravity=\"center\"/>\n\n \n\n    <ImageView\n\n        android:id=\"@+id/transition_image\"\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:layout_alignParentBottom=\"true\"\n\n        android:src=\"@drawable/ic_launcher\"/>\n\n \n\n    <ImageView\n\n        android:id=\"@+id/transition_oval\"\n\n        android:layout_width=\"32dp\"\n\n        android:layout_height=\"32dp\"\n\n        android:layout_alignParentBottom=\"true\"\n\n        android:layout_alignParentRight=\"true\"\n\n        android:src=\"@drawable/oval\"/>\n\n \n\n    <TextView\n\n        android:id=\"@+id/transition_title\"\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:layout_centerInParent=\"true\"\n\n        android:text=\"@string/additional_message\"\n\n        android:textAppearance=\"?android:attr/textAppearanceLarge\"/>\n\n \n\n</RelativeLayout>\n  "},"layout-w720dp":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"horizontal\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <LinearLayout\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\"\n\n          android:layout_weight=\"1\"\n\n          android:orientation=\"vertical\">\n\n \n\n        <FrameLayout\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"wrap_content\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/margin_medium\"\n\n                  android:paddingRight=\"@dimen/margin_medium\"\n\n                  android:paddingTop=\"@dimen/margin_large\"\n\n                  android:paddingBottom=\"@dimen/margin_large\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </FrameLayout>\n\n \n\n        <View\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"1dp\"\n\n              android:background=\"@android:color/darker_gray\" />\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"0px\"\n\n              android:layout_weight=\"1\" />\n\n \n\n    </LinearLayout>\n\n \n\n    <View\n\n          android:layout_width=\"1dp\"\n\n          android:layout_height=\"match_parent\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\" />\n\n \n\n</LinearLayout>\n\n \n\n \n  "},"menu":{"main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:id=\"@+id/menu_toggle_log\"\n\n          android:showAsAction=\"always\"\n\n          android:title=\"@string/sample_show_log\" />\n\n</menu>\n  "},"transition":{"changebounds_fadein_together.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n<transitionSet xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <changeBounds/>\n\n    <fade android:fadingMode=\"fade_in\">\n\n        <targets>\n\n            <target android:targetId=\"@id/transition_title\" />\n\n        </targets>\n\n    </fade>\n\n</transitionSet>\n  ","scene3_transition_manager.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n<transitionManager xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <transition\n\n        android:toScene=\"@layout/scene3\"\n\n        android:transition=\"@transition/changebounds_fadein_together\"/>\n\n</transitionManager>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">BasicTransition</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n\t    This sample demonstrates the basic use of the transition framework introduced in KitKat.\n\n\t    Select each of the RadioButtons to switch between the Scenes.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","dimens.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n<resources>\n\n    <dimen name=\"activity_horizontal_margin\">16dp</dimen>\n\n    <dimen name=\"activity_vertical_margin\">16dp</dimen>\n\n    <dimen name=\"square_size_normal\">50dp</dimen>\n\n    <dimen name=\"square_size_expanded\">100dp</dimen>\n\n</resources>\n  ","strings.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<resources>\n\n    <string name=\"sample_show_log\">Show Log</string>\n\n    <string name=\"sample_hide_log\">Hide Log</string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "},"values-w820dp":{"dimens.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n<resources>\n\n    <!-- Example customization of dimensions originally defined in res/values/dimens.xml\n\n         (such as screen margins) for screens with more than 820dp of available width. This\n\n         would include 7\" and 10\" devices in landscape (~960dp and ~1280dp respectively). -->\n\n    <dimen name=\"activity_horizontal_margin\">64dp</dimen>\n\n</resources>\n  "}},"src":{"com.example.android.basictransition":{"BasicTransitionFragment.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.basictransition;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.transition.Scene;\n\nimport android.transition.TransitionInflater;\n\nimport android.transition.TransitionManager;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.RadioGroup;\n\n \n\npublic class BasicTransitionFragment extends Fragment\n\n        implements RadioGroup.OnCheckedChangeListener {\n\n \n\n    // We transition between these Scenes\n\n    private Scene mScene1;\n\n    private Scene mScene2;\n\n    private Scene mScene3;\n\n \n\n    /** A custom TransitionManager */\n\n    private TransitionManager mTransitionManagerForScene3;\n\n \n\n    /** Transitions take place in this ViewGroup. We retain this for the dynamic transition on scene 4. */\n\n    private ViewGroup mSceneRoot;\n\n \n\n    public static BasicTransitionFragment newInstance() {\n\n        return new BasicTransitionFragment();\n\n    }\n\n \n\n    public BasicTransitionFragment() {\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n        View view = inflater.inflate(R.layout.fragment_basic_transition, container, false);\n\n        assert view != null;\n\n        RadioGroup radioGroup = (RadioGroup) view.findViewById(R.id.select_scene);\n\n        radioGroup.setOnCheckedChangeListener(this);\n\n        mSceneRoot = (ViewGroup) view.findViewById(R.id.scene_root);\n\n \n\n        // A Scene can be instantiated from a live view hierarchy.\n\n        mScene1 = new Scene(mSceneRoot, (ViewGroup) mSceneRoot.findViewById(R.id.container));\n\n \n\n        // You can also inflate a generate a Scene from a layout resource file.\n\n        mScene2 = Scene.getSceneForLayout(mSceneRoot, R.layout.scene2, getActivity());\n\n \n\n        // Another scene from a layout resource file.\n\n        mScene3 = Scene.getSceneForLayout(mSceneRoot, R.layout.scene3, getActivity());\n\n \n\n        // We create a custom TransitionManager for Scene 3, in which ChangeBounds and Fade\n\n        // take place at the same time.\n\n        mTransitionManagerForScene3 = TransitionInflater.from(getActivity())\n\n                .inflateTransitionManager(R.transition.scene3_transition_manager, mSceneRoot);\n\n \n\n        return view;\n\n    }\n\n \n\n    @Override\n\n    public void onCheckedChanged(RadioGroup group, int checkedId) {\n\n        switch (checkedId) {\n\n            case R.id.select_scene_1: {\n\n                // You can start an automatic transition with TransitionManager.go().\n\n                TransitionManager.go(mScene1);\n\n                break;\n\n            }\n\n            case R.id.select_scene_2: {\n\n                TransitionManager.go(mScene2);\n\n                break;\n\n            }\n\n            case R.id.select_scene_3: {\n\n                // You can also start a transition with a custom TransitionManager.\n\n                mTransitionManagerForScene3.transitionTo(mScene3);\n\n                break;\n\n            }\n\n            case R.id.select_scene_4: {\n\n                // Alternatively, transition can be invoked dynamically without a Scene.\n\n                // For this, we first call TransitionManager.beginDelayedTransition().\n\n                TransitionManager.beginDelayedTransition(mSceneRoot);\n\n                // Then, we can just change view properties as usual.\n\n                View square = mSceneRoot.findViewById(R.id.transition_square);\n\n                ViewGroup.LayoutParams params = square.getLayoutParams();\n\n                int newSize = getResources().getDimensionPixelSize(R.dimen.square_size_expanded);\n\n                params.width = newSize;\n\n                params.height = newSize;\n\n                square.setLayoutParams(params);\n\n                break;\n\n            }\n\n        }\n\n    }\n\n \n\n}\n  ","MainActivity.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.basictransition;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentTransaction;\n\nimport android.view.Menu;\n\nimport android.view.MenuItem;\n\nimport android.widget.ViewAnimator;\n\n \n\nimport com.example.android.common.activities.SampleActivityBase;\n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogFragment;\n\nimport com.example.android.common.logger.LogWrapper;\n\nimport com.example.android.common.logger.MessageOnlyLogFilter;\n\n \n\n/**\n\n * A simple launcher activity containing a summary sample description, sample log and a custom\n\n * {@link android.support.v4.app.Fragment} which can display a view.\n\n * <p>\n\n * For devices with displays with a width of 720dp or greater, the sample log is always visible,\n\n * on other devices it's visibility is controlled by an item on the Action Bar.\n\n */\n\npublic class MainActivity extends SampleActivityBase {\n\n \n\n    public static final String TAG = \"MainActivity\";\n\n \n\n    // Whether the Log Fragment is currently shown\n\n    private boolean mLogShown;\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_main);\n\n \n\n        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n\n        BasicTransitionFragment fragment = new BasicTransitionFragment();\n\n        transaction.replace(R.id.sample_content_fragment, fragment);\n\n        transaction.commit();\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        getMenuInflater().inflate(R.menu.main, menu);\n\n        return true;\n\n    }\n\n \n\n    @Override\n\n    public boolean onPrepareOptionsMenu(Menu menu) {\n\n        MenuItem logToggle = menu.findItem(R.id.menu_toggle_log);\n\n        logToggle.setVisible(findViewById(R.id.sample_output) instanceof ViewAnimator);\n\n        logToggle.setTitle(mLogShown ? R.string.sample_hide_log : R.string.sample_show_log);\n\n \n\n        return super.onPrepareOptionsMenu(menu);\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch(item.getItemId()) {\n\n            case R.id.menu_toggle_log:\n\n                mLogShown = !mLogShown;\n\n                ViewAnimator output = (ViewAnimator) findViewById(R.id.sample_output);\n\n                if (mLogShown) {\n\n                    output.setDisplayedChild(1);\n\n                } else {\n\n                    output.setDisplayedChild(0);\n\n                }\n\n                supportInvalidateOptionsMenu();\n\n                return true;\n\n        }\n\n        return super.onOptionsItemSelected(item);\n\n    }\n\n \n\n    /** Create a chain of targets that will receive log data */\n\n    @Override\n\n    public void initializeLogging() {\n\n        // Wraps Android's native log framework.\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        Log.setLogNode(logWrapper);\n\n \n\n        // Filter strips out everything except the message text.\n\n        MessageOnlyLogFilter msgFilter = new MessageOnlyLogFilter();\n\n        logWrapper.setNext(msgFilter);\n\n \n\n        // On screen logging via a fragment with a TextView.\n\n        LogFragment logFragment = (LogFragment) getSupportFragmentManager()\n\n                .findFragmentById(R.id.log_fragment);\n\n        msgFilter.setNext(logFragment.getLogView());\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "},"com.example.android.common":{"activities":{"SampleActivityBase.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\npackage com.example.android.common.activities;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentActivity;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogWrapper;\n\n \n\n/**\n\n * Base launcher activity, to handle most of the common plumbing for samples.\n\n */\n\npublic class SampleActivityBase extends FragmentActivity {\n\n \n\n    public static final String TAG = \"SampleActivityBase\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n    }\n\n \n\n    @Override\n\n    protected  void onStart() {\n\n        super.onStart();\n\n        initializeLogging();\n\n    }\n\n \n\n    /** Set up targets to receive log data */\n\n    public void initializeLogging() {\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        // Wraps Android's native log framework\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        Log.setLogNode(logWrapper);\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "},"logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "},"view":{"SlidingTabLayout.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.view;\n\n \n\nimport android.content.Context;\n\nimport android.graphics.Typeface;\n\nimport android.os.Build;\n\nimport android.support.v4.view.PagerAdapter;\n\nimport android.support.v4.view.ViewPager;\n\nimport android.util.AttributeSet;\n\nimport android.util.TypedValue;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.widget.HorizontalScrollView;\n\nimport android.widget.TextView;\n\n \n\n/**\n\n * To be used with ViewPager to provide a tab indicator component which give constant feedback as to\n\n * the user's scroll progress.\n\n * <p>\n\n * To use the component, simply add it to your view hierarchy. Then in your\n\n * {@link android.app.Activity} or {@link android.support.v4.app.Fragment} call\n\n * {@link #setViewPager(ViewPager)} providing it the ViewPager this layout is being used for.\n\n * <p>\n\n * The colors can be customized in two ways. The first and simplest is to provide an array of colors\n\n * via {@link #setSelectedIndicatorColors(int...)} and {@link #setDividerColors(int...)}. The\n\n * alternative is via the {@link TabColorizer} interface which provides you complete control over\n\n * which color is used for any individual position.\n\n * <p>\n\n * The views used as tabs can be customized by calling {@link #setCustomTabView(int, int)},\n\n * providing the layout ID of your custom layout.\n\n */\n\npublic class SlidingTabLayout extends HorizontalScrollView {\n\n \n\n    /**\n\n     * Allows complete control over the colors drawn in the tab layout. Set with\n\n     * {@link #setCustomTabColorizer(TabColorizer)}.\n\n     */\n\n    public interface TabColorizer {\n\n \n\n        /**\n\n         * @return return the color of the indicator used when {@code position} is selected.\n\n         */\n\n        int getIndicatorColor(int position);\n\n \n\n        /**\n\n         * @return return the color of the divider drawn to the right of {@code position}.\n\n         */\n\n        int getDividerColor(int position);\n\n \n\n    }\n\n \n\n    private static final int TITLE_OFFSET_DIPS = 24;\n\n    private static final int TAB_VIEW_PADDING_DIPS = 16;\n\n    private static final int TAB_VIEW_TEXT_SIZE_SP = 12;\n\n \n\n    private int mTitleOffset;\n\n \n\n    private int mTabViewLayoutId;\n\n    private int mTabViewTextViewId;\n\n \n\n    private ViewPager mViewPager;\n\n    private ViewPager.OnPageChangeListener mViewPagerPageChangeListener;\n\n \n\n    private final SlidingTabStrip mTabStrip;\n\n \n\n    public SlidingTabLayout(Context context) {\n\n        this(context, null);\n\n    }\n\n \n\n    public SlidingTabLayout(Context context, AttributeSet attrs) {\n\n        this(context, attrs, 0);\n\n    }\n\n \n\n    public SlidingTabLayout(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n \n\n        // Disable the Scroll Bar\n\n        setHorizontalScrollBarEnabled(false);\n\n        // Make sure that the Tab Strips fills this View\n\n        setFillViewport(true);\n\n \n\n        mTitleOffset = (int) (TITLE_OFFSET_DIPS * getResources().getDisplayMetrics().density);\n\n \n\n        mTabStrip = new SlidingTabStrip(context);\n\n        addView(mTabStrip, LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);\n\n    }\n\n \n\n    /**\n\n     * Set the custom {@link TabColorizer} to be used.\n\n     *\n\n     * If you only require simple custmisation then you can use\n\n     * {@link #setSelectedIndicatorColors(int...)} and {@link #setDividerColors(int...)} to achieve\n\n     * similar effects.\n\n     */\n\n    public void setCustomTabColorizer(TabColorizer tabColorizer) {\n\n        mTabStrip.setCustomTabColorizer(tabColorizer);\n\n    }\n\n \n\n    /**\n\n     * Sets the colors to be used for indicating the selected tab. These colors are treated as a\n\n     * circular array. Providing one color will mean that all tabs are indicated with the same color.\n\n     */\n\n    public void setSelectedIndicatorColors(int... colors) {\n\n        mTabStrip.setSelectedIndicatorColors(colors);\n\n    }\n\n \n\n    /**\n\n     * Sets the colors to be used for tab dividers. These colors are treated as a circular array.\n\n     * Providing one color will mean that all tabs are indicated with the same color.\n\n     */\n\n    public void setDividerColors(int... colors) {\n\n        mTabStrip.setDividerColors(colors);\n\n    }\n\n \n\n    /**\n\n     * Set the {@link ViewPager.OnPageChangeListener}. When using {@link SlidingTabLayout} you are\n\n     * required to set any {@link ViewPager.OnPageChangeListener} through this method. This is so\n\n     * that the layout can update it's scroll position correctly.\n\n     *\n\n     * @see ViewPager#setOnPageChangeListener(ViewPager.OnPageChangeListener)\n\n     */\n\n    public void setOnPageChangeListener(ViewPager.OnPageChangeListener listener) {\n\n        mViewPagerPageChangeListener = listener;\n\n    }\n\n \n\n    /**\n\n     * Set the custom layout to be inflated for the tab views.\n\n     *\n\n     * @param layoutResId Layout id to be inflated\n\n     * @param textViewId id of the {@link TextView} in the inflated view\n\n     */\n\n    public void setCustomTabView(int layoutResId, int textViewId) {\n\n        mTabViewLayoutId = layoutResId;\n\n        mTabViewTextViewId = textViewId;\n\n    }\n\n \n\n    /**\n\n     * Sets the associated view pager. Note that the assumption here is that the pager content\n\n     * (number of tabs and tab titles) does not change after this call has been made.\n\n     */\n\n    public void setViewPager(ViewPager viewPager) {\n\n        mTabStrip.removeAllViews();\n\n \n\n        mViewPager = viewPager;\n\n        if (viewPager != null) {\n\n            viewPager.setOnPageChangeListener(new InternalViewPagerListener());\n\n            populateTabStrip();\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Create a default view to be used for tabs. This is called if a custom tab view is not set via\n\n     * {@link #setCustomTabView(int, int)}.\n\n     */\n\n    protected TextView createDefaultTabView(Context context) {\n\n        TextView textView = new TextView(context);\n\n        textView.setGravity(Gravity.CENTER);\n\n        textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, TAB_VIEW_TEXT_SIZE_SP);\n\n        textView.setTypeface(Typeface.DEFAULT_BOLD);\n\n \n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {\n\n            // If we're running on Honeycomb or newer, then we can use the Theme's\n\n            // selectableItemBackground to ensure that the View has a pressed state\n\n            TypedValue outValue = new TypedValue();\n\n            getContext().getTheme().resolveAttribute(android.R.attr.selectableItemBackground,\n\n                    outValue, true);\n\n            textView.setBackgroundResource(outValue.resourceId);\n\n        }\n\n \n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {\n\n            // If we're running on ICS or newer, enable all-caps to match the Action Bar tab style\n\n            textView.setAllCaps(true);\n\n        }\n\n \n\n        int padding = (int) (TAB_VIEW_PADDING_DIPS * getResources().getDisplayMetrics().density);\n\n        textView.setPadding(padding, padding, padding, padding);\n\n \n\n        return textView;\n\n    }\n\n \n\n    private void populateTabStrip() {\n\n        final PagerAdapter adapter = mViewPager.getAdapter();\n\n        final View.OnClickListener tabClickListener = new TabClickListener();\n\n \n\n        for (int i = 0; i < adapter.getCount(); i++) {\n\n            View tabView = null;\n\n            TextView tabTitleView = null;\n\n \n\n            if (mTabViewLayoutId != 0) {\n\n                // If there is a custom tab view layout id set, try and inflate it\n\n                tabView = LayoutInflater.from(getContext()).inflate(mTabViewLayoutId, mTabStrip,\n\n                        false);\n\n                tabTitleView = (TextView) tabView.findViewById(mTabViewTextViewId);\n\n            }\n\n \n\n            if (tabView == null) {\n\n                tabView = createDefaultTabView(getContext());\n\n            }\n\n \n\n            if (tabTitleView == null && TextView.class.isInstance(tabView)) {\n\n                tabTitleView = (TextView) tabView;\n\n            }\n\n \n\n            tabTitleView.setText(adapter.getPageTitle(i));\n\n            tabView.setOnClickListener(tabClickListener);\n\n \n\n            mTabStrip.addView(tabView);\n\n        }\n\n    }\n\n \n\n    @Override\n\n    protected void onAttachedToWindow() {\n\n        super.onAttachedToWindow();\n\n \n\n        if (mViewPager != null) {\n\n            scrollToTab(mViewPager.getCurrentItem(), 0);\n\n        }\n\n    }\n\n \n\n    private void scrollToTab(int tabIndex, int positionOffset) {\n\n        final int tabStripChildCount = mTabStrip.getChildCount();\n\n        if (tabStripChildCount == 0 || tabIndex < 0 || tabIndex >= tabStripChildCount) {\n\n            return;\n\n        }\n\n \n\n        View selectedChild = mTabStrip.getChildAt(tabIndex);\n\n        if (selectedChild != null) {\n\n            int targetScrollX = selectedChild.getLeft() + positionOffset;\n\n \n\n            if (tabIndex > 0 || positionOffset > 0) {\n\n                // If we're not at the first child and are mid-scroll, make sure we obey the offset\n\n                targetScrollX -= mTitleOffset;\n\n            }\n\n \n\n            scrollTo(targetScrollX, 0);\n\n        }\n\n    }\n\n \n\n    private class InternalViewPagerListener implements ViewPager.OnPageChangeListener {\n\n        private int mScrollState;\n\n \n\n        @Override\n\n        public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\n\n            int tabStripChildCount = mTabStrip.getChildCount();\n\n            if ((tabStripChildCount == 0) || (position < 0) || (position >= tabStripChildCount)) {\n\n                return;\n\n            }\n\n \n\n            mTabStrip.onViewPagerPageChanged(position, positionOffset);\n\n \n\n            View selectedTitle = mTabStrip.getChildAt(position);\n\n            int extraOffset = (selectedTitle != null)\n\n                    ? (int) (positionOffset * selectedTitle.getWidth())\n\n                    : 0;\n\n            scrollToTab(position, extraOffset);\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageScrolled(position, positionOffset,\n\n                        positionOffsetPixels);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void onPageScrollStateChanged(int state) {\n\n            mScrollState = state;\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageScrollStateChanged(state);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void onPageSelected(int position) {\n\n            if (mScrollState == ViewPager.SCROLL_STATE_IDLE) {\n\n                mTabStrip.onViewPagerPageChanged(position, 0f);\n\n                scrollToTab(position, 0);\n\n            }\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageSelected(position);\n\n            }\n\n        }\n\n \n\n    }\n\n \n\n    private class TabClickListener implements View.OnClickListener {\n\n        @Override\n\n        public void onClick(View v) {\n\n            for (int i = 0; i < mTabStrip.getChildCount(); i++) {\n\n                if (v == mTabStrip.getChildAt(i)) {\n\n                    mViewPager.setCurrentItem(i);\n\n                    return;\n\n                }\n\n            }\n\n        }\n\n    }\n\n \n\n}\n  ","SlidingTabStrip.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.view;\n\n \n\nimport android.R;\n\nimport android.content.Context;\n\nimport android.graphics.Canvas;\n\nimport android.graphics.Color;\n\nimport android.graphics.Paint;\n\nimport android.util.AttributeSet;\n\nimport android.util.TypedValue;\n\nimport android.view.View;\n\nimport android.widget.LinearLayout;\n\n \n\nclass SlidingTabStrip extends LinearLayout {\n\n \n\n    private static final int DEFAULT_BOTTOM_BORDER_THICKNESS_DIPS = 2;\n\n    private static final byte DEFAULT_BOTTOM_BORDER_COLOR_ALPHA = 0x26;\n\n    private static final int SELECTED_INDICATOR_THICKNESS_DIPS = 8;\n\n    private static final int DEFAULT_SELECTED_INDICATOR_COLOR = 0xFF33B5E5;\n\n \n\n    private static final int DEFAULT_DIVIDER_THICKNESS_DIPS = 1;\n\n    private static final byte DEFAULT_DIVIDER_COLOR_ALPHA = 0x20;\n\n    private static final float DEFAULT_DIVIDER_HEIGHT = 0.5f;\n\n \n\n    private final int mBottomBorderThickness;\n\n    private final Paint mBottomBorderPaint;\n\n \n\n    private final int mSelectedIndicatorThickness;\n\n    private final Paint mSelectedIndicatorPaint;\n\n \n\n    private final int mDefaultBottomBorderColor;\n\n \n\n    private final Paint mDividerPaint;\n\n    private final float mDividerHeight;\n\n \n\n    private int mSelectedPosition;\n\n    private float mSelectionOffset;\n\n \n\n    private SlidingTabLayout.TabColorizer mCustomTabColorizer;\n\n    private final SimpleTabColorizer mDefaultTabColorizer;\n\n \n\n    SlidingTabStrip(Context context) {\n\n        this(context, null);\n\n    }\n\n \n\n    SlidingTabStrip(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n        setWillNotDraw(false);\n\n \n\n        final float density = getResources().getDisplayMetrics().density;\n\n \n\n        TypedValue outValue = new TypedValue();\n\n        context.getTheme().resolveAttribute(R.attr.colorForeground, outValue, true);\n\n        final int themeForegroundColor =  outValue.data;\n\n \n\n        mDefaultBottomBorderColor = setColorAlpha(themeForegroundColor,\n\n                DEFAULT_BOTTOM_BORDER_COLOR_ALPHA);\n\n \n\n        mDefaultTabColorizer = new SimpleTabColorizer();\n\n        mDefaultTabColorizer.setIndicatorColors(DEFAULT_SELECTED_INDICATOR_COLOR);\n\n        mDefaultTabColorizer.setDividerColors(setColorAlpha(themeForegroundColor,\n\n                DEFAULT_DIVIDER_COLOR_ALPHA));\n\n \n\n        mBottomBorderThickness = (int) (DEFAULT_BOTTOM_BORDER_THICKNESS_DIPS * density);\n\n        mBottomBorderPaint = new Paint();\n\n        mBottomBorderPaint.setColor(mDefaultBottomBorderColor);\n\n \n\n        mSelectedIndicatorThickness = (int) (SELECTED_INDICATOR_THICKNESS_DIPS * density);\n\n        mSelectedIndicatorPaint = new Paint();\n\n \n\n        mDividerHeight = DEFAULT_DIVIDER_HEIGHT;\n\n        mDividerPaint = new Paint();\n\n        mDividerPaint.setStrokeWidth((int) (DEFAULT_DIVIDER_THICKNESS_DIPS * density));\n\n    }\n\n \n\n    void setCustomTabColorizer(SlidingTabLayout.TabColorizer customTabColorizer) {\n\n        mCustomTabColorizer = customTabColorizer;\n\n        invalidate();\n\n    }\n\n \n\n    void setSelectedIndicatorColors(int... colors) {\n\n        // Make sure that the custom colorizer is removed\n\n        mCustomTabColorizer = null;\n\n        mDefaultTabColorizer.setIndicatorColors(colors);\n\n        invalidate();\n\n    }\n\n \n\n    void setDividerColors(int... colors) {\n\n        // Make sure that the custom colorizer is removed\n\n        mCustomTabColorizer = null;\n\n        mDefaultTabColorizer.setDividerColors(colors);\n\n        invalidate();\n\n    }\n\n \n\n    void onViewPagerPageChanged(int position, float positionOffset) {\n\n        mSelectedPosition = position;\n\n        mSelectionOffset = positionOffset;\n\n        invalidate();\n\n    }\n\n \n\n    @Override\n\n    protected void onDraw(Canvas canvas) {\n\n        final int height = getHeight();\n\n        final int childCount = getChildCount();\n\n        final int dividerHeightPx = (int) (Math.min(Math.max(0f, mDividerHeight), 1f) * height);\n\n        final SlidingTabLayout.TabColorizer tabColorizer = mCustomTabColorizer != null\n\n                ? mCustomTabColorizer\n\n                : mDefaultTabColorizer;\n\n \n\n        // Thick colored underline below the current selection\n\n        if (childCount > 0) {\n\n            View selectedTitle = getChildAt(mSelectedPosition);\n\n            int left = selectedTitle.getLeft();\n\n            int right = selectedTitle.getRight();\n\n            int color = tabColorizer.getIndicatorColor(mSelectedPosition);\n\n \n\n            if (mSelectionOffset > 0f && mSelectedPosition < (getChildCount() - 1)) {\n\n                int nextColor = tabColorizer.getIndicatorColor(mSelectedPosition + 1);\n\n                if (color != nextColor) {\n\n                    color = blendColors(nextColor, color, mSelectionOffset);\n\n                }\n\n \n\n                // Draw the selection partway between the tabs\n\n                View nextTitle = getChildAt(mSelectedPosition + 1);\n\n                left = (int) (mSelectionOffset * nextTitle.getLeft() +\n\n                        (1.0f - mSelectionOffset) * left);\n\n                right = (int) (mSelectionOffset * nextTitle.getRight() +\n\n                        (1.0f - mSelectionOffset) * right);\n\n            }\n\n \n\n            mSelectedIndicatorPaint.setColor(color);\n\n \n\n            canvas.drawRect(left, height - mSelectedIndicatorThickness, right,\n\n                    height, mSelectedIndicatorPaint);\n\n        }\n\n \n\n        // Thin underline along the entire bottom edge\n\n        canvas.drawRect(0, height - mBottomBorderThickness, getWidth(), height, mBottomBorderPaint);\n\n \n\n        // Vertical separators between the titles\n\n        int separatorTop = (height - dividerHeightPx) / 2;\n\n        for (int i = 0; i < childCount - 1; i++) {\n\n            View child = getChildAt(i);\n\n            mDividerPaint.setColor(tabColorizer.getDividerColor(i));\n\n            canvas.drawLine(child.getRight(), separatorTop, child.getRight(),\n\n                    separatorTop + dividerHeightPx, mDividerPaint);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Set the alpha value of the {@code color} to be the given {@code alpha} value.\n\n     */\n\n    private static int setColorAlpha(int color, byte alpha) {\n\n        return Color.argb(alpha, Color.red(color), Color.green(color), Color.blue(color));\n\n    }\n\n \n\n    /**\n\n     * Blend {@code color1} and {@code color2} using the given ratio.\n\n     *\n\n     * @param ratio of which to blend. 1.0 will return {@code color1}, 0.5 will give an even blend,\n\n     *              0.0 will return {@code color2}.\n\n     */\n\n    private static int blendColors(int color1, int color2, float ratio) {\n\n        final float inverseRation = 1f - ratio;\n\n        float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRation);\n\n        float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRation);\n\n        float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRation);\n\n        return Color.rgb((int) r, (int) g, (int) b);\n\n    }\n\n \n\n    private static class SimpleTabColorizer implements SlidingTabLayout.TabColorizer {\n\n        private int[] mIndicatorColors;\n\n        private int[] mDividerColors;\n\n \n\n        @Override\n\n        public final int getIndicatorColor(int position) {\n\n            return mIndicatorColors[position % mIndicatorColors.length];\n\n        }\n\n \n\n        @Override\n\n        public final int getDividerColor(int position) {\n\n            return mDividerColors[position % mDividerColors.length];\n\n        }\n\n \n\n        void setIndicatorColors(int... colors) {\n\n            mIndicatorColors = colors;\n\n        }\n\n \n\n        void setDividerColors(int... colors) {\n\n            mDividerColors = colors;\n\n        }\n\n    }\n\n}\n  "}}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.basictransition\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk android:minSdkVersion=\"19\" android:targetSdkVersion=\"19\" />\n\n \n\n    <application\n\n        android:allowBackup=\"true\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:label=\"@string/app_name\"\n\n        android:theme=\"@style/AppTheme\" >\n\n        <activity\n\n            android:name=\".MainActivity\"\n\n            android:label=\"@string/app_name\" >\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n \n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n</manifest>\n  "},"BorderlessButtons":{"res":{"drawable-hdpi":{"ic_action_delete.png":"http://developer.android.com/samples/BorderlessButtons/res/drawable-hdpi/ic_action_delete.png","ic_launcher.png":"http://developer.android.com/samples/BorderlessButtons/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com/samples/BorderlessButtons/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_action_delete.png":"http://developer.android.com/samples/BorderlessButtons/res/drawable-mdpi/ic_action_delete.png","ic_launcher.png":"http://developer.android.com/samples/BorderlessButtons/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_action_delete.png":"http://developer.android.com/samples/BorderlessButtons/res/drawable-xhdpi/ic_action_delete.png","ic_launcher.png":"http://developer.android.com/samples/BorderlessButtons/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com/samples/BorderlessButtons/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleMessageTile\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n            android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n            android:text=\"@string/intro_message\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n  ","list_item.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<!--\n\n    For list items that contain secondary actions (in this case, 'delete'),\n\n    it's important to use dividers to distinguish the primary touch target from\n\n    the secondary action. This is done using android:showDividers and its\n\n    related attributes.\n\n \n\n    The android:dividerPadding attribute insets the divider line by the given\n\n    amount on each side (in this case, top and bottom). Divider padding helps\n\n    establish visual hierarchy when several dividers are used in a screen. In\n\n    this case, the padding helps separate this vertical divider from horizontal\n\n    list item separators in the main ListView, and establishes a stronger\n\n    relationship between the delete action and the primary target to its left.\n\n-->\n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:orientation=\"horizontal\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"wrap_content\"\n\n    android:minHeight=\"?android:listPreferredItemHeight\"\n\n    android:divider=\"?android:dividerVertical\"\n\n    android:dividerPadding=\"8dp\"\n\n    android:showDividers=\"middle\">\n\n \n\n    <!--\n\n        Any view or view group can become interactive by simply setting the\n\n        android:clickable and android:focusable attributes to true.\n\n \n\n        When doing this, make sure to provide adequate touch feedback by also\n\n        setting the view background to ?android:selectableItemBackground. When\n\n        using the Holo theme, this drawable is transparent by default, but\n\n        changes to a translucent color overlay when the view is pressed or\n\n        focused.\n\n    -->\n\n    <LinearLayout android:id=\"@+id/primary_target\"\n\n        android:layout_width=\"0dp\"\n\n        android:layout_height=\"match_parent\"\n\n        android:layout_weight=\"1\"\n\n        android:orientation=\"vertical\"\n\n        android:paddingLeft=\"?android:listPreferredItemPaddingLeft\"\n\n        android:paddingRight=\"?android:listPreferredItemPaddingRight\"\n\n        android:clickable=\"true\"\n\n        android:focusable=\"true\"\n\n        android:gravity=\"center_vertical\"\n\n        android:background=\"?android:selectableItemBackground\">\n\n \n\n        <TextView style=\"?android:textAppearanceListItemSmall\"\n\n            android:id=\"@android:id/text1\"\n\n            android:layout_width=\"wrap_content\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:text=\"@string/dummy_title\" />\n\n \n\n        <TextView style=\"?android:textAppearanceSmall\"\n\n            android:id=\"@android:id/text2\"\n\n            android:layout_width=\"wrap_content\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:text=\"@string/dummy_subtitle\" />\n\n \n\n    </LinearLayout>\n\n \n\n    <!--\n\n        When using the Holo theme, setting a Button or ImageButton to\n\n        ?android:borderlessButtonStyle removes its border and sets the\n\n        background to ?android:selectableItemBackground, as described above.\n\n    -->\n\n    <ImageButton android:id=\"@+id/secondary_action\"\n\n        style=\"?android:borderlessButtonStyle\"\n\n        android:layout_width=\"@dimen/standard_touch_target_size\"\n\n        android:layout_height=\"match_parent\"\n\n        android:src=\"@drawable/ic_action_delete\"\n\n        android:contentDescription=\"@string/delete_content_description\" />\n\n \n\n</LinearLayout>\n  ","sample_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<!--\n\n    The top-level LinearLayout uses a horizontal divider to visually\n\n    distinguish the top description box, list, and bottom button bar.\n\n \n\n    android:showDividers=\"middle\" draws dividers between each child view and\n\n    android:divider=\"?android:dividerHorizontal\" indicates that the standard\n\n    horizontal system divider (set in the activity's theme) should be used to\n\n    draw the divider.\n\n-->\n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:orientation=\"vertical\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:divider=\"?android:dividerHorizontal\"\n\n    android:showDividers=\"middle\">\n\n \n\n    <TextView style=\"@style/Widget.DescriptionBar\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:text=\"@string/intro_message\" />\n\n \n\n    <!--\n\n        Remember to use padding on your ListViews to adhere to the standard\n\n        metrics described in the Android Design guidelines. When doing so,\n\n        you should set the android:scrollbarStyle such that the scrollbar\n\n        doesn'isn't inset.\n\n    -->\n\n    <ListView android:id=\"@android:id/list\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"0dp\"\n\n        android:layout_weight=\"1\"\n\n        android:paddingLeft=\"@dimen/page_margin\"\n\n        android:paddingRight=\"@dimen/page_margin\"\n\n        android:scrollbarStyle=\"outsideOverlay\" />\n\n \n\n    <!--\n\n        When using the Holo theme (setting your activity or app theme to\n\n        Theme.Holo or one of its descendants), a LinearLayout with the\n\n        ?android:buttonBarStyle will draw dividers (with padding) between\n\n        buttons.\n\n    -->\n\n    <LinearLayout style=\"?android:buttonBarStyle\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:orientation=\"horizontal\">\n\n \n\n        <!--\n\n            Make sure to apply the ?android:buttonBarStyle to each button\n\n            in the button bar.\n\n \n\n            In the Holo theme, this style is very similar to\n\n            ?android:borderlessButtonStyle, but designed for use specifically\n\n            in horizontal button bars.\n\n        -->\n\n        <Button style=\"?android:buttonBarButtonStyle\"\n\n            android:id=\"@+id/cancel_button\"\n\n            android:layout_width=\"0dp\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_weight=\"1\"\n\n            android:text=\"@string/cancel\" />\n\n \n\n        <Button style=\"?android:buttonBarButtonStyle\"\n\n            android:id=\"@+id/ok_button\"\n\n            android:layout_width=\"0dp\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_weight=\"1\"\n\n            android:text=\"@string/ok\" />\n\n \n\n    </LinearLayout>\n\n \n\n</LinearLayout>\n  "},"menu":{"main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item\n\n        android:id=\"@+id/docs_link\"\n\n        android:title=\"@string/docs_link_title\"\n\n        android:showAsAction=\"never\" />\n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">BorderlessButtons</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n                This sample demonstrates the use of borderless buttons, bottom button bars\n\n                (OK and Cancel) and dividers to establish visual structure.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <dimen name=\"standard_touch_target_size\">48dp</dimen>\n\n \n\n    <!-- Meta-dimension that switches on screen size -->\n\n \n\n    <dimen name=\"page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","strings.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n    <string name=\"cancel\">Cancel</string>\n\n    <string name=\"ok\">OK</string>\n\n \n\n    <string name=\"dummy_title\">Dummy title</string>\n\n    <string name=\"dummy_subtitle\">Dummy subtitle</string>\n\n \n\n    <string name=\"delete_content_description\">Delete</string>\n\n \n\n    <string name=\"touched_primary_message\">Touched primary list item target.</string>\n\n    <string name=\"touched_secondary_message\">Touched secondary list item target (delete).</string>\n\n \n\n    <string name=\"docs_link_title\">Design docs: borderless buttons</string>\n\n</resources>\n  ","styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget.DescriptionBar\">\n\n        <item name=\"android:background\">#fb3</item>\n\n        <item name=\"android:paddingTop\">@dimen/margin_medium</item>\n\n        <item name=\"android:paddingBottom\">@dimen/margin_medium</item>\n\n        <item name=\"android:paddingLeft\">@dimen/page_margin</item>\n\n        <item name=\"android:paddingRight\">@dimen/page_margin</item>\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.borderlessbuttons":{"MainActivity.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.borderlessbuttons;\n\n \n\nimport android.app.ListActivity;\n\nimport android.content.ActivityNotFoundException;\n\nimport android.content.Intent;\n\nimport android.net.Uri;\n\nimport android.os.Bundle;\n\nimport android.view.Menu;\n\nimport android.view.MenuItem;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.BaseAdapter;\n\nimport android.widget.Toast;\n\n \n\n/**\n\n * This activity demonstrates the <b>borderless button</b> styling from the Holo visual language.\n\n * The most interesting bits in this sample are in the layout files (res/layout/).\n\n * <p>\n\n * See <a href=\"http://developer.android.com/design/building-blocks/buttons.html#borderless\">\n\n * borderless buttons</a> at the Android Design guide for a discussion of this visual style.\n\n */\n\npublic class MainActivity extends ListActivity {\n\n    private static final Uri DOCS_URI = Uri.parse(\n\n            \"http://developer.android.com/design/building-blocks/buttons.html#borderless\");\n\n \n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.sample_main);\n\n \n\n        setListAdapter(mListAdapter);\n\n \n\n        findViewById(R.id.cancel_button).setOnClickListener(new View.OnClickListener() {\n\n            @Override\n\n            public void onClick(View view) {\n\n                finish();\n\n            }\n\n        });\n\n \n\n        findViewById(R.id.ok_button).setOnClickListener(new View.OnClickListener() {\n\n            @Override\n\n            public void onClick(View view) {\n\n                finish();\n\n            }\n\n        });\n\n    }\n\n \n\n    private BaseAdapter mListAdapter = new BaseAdapter() {\n\n        @Override\n\n        public int getCount() {\n\n            return 10;\n\n        }\n\n \n\n        @Override\n\n        public Object getItem(int position) {\n\n            return null;\n\n        }\n\n \n\n        @Override\n\n        public long getItemId(int position) {\n\n            return position + 1;\n\n        }\n\n \n\n        @Override\n\n        public View getView(int position, View convertView, ViewGroup container) {\n\n            if (convertView == null) {\n\n                convertView = getLayoutInflater().inflate(R.layout.list_item, container, false);\n\n            }\n\n \n\n            // Because the list item contains multiple touch targets, you should not override\n\n            // onListItemClick. Instead, set a click listener for each target individually.\n\n \n\n            convertView.findViewById(R.id.primary_target).setOnClickListener(\n\n                    new View.OnClickListener() {\n\n                        @Override\n\n                        public void onClick(View view) {\n\n                            Toast.makeText(MainActivity.this,\n\n                                    R.string.touched_primary_message,\n\n                                    Toast.LENGTH_SHORT).show();\n\n                        }\n\n                    });\n\n \n\n            convertView.findViewById(R.id.secondary_action).setOnClickListener(\n\n                    new View.OnClickListener() {\n\n                        @Override\n\n                        public void onClick(View view) {\n\n                            Toast.makeText(MainActivity.this,\n\n                                    R.string.touched_secondary_message,\n\n                                    Toast.LENGTH_SHORT).show();\n\n                        }\n\n                    });\n\n            return convertView;\n\n        }\n\n    };\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        super.onCreateOptionsMenu(menu);\n\n        getMenuInflater().inflate(R.menu.main, menu);\n\n        return true;\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch (item.getItemId()) {\n\n            case R.id.docs_link:\n\n                try {\n\n                    startActivity(new Intent(Intent.ACTION_VIEW, DOCS_URI));\n\n                } catch (ActivityNotFoundException ignored) {\n\n                }\n\n                return true;\n\n        }\n\n        return super.onOptionsItemSelected(item);\n\n    }\n\n}\n  "},"com.example.android.common.logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.borderlessbuttons\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <!--\n\n      This sample requires API 11 for use of theme attributes such as ?android:buttonBarStyle\n\n      and ?android:borderlessButtonStyle, as well as LinearLayout's android:showDividers attribute.\n\n      A similar effect can be achieved by setting a clickable view's background to\n\n      ?android:selectableItemBackground.\n\n \n\n      This sample requires API 14 for use of theme attributes such as\n\n      ?android:listPreferredItemPaddingLeft.\n\n    -->\n\n    <uses-sdk android:minSdkVersion=\"14\" android:targetSdkVersion=\"17\" />\n\n \n\n    <application android:label=\"@string/app_name\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:theme=\"@style/Theme.Sample\"\n\n        android:allowBackup=\"true\">\n\n \n\n        <activity android:name=\".MainActivity\"\n\n            android:label=\"@string/app_name\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n \n\n    </application>\n\n \n\n</manifest>\n  "},"CustomChoiceList":{"res":{"color":{"hideable_text_color.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<!--\n\n    This color state list changes from gray to blue depending on its state (checked or not checked).\n\n-->\n\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:state_checked=\"false\" android:color=\"#6000\" />\n\n    <item android:color=\"#09c\" />\n\n</selector>\n  "},"drawable":{"ic_hideable_item.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n   \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n   \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n   \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<!--\n\n    This state list drawable changes from an outline of an eye (ic_hideable_item_unchecked) to a\n\n    blue eye with iris (ic_hideable_item_checked) depending on its state (checked or not checked).\n\n-->\n\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:state_checked=\"false\" android:drawable=\"@drawable/ic_hideable_item_unchecked\" />\n\n    <item android:drawable=\"@drawable/ic_hideable_item_checked\" />\n\n</selector>\n  "},"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com/samples/CustomChoiceList/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com/samples/CustomChoiceList/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com/samples/CustomChoiceList/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_hideable_item_checked.png":"http://developer.android.com/samples/CustomChoiceList/res/drawable-xhdpi/ic_hideable_item_checked.png","ic_hideable_item_unchecked.png":"http://developer.android.com/samples/CustomChoiceList/res/drawable-xhdpi/ic_hideable_item_unchecked.png","ic_launcher.png":"http://developer.android.com/samples/CustomChoiceList/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com/samples/CustomChoiceList/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleMessageTile\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n            android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n            android:text=\"@string/intro_message\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n  ","list_item.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<!--\n\n    The ListView from sample_main.xml has a choiceMode set, meaning that when a user\n\n    selects a list item, the ListView will set the state for that item's root view\n\n    (this CheckableLinearLayout) to \"checked\". Note that this requires that the root view\n\n    implements the Checkable interface. Once the root view is checked, any children that\n\n    have the duplicateParentState attribute set will inherit this \"checked\" state.\n\n-->\n\n<com.example.android.customchoicelist.CheckableLinearLayout\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:orientation=\"horizontal\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:paddingLeft=\"8dp\"\n\n    android:paddingRight=\"8dp\"\n\n    android:minHeight=\"?android:listPreferredItemHeight\"\n\n    android:gravity=\"center_vertical\">\n\n \n\n    <!--\n\n        The duplicateParentState attribute on this TextView, along with the color state list\n\n        used in the textColor attribute causes its text color to change when its parent\n\n        is checked or unchecked.\n\n    -->\n\n    <TextView android:id=\"@android:id/text1\"\n\n        android:duplicateParentState=\"true\"\n\n        android:layout_width=\"0dp\"\n\n        android:layout_weight=\"1\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:textAppearance=\"?android:textAppearanceMedium\"\n\n        android:textColor=\"@color/hideable_text_color\" />\n\n \n\n    <!--\n\n        The duplicateParentState attribute on this ImageView, along with the state list\n\n        drawable in the src attribute causes its image to change when its parent\n\n        is checked or unchecked.\n\n \n\n        To use the standard radio or checkmark image, set the src to\n\n        ?android:listChoiceIndicatorMultiple or ?android:listChoiceIndicatorSingle. These\n\n        are system theme attributes that reference a state list drawable.\n\n    -->\n\n    <ImageView android:src=\"@drawable/ic_hideable_item\"\n\n        android:duplicateParentState=\"true\"\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:layout_marginLeft=\"16dp\" />\n\n \n\n</com.example.android.customchoicelist.CheckableLinearLayout>\n  ","sample_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\"\n\n    android:showDividers=\"middle\"\n\n    android:divider=\"?android:dividerHorizontal\">\n\n \n\n    <TextView style=\"@style/Widget.DescriptionBar\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:text=\"@string/intro_message\" />\n\n \n\n    <!--\n\n        When a ListView has a choiceMode set, it will allow users to \"choose\"\n\n        one or more items. The framework provides default list item layouts\n\n        that show standard radio buttons or check boxes next to a\n\n        single line of text:\n\n \n\n        android.R.layout.simple_list_item_single_choice and\n\n        android.R.layout.simple_list_item_multiple_choice.\n\n \n\n        In some cases, you may want to customize this layout. When doing so,\n\n        the root view must implement the Checkable interface.\n\n \n\n        Lastly, remember to use padding on your ListViews to adhere to the standard\n\n        metrics described in the Android Design guidelines. When doing so,\n\n        you should set the android:scrollbarStyle such that the scrollbar\n\n        doesn'isn't inset.\n\n    -->\n\n    <ListView android:id=\"@android:id/list\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"0dp\"\n\n        android:layout_weight=\"1\"\n\n        android:paddingLeft=\"@dimen/page_margin\"\n\n        android:paddingRight=\"@dimen/page_margin\"\n\n        android:scrollbarStyle=\"outsideOverlay\"\n\n        android:choiceMode=\"multipleChoice\" />\n\n</LinearLayout>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">CustomChoiceList</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n                This sample demonstrates how to create custom checkable layouts, for use with ListView\\'s choiceMode\n\n                attribute.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Meta-dimension that switches on screen size -->\n\n \n\n    <dimen name=\"page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n    <style name=\"Widget.DescriptionBar\">\n\n        <item name=\"android:background\">#fb3</item>\n\n        <item name=\"android:paddingTop\">@dimen/margin_medium</item>\n\n        <item name=\"android:paddingBottom\">@dimen/margin_medium</item>\n\n        <item name=\"android:paddingLeft\">@dimen/page_margin</item>\n\n        <item name=\"android:paddingRight\">@dimen/page_margin</item>\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.common.logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "},"com.example.android.customchoicelist":{"CheckableLinearLayout.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.customchoicelist;\n\n \n\nimport android.content.Context;\n\nimport android.util.AttributeSet;\n\nimport android.util.Log;\n\nimport android.view.View;\n\nimport android.widget.Checkable;\n\nimport android.widget.LinearLayout;\n\n \n\n/**\n\n * This is a simple wrapper for {@link android.widget.LinearLayout} that implements the {@link android.widget.Checkable}\n\n * interface by keeping an internal 'checked' state flag.\n\n * <p>\n\n * This can be used as the root view for a custom list item layout for\n\n * {@link android.widget.AbsListView} elements with a\n\n * {@link android.widget.AbsListView#setChoiceMode(int) choiceMode} set.\n\n */\n\npublic class CheckableLinearLayout extends LinearLayout implements Checkable {\n\n    private static final int[] CHECKED_STATE_SET = {android.R.attr.state_checked};\n\n \n\n    private boolean mChecked = false;\n\n \n\n    public CheckableLinearLayout(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public boolean isChecked() {\n\n        return mChecked;\n\n    }\n\n \n\n    public void setChecked(boolean b) {\n\n        if (b != mChecked) {\n\n            mChecked = b;\n\n            refreshDrawableState();\n\n        }\n\n    }\n\n \n\n    public void toggle() {\n\n        setChecked(!mChecked);\n\n    }\n\n \n\n    @Override\n\n    public int[] onCreateDrawableState(int extraSpace) {\n\n        final int[] drawableState = super.onCreateDrawableState(extraSpace + 1);\n\n        if (isChecked()) {\n\n            mergeDrawableStates(drawableState, CHECKED_STATE_SET);\n\n        }\n\n        return drawableState;\n\n    }\n\n}\n  ","Cheeses.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.customchoicelist;\n\n \n\n/**\n\n * Dummy data.\n\n */\n\npublic class Cheeses {\n\n    public static final String[] CHEESES = {\n\n            \"Abbaye de Belloc\", \"Abbaye du Mont des Cats\", \"Abertam\", \"Abondance\", \"Ackawi\",\n\n            \"Acorn\", \"Adelost\", \"Affidelice au Chablis\", \"Afuega'l Pitu\", \"Airag\", \"Airedale\",\n\n            \"Aisy Cendre\", \"Allgauer Emmentaler\", \"Alverca\", \"Ambert\", \"American Cheese\",\n\n            \"Ami du Chambertin\", \"Anejo Enchilado\", \"Anneau du Vic-Bilh\", \"Anthoriro\", \"Appenzell\",\n\n            \"Aragon\", \"Ardi Gasna\", \"Ardrahan\", \"Armenian String\", \"Aromes au Gene de Marc\",\n\n            \"Asadero\", \"Asiago\", \"Aubisque Pyrenees\", \"Autun\", \"Avaxtskyr\", \"Baby Swiss\",\n\n            \"Babybel\", \"Baguette Laonnaise\", \"Bakers\", \"Baladi\", \"Balaton\", \"Bandal\", \"Banon\",\n\n            \"Barry's Bay Cheddar\", \"Basing\", \"Basket Cheese\", \"Bath Cheese\", \"Bavarian Bergkase\",\n\n            \"Baylough\", \"Beaufort\", \"Beauvoorde\", \"Beenleigh Blue\", \"Beer Cheese\", \"Bel Paese\",\n\n            \"Bergader\", \"Bergere Bleue\", \"Berkswell\", \"Beyaz Peynir\", \"Bierkase\", \"Bishop Kennedy\",\n\n            \"Blarney\", \"Bleu d'Auvergne\", \"Bleu de Gex\", \"Bleu de Laqueuille\",\n\n            \"Bleu de Septmoncel\", \"Bleu Des Causses\", \"Blue\", \"Blue Castello\", \"Blue Rathgore\",\n\n            \"Blue Vein (Australian)\", \"Blue Vein Cheeses\", \"Bocconcini\", \"Bocconcini (Australian)\",\n\n            \"Boeren Leidenkaas\", \"Bonchester\", \"Bosworth\", \"Bougon\", \"Boule Du Roves\",\n\n            \"Boulette d'Avesnes\", \"Boursault\", \"Boursin\", \"Bouyssou\", \"Bra\", \"Braudostur\",\n\n            \"Breakfast Cheese\", \"Brebis du Lavort\", \"Brebis du Lochois\", \"Brebis du Puyfaucon\",\n\n            \"Bresse Bleu\", \"Brick\", \"Brie\", \"Brie de Meaux\", \"Brie de Melun\", \"Brillat-Savarin\",\n\n            \"Brin\", \"Brin d' Amour\", \"Brin d'Amour\", \"Brinza (Burduf Brinza)\",\n\n            \"Briquette de Brebis\", \"Briquette du Forez\", \"Broccio\", \"Broccio Demi-Affine\",\n\n            \"Brousse du Rove\", \"Bruder Basil\", \"Brusselae Kaas (Fromage de Bruxelles)\", \"Bryndza\",\n\n            \"Buchette d'Anjou\", \"Buffalo\", \"Burgos\", \"Butte\", \"Butterkase\", \"Button (Innes)\",\n\n            \"Buxton Blue\", \"Cabecou\", \"Caboc\", \"Cabrales\", \"Cachaille\", \"Caciocavallo\", \"Caciotta\",\n\n            \"Caerphilly\", \"Cairnsmore\", \"Calenzana\", \"Cambazola\", \"Camembert de Normandie\",\n\n            \"Canadian Cheddar\", \"Canestrato\", \"Cantal\", \"Caprice des Dieux\", \"Capricorn Goat\",\n\n            \"Capriole Banon\", \"Carre de l'Est\", \"Casciotta di Urbino\", \"Cashel Blue\", \"Castellano\",\n\n            \"Castelleno\", \"Castelmagno\", \"Castelo Branco\", \"Castigliano\", \"Cathelain\",\n\n            \"Celtic Promise\", \"Cendre d'Olivet\", \"Cerney\", \"Chabichou\", \"Chabichou du Poitou\",\n\n            \"Chabis de Gatine\", \"Chaource\", \"Charolais\", \"Chaumes\", \"Cheddar\",\n\n            \"Cheddar Clothbound\", \"Cheshire\", \"Chevres\", \"Chevrotin des Aravis\", \"Chontaleno\",\n\n            \"Civray\", \"Coeur de Camembert au Calvados\", \"Coeur de Chevre\", \"Colby\", \"Cold Pack\",\n\n            \"Comte\", \"Coolea\", \"Cooleney\", \"Coquetdale\", \"Corleggy\", \"Cornish Pepper\",\n\n            \"Cotherstone\", \"Cotija\", \"Cottage Cheese\", \"Cottage Cheese (Australian)\",\n\n            \"Cougar Gold\", \"Coulommiers\", \"Coverdale\", \"Crayeux de Roncq\", \"Cream Cheese\",\n\n            \"Cream Havarti\", \"Crema Agria\", \"Crema Mexicana\", \"Creme Fraiche\", \"Crescenza\",\n\n            \"Croghan\", \"Crottin de Chavignol\", \"Crottin du Chavignol\", \"Crowdie\", \"Crowley\",\n\n            \"Cuajada\", \"Curd\", \"Cure Nantais\", \"Curworthy\", \"Cwmtawe Pecorino\",\n\n            \"Cypress Grove Chevre\", \"Danablu (Danish Blue)\", \"Danbo\", \"Danish Fontina\",\n\n            \"Daralagjazsky\", \"Dauphin\", \"Delice des Fiouves\", \"Denhany Dorset Drum\", \"Derby\",\n\n            \"Dessertnyj Belyj\", \"Devon Blue\", \"Devon Garland\", \"Dolcelatte\", \"Doolin\",\n\n            \"Doppelrhamstufel\", \"Dorset Blue Vinney\", \"Double Gloucester\", \"Double Worcester\",\n\n            \"Dreux a la Feuille\", \"Dry Jack\", \"Duddleswell\", \"Dunbarra\", \"Dunlop\", \"Dunsyre Blue\",\n\n            \"Duroblando\", \"Durrus\", \"Dutch Mimolette (Commissiekaas)\", \"Edam\", \"Edelpilz\",\n\n            \"Emental Grand Cru\", \"Emlett\", \"Emmental\", \"Epoisses de Bourgogne\", \"Esbareich\",\n\n            \"Esrom\", \"Etorki\", \"Evansdale Farmhouse Brie\", \"Evora De L'Alentejo\", \"Exmoor Blue\",\n\n            \"Explorateur\", \"Feta\", \"Feta (Australian)\", \"Figue\", \"Filetta\", \"Fin-de-Siecle\",\n\n            \"Finlandia Swiss\", \"Finn\", \"Fiore Sardo\", \"Fleur du Maquis\", \"Flor de Guia\",\n\n            \"Flower Marie\", \"Folded\", \"Folded cheese with mint\", \"Fondant de Brebis\",\n\n            \"Fontainebleau\", \"Fontal\", \"Fontina Val d'Aosta\", \"Formaggio di capra\", \"Fougerus\",\n\n            \"Four Herb Gouda\", \"Fourme d' Ambert\", \"Fourme de Haute Loire\", \"Fourme de Montbrison\",\n\n            \"Fresh Jack\", \"Fresh Mozzarella\", \"Fresh Ricotta\", \"Fresh Truffles\", \"Fribourgeois\",\n\n            \"Friesekaas\", \"Friesian\", \"Friesla\", \"Frinault\", \"Fromage a Raclette\", \"Fromage Corse\",\n\n            \"Fromage de Montagne de Savoie\", \"Fromage Frais\", \"Fruit Cream Cheese\",\n\n            \"Frying Cheese\", \"Fynbo\", \"Gabriel\", \"Galette du Paludier\", \"Galette Lyonnaise\",\n\n            \"Galloway Goat's Milk Gems\", \"Gammelost\", \"Gaperon a l'Ail\", \"Garrotxa\", \"Gastanberra\",\n\n            \"Geitost\", \"Gippsland Blue\", \"Gjetost\", \"Gloucester\", \"Golden Cross\", \"Gorgonzola\",\n\n            \"Gornyaltajski\", \"Gospel Green\", \"Gouda\", \"Goutu\", \"Gowrie\", \"Grabetto\", \"Graddost\",\n\n            \"Grafton Village Cheddar\", \"Grana\", \"Grana Padano\", \"Grand Vatel\",\n\n            \"Grataron d' Areches\", \"Gratte-Paille\", \"Graviera\", \"Greuilh\", \"Greve\",\n\n            \"Gris de Lille\", \"Gruyere\", \"Gubbeen\", \"Guerbigny\", \"Halloumi\",\n\n            \"Halloumy (Australian)\", \"Haloumi-Style Cheese\", \"Harbourne Blue\", \"Havarti\",\n\n            \"Heidi Gruyere\", \"Hereford Hop\", \"Herrgardsost\", \"Herriot Farmhouse\", \"Herve\",\n\n            \"Hipi Iti\", \"Hubbardston Blue Cow\", \"Hushallsost\", \"Iberico\", \"Idaho Goatster\",\n\n            \"Idiazabal\", \"Il Boschetto al Tartufo\", \"Ile d'Yeu\", \"Isle of Mull\", \"Jarlsberg\",\n\n            \"Jermi Tortes\", \"Jibneh Arabieh\", \"Jindi Brie\", \"Jubilee Blue\", \"Juustoleipa\",\n\n            \"Kadchgall\", \"Kaseri\", \"Kashta\", \"Kefalotyri\", \"Kenafa\", \"Kernhem\", \"Kervella Affine\",\n\n            \"Kikorangi\", \"King Island Cape Wickham Brie\", \"King River Gold\", \"Klosterkaese\",\n\n            \"Knockalara\", \"Kugelkase\", \"L'Aveyronnais\", \"L'Ecir de l'Aubrac\", \"La Taupiniere\",\n\n            \"La Vache Qui Rit\", \"Laguiole\", \"Lairobell\", \"Lajta\", \"Lanark Blue\", \"Lancashire\",\n\n            \"Langres\", \"Lappi\", \"Laruns\", \"Lavistown\", \"Le Brin\", \"Le Fium Orbo\", \"Le Lacandou\",\n\n            \"Le Roule\", \"Leafield\", \"Lebbene\", \"Leerdammer\", \"Leicester\", \"Leyden\", \"Limburger\",\n\n            \"Lincolnshire Poacher\", \"Lingot Saint Bousquet d'Orb\", \"Liptauer\", \"Little Rydings\",\n\n            \"Livarot\", \"Llanboidy\", \"Llanglofan Farmhouse\", \"Loch Arthur Farmhouse\",\n\n            \"Loddiswell Avondale\", \"Longhorn\", \"Lou Palou\", \"Lou Pevre\", \"Lyonnais\", \"Maasdam\",\n\n            \"Macconais\", \"Mahoe Aged Gouda\", \"Mahon\", \"Malvern\", \"Mamirolle\", \"Manchego\",\n\n            \"Manouri\", \"Manur\", \"Marble Cheddar\", \"Marbled Cheeses\", \"Maredsous\", \"Margotin\",\n\n            \"Maribo\", \"Maroilles\", \"Mascares\", \"Mascarpone\", \"Mascarpone (Australian)\",\n\n            \"Mascarpone Torta\", \"Matocq\", \"Maytag Blue\", \"Meira\", \"Menallack Farmhouse\",\n\n            \"Menonita\", \"Meredith Blue\", \"Mesost\", \"Metton (Cancoillotte)\", \"Meyer Vintage Gouda\",\n\n            \"Mihalic Peynir\", \"Milleens\", \"Mimolette\", \"Mine-Gabhar\", \"Mini Baby Bells\", \"Mixte\",\n\n            \"Molbo\", \"Monastery Cheeses\", \"Mondseer\", \"Mont D'or Lyonnais\", \"Montasio\",\n\n            \"Monterey Jack\", \"Monterey Jack Dry\", \"Morbier\", \"Morbier Cru de Montagne\",\n\n            \"Mothais a la Feuille\", \"Mozzarella\", \"Mozzarella (Australian)\",\n\n            \"Mozzarella di Bufala\", \"Mozzarella Fresh, in water\", \"Mozzarella Rolls\", \"Munster\",\n\n            \"Murol\", \"Mycella\", \"Myzithra\", \"Naboulsi\", \"Nantais\", \"Neufchatel\",\n\n            \"Neufchatel (Australian)\", \"Niolo\", \"Nokkelost\", \"Northumberland\", \"Oaxaca\",\n\n            \"Olde York\", \"Olivet au Foin\", \"Olivet Bleu\", \"Olivet Cendre\",\n\n            \"Orkney Extra Mature Cheddar\", \"Orla\", \"Oschtjepka\", \"Ossau Fermier\", \"Ossau-Iraty\",\n\n            \"Oszczypek\", \"Oxford Blue\", \"P'tit Berrichon\", \"Palet de Babligny\", \"Paneer\", \"Panela\",\n\n            \"Pannerone\", \"Pant ys Gawn\", \"Parmesan (Parmigiano)\", \"Parmigiano Reggiano\",\n\n            \"Pas de l'Escalette\", \"Passendale\", \"Pasteurized Processed\", \"Pate de Fromage\",\n\n            \"Patefine Fort\", \"Pave d'Affinois\", \"Pave d'Auge\", \"Pave de Chirac\", \"Pave du Berry\",\n\n            \"Pecorino\", \"Pecorino in Walnut Leaves\", \"Pecorino Romano\", \"Peekskill Pyramid\",\n\n            \"Pelardon des Cevennes\", \"Pelardon des Corbieres\", \"Penamellera\", \"Penbryn\",\n\n            \"Pencarreg\", \"Perail de Brebis\", \"Petit Morin\", \"Petit Pardou\", \"Petit-Suisse\",\n\n            \"Picodon de Chevre\", \"Picos de Europa\", \"Piora\", \"Pithtviers au Foin\",\n\n            \"Plateau de Herve\", \"Plymouth Cheese\", \"Podhalanski\", \"Poivre d'Ane\", \"Polkolbin\",\n\n            \"Pont l'Eveque\", \"Port Nicholson\", \"Port-Salut\", \"Postel\", \"Pouligny-Saint-Pierre\",\n\n            \"Pourly\", \"Prastost\", \"Pressato\", \"Prince-Jean\", \"Processed Cheddar\", \"Provolone\",\n\n            \"Provolone (Australian)\", \"Pyengana Cheddar\", \"Pyramide\", \"Quark\",\n\n            \"Quark (Australian)\", \"Quartirolo Lombardo\", \"Quatre-Vents\", \"Quercy Petit\",\n\n            \"Queso Blanco\", \"Queso Blanco con Frutas --Pina y Mango\", \"Queso de Murcia\",\n\n            \"Queso del Montsec\", \"Queso del Tietar\", \"Queso Fresco\", \"Queso Fresco (Adobera)\",\n\n            \"Queso Iberico\", \"Queso Jalapeno\", \"Queso Majorero\", \"Queso Media Luna\",\n\n            \"Queso Para Frier\", \"Queso Quesadilla\", \"Rabacal\", \"Raclette\", \"Ragusano\", \"Raschera\",\n\n            \"Reblochon\", \"Red Leicester\", \"Regal de la Dombes\", \"Reggianito\", \"Remedou\",\n\n            \"Requeson\", \"Richelieu\", \"Ricotta\", \"Ricotta (Australian)\", \"Ricotta Salata\", \"Ridder\",\n\n            \"Rigotte\", \"Rocamadour\", \"Rollot\", \"Romano\", \"Romans Part Dieu\", \"Roncal\", \"Roquefort\",\n\n            \"Roule\", \"Rouleau De Beaulieu\", \"Royalp Tilsit\", \"Rubens\", \"Rustinu\", \"Saaland Pfarr\",\n\n            \"Saanenkaese\", \"Saga\", \"Sage Derby\", \"Sainte Maure\", \"Saint-Marcellin\",\n\n            \"Saint-Nectaire\", \"Saint-Paulin\", \"Salers\", \"Samso\", \"San Simon\", \"Sancerre\",\n\n            \"Sap Sago\", \"Sardo\", \"Sardo Egyptian\", \"Sbrinz\", \"Scamorza\", \"Schabzieger\", \"Schloss\",\n\n            \"Selles sur Cher\", \"Selva\", \"Serat\", \"Seriously Strong Cheddar\", \"Serra da Estrela\",\n\n            \"Sharpam\", \"Shelburne Cheddar\", \"Shropshire Blue\", \"Siraz\", \"Sirene\", \"Smoked Gouda\",\n\n            \"Somerset Brie\", \"Sonoma Jack\", \"Sottocenare al Tartufo\", \"Soumaintrain\",\n\n            \"Sourire Lozerien\", \"Spenwood\", \"Sraffordshire Organic\", \"St. Agur Blue Cheese\",\n\n            \"Stilton\", \"Stinking Bishop\", \"String\", \"Sussex Slipcote\", \"Sveciaost\", \"Swaledale\",\n\n            \"Sweet Style Swiss\", \"Swiss\", \"Syrian (Armenian String)\", \"Tala\", \"Taleggio\", \"Tamie\",\n\n            \"Tasmania Highland Chevre Log\", \"Taupiniere\", \"Teifi\", \"Telemea\", \"Testouri\",\n\n            \"Tete de Moine\", \"Tetilla\", \"Texas Goat Cheese\", \"Tibet\", \"Tillamook Cheddar\",\n\n            \"Tilsit\", \"Timboon Brie\", \"Toma\", \"Tomme Brulee\", \"Tomme d'Abondance\",\n\n            \"Tomme de Chevre\", \"Tomme de Romans\", \"Tomme de Savoie\", \"Tomme des Chouans\", \"Tommes\",\n\n            \"Torta del Casar\", \"Toscanello\", \"Touree de L'Aubier\", \"Tourmalet\",\n\n            \"Trappe (Veritable)\", \"Trois Cornes De Vendee\", \"Tronchon\", \"Trou du Cru\", \"Truffe\",\n\n            \"Tupi\", \"Turunmaa\", \"Tymsboro\", \"Tyn Grug\", \"Tyning\", \"Ubriaco\", \"Ulloa\",\n\n            \"Vacherin-Fribourgeois\", \"Valencay\", \"Vasterbottenost\", \"Venaco\", \"Vendomois\",\n\n            \"Vieux Corse\", \"Vignotte\", \"Vulscombe\", \"Waimata Farmhouse Blue\",\n\n            \"Washed Rind Cheese (Australian)\", \"Waterloo\", \"Weichkaese\", \"Wellington\",\n\n            \"Wensleydale\", \"White Stilton\", \"Whitestone Farmhouse\", \"Wigmore\", \"Woodside Cabecou\",\n\n            \"Xanadu\", \"Xynotyro\", \"Yarg Cornish\", \"Yarra Valley Pyramid\", \"Yorkshire Blue\",\n\n            \"Zamorano\", \"Zanetti Grana Padano\", \"Zanetti Parmigiano Reggiano\"\n\n    };\n\n}\n  ","MainActivity.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.customchoicelist;\n\n \n\nimport android.app.ListActivity;\n\nimport android.os.Bundle;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.BaseAdapter;\n\nimport android.widget.TextView;\n\n \n\n/**\n\n * This sample demonstrates how to create custom single- or multi-choice\n\n * {@link android.widget.ListView} UIs. The most interesting bits are in\n\n * the <code>res/layout/</code> directory of this sample.\n\n */\n\npublic class MainActivity extends ListActivity {\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.sample_main);\n\n        setListAdapter(new MyAdapter());\n\n    }\n\n \n\n    /**\n\n     * A simple array adapter that creates a list of cheeses.\n\n     */\n\n    private class MyAdapter extends BaseAdapter {\n\n        @Override\n\n        public int getCount() {\n\n            return Cheeses.CHEESES.length;\n\n        }\n\n \n\n        @Override\n\n        public String getItem(int position) {\n\n            return Cheeses.CHEESES[position];\n\n        }\n\n \n\n        @Override\n\n        public long getItemId(int position) {\n\n            return Cheeses.CHEESES[position].hashCode();\n\n        }\n\n \n\n        @Override\n\n        public View getView(int position, View convertView, ViewGroup container) {\n\n            if (convertView == null) {\n\n                convertView = getLayoutInflater().inflate(R.layout.list_item, container, false);\n\n            }\n\n \n\n            ((TextView) convertView.findViewById(android.R.id.text1))\n\n                    .setText(getItem(position));\n\n            return convertView;\n\n        }\n\n    }\n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.customchoicelist\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk android:minSdkVersion=\"3\" android:targetSdkVersion=\"17\" />\n\n \n\n    <application android:label=\"@string/app_name\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:theme=\"@style/Theme.Sample\"\n\n        android:allowBackup=\"true\">\n\n \n\n        <activity android:name=\".MainActivity\"\n\n            android:label=\"@string/app_name\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n \n\n    </application>\n\n \n\n</manifest>\n  "},"CustomNotifications":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com/samples/CustomNotifications/res/drawable-hdpi/ic_launcher.png","ic_stat_custom.png":"http://developer.android.com/samples/CustomNotifications/res/drawable-hdpi/ic_stat_custom.png","tile.9.png":"http://developer.android.com/samples/CustomNotifications/res/drawable-hdpi/tile.9.png"},"drawable-hdpi-v11":{"ic_stat_custom.png":"http://developer.android.com/samples/CustomNotifications/res/drawable-hdpi-v11/ic_stat_custom.png"},"drawable-hdpi-v9":{"ic_stat_custom.png":"http://developer.android.com/samples/CustomNotifications/res/drawable-hdpi-v9/ic_stat_custom.png"},"drawable-ldpi-v11":{"ic_stat_custom.png":"http://developer.android.com/samples/CustomNotifications/res/drawable-ldpi-v11/ic_stat_custom.png"},"drawable-ldpi-v9":{"ic_stat_custom.png":"http://developer.android.com/samples/CustomNotifications/res/drawable-ldpi-v9/ic_stat_custom.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com/samples/CustomNotifications/res/drawable-mdpi/ic_launcher.png","ic_stat_custom.png":"http://developer.android.com/samples/CustomNotifications/res/drawable-mdpi/ic_stat_custom.png"},"drawable-mdpi-v11":{"ic_stat_custom.png":"http://developer.android.com/samples/CustomNotifications/res/drawable-mdpi-v11/ic_stat_custom.png"},"drawable-mdpi-v9":{"ic_stat_custom.png":"http://developer.android.com/samples/CustomNotifications/res/drawable-mdpi-v9/ic_stat_custom.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com/samples/CustomNotifications/res/drawable-xhdpi/ic_launcher.png","ic_stat_custom.png":"http://developer.android.com/samples/CustomNotifications/res/drawable-xhdpi/ic_stat_custom.png","robot.png":"http://developer.android.com/samples/CustomNotifications/res/drawable-xhdpi/robot.png","robot_expanded.png":"http://developer.android.com/samples/CustomNotifications/res/drawable-xhdpi/robot_expanded.png"},"drawable-xhdpi-v11":{"ic_stat_custom.png":"http://developer.android.com/samples/CustomNotifications/res/drawable-xhdpi-v11/ic_stat_custom.png"},"drawable-xhdpi-v9":{"ic_stat_custom.png":"http://developer.android.com/samples/CustomNotifications/res/drawable-xhdpi-v9/ic_stat_custom.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com/samples/CustomNotifications/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleMessageTile\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n            android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n            android:text=\"@string/intro_message\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n  ","notification.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n \n\n<!--\n\n* Copyright (C) 2013 The Android Open Source Project\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*       http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n-->\n\n \n\n<!-- Layout for the collapsed notification. -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:orientation=\"vertical\"\n\n    android:layout_width=\"fill_parent\"\n\n    android:layout_height=\"fill_parent\"\n\n    android:gravity=\"center_horizontal\">\n\n \n\n    <TextView\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:textAppearance=\"@style/NotificationContent\"\n\n        android:id=\"@+id/textView\"\n\n        android:gravity=\"center\" />\n\n \n\n    <ImageView\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:id=\"@+id/imageView\"\n\n        android:src=\"@drawable/robot\"\n\n        android:contentDescription=\"@string/collapsed_image\" />\n\n \n\n \n\n</LinearLayout>\n  ","notification_expanded.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n \n\n<!--\n\n* Copyright (C) 2013 The Android Open Source Project\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*       http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n-->\n\n \n\n<!-- Layout for the expanded notification. -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:orientation=\"horizontal\"\n\n    android:layout_width=\"fill_parent\"\n\n    android:layout_height=\"fill_parent\"\n\n    android:gravity=\"right|top\">\n\n \n\n \n\n    <RelativeLayout\n\n        android:layout_width=\"fill_parent\"\n\n        android:layout_height=\"fill_parent\">\n\n \n\n        <TextView\n\n            android:layout_width=\"wrap_content\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:textAppearance=\"@style/NotificationContent\"\n\n            android:text=\"@string/expanded\"\n\n            android:layout_gravity=\"center_vertical\"\n\n            android:layout_alignParentTop=\"false\"\n\n            android:layout_alignParentLeft=\"true\"\n\n            android:layout_toLeftOf=\"@+id/imageView\"\n\n            android:gravity=\"center\"\n\n            android:layout_centerVertical=\"true\" />\n\n \n\n        <ImageView\n\n            android:layout_width=\"wrap_content\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:src=\"@drawable/robot_expanded\"\n\n            android:layout_gravity=\"right|top\"\n\n            android:layout_alignParentTop=\"true\"\n\n            android:layout_alignParentRight=\"true\"\n\n            android:id=\"@+id/imageView\"\n\n            android:contentDescription=\"@string/expanded_image\" />\n\n    </RelativeLayout>\n\n \n\n \n\n</LinearLayout>\n  ","sample_main.xml":"\n    \n\n<!--\n\n  * Copyright (C) 2013 The Android Open Source Project\n\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  * you may not use this file except in compliance with the License.\n\n  * You may obtain a copy of the License at\n\n  *\n\n  *       http://www.apache.org/licenses/LICENSE-2.0\n\n  *\n\n  * Unless required by applicable law or agreed to in writing, software\n\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  * See the License for the specific language governing permissions and\n\n  * limitations under the License.\n\n  -->\n\n \n\n<!-- Layout for MainActivity.\n\n Includes an introductory text and a button to show the notification. -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:tools=\"http://schemas.android.com/tools\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n\n    android:paddingRight=\"@dimen/activity_horizontal_margin\"\n\n    android:paddingTop=\"@dimen/activity_vertical_margin\"\n\n    android:paddingBottom=\"@dimen/activity_vertical_margin\"\n\n    android:orientation=\"vertical\"\n\n    tools:context=\".MainActivity\"\n\n    android:gravity=\"center_horizontal\">\n\n \n\n    <TextView\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:text=\"@string/intro_text\" />\n\n \n\n    <Button\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:text=\"@string/show_notification\"\n\n        android:id=\"@+id/button\"\n\n        android:onClick=\"showNotificationClicked\" />\n\n \n\n</LinearLayout>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">CustomNotifications</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            This sample demonstrates notifications with custom content views.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","dimens.xml":"\n    \n\n<!--\n\n  * Copyright (C) 2013 The Android Open Source Project\n\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  * you may not use this file except in compliance with the License.\n\n  * You may obtain a copy of the License at\n\n  *\n\n  *       http://www.apache.org/licenses/LICENSE-2.0\n\n  *\n\n  * Unless required by applicable law or agreed to in writing, software\n\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  * See the License for the specific language governing permissions and\n\n  * limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n    <!-- Default screen margins, per the Android Design guidelines. -->\n\n    <dimen name=\"activity_horizontal_margin\">16dp</dimen>\n\n    <dimen name=\"activity_vertical_margin\">16dp</dimen>\n\n</resources>\n  ","strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  * Copyright (C) 2013 The Android Open Source Project\n\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  * you may not use this file except in compliance with the License.\n\n  * You may obtain a copy of the License at\n\n  *\n\n  *       http://www.apache.org/licenses/LICENSE-2.0\n\n  *\n\n  * Unless required by applicable law or agreed to in writing, software\n\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  * See the License for the specific language governing permissions and\n\n  * limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <string name=\"expanded\">I\\'m the expanded notification.\\nCollapse me!</string>\n\n    <string name=\"collapsed\">I\\'m the collapsed notification.\\nCreated at: %s</string>\n\n    <string name=\"show_notification\">Show Notification</string>\n\n    <string name=\"custom_notification\">I\\'m a custom notification.</string>\n\n \n\n    <string name=\"intro_text\">This sample demonstrates how a notification is created using the\n\n        <b>NotificationCompatBuilder</b>\n\n        with a custom content view. The layout of the notification is defined as a\n\n        layout resource and inflated as a <b>RemoteViews</b> object.\n\n        \\n\\nOn API level 16 and above, a different layout is inflated and set as\n\n        the <i>big content view</i>, which is used when the notification is expanded.\n\n        \\n\\n<b>Use the button below to create the notification.\n\n        \\n\\nIf your device is running Jelly Bean or above, try expanding or collapsing\n\n        the notification to see the different layouts.</b>\n\n    </string>\n\n    <string name=\"collapsed_image\">A single Android robot waving. Symbolises a collapsed\n\n        notification.\n\n    </string>\n\n    <string name=\"expanded_image\">Two Androids on top of each other. Symbolises an expanded\n\n        notification.\n\n    </string>\n\n \n\n</resources>\n  ","styles.xml":"\n    \n\n<!--\n\n  * Copyright (C) 2013 The Android Open Source Project\n\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  * you may not use this file except in compliance with the License.\n\n  * You may obtain a copy of the License at\n\n  *\n\n  *       http://www.apache.org/licenses/LICENSE-2.0\n\n  *\n\n  * Unless required by applicable law or agreed to in writing, software\n\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  * See the License for the specific language governing permissions and\n\n  * limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"NotificationContent\" parent=\"@android:style/TextAppearance.Small\">\n\n        <item name=\"android:textColor\">?android:attr/textColorPrimaryInverse</item>\n\n    </style>\n\n \n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw720dp-land":{"dimens.xml":"\n    \n\n<!--\n\n  * Copyright (C) 2013 The Android Open Source Project\n\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  * you may not use this file except in compliance with the License.\n\n  * You may obtain a copy of the License at\n\n  *\n\n  *       http://www.apache.org/licenses/LICENSE-2.0\n\n  *\n\n  * Unless required by applicable law or agreed to in writing, software\n\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  * See the License for the specific language governing permissions and\n\n  * limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n    <!-- Customize dimensions originally defined in res/values/dimens.xml (such as\n\n         screen margins) for sw720dp devices (e.g. 10\" tablets) in landscape here. -->\n\n    <dimen name=\"activity_horizontal_margin\">128dp</dimen>\n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "},"values-v9":{"styles.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<resources>\n\n \n\n    <style name=\"NotificationContent\" parent=\"@android:style/TextAppearance.StatusBar.EventContent\">\n\n    </style>\n\n \n\n</resources>\n  "}},"src":{"com.example.android.customnotifications":{"MainActivity.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *       http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.customnotifications;\n\n \n\nimport android.app.Activity;\n\nimport android.app.Notification;\n\nimport android.app.NotificationManager;\n\nimport android.app.PendingIntent;\n\nimport android.content.Intent;\n\nimport android.os.Build;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.NotificationCompat;\n\nimport android.view.View;\n\nimport android.widget.RemoteViews;\n\n \n\nimport java.text.DateFormat;\n\nimport java.util.Date;\n\n \n\npublic class MainActivity extends Activity {\n\n    /**\n\n     * This sample demonstrates notifications with custom content views.\n\n     *\n\n     * <p>On API level 16 and above a big content view is also defined that is used for the\n\n     * 'expanded' notification. The notification is created by the NotificationCompat.Builder.\n\n     * The expanded content view is set directly on the {@link android.app.Notification} once it has been build.\n\n     * (See {@link android.app.Notification#bigContentView}.) </p>\n\n     *\n\n     * <p>The content views are inflated as {@link android.widget.RemoteViews} directly from their XML layout\n\n     * definitions using {@link android.widget.RemoteViews#RemoteViews(String, int)}.</p>\n\n     */\n\n    private void createNotification() {\n\n        NotificationCompat.Builder builder = new NotificationCompat.Builder(this);\n\n \n\n        //Create Intent to launch this Activity again if the notification is clicked.\n\n        Intent i = new Intent(this, MainActivity.class);\n\n        i.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);\n\n        PendingIntent intent = PendingIntent.getActivity(this, 0, i,\n\n                PendingIntent.FLAG_UPDATE_CURRENT);\n\n        builder.setContentIntent(intent);\n\n \n\n        // Sets the ticker text\n\n        builder.setTicker(getResources().getString(R.string.custom_notification));\n\n \n\n        // Sets the small icon for the ticker\n\n        builder.setSmallIcon(R.drawable.ic_stat_custom);\n\n \n\n        // Cancel the notification when clicked\n\n        builder.setAutoCancel(true);\n\n \n\n        // Build the notification\n\n        Notification notification = builder.build();\n\n \n\n        // Inflate the notification layout as RemoteViews\n\n        RemoteViews contentView = new RemoteViews(getPackageName(), R.layout.notification);\n\n \n\n        // Set text on a TextView in the RemoteViews programmatically.\n\n        final String time = DateFormat.getTimeInstance().format(new Date()).toString();\n\n        final String text = getResources().getString(R.string.collapsed, time);\n\n        contentView.setTextViewText(R.id.textView, text);\n\n \n\n        /* Workaround: Need to set the content view here directly on the notification.\n\n         * NotificationCompatBuilder contains a bug that prevents this from working on platform\n\n         * versions HoneyComb.\n\n         * See https://code.google.com/p/android/issues/detail?id=30495\n\n         */\n\n        notification.contentView = contentView;\n\n \n\n        // Add a big content view to the notification if supported.\n\n        // Support for expanded notifications was added in API level 16.\n\n        // (The normal contentView is shown when the notification is collapsed, when expanded the\n\n        // big content view set here is displayed.)\n\n        if (Build.VERSION.SDK_INT >= 16) {\n\n            // Inflate and set the layout for the expanded notification view\n\n            RemoteViews expandedView =\n\n                    new RemoteViews(getPackageName(), R.layout.notification_expanded);\n\n            notification.bigContentView = expandedView;\n\n        }\n\n \n\n        // START_INCLUDE(notify)\n\n        // Use the NotificationManager to show the notification\n\n        NotificationManager nm = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);\n\n        nm.notify(0, notification);\n\n    }\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.sample_main);\n\n    }\n\n \n\n    /**\n\n     * Create and show a notification with a custom layout.\n\n     * This callback is defined through the 'onClick' attribute of the\n\n     * 'Show Notification' button in the XML layout.\n\n     *\n\n     * @param v\n\n     */\n\n    public void showNotificationClicked(View v) {\n\n        createNotification();\n\n    }\n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.customnotifications\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk\n\n        android:minSdkVersion=\"4\"\n\n        android:targetSdkVersion=\"18\" />\n\n \n\n    <application\n\n        android:allowBackup=\"true\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:label=\"@string/app_name\"\n\n        android:theme=\"@style/AppTheme\" >\n\n        <activity\n\n            android:name=\"com.example.android.customnotifications.MainActivity\"\n\n            android:label=\"@string/app_name\" >\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n \n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n</manifest>\n  "},"CustomTransition":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com/samples/CustomTransition/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com/samples/CustomTransition/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com/samples/CustomTransition/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com/samples/CustomTransition/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com/samples/CustomTransition/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"vertical\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <ViewAnimator\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\"\n\n          android:layout_weight=\"1\">\n\n \n\n        <ScrollView\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingRight=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingTop=\"@dimen/vertical_page_margin\"\n\n                  android:paddingBottom=\"@dimen/vertical_page_margin\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </ScrollView>\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\" />\n\n \n\n    </ViewAnimator>\n\n \n\n    <View\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"1dp\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\" />\n\n \n\n</LinearLayout>\n\n \n  ","fragment_custom_transition.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:tools=\"http://schemas.android.com/tools\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\"\n\n    tools:context=\"com.example.android.customtransition.CustomTransitionFragment\">\n\n \n\n    <Button\n\n        android:id=\"@+id/show_next_scene\"\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:text=\"Show next scene\"/>\n\n \n\n    <FrameLayout\n\n        android:id=\"@+id/container\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"0dp\"\n\n        android:layout_weight=\"1\"/>\n\n \n\n</LinearLayout>\n  ","scene1.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n<LinearLayout\n\n    android:id=\"@+id/container\"\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:tools=\"http://schemas.android.com/tools\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"horizontal\"\n\n    tools:context=\"com.example.android.customtransition.CustomTransitionFragment\">\n\n \n\n    <View\n\n        android:id=\"@+id/view_1\"\n\n        android:layout_width=\"64dp\"\n\n        android:layout_height=\"64dp\"\n\n        android:layout_margin=\"8dp\"\n\n        android:background=\"#f00\"/>\n\n \n\n    <View\n\n        android:id=\"@+id/view_2\"\n\n        android:layout_width=\"64dp\"\n\n        android:layout_height=\"64dp\"\n\n        android:layout_margin=\"8dp\"\n\n        android:background=\"#0f0\"/>\n\n \n\n    <View\n\n        android:id=\"@+id/view_3\"\n\n        android:layout_width=\"64dp\"\n\n        android:layout_height=\"64dp\"\n\n        android:layout_margin=\"8dp\"\n\n        android:background=\"#00f\"/>\n\n \n\n</LinearLayout>\n  ","scene2.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n<LinearLayout\n\n    android:id=\"@+id/container\"\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:tools=\"http://schemas.android.com/tools\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"horizontal\"\n\n    tools:context=\"com.example.android.customtransition.CustomTransitionFragment\">\n\n \n\n    <View\n\n        android:id=\"@+id/view_1\"\n\n        android:layout_width=\"64dp\"\n\n        android:layout_height=\"64dp\"\n\n        android:layout_margin=\"8dp\"\n\n        android:background=\"#0f0\"/>\n\n \n\n    <View\n\n        android:id=\"@+id/view_2\"\n\n        android:layout_width=\"64dp\"\n\n        android:layout_height=\"64dp\"\n\n        android:layout_margin=\"8dp\"\n\n        android:background=\"#00f\"/>\n\n \n\n    <View\n\n        android:id=\"@+id/view_3\"\n\n        android:layout_width=\"64dp\"\n\n        android:layout_height=\"64dp\"\n\n        android:layout_margin=\"8dp\"\n\n        android:background=\"#f00\"/>\n\n \n\n</LinearLayout>\n  ","scene3.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n<LinearLayout\n\n    android:id=\"@+id/container\"\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:tools=\"http://schemas.android.com/tools\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"horizontal\"\n\n    tools:context=\"com.example.android.customtransition.CustomTransitionFragment\">\n\n \n\n    <View\n\n        android:id=\"@+id/view_1\"\n\n        android:layout_width=\"64dp\"\n\n        android:layout_height=\"64dp\"\n\n        android:layout_margin=\"8dp\"\n\n        android:background=\"#00f\"/>\n\n \n\n    <View\n\n        android:id=\"@+id/view_2\"\n\n        android:layout_width=\"64dp\"\n\n        android:layout_height=\"64dp\"\n\n        android:layout_margin=\"8dp\"\n\n        android:background=\"#f00\"/>\n\n \n\n    <View\n\n        android:id=\"@+id/view_3\"\n\n        android:layout_width=\"64dp\"\n\n        android:layout_height=\"64dp\"\n\n        android:layout_margin=\"8dp\"\n\n        android:background=\"#0f0\"/>\n\n \n\n</LinearLayout>\n  "},"layout-w720dp":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"horizontal\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <LinearLayout\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\"\n\n          android:layout_weight=\"1\"\n\n          android:orientation=\"vertical\">\n\n \n\n        <FrameLayout\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"wrap_content\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/margin_medium\"\n\n                  android:paddingRight=\"@dimen/margin_medium\"\n\n                  android:paddingTop=\"@dimen/margin_large\"\n\n                  android:paddingBottom=\"@dimen/margin_large\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </FrameLayout>\n\n \n\n        <View\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"1dp\"\n\n              android:background=\"@android:color/darker_gray\" />\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"0px\"\n\n              android:layout_weight=\"1\" />\n\n \n\n    </LinearLayout>\n\n \n\n    <View\n\n          android:layout_width=\"1dp\"\n\n          android:layout_height=\"match_parent\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\" />\n\n \n\n</LinearLayout>\n\n \n\n \n  "},"menu":{"main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:id=\"@+id/menu_toggle_log\"\n\n          android:showAsAction=\"always\"\n\n          android:title=\"@string/sample_show_log\" />\n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">CustomTransition</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            This sample demonstrates how to create and use a custom Transition.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","strings.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<resources>\n\n    <string name=\"sample_show_log\">Show Log</string>\n\n    <string name=\"sample_hide_log\">Hide Log</string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.common":{"activities":{"SampleActivityBase.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\npackage com.example.android.common.activities;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentActivity;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogWrapper;\n\n \n\n/**\n\n * Base launcher activity, to handle most of the common plumbing for samples.\n\n */\n\npublic class SampleActivityBase extends FragmentActivity {\n\n \n\n    public static final String TAG = \"SampleActivityBase\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n    }\n\n \n\n    @Override\n\n    protected  void onStart() {\n\n        super.onStart();\n\n        initializeLogging();\n\n    }\n\n \n\n    /** Set up targets to receive log data */\n\n    public void initializeLogging() {\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        // Wraps Android's native log framework\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        Log.setLogNode(logWrapper);\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "},"logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "}},"com.example.android.customtransition":{"ChangeColor.java":"\n    \n\n/*\n\n * Copyright (C) 2014 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.customtransition;\n\n \n\nimport android.animation.Animator;\n\nimport android.animation.ArgbEvaluator;\n\nimport android.animation.ObjectAnimator;\n\nimport android.animation.PropertyValuesHolder;\n\nimport android.animation.ValueAnimator;\n\nimport android.graphics.drawable.ColorDrawable;\n\nimport android.graphics.drawable.Drawable;\n\nimport android.graphics.drawable.TransitionDrawable;\n\nimport android.transition.ChangeBounds;\n\nimport android.transition.Transition;\n\nimport android.transition.TransitionValues;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.view.ViewPropertyAnimator;\n\n \n\npublic class ChangeColor extends Transition {\n\n \n\n    /** Key to store a color value in TransitionValues object */\n\n    private static final String PROPNAME_BACKGROUND = \"customtransition:change_color:background\";\n\n \n\n    /**\n\n     * Convenience method: Add the background Drawable property value\n\n     * to the TransitionsValues.value Map for a target.\n\n     */\n\n    private void captureValues(TransitionValues values) {\n\n        // Capture the property values of views for later use\n\n        values.values.put(PROPNAME_BACKGROUND, values.view.getBackground());\n\n    }\n\n \n\n    @Override\n\n    public void captureStartValues(TransitionValues transitionValues) {\n\n        captureValues(transitionValues);\n\n    }\n\n \n\n    // Capture the value of the background drawable property for a target in the ending Scene.\n\n    @Override\n\n    public void captureEndValues(TransitionValues transitionValues) {\n\n        captureValues(transitionValues);\n\n    }\n\n \n\n    // Create an animation for each target that is in both the starting and ending Scene. For each\n\n    // pair of targets, if their background property value is a color (rather than a graphic),\n\n    // create a ValueAnimator based on an ArgbEvaluator that interpolates between the starting and\n\n    // ending color. Also create an update listener that sets the View background color for each\n\n    // animation frame\n\n    @Override\n\n    public Animator createAnimator(ViewGroup sceneRoot,\n\n                                   TransitionValues startValues, TransitionValues endValues) {\n\n        // This transition can only be applied to views that are on both starting and ending scenes.\n\n        if (null == startValues || null == endValues) {\n\n            return null;\n\n        }\n\n        // Store a convenient reference to the target. Both the starting and ending layout have the\n\n        // same target.\n\n        final View view = endValues.view;\n\n        // Store the object containing the background property for both the starting and ending\n\n        // layouts.\n\n        Drawable startBackground = (Drawable) startValues.values.get(PROPNAME_BACKGROUND);\n\n        Drawable endBackground = (Drawable) endValues.values.get(PROPNAME_BACKGROUND);\n\n        // This transition changes background colors for a target. It doesn't animate any other\n\n        // background changes. If the property isn't a ColorDrawable, ignore the target.\n\n        if (startBackground instanceof ColorDrawable && endBackground instanceof ColorDrawable) {\n\n            ColorDrawable startColor = (ColorDrawable) startBackground;\n\n            ColorDrawable endColor = (ColorDrawable) endBackground;\n\n            // If the background color for the target in the starting and ending layouts is\n\n            // different, create an animation.\n\n            if (startColor.getColor() != endColor.getColor()) {\n\n                // Create a new Animator object to apply to the targets as the transitions framework\n\n                // changes from the starting to the ending layout. Use the class ValueAnimator,\n\n                // which provides a timing pulse to change property values provided to it. The\n\n                // animation runs on the UI thread. The Evaluator controls what type of\n\n                // interpolation is done. In this case, an ArgbEvaluator interpolates between two\n\n                // #argb values, which are specified as the 2nd and 3rd input arguments.\n\n                ValueAnimator animator = ValueAnimator.ofObject(new ArgbEvaluator(),\n\n                        startColor.getColor(), endColor.getColor());\n\n                // Add an update listener to the Animator object.\n\n                animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n\n                    @Override\n\n                    public void onAnimationUpdate(ValueAnimator animation) {\n\n                        Object value = animation.getAnimatedValue();\n\n                        // Each time the ValueAnimator produces a new frame in the animation, change\n\n                        // the background color of the target. Ensure that the value isn't null.\n\n                        if (null != value) {\n\n                            view.setBackgroundColor((Integer) value);\n\n                        }\n\n                    }\n\n                });\n\n                // Return the Animator object to the transitions framework. As the framework changes\n\n                // between the starting and ending layouts, it applies the animation you've created.\n\n                return animator;\n\n            }\n\n        }\n\n        // For non-ColorDrawable backgrounds, we just return null, and no animation will take place.\n\n        return null;\n\n    }\n\n \n\n}\n  ","CustomTransitionFragment.java":"\n    \n\n/*\n\n * Copyright (C) 2014 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.customtransition;\n\n \n\nimport com.example.android.common.logger.Log;\n\n \n\nimport android.content.Context;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.transition.Scene;\n\nimport android.transition.Transition;\n\nimport android.transition.TransitionManager;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.FrameLayout;\n\n \n\npublic class CustomTransitionFragment extends Fragment implements View.OnClickListener {\n\n \n\n    private static final String STATE_CURRENT_SCENE = \"current_scene\";\n\n \n\n    /** Tag for the logger */\n\n    private static final String TAG = \"CustomTransitionFragment\";\n\n \n\n    /** These are the Scenes we use. */\n\n    private Scene[] mScenes;\n\n \n\n    /** The current index for mScenes. */\n\n    private int mCurrentScene;\n\n \n\n    /** This is the custom Transition we use in this sample. */\n\n    private Transition mTransition;\n\n \n\n    public CustomTransitionFragment() {\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n\n        return inflater.inflate(R.layout.fragment_custom_transition, container, false);\n\n    }\n\n \n\n    @Override\n\n    public void onViewCreated(View view, Bundle savedInstanceState) {\n\n        Context context = getActivity();\n\n        FrameLayout container = (FrameLayout) view.findViewById(R.id.container);\n\n        view.findViewById(R.id.show_next_scene).setOnClickListener(this);\n\n        if (null != savedInstanceState) {\n\n            mCurrentScene = savedInstanceState.getInt(STATE_CURRENT_SCENE);\n\n        }\n\n        // We set up the Scenes here.\n\n        mScenes = new Scene[] {\n\n                Scene.getSceneForLayout(container, R.layout.scene1, context),\n\n                Scene.getSceneForLayout(container, R.layout.scene2, context),\n\n                Scene.getSceneForLayout(container, R.layout.scene3, context),\n\n        };\n\n        // This is the custom Transition.\n\n        mTransition = new ChangeColor();\n\n        // Show the initial Scene.\n\n        TransitionManager.go(mScenes[mCurrentScene % mScenes.length]);\n\n    }\n\n \n\n    @Override\n\n    public void onSaveInstanceState(Bundle outState) {\n\n        super.onSaveInstanceState(outState);\n\n        outState.putInt(STATE_CURRENT_SCENE, mCurrentScene);\n\n    }\n\n \n\n    @Override\n\n    public void onClick(View v) {\n\n        switch (v.getId()) {\n\n            case R.id.show_next_scene: {\n\n                mCurrentScene = (mCurrentScene + 1) % mScenes.length;\n\n                Log.i(TAG, \"Transitioning to scene #\" + mCurrentScene);\n\n                // Pass the custom Transition as second argument for TransitionManager.go\n\n                TransitionManager.go(mScenes[mCurrentScene], mTransition);\n\n                break;\n\n            }\n\n        }\n\n    }\n\n \n\n}\n  ","MainActivity.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.customtransition;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentTransaction;\n\nimport android.view.Menu;\n\nimport android.view.MenuItem;\n\nimport android.widget.ViewAnimator;\n\n \n\nimport com.example.android.common.activities.SampleActivityBase;\n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogFragment;\n\nimport com.example.android.common.logger.LogWrapper;\n\nimport com.example.android.common.logger.MessageOnlyLogFilter;\n\n \n\n/**\n\n * A simple launcher activity containing a summary sample description, sample log and a custom\n\n * {@link android.support.v4.app.Fragment} which can display a view.\n\n * <p>\n\n * For devices with displays with a width of 720dp or greater, the sample log is always visible,\n\n * on other devices it's visibility is controlled by an item on the Action Bar.\n\n */\n\npublic class MainActivity extends SampleActivityBase {\n\n \n\n    public static final String TAG = \"MainActivity\";\n\n \n\n    // Whether the Log Fragment is currently shown\n\n    private boolean mLogShown;\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_main);\n\n \n\n        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n\n        CustomTransitionFragment fragment = new CustomTransitionFragment();\n\n        transaction.replace(R.id.sample_content_fragment, fragment);\n\n        transaction.commit();\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        getMenuInflater().inflate(R.menu.main, menu);\n\n        return true;\n\n    }\n\n \n\n    @Override\n\n    public boolean onPrepareOptionsMenu(Menu menu) {\n\n        MenuItem logToggle = menu.findItem(R.id.menu_toggle_log);\n\n        logToggle.setVisible(findViewById(R.id.sample_output) instanceof ViewAnimator);\n\n        logToggle.setTitle(mLogShown ? R.string.sample_hide_log : R.string.sample_show_log);\n\n \n\n        return super.onPrepareOptionsMenu(menu);\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch(item.getItemId()) {\n\n            case R.id.menu_toggle_log:\n\n                mLogShown = !mLogShown;\n\n                ViewAnimator output = (ViewAnimator) findViewById(R.id.sample_output);\n\n                if (mLogShown) {\n\n                    output.setDisplayedChild(1);\n\n                } else {\n\n                    output.setDisplayedChild(0);\n\n                }\n\n                supportInvalidateOptionsMenu();\n\n                return true;\n\n        }\n\n        return super.onOptionsItemSelected(item);\n\n    }\n\n \n\n    /** Create a chain of targets that will receive log data */\n\n    @Override\n\n    public void initializeLogging() {\n\n        // Wraps Android's native log framework.\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        Log.setLogNode(logWrapper);\n\n \n\n        // Filter strips out everything except the message text.\n\n        MessageOnlyLogFilter msgFilter = new MessageOnlyLogFilter();\n\n        logWrapper.setNext(msgFilter);\n\n \n\n        // On screen logging via a fragment with a TextView.\n\n        LogFragment logFragment = (LogFragment) getSupportFragmentManager()\n\n                .findFragmentById(R.id.log_fragment);\n\n        msgFilter.setNext(logFragment.getLogView());\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.customtransition\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk android:minSdkVersion=\"19\" android:targetSdkVersion=\"19\" />\n\n \n\n    <application android:allowBackup=\"true\"\n\n        android:label=\"@string/app_name\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:theme=\"@style/AppTheme\">\n\n \n\n        <activity android:name=\".MainActivity\"\n\n                  android:label=\"@string/app_name\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n \n\n</manifest>\n  "},"DisplayingBitmaps":{"res":{"drawable":{"photogrid_list_selector.xml":"\n    \n\n<!--\n\n  Copyright (C) 2012 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n \n\n    <item android:state_pressed=\"true\">\n\n        <shape>\n\n            <solid android:color=\"@color/grid_state_pressed\" />\n\n        </shape>\n\n    </item>\n\n \n\n    <item android:state_focused=\"true\">\n\n        <shape>\n\n            <solid android:color=\"@color/grid_state_focused\" />\n\n        </shape>\n\n    </item>\n\n \n\n    <item android:drawable=\"@android:color/transparent\" />\n\n \n\n</selector>\n  "},"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com/samples/DisplayingBitmaps/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com/samples/DisplayingBitmaps/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com/samples/DisplayingBitmaps/res/drawable-mdpi/ic_launcher.png"},"drawable-nodpi":{"empty_photo.png":"http://developer.android.com/samples/DisplayingBitmaps/res/drawable-nodpi/empty_photo.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com/samples/DisplayingBitmaps/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com/samples/DisplayingBitmaps/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleMessageTile\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n            android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n            android:text=\"@string/intro_message\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n  ","image_detail_fragment.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright (C) 2012 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"fill_parent\"\n\n    android:layout_height=\"fill_parent\" >\n\n \n\n    <ProgressBar\n\n        style=\"?android:attr/progressBarStyleLarge\"\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:layout_gravity=\"center\" />\n\n \n\n    <com.example.android.displayingbitmaps.ui.RecyclingImageView\n\n        android:id=\"@+id/imageView\"\n\n        android:layout_width=\"fill_parent\"\n\n        android:layout_height=\"fill_parent\"\n\n        android:contentDescription=\"@string/imageview_description\" />\n\n \n\n</FrameLayout>\n  ","image_detail_pager.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright (C) 2012 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<android.support.v4.view.ViewPager xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:id=\"@+id/pager\"\n\n    android:layout_width=\"fill_parent\"\n\n    android:layout_height=\"fill_parent\" >\n\n \n\n</android.support.v4.view.ViewPager>\n  ","image_grid_fragment.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright (C) 2012 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<GridView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:id=\"@+id/gridView\"\n\n    style=\"@style/PhotoGridLayout\"\n\n    android:layout_width=\"fill_parent\"\n\n    android:layout_height=\"fill_parent\"\n\n    android:columnWidth=\"@dimen/image_thumbnail_size\"\n\n    android:horizontalSpacing=\"@dimen/image_thumbnail_spacing\"\n\n    android:numColumns=\"auto_fit\"\n\n    android:stretchMode=\"columnWidth\"\n\n    android:verticalSpacing=\"@dimen/image_thumbnail_spacing\" >\n\n \n\n</GridView>\n  "},"menu":{"main_menu.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright (C) 2012 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\" >\n\n \n\n    <item\n\n        android:id=\"@+id/clear_cache\"\n\n        android:icon=\"@android:drawable/ic_menu_delete\"\n\n        android:showAsAction=\"never\"\n\n        android:title=\"@string/clear_cache_menu\"/>\n\n \n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">DisplayingBitmaps</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            This is a sample application for the Android Training class\n\n            &quot;Displaying Bitmaps Efficiently&quot;\n\n            (http://developer.android.com/training/displaying-bitmaps/).\\n\\n\n\n \n\n            It demonstrates how to load large bitmaps efficiently off the main UI thread, caching\n\n            bitmaps (both in memory and on disk), managing bitmap memory and displaying bitmaps\n\n            in UI elements such as ViewPager and ListView/GridView.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","colors.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright (C) 2012 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <color name=\"grid_state_pressed\">#1Affffff</color>\n\n    <color name=\"grid_state_focused\">#80000000</color>\n\n \n\n</resources>\n  ","dimens.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright (C) 2012 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <dimen name=\"image_thumbnail_size\">100dp</dimen>\n\n    <dimen name=\"image_thumbnail_spacing\">1dp</dimen>\n\n \n\n</resources>\n  ","strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright (C) 2012 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <string name=\"clear_cache_menu\">Clear Caches</string>\n\n    <string name=\"clear_cache_complete_toast\">Caches have been cleared</string>\n\n    <string name=\"imageview_description\">Image Thumbnail</string>\n\n    <string name=\"no_network_connection_toast\">No network connection found</string>\n\n \n\n</resources>\n  ","styles.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright (C) 2012 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <style name=\"AppThemeDark\" parent=\"android:Theme\" />\n\n \n\n    <style name=\"AppThemeDark.FullScreen\" parent=\"@android:style/Theme.Black.NoTitleBar.Fullscreen\" />\n\n \n\n    <style name=\"PhotoGridLayout\">\n\n        <item name=\"android:drawSelectorOnTop\">true</item>\n\n        <item name=\"android:listSelector\">@drawable/photogrid_list_selector</item>\n\n    </style>\n\n \n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-large":{"dimens.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright (C) 2012 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <dimen name=\"image_thumbnail_size\">148dp</dimen>\n\n    <dimen name=\"image_thumbnail_spacing\">2dp</dimen>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"styles.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright (C) 2012 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <style name=\"AppThemeDark\" parent=\"@android:style/Theme.Holo\">\n\n        <item name=\"android:windowActionBarOverlay\">true</item>\n\n        <item name=\"android:windowBackground\">@android:color/black</item>\n\n        <item name=\"android:actionBarStyle\">@style/TranslucentDarkActionBar</item>\n\n    </style>\n\n \n\n    <style name=\"AppThemeDark.FullScreen\" />\n\n \n\n    <style name=\"TranslucentDarkActionBar\" parent=\"@android:style/Widget.Holo.ActionBar\">\n\n        <item name=\"android:background\">#99000000</item>\n\n    </style>\n\n \n\n    <!--<style name=\"PhotoGridLayout\">-->\n\n        <!--<item name=\"android:drawSelectorOnTop\">true</item>-->\n\n    <!--</style>-->\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "},"values-xlarge":{"dimens.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright (C) 2012 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <dimen name=\"image_thumbnail_size\">198dp</dimen>\n\n    <dimen name=\"image_thumbnail_spacing\">2dp</dimen>\n\n \n\n</resources>\n  "}},"src":{"com.example.android.common.logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "},"com.example.android.displayingbitmaps":{"provider":{"Images.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.displayingbitmaps.provider;\n\n \n\n/**\n\n * Some simple test data to use for this sample app.\n\n */\n\npublic class Images {\n\n \n\n    /**\n\n     * This are PicasaWeb URLs and could potentially change. Ideally the PicasaWeb API should be\n\n     * used to fetch the URLs.\n\n     *\n\n     * Credit to Romain Guy for the photos:\n\n     * http://www.curious-creature.org/\n\n     * https://plus.google.com/109538161516040592207/about\n\n     * http://www.flickr.com/photos/romainguy\n\n     */\n\n    public final static String[] imageUrls = new String[] {\n\n            \"https://lh6.googleusercontent.com/-55osAWw3x0Q/URquUtcFr5I/AAAAAAAAAbs/rWlj1RUKrYI/s1024/A%252520Photographer.jpg\",\n\n            \"https://lh4.googleusercontent.com/--dq8niRp7W4/URquVgmXvgI/AAAAAAAAAbs/-gnuLQfNnBA/s1024/A%252520Song%252520of%252520Ice%252520and%252520Fire.jpg\",\n\n            \"https://lh5.googleusercontent.com/-7qZeDtRKFKc/URquWZT1gOI/AAAAAAAAAbs/hqWgteyNXsg/s1024/Another%252520Rockaway%252520Sunset.jpg\",\n\n            \"https://lh3.googleusercontent.com/--L0Km39l5J8/URquXHGcdNI/AAAAAAAAAbs/3ZrSJNrSomQ/s1024/Antelope%252520Butte.jpg\",\n\n            \"https://lh6.googleusercontent.com/-8HO-4vIFnlw/URquZnsFgtI/AAAAAAAAAbs/WT8jViTF7vw/s1024/Antelope%252520Hallway.jpg\",\n\n            \"https://lh4.googleusercontent.com/-WIuWgVcU3Qw/URqubRVcj4I/AAAAAAAAAbs/YvbwgGjwdIQ/s1024/Antelope%252520Walls.jpg\",\n\n            \"https://lh6.googleusercontent.com/-UBmLbPELvoQ/URqucCdv0kI/AAAAAAAAAbs/IdNhr2VQoQs/s1024/Apre%2525CC%252580s%252520la%252520Pluie.jpg\",\n\n            \"https://lh3.googleusercontent.com/-s-AFpvgSeew/URquc6dF-JI/AAAAAAAAAbs/Mt3xNGRUd68/s1024/Backlit%252520Cloud.jpg\",\n\n            \"https://lh5.googleusercontent.com/-bvmif9a9YOQ/URquea3heHI/AAAAAAAAAbs/rcr6wyeQtAo/s1024/Bee%252520and%252520Flower.jpg\",\n\n            \"https://lh5.googleusercontent.com/-n7mdm7I7FGs/URqueT_BT-I/AAAAAAAAAbs/9MYmXlmpSAo/s1024/Bonzai%252520Rock%252520Sunset.jpg\",\n\n            \"https://lh6.googleusercontent.com/-4CN4X4t0M1k/URqufPozWzI/AAAAAAAAAbs/8wK41lg1KPs/s1024/Caterpillar.jpg\",\n\n            \"https://lh3.googleusercontent.com/-rrFnVC8xQEg/URqufdrLBaI/AAAAAAAAAbs/s69WYy_fl1E/s1024/Chess.jpg\",\n\n            \"https://lh5.googleusercontent.com/-WVpRptWH8Yw/URqugh-QmDI/AAAAAAAAAbs/E-MgBgtlUWU/s1024/Chihuly.jpg\",\n\n            \"https://lh5.googleusercontent.com/-0BDXkYmckbo/URquhKFW84I/AAAAAAAAAbs/ogQtHCTk2JQ/s1024/Closed%252520Door.jpg\",\n\n            \"https://lh3.googleusercontent.com/-PyggXXZRykM/URquh-kVvoI/AAAAAAAAAbs/hFtDwhtrHHQ/s1024/Colorado%252520River%252520Sunset.jpg\",\n\n            \"https://lh3.googleusercontent.com/-ZAs4dNZtALc/URquikvOCWI/AAAAAAAAAbs/DXz4h3dll1Y/s1024/Colors%252520of%252520Autumn.jpg\",\n\n            \"https://lh4.googleusercontent.com/-GztnWEIiMz8/URqukVCU7bI/AAAAAAAAAbs/jo2Hjv6MZ6M/s1024/Countryside.jpg\",\n\n            \"https://lh4.googleusercontent.com/-bEg9EZ9QoiM/URquklz3FGI/AAAAAAAAAbs/UUuv8Ac2BaE/s1024/Death%252520Valley%252520-%252520Dunes.jpg\",\n\n            \"https://lh6.googleusercontent.com/-ijQJ8W68tEE/URqulGkvFEI/AAAAAAAAAbs/zPXvIwi_rFw/s1024/Delicate%252520Arch.jpg\",\n\n            \"https://lh5.googleusercontent.com/-Oh8mMy2ieng/URqullDwehI/AAAAAAAAAbs/TbdeEfsaIZY/s1024/Despair.jpg\",\n\n            \"https://lh5.googleusercontent.com/-gl0y4UiAOlk/URqumC_KjBI/AAAAAAAAAbs/PM1eT7dn4oo/s1024/Eagle%252520Fall%252520Sunrise.jpg\",\n\n            \"https://lh3.googleusercontent.com/-hYYHd2_vXPQ/URqumtJa9eI/AAAAAAAAAbs/wAalXVkbSh0/s1024/Electric%252520Storm.jpg\",\n\n            \"https://lh5.googleusercontent.com/-PyY_yiyjPTo/URqunUOhHFI/AAAAAAAAAbs/azZoULNuJXc/s1024/False%252520Kiva.jpg\",\n\n            \"https://lh6.googleusercontent.com/-PYvLVdvXywk/URqunwd8hfI/AAAAAAAAAbs/qiMwgkFvf6I/s1024/Fitzgerald%252520Streaks.jpg\",\n\n            \"https://lh4.googleusercontent.com/-KIR_UobIIqY/URquoCZ9SlI/AAAAAAAAAbs/Y4d4q8sXu4c/s1024/Foggy%252520Sunset.jpg\",\n\n            \"https://lh6.googleusercontent.com/-9lzOk_OWZH0/URquoo4xYoI/AAAAAAAAAbs/AwgzHtNVCwU/s1024/Frantic.jpg\",\n\n            \"https://lh3.googleusercontent.com/-0X3JNaKaz48/URqupH78wpI/AAAAAAAAAbs/lHXxu_zbH8s/s1024/Golden%252520Gate%252520Afternoon.jpg\",\n\n            \"https://lh6.googleusercontent.com/-95sb5ag7ABc/URqupl95RDI/AAAAAAAAAbs/g73R20iVTRA/s1024/Golden%252520Gate%252520Fog.jpg\",\n\n            \"https://lh3.googleusercontent.com/-JB9v6rtgHhk/URqup21F-zI/AAAAAAAAAbs/64Fb8qMZWXk/s1024/Golden%252520Grass.jpg\",\n\n            \"https://lh4.googleusercontent.com/-EIBGfnuLtII/URquqVHwaRI/AAAAAAAAAbs/FA4McV2u8VE/s1024/Grand%252520Teton.jpg\",\n\n            \"https://lh4.googleusercontent.com/-WoMxZvmN9nY/URquq1v2AoI/AAAAAAAAAbs/grj5uMhL6NA/s1024/Grass%252520Closeup.jpg\",\n\n            \"https://lh3.googleusercontent.com/-6hZiEHXx64Q/URqurxvNdqI/AAAAAAAAAbs/kWMXM3o5OVI/s1024/Green%252520Grass.jpg\",\n\n            \"https://lh5.googleusercontent.com/-6LVb9OXtQ60/URquteBFuKI/AAAAAAAAAbs/4F4kRgecwFs/s1024/Hanging%252520Leaf.jpg\",\n\n            \"https://lh4.googleusercontent.com/-zAvf__52ONk/URqutT_IuxI/AAAAAAAAAbs/D_bcuc0thoU/s1024/Highway%2525201.jpg\",\n\n            \"https://lh6.googleusercontent.com/-H4SrUg615rA/URquuL27fXI/AAAAAAAAAbs/4aEqJfiMsOU/s1024/Horseshoe%252520Bend%252520Sunset.jpg\",\n\n            \"https://lh4.googleusercontent.com/-JhFi4fb_Pqw/URquuX-QXbI/AAAAAAAAAbs/IXpYUxuweYM/s1024/Horseshoe%252520Bend.jpg\",\n\n            \"https://lh5.googleusercontent.com/-UGgssvFRJ7g/URquueyJzGI/AAAAAAAAAbs/yYIBlLT0toM/s1024/Into%252520the%252520Blue.jpg\",\n\n            \"https://lh3.googleusercontent.com/-CH7KoupI7uI/URquu0FF__I/AAAAAAAAAbs/R7GDmI7v_G0/s1024/Jelly%252520Fish%2525202.jpg\",\n\n            \"https://lh4.googleusercontent.com/-pwuuw6yhg8U/URquvPxR3FI/AAAAAAAAAbs/VNGk6f-tsGE/s1024/Jelly%252520Fish%2525203.jpg\",\n\n            \"https://lh5.googleusercontent.com/-GoUQVw1fnFw/URquv6xbC0I/AAAAAAAAAbs/zEUVTQQ43Zc/s1024/Kauai.jpg\",\n\n            \"https://lh6.googleusercontent.com/-8QdYYQEpYjw/URquwvdh88I/AAAAAAAAAbs/cktDy-ysfHo/s1024/Kyoto%252520Sunset.jpg\",\n\n            \"https://lh4.googleusercontent.com/-vPeekyDjOE0/URquwzJ28qI/AAAAAAAAAbs/qxcyXULsZrg/s1024/Lake%252520Tahoe%252520Colors.jpg\",\n\n            \"https://lh4.googleusercontent.com/-xBPxWpD4yxU/URquxWHk8AI/AAAAAAAAAbs/ARDPeDYPiMY/s1024/Lava%252520from%252520the%252520Sky.jpg\",\n\n            \"https://lh3.googleusercontent.com/-897VXrJB6RE/URquxxxd-5I/AAAAAAAAAbs/j-Cz4T4YvIw/s1024/Leica%25252050mm%252520Summilux.jpg\",\n\n            \"https://lh5.googleusercontent.com/-qSJ4D4iXzGo/URquyDWiJ1I/AAAAAAAAAbs/k2pBXeWehOA/s1024/Leica%25252050mm%252520Summilux.jpg\",\n\n            \"https://lh6.googleusercontent.com/-dwlPg83vzLg/URquylTVuFI/AAAAAAAAAbs/G6SyQ8b4YsI/s1024/Leica%252520M8%252520%252528Front%252529.jpg\",\n\n            \"https://lh3.googleusercontent.com/-R3_EYAyJvfk/URquzQBv8eI/AAAAAAAAAbs/b9xhpUM3pEI/s1024/Light%252520to%252520Sand.jpg\",\n\n            \"https://lh3.googleusercontent.com/-fHY5h67QPi0/URqu0Cp4J1I/AAAAAAAAAbs/0lG6m94Z6vM/s1024/Little%252520Bit%252520of%252520Paradise.jpg\",\n\n            \"https://lh5.googleusercontent.com/-TzF_LwrCnRM/URqu0RddPOI/AAAAAAAAAbs/gaj2dLiuX0s/s1024/Lone%252520Pine%252520Sunset.jpg\",\n\n            \"https://lh3.googleusercontent.com/-4HdpJ4_DXU4/URqu046dJ9I/AAAAAAAAAbs/eBOodtk2_uk/s1024/Lonely%252520Rock.jpg\",\n\n            \"https://lh6.googleusercontent.com/-erbF--z-W4s/URqu1ajSLkI/AAAAAAAAAbs/xjDCDO1INzM/s1024/Longue%252520Vue.jpg\",\n\n            \"https://lh6.googleusercontent.com/-0CXJRdJaqvc/URqu1opNZNI/AAAAAAAAAbs/PFB2oPUU7Lk/s1024/Look%252520Me%252520in%252520the%252520Eye.jpg\",\n\n            \"https://lh3.googleusercontent.com/-D_5lNxnDN6g/URqu2Tk7HVI/AAAAAAAAAbs/p0ddca9W__Y/s1024/Lost%252520in%252520a%252520Field.jpg\",\n\n            \"https://lh6.googleusercontent.com/-flsqwMrIk2Q/URqu24PcmjI/AAAAAAAAAbs/5ocIH85XofM/s1024/Marshall%252520Beach%252520Sunset.jpg\",\n\n            \"https://lh4.googleusercontent.com/-Y4lgryEVTmU/URqu28kG3gI/AAAAAAAAAbs/OjXpekqtbJ4/s1024/Mono%252520Lake%252520Blue.jpg\",\n\n            \"https://lh4.googleusercontent.com/-AaHAJPmcGYA/URqu3PIldHI/AAAAAAAAAbs/lcTqk1SIcRs/s1024/Monument%252520Valley%252520Overlook.jpg\",\n\n            \"https://lh4.googleusercontent.com/-vKxfdQ83dQA/URqu31Yq_BI/AAAAAAAAAbs/OUoGk_2AyfM/s1024/Moving%252520Rock.jpg\",\n\n            \"https://lh5.googleusercontent.com/-CG62QiPpWXg/URqu4ia4vRI/AAAAAAAAAbs/0YOdqLAlcAc/s1024/Napali%252520Coast.jpg\",\n\n            \"https://lh6.googleusercontent.com/-wdGrP5PMmJQ/URqu5PZvn7I/AAAAAAAAAbs/m0abEcdPXe4/s1024/One%252520Wheel.jpg\",\n\n            \"https://lh6.googleusercontent.com/-6WS5DoCGuOA/URqu5qx1UgI/AAAAAAAAAbs/giMw2ixPvrY/s1024/Open%252520Sky.jpg\",\n\n            \"https://lh6.googleusercontent.com/-u8EHKj8G8GQ/URqu55sM6yI/AAAAAAAAAbs/lIXX_GlTdmI/s1024/Orange%252520Sunset.jpg\",\n\n            \"https://lh6.googleusercontent.com/-74Z5qj4bTDE/URqu6LSrJrI/AAAAAAAAAbs/XzmVkw90szQ/s1024/Orchid.jpg\",\n\n            \"https://lh6.googleusercontent.com/-lEQE4h6TePE/URqu6t_lSkI/AAAAAAAAAbs/zvGYKOea_qY/s1024/Over%252520there.jpg\",\n\n            \"https://lh5.googleusercontent.com/-cauH-53JH2M/URqu66v_USI/AAAAAAAAAbs/EucwwqclfKQ/s1024/Plumes.jpg\",\n\n            \"https://lh3.googleusercontent.com/-eDLT2jHDoy4/URqu7axzkAI/AAAAAAAAAbs/iVZE-xJ7lZs/s1024/Rainbokeh.jpg\",\n\n            \"https://lh5.googleusercontent.com/-j1NLqEFIyco/URqu8L1CGcI/AAAAAAAAAbs/aqZkgX66zlI/s1024/Rainbow.jpg\",\n\n            \"https://lh5.googleusercontent.com/-DRnqmK0t4VU/URqu8XYN9yI/AAAAAAAAAbs/LgvF_592WLU/s1024/Rice%252520Fields.jpg\",\n\n            \"https://lh3.googleusercontent.com/-hwh1v3EOGcQ/URqu8qOaKwI/AAAAAAAAAbs/IljRJRnbJGw/s1024/Rockaway%252520Fire%252520Sky.jpg\",\n\n            \"https://lh5.googleusercontent.com/-wjV6FQk7tlk/URqu9jCQ8sI/AAAAAAAAAbs/RyYUpdo-c9o/s1024/Rockaway%252520Flow.jpg\",\n\n            \"https://lh6.googleusercontent.com/-6cAXNfo7D20/URqu-BdzgPI/AAAAAAAAAbs/OmsYllzJqwo/s1024/Rockaway%252520Sunset%252520Sky.jpg\",\n\n            \"https://lh3.googleusercontent.com/-sl8fpGPS-RE/URqu_BOkfgI/AAAAAAAAAbs/Dg2Fv-JxOeg/s1024/Russian%252520Ridge%252520Sunset.jpg\",\n\n            \"https://lh6.googleusercontent.com/-gVtY36mMBIg/URqu_q91lkI/AAAAAAAAAbs/3CiFMBcy5MA/s1024/Rust%252520Knot.jpg\",\n\n            \"https://lh6.googleusercontent.com/-GHeImuHqJBE/URqu_FKfVLI/AAAAAAAAAbs/axuEJeqam7Q/s1024/Sailing%252520Stones.jpg\",\n\n            \"https://lh3.googleusercontent.com/-hBbYZjTOwGc/URqu_ycpIrI/AAAAAAAAAbs/nAdJUXnGJYE/s1024/Seahorse.jpg\",\n\n            \"https://lh3.googleusercontent.com/-Iwi6-i6IexY/URqvAYZHsVI/AAAAAAAAAbs/5ETWl4qXsFE/s1024/Shinjuku%252520Street.jpg\",\n\n            \"https://lh6.googleusercontent.com/-amhnySTM_MY/URqvAlb5KoI/AAAAAAAAAbs/pFCFgzlKsn0/s1024/Sierra%252520Heavens.jpg\",\n\n            \"https://lh5.googleusercontent.com/-dJgjepFrYSo/URqvBVJZrAI/AAAAAAAAAbs/v-F5QWpYO6s/s1024/Sierra%252520Sunset.jpg\",\n\n            \"https://lh4.googleusercontent.com/-Z4zGiC5nWdc/URqvBdEwivI/AAAAAAAAAbs/ZRZR1VJ84QA/s1024/Sin%252520Lights.jpg\",\n\n            \"https://lh4.googleusercontent.com/-_0cYiWW8ccY/URqvBz3iM4I/AAAAAAAAAbs/9N_Wq8MhLTY/s1024/Starry%252520Lake.jpg\",\n\n            \"https://lh3.googleusercontent.com/-A9LMoRyuQUA/URqvCYx_JoI/AAAAAAAAAbs/s7sde1Bz9cI/s1024/Starry%252520Night.jpg\",\n\n            \"https://lh3.googleusercontent.com/-KtLJ3k858eY/URqvC_2h_bI/AAAAAAAAAbs/zzEBImwDA_g/s1024/Stream.jpg\",\n\n            \"https://lh5.googleusercontent.com/-dFB7Lad6RcA/URqvDUftwWI/AAAAAAAAAbs/BrhoUtXTN7o/s1024/Strip%252520Sunset.jpg\",\n\n            \"https://lh5.googleusercontent.com/-at6apgFiN20/URqvDyffUZI/AAAAAAAAAbs/clABCx171bE/s1024/Sunset%252520Hills.jpg\",\n\n            \"https://lh4.googleusercontent.com/-7-EHhtQthII/URqvEYTk4vI/AAAAAAAAAbs/QSJZoB3YjVg/s1024/Tenaya%252520Lake%2525202.jpg\",\n\n            \"https://lh6.googleusercontent.com/-8MrjV_a-Pok/URqvFC5repI/AAAAAAAAAbs/9inKTg9fbCE/s1024/Tenaya%252520Lake.jpg\",\n\n            \"https://lh5.googleusercontent.com/-B1HW-z4zwao/URqvFWYRwUI/AAAAAAAAAbs/8Peli53Bs8I/s1024/The%252520Cave%252520BW.jpg\",\n\n            \"https://lh3.googleusercontent.com/-PO4E-xZKAnQ/URqvGRqjYkI/AAAAAAAAAbs/42nyADFsXag/s1024/The%252520Fisherman.jpg\",\n\n            \"https://lh4.googleusercontent.com/-iLyZlzfdy7s/URqvG0YScdI/AAAAAAAAAbs/1J9eDKmkXtk/s1024/The%252520Night%252520is%252520Coming.jpg\",\n\n            \"https://lh6.googleusercontent.com/-G-k7YkkUco0/URqvHhah6fI/AAAAAAAAAbs/_taQQG7t0vo/s1024/The%252520Road.jpg\",\n\n            \"https://lh6.googleusercontent.com/-h-ALJt7kSus/URqvIThqYfI/AAAAAAAAAbs/ejiv35olWS8/s1024/Tokyo%252520Heights.jpg\",\n\n            \"https://lh5.googleusercontent.com/-Hy9k-TbS7xg/URqvIjQMOxI/AAAAAAAAAbs/RSpmmOATSkg/s1024/Tokyo%252520Highway.jpg\",\n\n            \"https://lh6.googleusercontent.com/-83oOvMb4OZs/URqvJL0T7lI/AAAAAAAAAbs/c5TECZ6RONM/s1024/Tokyo%252520Smog.jpg\",\n\n            \"https://lh3.googleusercontent.com/-FB-jfgREEfI/URqvJI3EXAI/AAAAAAAAAbs/XfyweiRF4v8/s1024/Tufa%252520at%252520Night.jpg\",\n\n            \"https://lh4.googleusercontent.com/-vngKD5Z1U8w/URqvJUCEgPI/AAAAAAAAAbs/ulxCMVcU6EU/s1024/Valley%252520Sunset.jpg\",\n\n            \"https://lh6.googleusercontent.com/-DOz5I2E2oMQ/URqvKMND1kI/AAAAAAAAAbs/Iqf0IsInleo/s1024/Windmill%252520Sunrise.jpg\",\n\n            \"https://lh5.googleusercontent.com/-biyiyWcJ9MU/URqvKculiAI/AAAAAAAAAbs/jyPsCplJOpE/s1024/Windmill.jpg\",\n\n            \"https://lh4.googleusercontent.com/-PDT167_xRdA/URqvK36mLcI/AAAAAAAAAbs/oi2ik9QseMI/s1024/Windmills.jpg\",\n\n            \"https://lh5.googleusercontent.com/-kI_QdYx7VlU/URqvLXCB6gI/AAAAAAAAAbs/N31vlZ6u89o/s1024/Yet%252520Another%252520Rockaway%252520Sunset.jpg\",\n\n            \"https://lh4.googleusercontent.com/-e9NHZ5k5MSs/URqvMIBZjtI/AAAAAAAAAbs/1fV810rDNfQ/s1024/Yosemite%252520Tree.jpg\",\n\n    };\n\n \n\n    /**\n\n     * This are PicasaWeb thumbnail URLs and could potentially change. Ideally the PicasaWeb API\n\n     * should be used to fetch the URLs.\n\n     *\n\n     * Credit to Romain Guy for the photos:\n\n     * http://www.curious-creature.org/\n\n     * https://plus.google.com/109538161516040592207/about\n\n     * http://www.flickr.com/photos/romainguy\n\n     */\n\n    public final static String[] imageThumbUrls = new String[] {\n\n            \"https://lh6.googleusercontent.com/-55osAWw3x0Q/URquUtcFr5I/AAAAAAAAAbs/rWlj1RUKrYI/s240-c/A%252520Photographer.jpg\",\n\n            \"https://lh4.googleusercontent.com/--dq8niRp7W4/URquVgmXvgI/AAAAAAAAAbs/-gnuLQfNnBA/s240-c/A%252520Song%252520of%252520Ice%252520and%252520Fire.jpg\",\n\n            \"https://lh5.googleusercontent.com/-7qZeDtRKFKc/URquWZT1gOI/AAAAAAAAAbs/hqWgteyNXsg/s240-c/Another%252520Rockaway%252520Sunset.jpg\",\n\n            \"https://lh3.googleusercontent.com/--L0Km39l5J8/URquXHGcdNI/AAAAAAAAAbs/3ZrSJNrSomQ/s240-c/Antelope%252520Butte.jpg\",\n\n            \"https://lh6.googleusercontent.com/-8HO-4vIFnlw/URquZnsFgtI/AAAAAAAAAbs/WT8jViTF7vw/s240-c/Antelope%252520Hallway.jpg\",\n\n            \"https://lh4.googleusercontent.com/-WIuWgVcU3Qw/URqubRVcj4I/AAAAAAAAAbs/YvbwgGjwdIQ/s240-c/Antelope%252520Walls.jpg\",\n\n            \"https://lh6.googleusercontent.com/-UBmLbPELvoQ/URqucCdv0kI/AAAAAAAAAbs/IdNhr2VQoQs/s240-c/Apre%2525CC%252580s%252520la%252520Pluie.jpg\",\n\n            \"https://lh3.googleusercontent.com/-s-AFpvgSeew/URquc6dF-JI/AAAAAAAAAbs/Mt3xNGRUd68/s240-c/Backlit%252520Cloud.jpg\",\n\n            \"https://lh5.googleusercontent.com/-bvmif9a9YOQ/URquea3heHI/AAAAAAAAAbs/rcr6wyeQtAo/s240-c/Bee%252520and%252520Flower.jpg\",\n\n            \"https://lh5.googleusercontent.com/-n7mdm7I7FGs/URqueT_BT-I/AAAAAAAAAbs/9MYmXlmpSAo/s240-c/Bonzai%252520Rock%252520Sunset.jpg\",\n\n            \"https://lh6.googleusercontent.com/-4CN4X4t0M1k/URqufPozWzI/AAAAAAAAAbs/8wK41lg1KPs/s240-c/Caterpillar.jpg\",\n\n            \"https://lh3.googleusercontent.com/-rrFnVC8xQEg/URqufdrLBaI/AAAAAAAAAbs/s69WYy_fl1E/s240-c/Chess.jpg\",\n\n            \"https://lh5.googleusercontent.com/-WVpRptWH8Yw/URqugh-QmDI/AAAAAAAAAbs/E-MgBgtlUWU/s240-c/Chihuly.jpg\",\n\n            \"https://lh5.googleusercontent.com/-0BDXkYmckbo/URquhKFW84I/AAAAAAAAAbs/ogQtHCTk2JQ/s240-c/Closed%252520Door.jpg\",\n\n            \"https://lh3.googleusercontent.com/-PyggXXZRykM/URquh-kVvoI/AAAAAAAAAbs/hFtDwhtrHHQ/s240-c/Colorado%252520River%252520Sunset.jpg\",\n\n            \"https://lh3.googleusercontent.com/-ZAs4dNZtALc/URquikvOCWI/AAAAAAAAAbs/DXz4h3dll1Y/s240-c/Colors%252520of%252520Autumn.jpg\",\n\n            \"https://lh4.googleusercontent.com/-GztnWEIiMz8/URqukVCU7bI/AAAAAAAAAbs/jo2Hjv6MZ6M/s240-c/Countryside.jpg\",\n\n            \"https://lh4.googleusercontent.com/-bEg9EZ9QoiM/URquklz3FGI/AAAAAAAAAbs/UUuv8Ac2BaE/s240-c/Death%252520Valley%252520-%252520Dunes.jpg\",\n\n            \"https://lh6.googleusercontent.com/-ijQJ8W68tEE/URqulGkvFEI/AAAAAAAAAbs/zPXvIwi_rFw/s240-c/Delicate%252520Arch.jpg\",\n\n            \"https://lh5.googleusercontent.com/-Oh8mMy2ieng/URqullDwehI/AAAAAAAAAbs/TbdeEfsaIZY/s240-c/Despair.jpg\",\n\n            \"https://lh5.googleusercontent.com/-gl0y4UiAOlk/URqumC_KjBI/AAAAAAAAAbs/PM1eT7dn4oo/s240-c/Eagle%252520Fall%252520Sunrise.jpg\",\n\n            \"https://lh3.googleusercontent.com/-hYYHd2_vXPQ/URqumtJa9eI/AAAAAAAAAbs/wAalXVkbSh0/s240-c/Electric%252520Storm.jpg\",\n\n            \"https://lh5.googleusercontent.com/-PyY_yiyjPTo/URqunUOhHFI/AAAAAAAAAbs/azZoULNuJXc/s240-c/False%252520Kiva.jpg\",\n\n            \"https://lh6.googleusercontent.com/-PYvLVdvXywk/URqunwd8hfI/AAAAAAAAAbs/qiMwgkFvf6I/s240-c/Fitzgerald%252520Streaks.jpg\",\n\n            \"https://lh4.googleusercontent.com/-KIR_UobIIqY/URquoCZ9SlI/AAAAAAAAAbs/Y4d4q8sXu4c/s240-c/Foggy%252520Sunset.jpg\",\n\n            \"https://lh6.googleusercontent.com/-9lzOk_OWZH0/URquoo4xYoI/AAAAAAAAAbs/AwgzHtNVCwU/s240-c/Frantic.jpg\",\n\n            \"https://lh3.googleusercontent.com/-0X3JNaKaz48/URqupH78wpI/AAAAAAAAAbs/lHXxu_zbH8s/s240-c/Golden%252520Gate%252520Afternoon.jpg\",\n\n            \"https://lh6.googleusercontent.com/-95sb5ag7ABc/URqupl95RDI/AAAAAAAAAbs/g73R20iVTRA/s240-c/Golden%252520Gate%252520Fog.jpg\",\n\n            \"https://lh3.googleusercontent.com/-JB9v6rtgHhk/URqup21F-zI/AAAAAAAAAbs/64Fb8qMZWXk/s240-c/Golden%252520Grass.jpg\",\n\n            \"https://lh4.googleusercontent.com/-EIBGfnuLtII/URquqVHwaRI/AAAAAAAAAbs/FA4McV2u8VE/s240-c/Grand%252520Teton.jpg\",\n\n            \"https://lh4.googleusercontent.com/-WoMxZvmN9nY/URquq1v2AoI/AAAAAAAAAbs/grj5uMhL6NA/s240-c/Grass%252520Closeup.jpg\",\n\n            \"https://lh3.googleusercontent.com/-6hZiEHXx64Q/URqurxvNdqI/AAAAAAAAAbs/kWMXM3o5OVI/s240-c/Green%252520Grass.jpg\",\n\n            \"https://lh5.googleusercontent.com/-6LVb9OXtQ60/URquteBFuKI/AAAAAAAAAbs/4F4kRgecwFs/s240-c/Hanging%252520Leaf.jpg\",\n\n            \"https://lh4.googleusercontent.com/-zAvf__52ONk/URqutT_IuxI/AAAAAAAAAbs/D_bcuc0thoU/s240-c/Highway%2525201.jpg\",\n\n            \"https://lh6.googleusercontent.com/-H4SrUg615rA/URquuL27fXI/AAAAAAAAAbs/4aEqJfiMsOU/s240-c/Horseshoe%252520Bend%252520Sunset.jpg\",\n\n            \"https://lh4.googleusercontent.com/-JhFi4fb_Pqw/URquuX-QXbI/AAAAAAAAAbs/IXpYUxuweYM/s240-c/Horseshoe%252520Bend.jpg\",\n\n            \"https://lh5.googleusercontent.com/-UGgssvFRJ7g/URquueyJzGI/AAAAAAAAAbs/yYIBlLT0toM/s240-c/Into%252520the%252520Blue.jpg\",\n\n            \"https://lh3.googleusercontent.com/-CH7KoupI7uI/URquu0FF__I/AAAAAAAAAbs/R7GDmI7v_G0/s240-c/Jelly%252520Fish%2525202.jpg\",\n\n            \"https://lh4.googleusercontent.com/-pwuuw6yhg8U/URquvPxR3FI/AAAAAAAAAbs/VNGk6f-tsGE/s240-c/Jelly%252520Fish%2525203.jpg\",\n\n            \"https://lh5.googleusercontent.com/-GoUQVw1fnFw/URquv6xbC0I/AAAAAAAAAbs/zEUVTQQ43Zc/s240-c/Kauai.jpg\",\n\n            \"https://lh6.googleusercontent.com/-8QdYYQEpYjw/URquwvdh88I/AAAAAAAAAbs/cktDy-ysfHo/s240-c/Kyoto%252520Sunset.jpg\",\n\n            \"https://lh4.googleusercontent.com/-vPeekyDjOE0/URquwzJ28qI/AAAAAAAAAbs/qxcyXULsZrg/s240-c/Lake%252520Tahoe%252520Colors.jpg\",\n\n            \"https://lh4.googleusercontent.com/-xBPxWpD4yxU/URquxWHk8AI/AAAAAAAAAbs/ARDPeDYPiMY/s240-c/Lava%252520from%252520the%252520Sky.jpg\",\n\n            \"https://lh3.googleusercontent.com/-897VXrJB6RE/URquxxxd-5I/AAAAAAAAAbs/j-Cz4T4YvIw/s240-c/Leica%25252050mm%252520Summilux.jpg\",\n\n            \"https://lh5.googleusercontent.com/-qSJ4D4iXzGo/URquyDWiJ1I/AAAAAAAAAbs/k2pBXeWehOA/s240-c/Leica%25252050mm%252520Summilux.jpg\",\n\n            \"https://lh6.googleusercontent.com/-dwlPg83vzLg/URquylTVuFI/AAAAAAAAAbs/G6SyQ8b4YsI/s240-c/Leica%252520M8%252520%252528Front%252529.jpg\",\n\n            \"https://lh3.googleusercontent.com/-R3_EYAyJvfk/URquzQBv8eI/AAAAAAAAAbs/b9xhpUM3pEI/s240-c/Light%252520to%252520Sand.jpg\",\n\n            \"https://lh3.googleusercontent.com/-fHY5h67QPi0/URqu0Cp4J1I/AAAAAAAAAbs/0lG6m94Z6vM/s240-c/Little%252520Bit%252520of%252520Paradise.jpg\",\n\n            \"https://lh5.googleusercontent.com/-TzF_LwrCnRM/URqu0RddPOI/AAAAAAAAAbs/gaj2dLiuX0s/s240-c/Lone%252520Pine%252520Sunset.jpg\",\n\n            \"https://lh3.googleusercontent.com/-4HdpJ4_DXU4/URqu046dJ9I/AAAAAAAAAbs/eBOodtk2_uk/s240-c/Lonely%252520Rock.jpg\",\n\n            \"https://lh6.googleusercontent.com/-erbF--z-W4s/URqu1ajSLkI/AAAAAAAAAbs/xjDCDO1INzM/s240-c/Longue%252520Vue.jpg\",\n\n            \"https://lh6.googleusercontent.com/-0CXJRdJaqvc/URqu1opNZNI/AAAAAAAAAbs/PFB2oPUU7Lk/s240-c/Look%252520Me%252520in%252520the%252520Eye.jpg\",\n\n            \"https://lh3.googleusercontent.com/-D_5lNxnDN6g/URqu2Tk7HVI/AAAAAAAAAbs/p0ddca9W__Y/s240-c/Lost%252520in%252520a%252520Field.jpg\",\n\n            \"https://lh6.googleusercontent.com/-flsqwMrIk2Q/URqu24PcmjI/AAAAAAAAAbs/5ocIH85XofM/s240-c/Marshall%252520Beach%252520Sunset.jpg\",\n\n            \"https://lh4.googleusercontent.com/-Y4lgryEVTmU/URqu28kG3gI/AAAAAAAAAbs/OjXpekqtbJ4/s240-c/Mono%252520Lake%252520Blue.jpg\",\n\n            \"https://lh4.googleusercontent.com/-AaHAJPmcGYA/URqu3PIldHI/AAAAAAAAAbs/lcTqk1SIcRs/s240-c/Monument%252520Valley%252520Overlook.jpg\",\n\n            \"https://lh4.googleusercontent.com/-vKxfdQ83dQA/URqu31Yq_BI/AAAAAAAAAbs/OUoGk_2AyfM/s240-c/Moving%252520Rock.jpg\",\n\n            \"https://lh5.googleusercontent.com/-CG62QiPpWXg/URqu4ia4vRI/AAAAAAAAAbs/0YOdqLAlcAc/s240-c/Napali%252520Coast.jpg\",\n\n            \"https://lh6.googleusercontent.com/-wdGrP5PMmJQ/URqu5PZvn7I/AAAAAAAAAbs/m0abEcdPXe4/s240-c/One%252520Wheel.jpg\",\n\n            \"https://lh6.googleusercontent.com/-6WS5DoCGuOA/URqu5qx1UgI/AAAAAAAAAbs/giMw2ixPvrY/s240-c/Open%252520Sky.jpg\",\n\n            \"https://lh6.googleusercontent.com/-u8EHKj8G8GQ/URqu55sM6yI/AAAAAAAAAbs/lIXX_GlTdmI/s240-c/Orange%252520Sunset.jpg\",\n\n            \"https://lh6.googleusercontent.com/-74Z5qj4bTDE/URqu6LSrJrI/AAAAAAAAAbs/XzmVkw90szQ/s240-c/Orchid.jpg\",\n\n            \"https://lh6.googleusercontent.com/-lEQE4h6TePE/URqu6t_lSkI/AAAAAAAAAbs/zvGYKOea_qY/s240-c/Over%252520there.jpg\",\n\n            \"https://lh5.googleusercontent.com/-cauH-53JH2M/URqu66v_USI/AAAAAAAAAbs/EucwwqclfKQ/s240-c/Plumes.jpg\",\n\n            \"https://lh3.googleusercontent.com/-eDLT2jHDoy4/URqu7axzkAI/AAAAAAAAAbs/iVZE-xJ7lZs/s240-c/Rainbokeh.jpg\",\n\n            \"https://lh5.googleusercontent.com/-j1NLqEFIyco/URqu8L1CGcI/AAAAAAAAAbs/aqZkgX66zlI/s240-c/Rainbow.jpg\",\n\n            \"https://lh5.googleusercontent.com/-DRnqmK0t4VU/URqu8XYN9yI/AAAAAAAAAbs/LgvF_592WLU/s240-c/Rice%252520Fields.jpg\",\n\n            \"https://lh3.googleusercontent.com/-hwh1v3EOGcQ/URqu8qOaKwI/AAAAAAAAAbs/IljRJRnbJGw/s240-c/Rockaway%252520Fire%252520Sky.jpg\",\n\n            \"https://lh5.googleusercontent.com/-wjV6FQk7tlk/URqu9jCQ8sI/AAAAAAAAAbs/RyYUpdo-c9o/s240-c/Rockaway%252520Flow.jpg\",\n\n            \"https://lh6.googleusercontent.com/-6cAXNfo7D20/URqu-BdzgPI/AAAAAAAAAbs/OmsYllzJqwo/s240-c/Rockaway%252520Sunset%252520Sky.jpg\",\n\n            \"https://lh3.googleusercontent.com/-sl8fpGPS-RE/URqu_BOkfgI/AAAAAAAAAbs/Dg2Fv-JxOeg/s240-c/Russian%252520Ridge%252520Sunset.jpg\",\n\n            \"https://lh6.googleusercontent.com/-gVtY36mMBIg/URqu_q91lkI/AAAAAAAAAbs/3CiFMBcy5MA/s240-c/Rust%252520Knot.jpg\",\n\n            \"https://lh6.googleusercontent.com/-GHeImuHqJBE/URqu_FKfVLI/AAAAAAAAAbs/axuEJeqam7Q/s240-c/Sailing%252520Stones.jpg\",\n\n            \"https://lh3.googleusercontent.com/-hBbYZjTOwGc/URqu_ycpIrI/AAAAAAAAAbs/nAdJUXnGJYE/s240-c/Seahorse.jpg\",\n\n            \"https://lh3.googleusercontent.com/-Iwi6-i6IexY/URqvAYZHsVI/AAAAAAAAAbs/5ETWl4qXsFE/s240-c/Shinjuku%252520Street.jpg\",\n\n            \"https://lh6.googleusercontent.com/-amhnySTM_MY/URqvAlb5KoI/AAAAAAAAAbs/pFCFgzlKsn0/s240-c/Sierra%252520Heavens.jpg\",\n\n            \"https://lh5.googleusercontent.com/-dJgjepFrYSo/URqvBVJZrAI/AAAAAAAAAbs/v-F5QWpYO6s/s240-c/Sierra%252520Sunset.jpg\",\n\n            \"https://lh4.googleusercontent.com/-Z4zGiC5nWdc/URqvBdEwivI/AAAAAAAAAbs/ZRZR1VJ84QA/s240-c/Sin%252520Lights.jpg\",\n\n            \"https://lh4.googleusercontent.com/-_0cYiWW8ccY/URqvBz3iM4I/AAAAAAAAAbs/9N_Wq8MhLTY/s240-c/Starry%252520Lake.jpg\",\n\n            \"https://lh3.googleusercontent.com/-A9LMoRyuQUA/URqvCYx_JoI/AAAAAAAAAbs/s7sde1Bz9cI/s240-c/Starry%252520Night.jpg\",\n\n            \"https://lh3.googleusercontent.com/-KtLJ3k858eY/URqvC_2h_bI/AAAAAAAAAbs/zzEBImwDA_g/s240-c/Stream.jpg\",\n\n            \"https://lh5.googleusercontent.com/-dFB7Lad6RcA/URqvDUftwWI/AAAAAAAAAbs/BrhoUtXTN7o/s240-c/Strip%252520Sunset.jpg\",\n\n            \"https://lh5.googleusercontent.com/-at6apgFiN20/URqvDyffUZI/AAAAAAAAAbs/clABCx171bE/s240-c/Sunset%252520Hills.jpg\",\n\n            \"https://lh4.googleusercontent.com/-7-EHhtQthII/URqvEYTk4vI/AAAAAAAAAbs/QSJZoB3YjVg/s240-c/Tenaya%252520Lake%2525202.jpg\",\n\n            \"https://lh6.googleusercontent.com/-8MrjV_a-Pok/URqvFC5repI/AAAAAAAAAbs/9inKTg9fbCE/s240-c/Tenaya%252520Lake.jpg\",\n\n            \"https://lh5.googleusercontent.com/-B1HW-z4zwao/URqvFWYRwUI/AAAAAAAAAbs/8Peli53Bs8I/s240-c/The%252520Cave%252520BW.jpg\",\n\n            \"https://lh3.googleusercontent.com/-PO4E-xZKAnQ/URqvGRqjYkI/AAAAAAAAAbs/42nyADFsXag/s240-c/The%252520Fisherman.jpg\",\n\n            \"https://lh4.googleusercontent.com/-iLyZlzfdy7s/URqvG0YScdI/AAAAAAAAAbs/1J9eDKmkXtk/s240-c/The%252520Night%252520is%252520Coming.jpg\",\n\n            \"https://lh6.googleusercontent.com/-G-k7YkkUco0/URqvHhah6fI/AAAAAAAAAbs/_taQQG7t0vo/s240-c/The%252520Road.jpg\",\n\n            \"https://lh6.googleusercontent.com/-h-ALJt7kSus/URqvIThqYfI/AAAAAAAAAbs/ejiv35olWS8/s240-c/Tokyo%252520Heights.jpg\",\n\n            \"https://lh5.googleusercontent.com/-Hy9k-TbS7xg/URqvIjQMOxI/AAAAAAAAAbs/RSpmmOATSkg/s240-c/Tokyo%252520Highway.jpg\",\n\n            \"https://lh6.googleusercontent.com/-83oOvMb4OZs/URqvJL0T7lI/AAAAAAAAAbs/c5TECZ6RONM/s240-c/Tokyo%252520Smog.jpg\",\n\n            \"https://lh3.googleusercontent.com/-FB-jfgREEfI/URqvJI3EXAI/AAAAAAAAAbs/XfyweiRF4v8/s240-c/Tufa%252520at%252520Night.jpg\",\n\n            \"https://lh4.googleusercontent.com/-vngKD5Z1U8w/URqvJUCEgPI/AAAAAAAAAbs/ulxCMVcU6EU/s240-c/Valley%252520Sunset.jpg\",\n\n            \"https://lh6.googleusercontent.com/-DOz5I2E2oMQ/URqvKMND1kI/AAAAAAAAAbs/Iqf0IsInleo/s240-c/Windmill%252520Sunrise.jpg\",\n\n            \"https://lh5.googleusercontent.com/-biyiyWcJ9MU/URqvKculiAI/AAAAAAAAAbs/jyPsCplJOpE/s240-c/Windmill.jpg\",\n\n            \"https://lh4.googleusercontent.com/-PDT167_xRdA/URqvK36mLcI/AAAAAAAAAbs/oi2ik9QseMI/s240-c/Windmills.jpg\",\n\n            \"https://lh5.googleusercontent.com/-kI_QdYx7VlU/URqvLXCB6gI/AAAAAAAAAbs/N31vlZ6u89o/s240-c/Yet%252520Another%252520Rockaway%252520Sunset.jpg\",\n\n            \"https://lh4.googleusercontent.com/-e9NHZ5k5MSs/URqvMIBZjtI/AAAAAAAAAbs/1fV810rDNfQ/s240-c/Yosemite%252520Tree.jpg\",\n\n    };\n\n}\n  "},"ui":{"ImageDetailActivity.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.displayingbitmaps.ui;\n\n \n\nimport android.annotation.TargetApi;\n\nimport android.app.ActionBar;\n\nimport android.os.Build.VERSION_CODES;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.support.v4.app.FragmentActivity;\n\nimport android.support.v4.app.FragmentManager;\n\nimport android.support.v4.app.FragmentStatePagerAdapter;\n\nimport android.support.v4.app.NavUtils;\n\nimport android.support.v4.view.ViewPager;\n\nimport android.util.DisplayMetrics;\n\nimport android.view.Menu;\n\nimport android.view.MenuItem;\n\nimport android.view.View;\n\nimport android.view.View.OnClickListener;\n\nimport android.view.WindowManager.LayoutParams;\n\nimport android.widget.Toast;\n\n \n\nimport com.example.android.displayingbitmaps.BuildConfig;\n\nimport com.example.android.displayingbitmaps.R;\n\nimport com.example.android.displayingbitmaps.provider.Images;\n\nimport com.example.android.displayingbitmaps.util.ImageCache;\n\nimport com.example.android.displayingbitmaps.util.ImageFetcher;\n\nimport com.example.android.displayingbitmaps.util.Utils;\n\n \n\npublic class ImageDetailActivity extends FragmentActivity implements OnClickListener {\n\n    private static final String IMAGE_CACHE_DIR = \"images\";\n\n    public static final String EXTRA_IMAGE = \"extra_image\";\n\n \n\n    private ImagePagerAdapter mAdapter;\n\n    private ImageFetcher mImageFetcher;\n\n    private ViewPager mPager;\n\n \n\n    @TargetApi(VERSION_CODES.HONEYCOMB)\n\n    @Override\n\n    public void onCreate(Bundle savedInstanceState) {\n\n        if (BuildConfig.DEBUG) {\n\n            Utils.enableStrictMode();\n\n        }\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.image_detail_pager);\n\n \n\n        // Fetch screen height and width, to use as our max size when loading images as this\n\n        // activity runs full screen\n\n        final DisplayMetrics displayMetrics = new DisplayMetrics();\n\n        getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);\n\n        final int height = displayMetrics.heightPixels;\n\n        final int width = displayMetrics.widthPixels;\n\n \n\n        // For this sample we'll use half of the longest width to resize our images. As the\n\n        // image scaling ensures the image is larger than this, we should be left with a\n\n        // resolution that is appropriate for both portrait and landscape. For best image quality\n\n        // we shouldn't divide by 2, but this will use more memory and require a larger memory\n\n        // cache.\n\n        final int longest = (height > width ? height : width) / 2;\n\n \n\n        ImageCache.ImageCacheParams cacheParams =\n\n                new ImageCache.ImageCacheParams(this, IMAGE_CACHE_DIR);\n\n        cacheParams.setMemCacheSizePercent(0.25f); // Set memory cache to 25% of app memory\n\n \n\n        // The ImageFetcher takes care of loading images into our ImageView children asynchronously\n\n        mImageFetcher = new ImageFetcher(this, longest);\n\n        mImageFetcher.addImageCache(getSupportFragmentManager(), cacheParams);\n\n        mImageFetcher.setImageFadeIn(false);\n\n \n\n        // Set up ViewPager and backing adapter\n\n        mAdapter = new ImagePagerAdapter(getSupportFragmentManager(), Images.imageUrls.length);\n\n        mPager = (ViewPager) findViewById(R.id.pager);\n\n        mPager.setAdapter(mAdapter);\n\n        mPager.setPageMargin((int) getResources().getDimension(R.dimen.horizontal_page_margin));\n\n        mPager.setOffscreenPageLimit(2);\n\n \n\n        // Set up activity to go full screen\n\n        getWindow().addFlags(LayoutParams.FLAG_FULLSCREEN);\n\n \n\n        // Enable some additional newer visibility and ActionBar features to create a more\n\n        // immersive photo viewing experience\n\n        if (Utils.hasHoneycomb()) {\n\n            final ActionBar actionBar = getActionBar();\n\n \n\n            // Hide title text and set home as up\n\n            actionBar.setDisplayShowTitleEnabled(false);\n\n            actionBar.setDisplayHomeAsUpEnabled(true);\n\n \n\n            // Hide and show the ActionBar as the visibility changes\n\n            mPager.setOnSystemUiVisibilityChangeListener(\n\n                    new View.OnSystemUiVisibilityChangeListener() {\n\n                        @Override\n\n                        public void onSystemUiVisibilityChange(int vis) {\n\n                            if ((vis & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0) {\n\n                                actionBar.hide();\n\n                            } else {\n\n                                actionBar.show();\n\n                            }\n\n                        }\n\n                    });\n\n \n\n            // Start low profile mode and hide ActionBar\n\n            mPager.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LOW_PROFILE);\n\n            actionBar.hide();\n\n        }\n\n \n\n        // Set the current item based on the extra passed in to this activity\n\n        final int extraCurrentItem = getIntent().getIntExtra(EXTRA_IMAGE, -1);\n\n        if (extraCurrentItem != -1) {\n\n            mPager.setCurrentItem(extraCurrentItem);\n\n        }\n\n    }\n\n \n\n    @Override\n\n    public void onResume() {\n\n        super.onResume();\n\n        mImageFetcher.setExitTasksEarly(false);\n\n    }\n\n \n\n    @Override\n\n    protected void onPause() {\n\n        super.onPause();\n\n        mImageFetcher.setExitTasksEarly(true);\n\n        mImageFetcher.flushCache();\n\n    }\n\n \n\n    @Override\n\n    protected void onDestroy() {\n\n        super.onDestroy();\n\n        mImageFetcher.closeCache();\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch (item.getItemId()) {\n\n            case android.R.id.home:\n\n                NavUtils.navigateUpFromSameTask(this);\n\n                return true;\n\n            case R.id.clear_cache:\n\n                mImageFetcher.clearCache();\n\n                Toast.makeText(\n\n                        this, R.string.clear_cache_complete_toast,Toast.LENGTH_SHORT).show();\n\n                return true;\n\n        }\n\n        return super.onOptionsItemSelected(item);\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        getMenuInflater().inflate(R.menu.main_menu, menu);\n\n        return true;\n\n    }\n\n \n\n    /**\n\n     * Called by the ViewPager child fragments to load images via the one ImageFetcher\n\n     */\n\n    public ImageFetcher getImageFetcher() {\n\n        return mImageFetcher;\n\n    }\n\n \n\n    /**\n\n     * The main adapter that backs the ViewPager. A subclass of FragmentStatePagerAdapter as there\n\n     * could be a large number of items in the ViewPager and we don't want to retain them all in\n\n     * memory at once but create/destroy them on the fly.\n\n     */\n\n    private class ImagePagerAdapter extends FragmentStatePagerAdapter {\n\n        private final int mSize;\n\n \n\n        public ImagePagerAdapter(FragmentManager fm, int size) {\n\n            super(fm);\n\n            mSize = size;\n\n        }\n\n \n\n        @Override\n\n        public int getCount() {\n\n            return mSize;\n\n        }\n\n \n\n        @Override\n\n        public Fragment getItem(int position) {\n\n            return ImageDetailFragment.newInstance(Images.imageUrls[position]);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Set on the ImageView in the ViewPager children fragments, to enable/disable low profile mode\n\n     * when the ImageView is touched.\n\n     */\n\n    @TargetApi(VERSION_CODES.HONEYCOMB)\n\n    @Override\n\n    public void onClick(View v) {\n\n        final int vis = mPager.getSystemUiVisibility();\n\n        if ((vis & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0) {\n\n            mPager.setSystemUiVisibility(View.SYSTEM_UI_FLAG_VISIBLE);\n\n        } else {\n\n            mPager.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LOW_PROFILE);\n\n        }\n\n    }\n\n}\n  ","ImageDetailFragment.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.displayingbitmaps.ui;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.View.OnClickListener;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ImageView;\n\n \n\nimport com.example.android.displayingbitmaps.R;\n\nimport com.example.android.displayingbitmaps.util.ImageFetcher;\n\nimport com.example.android.displayingbitmaps.util.ImageWorker;\n\nimport com.example.android.displayingbitmaps.util.Utils;\n\n \n\n/**\n\n * This fragment will populate the children of the ViewPager from {@link ImageDetailActivity}.\n\n */\n\npublic class ImageDetailFragment extends Fragment {\n\n    private static final String IMAGE_DATA_EXTRA = \"extra_image_data\";\n\n    private String mImageUrl;\n\n    private ImageView mImageView;\n\n    private ImageFetcher mImageFetcher;\n\n \n\n    /**\n\n     * Factory method to generate a new instance of the fragment given an image number.\n\n     *\n\n     * @param imageUrl The image url to load\n\n     * @return A new instance of ImageDetailFragment with imageNum extras\n\n     */\n\n    public static ImageDetailFragment newInstance(String imageUrl) {\n\n        final ImageDetailFragment f = new ImageDetailFragment();\n\n \n\n        final Bundle args = new Bundle();\n\n        args.putString(IMAGE_DATA_EXTRA, imageUrl);\n\n        f.setArguments(args);\n\n \n\n        return f;\n\n    }\n\n \n\n    /**\n\n     * Empty constructor as per the Fragment documentation\n\n     */\n\n    public ImageDetailFragment() {}\n\n \n\n    /**\n\n     * Populate image using a url from extras, use the convenience factory method\n\n     * {@link ImageDetailFragment#newInstance(String)} to create this fragment.\n\n     */\n\n    @Override\n\n    public void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        mImageUrl = getArguments() != null ? getArguments().getString(IMAGE_DATA_EXTRA) : null;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n            Bundle savedInstanceState) {\n\n        // Inflate and locate the main ImageView\n\n        final View v = inflater.inflate(R.layout.image_detail_fragment, container, false);\n\n        mImageView = (ImageView) v.findViewById(R.id.imageView);\n\n        return v;\n\n    }\n\n \n\n    @Override\n\n    public void onActivityCreated(Bundle savedInstanceState) {\n\n        super.onActivityCreated(savedInstanceState);\n\n \n\n        // Use the parent activity to load the image asynchronously into the ImageView (so a single\n\n        // cache can be used over all pages in the ViewPager\n\n        if (ImageDetailActivity.class.isInstance(getActivity())) {\n\n            mImageFetcher = ((ImageDetailActivity) getActivity()).getImageFetcher();\n\n            mImageFetcher.loadImage(mImageUrl, mImageView);\n\n        }\n\n \n\n        // Pass clicks on the ImageView to the parent activity to handle\n\n        if (OnClickListener.class.isInstance(getActivity()) && Utils.hasHoneycomb()) {\n\n            mImageView.setOnClickListener((OnClickListener) getActivity());\n\n        }\n\n    }\n\n \n\n    @Override\n\n    public void onDestroy() {\n\n        super.onDestroy();\n\n        if (mImageView != null) {\n\n            // Cancel any pending image work\n\n            ImageWorker.cancelWork(mImageView);\n\n            mImageView.setImageDrawable(null);\n\n        }\n\n    }\n\n}\n  ","ImageGridActivity.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.displayingbitmaps.ui;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentActivity;\n\nimport android.support.v4.app.FragmentTransaction;\n\n \n\nimport com.example.android.displayingbitmaps.BuildConfig;\n\nimport com.example.android.displayingbitmaps.util.Utils;\n\n \n\n/**\n\n * Simple FragmentActivity to hold the main {@link ImageGridFragment} and not much else.\n\n */\n\npublic class ImageGridActivity extends FragmentActivity {\n\n    private static final String TAG = \"ImageGridActivity\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        if (BuildConfig.DEBUG) {\n\n            Utils.enableStrictMode();\n\n        }\n\n        super.onCreate(savedInstanceState);\n\n \n\n        if (getSupportFragmentManager().findFragmentByTag(TAG) == null) {\n\n            final FragmentTransaction ft = getSupportFragmentManager().beginTransaction();\n\n            ft.add(android.R.id.content, new ImageGridFragment(), TAG);\n\n            ft.commit();\n\n        }\n\n    }\n\n}\n  ","ImageGridFragment.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.displayingbitmaps.ui;\n\n \n\nimport android.annotation.TargetApi;\n\nimport android.app.ActivityOptions;\n\nimport android.content.Context;\n\nimport android.content.Intent;\n\nimport android.os.Build.VERSION_CODES;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.util.TypedValue;\n\nimport android.view.LayoutInflater;\n\nimport android.view.Menu;\n\nimport android.view.MenuInflater;\n\nimport android.view.MenuItem;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.view.ViewGroup.LayoutParams;\n\nimport android.view.ViewTreeObserver;\n\nimport android.widget.AbsListView;\n\nimport android.widget.AdapterView;\n\nimport android.widget.BaseAdapter;\n\nimport android.widget.GridView;\n\nimport android.widget.ImageView;\n\nimport android.widget.Toast;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.displayingbitmaps.BuildConfig;\n\nimport com.example.android.displayingbitmaps.R;\n\nimport com.example.android.displayingbitmaps.provider.Images;\n\nimport com.example.android.displayingbitmaps.util.ImageCache;\n\nimport com.example.android.displayingbitmaps.util.ImageFetcher;\n\nimport com.example.android.displayingbitmaps.util.Utils;\n\n \n\n/**\n\n * The main fragment that powers the ImageGridActivity screen. Fairly straight forward GridView\n\n * implementation with the key addition being the ImageWorker class w/ImageCache to load children\n\n * asynchronously, keeping the UI nice and smooth and caching thumbnails for quick retrieval. The\n\n * cache is retained over configuration changes like orientation change so the images are populated\n\n * quickly if, for example, the user rotates the device.\n\n */\n\npublic class ImageGridFragment extends Fragment implements AdapterView.OnItemClickListener {\n\n    private static final String TAG = \"ImageGridFragment\";\n\n    private static final String IMAGE_CACHE_DIR = \"thumbs\";\n\n \n\n    private int mImageThumbSize;\n\n    private int mImageThumbSpacing;\n\n    private ImageAdapter mAdapter;\n\n    private ImageFetcher mImageFetcher;\n\n \n\n    /**\n\n     * Empty constructor as per the Fragment documentation\n\n     */\n\n    public ImageGridFragment() {}\n\n \n\n    @Override\n\n    public void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setHasOptionsMenu(true);\n\n \n\n        mImageThumbSize = getResources().getDimensionPixelSize(R.dimen.image_thumbnail_size);\n\n        mImageThumbSpacing = getResources().getDimensionPixelSize(R.dimen.image_thumbnail_spacing);\n\n \n\n        mAdapter = new ImageAdapter(getActivity());\n\n \n\n        ImageCache.ImageCacheParams cacheParams =\n\n                new ImageCache.ImageCacheParams(getActivity(), IMAGE_CACHE_DIR);\n\n \n\n        cacheParams.setMemCacheSizePercent(0.25f); // Set memory cache to 25% of app memory\n\n \n\n        // The ImageFetcher takes care of loading images into our ImageView children asynchronously\n\n        mImageFetcher = new ImageFetcher(getActivity(), mImageThumbSize);\n\n        mImageFetcher.setLoadingImage(R.drawable.empty_photo);\n\n        mImageFetcher.addImageCache(getActivity().getSupportFragmentManager(), cacheParams);\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(\n\n            LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n\n \n\n        final View v = inflater.inflate(R.layout.image_grid_fragment, container, false);\n\n        final GridView mGridView = (GridView) v.findViewById(R.id.gridView);\n\n        mGridView.setAdapter(mAdapter);\n\n        mGridView.setOnItemClickListener(this);\n\n        mGridView.setOnScrollListener(new AbsListView.OnScrollListener() {\n\n            @Override\n\n            public void onScrollStateChanged(AbsListView absListView, int scrollState) {\n\n                // Pause fetcher to ensure smoother scrolling when flinging\n\n                if (scrollState == AbsListView.OnScrollListener.SCROLL_STATE_FLING) {\n\n                    // Before Honeycomb pause image loading on scroll to help with performance\n\n                    if (!Utils.hasHoneycomb()) {\n\n                        mImageFetcher.setPauseWork(true);\n\n                    }\n\n                } else {\n\n                    mImageFetcher.setPauseWork(false);\n\n                }\n\n            }\n\n \n\n            @Override\n\n            public void onScroll(AbsListView absListView, int firstVisibleItem,\n\n                    int visibleItemCount, int totalItemCount) {\n\n            }\n\n        });\n\n \n\n        // This listener is used to get the final width of the GridView and then calculate the\n\n        // number of columns and the width of each column. The width of each column is variable\n\n        // as the GridView has stretchMode=columnWidth. The column width is used to set the height\n\n        // of each view so we get nice square thumbnails.\n\n        mGridView.getViewTreeObserver().addOnGlobalLayoutListener(\n\n                new ViewTreeObserver.OnGlobalLayoutListener() {\n\n                    @TargetApi(VERSION_CODES.JELLY_BEAN)\n\n                    @Override\n\n                    public void onGlobalLayout() {\n\n                        if (mAdapter.getNumColumns() == 0) {\n\n                            final int numColumns = (int) Math.floor(\n\n                                    mGridView.getWidth() / (mImageThumbSize + mImageThumbSpacing));\n\n                            if (numColumns > 0) {\n\n                                final int columnWidth =\n\n                                        (mGridView.getWidth() / numColumns) - mImageThumbSpacing;\n\n                                mAdapter.setNumColumns(numColumns);\n\n                                mAdapter.setItemHeight(columnWidth);\n\n                                if (BuildConfig.DEBUG) {\n\n                                    Log.d(TAG, \"onCreateView - numColumns set to \" + numColumns);\n\n                                }\n\n                                if (Utils.hasJellyBean()) {\n\n                                    mGridView.getViewTreeObserver()\n\n                                            .removeOnGlobalLayoutListener(this);\n\n                                } else {\n\n                                    mGridView.getViewTreeObserver()\n\n                                            .removeGlobalOnLayoutListener(this);\n\n                                }\n\n                            }\n\n                        }\n\n                    }\n\n                });\n\n \n\n        return v;\n\n    }\n\n \n\n    @Override\n\n    public void onResume() {\n\n        super.onResume();\n\n        mImageFetcher.setExitTasksEarly(false);\n\n        mAdapter.notifyDataSetChanged();\n\n    }\n\n \n\n    @Override\n\n    public void onPause() {\n\n        super.onPause();\n\n        mImageFetcher.setPauseWork(false);\n\n        mImageFetcher.setExitTasksEarly(true);\n\n        mImageFetcher.flushCache();\n\n    }\n\n \n\n    @Override\n\n    public void onDestroy() {\n\n        super.onDestroy();\n\n        mImageFetcher.closeCache();\n\n    }\n\n \n\n    @TargetApi(VERSION_CODES.JELLY_BEAN)\n\n    @Override\n\n    public void onItemClick(AdapterView<?> parent, View v, int position, long id) {\n\n        final Intent i = new Intent(getActivity(), ImageDetailActivity.class);\n\n        i.putExtra(ImageDetailActivity.EXTRA_IMAGE, (int) id);\n\n        if (Utils.hasJellyBean()) {\n\n            // makeThumbnailScaleUpAnimation() looks kind of ugly here as the loading spinner may\n\n            // show plus the thumbnail image in GridView is cropped. so using\n\n            // makeScaleUpAnimation() instead.\n\n            ActivityOptions options =\n\n                    ActivityOptions.makeScaleUpAnimation(v, 0, 0, v.getWidth(), v.getHeight());\n\n            getActivity().startActivity(i, options.toBundle());\n\n        } else {\n\n            startActivity(i);\n\n        }\n\n    }\n\n \n\n    @Override\n\n    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {\n\n        inflater.inflate(R.menu.main_menu, menu);\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch (item.getItemId()) {\n\n            case R.id.clear_cache:\n\n                mImageFetcher.clearCache();\n\n                Toast.makeText(getActivity(), R.string.clear_cache_complete_toast,\n\n                        Toast.LENGTH_SHORT).show();\n\n                return true;\n\n        }\n\n        return super.onOptionsItemSelected(item);\n\n    }\n\n \n\n    /**\n\n     * The main adapter that backs the GridView. This is fairly standard except the number of\n\n     * columns in the GridView is used to create a fake top row of empty views as we use a\n\n     * transparent ActionBar and don't want the real top row of images to start off covered by it.\n\n     */\n\n    private class ImageAdapter extends BaseAdapter {\n\n \n\n        private final Context mContext;\n\n        private int mItemHeight = 0;\n\n        private int mNumColumns = 0;\n\n        private int mActionBarHeight = 0;\n\n        private GridView.LayoutParams mImageViewLayoutParams;\n\n \n\n        public ImageAdapter(Context context) {\n\n            super();\n\n            mContext = context;\n\n            mImageViewLayoutParams = new GridView.LayoutParams(\n\n                    LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);\n\n            // Calculate ActionBar height\n\n            TypedValue tv = new TypedValue();\n\n            if (context.getTheme().resolveAttribute(\n\n                    android.R.attr.actionBarSize, tv, true)) {\n\n                mActionBarHeight = TypedValue.complexToDimensionPixelSize(\n\n                        tv.data, context.getResources().getDisplayMetrics());\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public int getCount() {\n\n            // If columns have yet to be determined, return no items\n\n            if (getNumColumns() == 0) {\n\n                return 0;\n\n            }\n\n \n\n            // Size + number of columns for top empty row\n\n            return Images.imageThumbUrls.length + mNumColumns;\n\n        }\n\n \n\n        @Override\n\n        public Object getItem(int position) {\n\n            return position < mNumColumns ?\n\n                    null : Images.imageThumbUrls[position - mNumColumns];\n\n        }\n\n \n\n        @Override\n\n        public long getItemId(int position) {\n\n            return position < mNumColumns ? 0 : position - mNumColumns;\n\n        }\n\n \n\n        @Override\n\n        public int getViewTypeCount() {\n\n            // Two types of views, the normal ImageView and the top row of empty views\n\n            return 2;\n\n        }\n\n \n\n        @Override\n\n        public int getItemViewType(int position) {\n\n            return (position < mNumColumns) ? 1 : 0;\n\n        }\n\n \n\n        @Override\n\n        public boolean hasStableIds() {\n\n            return true;\n\n        }\n\n \n\n        @Override\n\n        public View getView(int position, View convertView, ViewGroup container) {\n\n            // First check if this is the top row\n\n            if (position < mNumColumns) {\n\n                if (convertView == null) {\n\n                    convertView = new View(mContext);\n\n                }\n\n                // Set empty view with height of ActionBar\n\n                convertView.setLayoutParams(new AbsListView.LayoutParams(\n\n                        LayoutParams.MATCH_PARENT, mActionBarHeight));\n\n                return convertView;\n\n            }\n\n \n\n            // Now handle the main ImageView thumbnails\n\n            ImageView imageView;\n\n            if (convertView == null) { // if it's not recycled, instantiate and initialize\n\n                imageView = new RecyclingImageView(mContext);\n\n                imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);\n\n                imageView.setLayoutParams(mImageViewLayoutParams);\n\n            } else { // Otherwise re-use the converted view\n\n                imageView = (ImageView) convertView;\n\n            }\n\n \n\n            // Check the height matches our calculated column width\n\n            if (imageView.getLayoutParams().height != mItemHeight) {\n\n                imageView.setLayoutParams(mImageViewLayoutParams);\n\n            }\n\n \n\n            // Finally load the image asynchronously into the ImageView, this also takes care of\n\n            // setting a placeholder image while the background thread runs\n\n            mImageFetcher.loadImage(Images.imageThumbUrls[position - mNumColumns], imageView);\n\n            return imageView;\n\n        }\n\n \n\n        /**\n\n         * Sets the item height. Useful for when we know the column width so the height can be set\n\n         * to match.\n\n         *\n\n         * @param height\n\n         */\n\n        public void setItemHeight(int height) {\n\n            if (height == mItemHeight) {\n\n                return;\n\n            }\n\n            mItemHeight = height;\n\n            mImageViewLayoutParams =\n\n                    new GridView.LayoutParams(LayoutParams.MATCH_PARENT, mItemHeight);\n\n            mImageFetcher.setImageSize(height);\n\n            notifyDataSetChanged();\n\n        }\n\n \n\n        public void setNumColumns(int numColumns) {\n\n            mNumColumns = numColumns;\n\n        }\n\n \n\n        public int getNumColumns() {\n\n            return mNumColumns;\n\n        }\n\n    }\n\n}\n  ","RecyclingImageView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.displayingbitmaps.ui;\n\n \n\nimport android.content.Context;\n\nimport android.graphics.drawable.Drawable;\n\nimport android.graphics.drawable.LayerDrawable;\n\nimport android.util.AttributeSet;\n\nimport android.widget.ImageView;\n\n \n\nimport com.example.android.displayingbitmaps.util.RecyclingBitmapDrawable;\n\n \n\n/**\n\n * Sub-class of ImageView which automatically notifies the drawable when it is\n\n * being displayed.\n\n */\n\npublic class RecyclingImageView extends ImageView {\n\n \n\n    public RecyclingImageView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public RecyclingImageView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    /**\n\n     * @see android.widget.ImageView#onDetachedFromWindow()\n\n     */\n\n    @Override\n\n    protected void onDetachedFromWindow() {\n\n        // This has been detached from Window, so clear the drawable\n\n        setImageDrawable(null);\n\n \n\n        super.onDetachedFromWindow();\n\n    }\n\n \n\n    /**\n\n     * @see android.widget.ImageView#setImageDrawable(android.graphics.drawable.Drawable)\n\n     */\n\n    @Override\n\n    public void setImageDrawable(Drawable drawable) {\n\n        // Keep hold of previous Drawable\n\n        final Drawable previousDrawable = getDrawable();\n\n \n\n        // Call super to set new Drawable\n\n        super.setImageDrawable(drawable);\n\n \n\n        // Notify new Drawable that it is being displayed\n\n        notifyDrawable(drawable, true);\n\n \n\n        // Notify old Drawable so it is no longer being displayed\n\n        notifyDrawable(previousDrawable, false);\n\n    }\n\n \n\n    /**\n\n     * Notifies the drawable that it's displayed state has changed.\n\n     *\n\n     * @param drawable\n\n     * @param isDisplayed\n\n     */\n\n    private static void notifyDrawable(Drawable drawable, final boolean isDisplayed) {\n\n        if (drawable instanceof RecyclingBitmapDrawable) {\n\n            // The drawable is a CountingBitmapDrawable, so notify it\n\n            ((RecyclingBitmapDrawable) drawable).setIsDisplayed(isDisplayed);\n\n        } else if (drawable instanceof LayerDrawable) {\n\n            // The drawable is a LayerDrawable, so recurse on each layer\n\n            LayerDrawable layerDrawable = (LayerDrawable) drawable;\n\n            for (int i = 0, z = layerDrawable.getNumberOfLayers(); i < z; i++) {\n\n                notifyDrawable(layerDrawable.getDrawable(i), isDisplayed);\n\n            }\n\n        }\n\n    }\n\n \n\n}\n  "},"util":{"AsyncTask.java":"\n    \n\n/*\n\n * Copyright (C) 2008 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.displayingbitmaps.util;\n\n \n\nimport android.annotation.TargetApi;\n\nimport android.os.Handler;\n\nimport android.os.Message;\n\nimport android.os.Process;\n\n \n\nimport java.util.ArrayDeque;\n\nimport java.util.concurrent.BlockingQueue;\n\nimport java.util.concurrent.Callable;\n\nimport java.util.concurrent.CancellationException;\n\nimport java.util.concurrent.ExecutionException;\n\nimport java.util.concurrent.Executor;\n\nimport java.util.concurrent.Executors;\n\nimport java.util.concurrent.FutureTask;\n\nimport java.util.concurrent.LinkedBlockingQueue;\n\nimport java.util.concurrent.ThreadFactory;\n\nimport java.util.concurrent.ThreadPoolExecutor;\n\nimport java.util.concurrent.TimeUnit;\n\nimport java.util.concurrent.TimeoutException;\n\nimport java.util.concurrent.atomic.AtomicBoolean;\n\nimport java.util.concurrent.atomic.AtomicInteger;\n\n \n\n/**\n\n * *************************************\n\n * Copied from JB release framework:\n\n * https://android.googlesource.com/platform/frameworks/base/+/jb-release/core/java/android/os/AsyncTask.java\n\n *\n\n * so that threading behavior on all OS versions is the same and we can tweak behavior by using\n\n * executeOnExecutor() if needed.\n\n *\n\n * There are 3 changes in this copy of AsyncTask:\n\n *    -pre-HC a single thread executor is used for serial operation\n\n *    (Executors.newSingleThreadExecutor) and is the default\n\n *    -the default THREAD_POOL_EXECUTOR was changed to use DiscardOldestPolicy\n\n *    -a new fixed thread pool called DUAL_THREAD_EXECUTOR was added\n\n * *************************************\n\n *\n\n * <p>AsyncTask enables proper and easy use of the UI thread. This class allows to\n\n * perform background operations and publish results on the UI thread without\n\n * having to manipulate threads and/or handlers.</p>\n\n *\n\n * <p>AsyncTask is designed to be a helper class around {@link Thread} and {@link android.os.Handler}\n\n * and does not constitute a generic threading framework. AsyncTasks should ideally be\n\n * used for short operations (a few seconds at the most.) If you need to keep threads\n\n * running for long periods of time, it is highly recommended you use the various APIs\n\n * provided by the <code>java.util.concurrent</code> pacakge such as {@link java.util.concurrent.Executor},\n\n * {@link java.util.concurrent.ThreadPoolExecutor} and {@link java.util.concurrent.FutureTask}.</p>\n\n *\n\n * <p>An asynchronous task is defined by a computation that runs on a background thread and\n\n * whose result is published on the UI thread. An asynchronous task is defined by 3 generic\n\n * types, called <code>Params</code>, <code>Progress</code> and <code>Result</code>,\n\n * and 4 steps, called <code>onPreExecute</code>, <code>doInBackground</code>,\n\n * <code>onProgressUpdate</code> and <code>onPostExecute</code>.</p>\n\n *\n\n * <div class=\"special reference\">\n\n * <h3>Developer Guides</h3>\n\n * <p>For more information about using tasks and threads, read the\n\n * <a href=\"{@docRoot}guide/topics/fundamentals/processes-and-threads.html\">Processes and\n\n * Threads</a> developer guide.</p>\n\n * </div>\n\n *\n\n * <h2>Usage</h2>\n\n * <p>AsyncTask must be subclassed to be used. The subclass will override at least\n\n * one method ({@link #doInBackground}), and most often will override a\n\n * second one ({@link #onPostExecute}.)</p>\n\n *\n\n * <p>Here is an example of subclassing:</p>\n\n * <pre class=\"prettyprint\">\n\n * private class DownloadFilesTask extends AsyncTask&lt;URL, Integer, Long&gt; {\n\n *     protected Long doInBackground(URL... urls) {\n\n *         int count = urls.length;\n\n *         long totalSize = 0;\n\n *         for (int i = 0; i < count; i++) {\n\n *             totalSize += Downloader.downloadFile(urls[i]);\n\n *             publishProgress((int) ((i / (float) count) * 100));\n\n *             // Escape early if cancel() is called\n\n *             if (isCancelled()) break;\n\n *         }\n\n *         return totalSize;\n\n *     }\n\n *\n\n *     protected void onProgressUpdate(Integer... progress) {\n\n *         setProgressPercent(progress[0]);\n\n *     }\n\n *\n\n *     protected void onPostExecute(Long result) {\n\n *         showDialog(\"Downloaded \" + result + \" bytes\");\n\n *     }\n\n * }\n\n * </pre>\n\n *\n\n * <p>Once created, a task is executed very simply:</p>\n\n * <pre class=\"prettyprint\">\n\n * new DownloadFilesTask().execute(url1, url2, url3);\n\n * </pre>\n\n *\n\n * <h2>AsyncTask's generic types</h2>\n\n * <p>The three types used by an asynchronous task are the following:</p>\n\n * <ol>\n\n *     <li><code>Params</code>, the type of the parameters sent to the task upon\n\n *     execution.</li>\n\n *     <li><code>Progress</code>, the type of the progress units published during\n\n *     the background computation.</li>\n\n *     <li><code>Result</code>, the type of the result of the background\n\n *     computation.</li>\n\n * </ol>\n\n * <p>Not all types are always used by an asynchronous task. To mark a type as unused,\n\n * simply use the type {@link Void}:</p>\n\n * <pre>\n\n * private class MyTask extends AsyncTask&lt;Void, Void, Void&gt; { ... }\n\n * </pre>\n\n *\n\n * <h2>The 4 steps</h2>\n\n * <p>When an asynchronous task is executed, the task goes through 4 steps:</p>\n\n * <ol>\n\n *     <li>{@link #onPreExecute()}, invoked on the UI thread immediately after the task\n\n *     is executed. This step is normally used to setup the task, for instance by\n\n *     showing a progress bar in the user interface.</li>\n\n *     <li>{@link #doInBackground}, invoked on the background thread\n\n *     immediately after {@link #onPreExecute()} finishes executing. This step is used\n\n *     to perform background computation that can take a long time. The parameters\n\n *     of the asynchronous task are passed to this step. The result of the computation must\n\n *     be returned by this step and will be passed back to the last step. This step\n\n *     can also use {@link #publishProgress} to publish one or more units\n\n *     of progress. These values are published on the UI thread, in the\n\n *     {@link #onProgressUpdate} step.</li>\n\n *     <li>{@link #onProgressUpdate}, invoked on the UI thread after a\n\n *     call to {@link #publishProgress}. The timing of the execution is\n\n *     undefined. This method is used to display any form of progress in the user\n\n *     interface while the background computation is still executing. For instance,\n\n *     it can be used to animate a progress bar or show logs in a text field.</li>\n\n *     <li>{@link #onPostExecute}, invoked on the UI thread after the background\n\n *     computation finishes. The result of the background computation is passed to\n\n *     this step as a parameter.</li>\n\n * </ol>\n\n *\n\n * <h2>Cancelling a task</h2>\n\n * <p>A task can be cancelled at any time by invoking {@link #cancel(boolean)}. Invoking\n\n * this method will cause subsequent calls to {@link #isCancelled()} to return true.\n\n * After invoking this method, {@link #onCancelled(Object)}, instead of\n\n * {@link #onPostExecute(Object)} will be invoked after {@link #doInBackground(Object[])}\n\n * returns. To ensure that a task is cancelled as quickly as possible, you should always\n\n * check the return value of {@link #isCancelled()} periodically from\n\n * {@link #doInBackground(Object[])}, if possible (inside a loop for instance.)</p>\n\n *\n\n * <h2>Threading rules</h2>\n\n * <p>There are a few threading rules that must be followed for this class to\n\n * work properly:</p>\n\n * <ul>\n\n *     <li>The AsyncTask class must be loaded on the UI thread. This is done\n\n *     automatically as of {@link android.os.Build.VERSION_CODES#JELLY_BEAN}.</li>\n\n *     <li>The task instance must be created on the UI thread.</li>\n\n *     <li>{@link #execute} must be invoked on the UI thread.</li>\n\n *     <li>Do not call {@link #onPreExecute()}, {@link #onPostExecute},\n\n *     {@link #doInBackground}, {@link #onProgressUpdate} manually.</li>\n\n *     <li>The task can be executed only once (an exception will be thrown if\n\n *     a second execution is attempted.)</li>\n\n * </ul>\n\n *\n\n * <h2>Memory observability</h2>\n\n * <p>AsyncTask guarantees that all callback calls are synchronized in such a way that the following\n\n * operations are safe without explicit synchronizations.</p>\n\n * <ul>\n\n *     <li>Set member fields in the constructor or {@link #onPreExecute}, and refer to them\n\n *     in {@link #doInBackground}.\n\n *     <li>Set member fields in {@link #doInBackground}, and refer to them in\n\n *     {@link #onProgressUpdate} and {@link #onPostExecute}.\n\n * </ul>\n\n *\n\n * <h2>Order of execution</h2>\n\n * <p>When first introduced, AsyncTasks were executed serially on a single background\n\n * thread. Starting with {@link android.os.Build.VERSION_CODES#DONUT}, this was changed\n\n * to a pool of threads allowing multiple tasks to operate in parallel. Starting with\n\n * {@link android.os.Build.VERSION_CODES#HONEYCOMB}, tasks are executed on a single\n\n * thread to avoid common application errors caused by parallel execution.</p>\n\n * <p>If you truly want parallel execution, you can invoke\n\n * {@link #executeOnExecutor(java.util.concurrent.Executor, Object[])} with\n\n * {@link #THREAD_POOL_EXECUTOR}.</p>\n\n */\n\npublic abstract class AsyncTask<Params, Progress, Result> {\n\n    private static final String LOG_TAG = \"AsyncTask\";\n\n \n\n    private static final int CORE_POOL_SIZE = 5;\n\n    private static final int MAXIMUM_POOL_SIZE = 128;\n\n    private static final int KEEP_ALIVE = 1;\n\n \n\n    private static final ThreadFactory  sThreadFactory = new ThreadFactory() {\n\n        private final AtomicInteger mCount = new AtomicInteger(1);\n\n \n\n        public Thread newThread(Runnable r) {\n\n            return new Thread(r, \"AsyncTask #\" + mCount.getAndIncrement());\n\n        }\n\n    };\n\n \n\n    private static final BlockingQueue<Runnable> sPoolWorkQueue =\n\n            new LinkedBlockingQueue<Runnable>(10);\n\n \n\n    /**\n\n     * An {@link java.util.concurrent.Executor} that can be used to execute tasks in parallel.\n\n     */\n\n    public static final Executor THREAD_POOL_EXECUTOR\n\n            = new ThreadPoolExecutor(CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE,\n\n            TimeUnit.SECONDS, sPoolWorkQueue, sThreadFactory,\n\n            new ThreadPoolExecutor.DiscardOldestPolicy());\n\n \n\n    /**\n\n     * An {@link java.util.concurrent.Executor} that executes tasks one at a time in serial\n\n     * order.  This serialization is global to a particular process.\n\n     */\n\n    public static final Executor SERIAL_EXECUTOR = Utils.hasHoneycomb() ? new SerialExecutor() :\n\n            Executors.newSingleThreadExecutor(sThreadFactory);\n\n \n\n    public static final Executor DUAL_THREAD_EXECUTOR =\n\n            Executors.newFixedThreadPool(2, sThreadFactory);\n\n \n\n    private static final int MESSAGE_POST_RESULT = 0x1;\n\n    private static final int MESSAGE_POST_PROGRESS = 0x2;\n\n \n\n    private static final InternalHandler sHandler = new InternalHandler();\n\n \n\n    private static volatile Executor sDefaultExecutor = SERIAL_EXECUTOR;\n\n    private final WorkerRunnable<Params, Result> mWorker;\n\n    private final FutureTask<Result> mFuture;\n\n \n\n    private volatile Status mStatus = Status.PENDING;\n\n \n\n    private final AtomicBoolean mCancelled = new AtomicBoolean();\n\n    private final AtomicBoolean mTaskInvoked = new AtomicBoolean();\n\n \n\n    @TargetApi(11)\n\n    private static class SerialExecutor implements Executor {\n\n        final ArrayDeque<Runnable> mTasks = new ArrayDeque<Runnable>();\n\n        Runnable mActive;\n\n \n\n        public synchronized void execute(final Runnable r) {\n\n            mTasks.offer(new Runnable() {\n\n                public void run() {\n\n                    try {\n\n                        r.run();\n\n                    } finally {\n\n                        scheduleNext();\n\n                    }\n\n                }\n\n            });\n\n            if (mActive == null) {\n\n                scheduleNext();\n\n            }\n\n        }\n\n \n\n        protected synchronized void scheduleNext() {\n\n            if ((mActive = mTasks.poll()) != null) {\n\n                THREAD_POOL_EXECUTOR.execute(mActive);\n\n            }\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Indicates the current status of the task. Each status will be set only once\n\n     * during the lifetime of a task.\n\n     */\n\n    public enum Status {\n\n        /**\n\n         * Indicates that the task has not been executed yet.\n\n         */\n\n        PENDING,\n\n        /**\n\n         * Indicates that the task is running.\n\n         */\n\n        RUNNING,\n\n        /**\n\n         * Indicates that {@link AsyncTask#onPostExecute} has finished.\n\n         */\n\n        FINISHED,\n\n    }\n\n \n\n    /** @hide Used to force static handler to be created. */\n\n    public static void init() {\n\n        sHandler.getLooper();\n\n    }\n\n \n\n    /** @hide */\n\n    public static void setDefaultExecutor(Executor exec) {\n\n        sDefaultExecutor = exec;\n\n    }\n\n \n\n    /**\n\n     * Creates a new asynchronous task. This constructor must be invoked on the UI thread.\n\n     */\n\n    public AsyncTask() {\n\n        mWorker = new WorkerRunnable<Params, Result>() {\n\n            public Result call() throws Exception {\n\n                mTaskInvoked.set(true);\n\n \n\n                Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);\n\n                //noinspection unchecked\n\n                return postResult(doInBackground(mParams));\n\n            }\n\n        };\n\n \n\n        mFuture = new FutureTask<Result>(mWorker) {\n\n            @Override\n\n            protected void done() {\n\n                try {\n\n                    postResultIfNotInvoked(get());\n\n                } catch (InterruptedException e) {\n\n                    android.util.Log.w(LOG_TAG, e);\n\n                } catch (ExecutionException e) {\n\n                    throw new RuntimeException(\"An error occured while executing doInBackground()\",\n\n                            e.getCause());\n\n                } catch (CancellationException e) {\n\n                    postResultIfNotInvoked(null);\n\n                }\n\n            }\n\n        };\n\n    }\n\n \n\n    private void postResultIfNotInvoked(Result result) {\n\n        final boolean wasTaskInvoked = mTaskInvoked.get();\n\n        if (!wasTaskInvoked) {\n\n            postResult(result);\n\n        }\n\n    }\n\n \n\n    private Result postResult(Result result) {\n\n        @SuppressWarnings(\"unchecked\")\n\n        Message message = sHandler.obtainMessage(MESSAGE_POST_RESULT,\n\n                new AsyncTaskResult<Result>(this, result));\n\n        message.sendToTarget();\n\n        return result;\n\n    }\n\n \n\n    /**\n\n     * Returns the current status of this task.\n\n     *\n\n     * @return The current status.\n\n     */\n\n    public final Status getStatus() {\n\n        return mStatus;\n\n    }\n\n \n\n    /**\n\n     * Override this method to perform a computation on a background thread. The\n\n     * specified parameters are the parameters passed to {@link #execute}\n\n     * by the caller of this task.\n\n     *\n\n     * This method can call {@link #publishProgress} to publish updates\n\n     * on the UI thread.\n\n     *\n\n     * @param params The parameters of the task.\n\n     *\n\n     * @return A result, defined by the subclass of this task.\n\n     *\n\n     * @see #onPreExecute()\n\n     * @see #onPostExecute\n\n     * @see #publishProgress\n\n     */\n\n    protected abstract Result doInBackground(Params... params);\n\n \n\n    /**\n\n     * Runs on the UI thread before {@link #doInBackground}.\n\n     *\n\n     * @see #onPostExecute\n\n     * @see #doInBackground\n\n     */\n\n    protected void onPreExecute() {\n\n    }\n\n \n\n    /**\n\n     * <p>Runs on the UI thread after {@link #doInBackground}. The\n\n     * specified result is the value returned by {@link #doInBackground}.</p>\n\n     *\n\n     * <p>This method won't be invoked if the task was cancelled.</p>\n\n     *\n\n     * @param result The result of the operation computed by {@link #doInBackground}.\n\n     *\n\n     * @see #onPreExecute\n\n     * @see #doInBackground\n\n     * @see #onCancelled(Object)\n\n     */\n\n    @SuppressWarnings({\"UnusedDeclaration\"})\n\n    protected void onPostExecute(Result result) {\n\n    }\n\n \n\n    /**\n\n     * Runs on the UI thread after {@link #publishProgress} is invoked.\n\n     * The specified values are the values passed to {@link #publishProgress}.\n\n     *\n\n     * @param values The values indicating progress.\n\n     *\n\n     * @see #publishProgress\n\n     * @see #doInBackground\n\n     */\n\n    @SuppressWarnings({\"UnusedDeclaration\"})\n\n    protected void onProgressUpdate(Progress... values) {\n\n    }\n\n \n\n    /**\n\n     * <p>Runs on the UI thread after {@link #cancel(boolean)} is invoked and\n\n     * {@link #doInBackground(Object[])} has finished.</p>\n\n     *\n\n     * <p>The default implementation simply invokes {@link #onCancelled()} and\n\n     * ignores the result. If you write your own implementation, do not call\n\n     * <code>super.onCancelled(result)</code>.</p>\n\n     *\n\n     * @param result The result, if any, computed in\n\n     *               {@link #doInBackground(Object[])}, can be null\n\n     *\n\n     * @see #cancel(boolean)\n\n     * @see #isCancelled()\n\n     */\n\n    @SuppressWarnings({\"UnusedParameters\"})\n\n    protected void onCancelled(Result result) {\n\n        onCancelled();\n\n    }\n\n \n\n    /**\n\n     * <p>Applications should preferably override {@link #onCancelled(Object)}.\n\n     * This method is invoked by the default implementation of\n\n     * {@link #onCancelled(Object)}.</p>\n\n     *\n\n     * <p>Runs on the UI thread after {@link #cancel(boolean)} is invoked and\n\n     * {@link #doInBackground(Object[])} has finished.</p>\n\n     *\n\n     * @see #onCancelled(Object)\n\n     * @see #cancel(boolean)\n\n     * @see #isCancelled()\n\n     */\n\n    protected void onCancelled() {\n\n    }\n\n \n\n    /**\n\n     * Returns <tt>true</tt> if this task was cancelled before it completed\n\n     * normally. If you are calling {@link #cancel(boolean)} on the task,\n\n     * the value returned by this method should be checked periodically from\n\n     * {@link #doInBackground(Object[])} to end the task as soon as possible.\n\n     *\n\n     * @return <tt>true</tt> if task was cancelled before it completed\n\n     *\n\n     * @see #cancel(boolean)\n\n     */\n\n    public final boolean isCancelled() {\n\n        return mCancelled.get();\n\n    }\n\n \n\n    /**\n\n     * <p>Attempts to cancel execution of this task.  This attempt will\n\n     * fail if the task has already completed, already been cancelled,\n\n     * or could not be cancelled for some other reason. If successful,\n\n     * and this task has not started when <tt>cancel</tt> is called,\n\n     * this task should never run. If the task has already started,\n\n     * then the <tt>mayInterruptIfRunning</tt> parameter determines\n\n     * whether the thread executing this task should be interrupted in\n\n     * an attempt to stop the task.</p>\n\n     *\n\n     * <p>Calling this method will result in {@link #onCancelled(Object)} being\n\n     * invoked on the UI thread after {@link #doInBackground(Object[])}\n\n     * returns. Calling this method guarantees that {@link #onPostExecute(Object)}\n\n     * is never invoked. After invoking this method, you should check the\n\n     * value returned by {@link #isCancelled()} periodically from\n\n     * {@link #doInBackground(Object[])} to finish the task as early as\n\n     * possible.</p>\n\n     *\n\n     * @param mayInterruptIfRunning <tt>true</tt> if the thread executing this\n\n     *        task should be interrupted; otherwise, in-progress tasks are allowed\n\n     *        to complete.\n\n     *\n\n     * @return <tt>false</tt> if the task could not be cancelled,\n\n     *         typically because it has already completed normally;\n\n     *         <tt>true</tt> otherwise\n\n     *\n\n     * @see #isCancelled()\n\n     * @see #onCancelled(Object)\n\n     */\n\n    public final boolean cancel(boolean mayInterruptIfRunning) {\n\n        mCancelled.set(true);\n\n        return mFuture.cancel(mayInterruptIfRunning);\n\n    }\n\n \n\n    /**\n\n     * Waits if necessary for the computation to complete, and then\n\n     * retrieves its result.\n\n     *\n\n     * @return The computed result.\n\n     *\n\n     * @throws java.util.concurrent.CancellationException If the computation was cancelled.\n\n     * @throws java.util.concurrent.ExecutionException If the computation threw an exception.\n\n     * @throws InterruptedException If the current thread was interrupted\n\n     *         while waiting.\n\n     */\n\n    public final Result get() throws InterruptedException, ExecutionException {\n\n        return mFuture.get();\n\n    }\n\n \n\n    /**\n\n     * Waits if necessary for at most the given time for the computation\n\n     * to complete, and then retrieves its result.\n\n     *\n\n     * @param timeout Time to wait before cancelling the operation.\n\n     * @param unit The time unit for the timeout.\n\n     *\n\n     * @return The computed result.\n\n     *\n\n     * @throws java.util.concurrent.CancellationException If the computation was cancelled.\n\n     * @throws java.util.concurrent.ExecutionException If the computation threw an exception.\n\n     * @throws InterruptedException If the current thread was interrupted\n\n     *         while waiting.\n\n     * @throws java.util.concurrent.TimeoutException If the wait timed out.\n\n     */\n\n    public final Result get(long timeout, TimeUnit unit) throws InterruptedException,\n\n            ExecutionException, TimeoutException {\n\n        return mFuture.get(timeout, unit);\n\n    }\n\n \n\n    /**\n\n     * Executes the task with the specified parameters. The task returns\n\n     * itself (this) so that the caller can keep a reference to it.\n\n     *\n\n     * <p>Note: this function schedules the task on a queue for a single background\n\n     * thread or pool of threads depending on the platform version.  When first\n\n     * introduced, AsyncTasks were executed serially on a single background thread.\n\n     * Starting with {@link android.os.Build.VERSION_CODES#DONUT}, this was changed\n\n     * to a pool of threads allowing multiple tasks to operate in parallel. Starting\n\n     * {@link android.os.Build.VERSION_CODES#HONEYCOMB}, tasks are back to being\n\n     * executed on a single thread to avoid common application errors caused\n\n     * by parallel execution.  If you truly want parallel execution, you can use\n\n     * the {@link #executeOnExecutor} version of this method\n\n     * with {@link #THREAD_POOL_EXECUTOR}; however, see commentary there for warnings\n\n     * on its use.\n\n     *\n\n     * <p>This method must be invoked on the UI thread.\n\n     *\n\n     * @param params The parameters of the task.\n\n     *\n\n     * @return This instance of AsyncTask.\n\n     *\n\n     * @throws IllegalStateException If {@link #getStatus()} returns either\n\n     *         {@link AsyncTask.Status#RUNNING} or {@link AsyncTask.Status#FINISHED}.\n\n     *\n\n     * @see #executeOnExecutor(java.util.concurrent.Executor, Object[])\n\n     * @see #execute(Runnable)\n\n     */\n\n    public final AsyncTask<Params, Progress, Result> execute(Params... params) {\n\n        return executeOnExecutor(sDefaultExecutor, params);\n\n    }\n\n \n\n    /**\n\n     * Executes the task with the specified parameters. The task returns\n\n     * itself (this) so that the caller can keep a reference to it.\n\n     *\n\n     * <p>This method is typically used with {@link #THREAD_POOL_EXECUTOR} to\n\n     * allow multiple tasks to run in parallel on a pool of threads managed by\n\n     * AsyncTask, however you can also use your own {@link java.util.concurrent.Executor} for custom\n\n     * behavior.\n\n     *\n\n     * <p><em>Warning:</em> Allowing multiple tasks to run in parallel from\n\n     * a thread pool is generally <em>not</em> what one wants, because the order\n\n     * of their operation is not defined.  For example, if these tasks are used\n\n     * to modify any state in common (such as writing a file due to a button click),\n\n     * there are no guarantees on the order of the modifications.\n\n     * Without careful work it is possible in rare cases for the newer version\n\n     * of the data to be over-written by an older one, leading to obscure data\n\n     * loss and stability issues.  Such changes are best\n\n     * executed in serial; to guarantee such work is serialized regardless of\n\n     * platform version you can use this function with {@link #SERIAL_EXECUTOR}.\n\n     *\n\n     * <p>This method must be invoked on the UI thread.\n\n     *\n\n     * @param exec The executor to use.  {@link #THREAD_POOL_EXECUTOR} is available as a\n\n     *              convenient process-wide thread pool for tasks that are loosely coupled.\n\n     * @param params The parameters of the task.\n\n     *\n\n     * @return This instance of AsyncTask.\n\n     *\n\n     * @throws IllegalStateException If {@link #getStatus()} returns either\n\n     *         {@link AsyncTask.Status#RUNNING} or {@link AsyncTask.Status#FINISHED}.\n\n     *\n\n     * @see #execute(Object[])\n\n     */\n\n    public final AsyncTask<Params, Progress, Result> executeOnExecutor(Executor exec,\n\n            Params... params) {\n\n        if (mStatus != Status.PENDING) {\n\n            switch (mStatus) {\n\n                case RUNNING:\n\n                    throw new IllegalStateException(\"Cannot execute task:\"\n\n                            + \" the task is already running.\");\n\n                case FINISHED:\n\n                    throw new IllegalStateException(\"Cannot execute task:\"\n\n                            + \" the task has already been executed \"\n\n                            + \"(a task can be executed only once)\");\n\n            }\n\n        }\n\n \n\n        mStatus = Status.RUNNING;\n\n \n\n        onPreExecute();\n\n \n\n        mWorker.mParams = params;\n\n        exec.execute(mFuture);\n\n \n\n        return this;\n\n    }\n\n \n\n    /**\n\n     * Convenience version of {@link #execute(Object...)} for use with\n\n     * a simple Runnable object. See {@link #execute(Object[])} for more\n\n     * information on the order of execution.\n\n     *\n\n     * @see #execute(Object[])\n\n     * @see #executeOnExecutor(java.util.concurrent.Executor, Object[])\n\n     */\n\n    public static void execute(Runnable runnable) {\n\n        sDefaultExecutor.execute(runnable);\n\n    }\n\n \n\n    /**\n\n     * This method can be invoked from {@link #doInBackground} to\n\n     * publish updates on the UI thread while the background computation is\n\n     * still running. Each call to this method will trigger the execution of\n\n     * {@link #onProgressUpdate} on the UI thread.\n\n     *\n\n     * {@link #onProgressUpdate} will note be called if the task has been\n\n     * canceled.\n\n     *\n\n     * @param values The progress values to update the UI with.\n\n     *\n\n     * @see #onProgressUpdate\n\n     * @see #doInBackground\n\n     */\n\n    protected final void publishProgress(Progress... values) {\n\n        if (!isCancelled()) {\n\n            sHandler.obtainMessage(MESSAGE_POST_PROGRESS,\n\n                    new AsyncTaskResult<Progress>(this, values)).sendToTarget();\n\n        }\n\n    }\n\n \n\n    private void finish(Result result) {\n\n        if (isCancelled()) {\n\n            onCancelled(result);\n\n        } else {\n\n            onPostExecute(result);\n\n        }\n\n        mStatus = Status.FINISHED;\n\n    }\n\n \n\n    private static class InternalHandler extends Handler {\n\n        @SuppressWarnings({\"unchecked\", \"RawUseOfParameterizedType\"})\n\n        @Override\n\n        public void handleMessage(Message msg) {\n\n            AsyncTaskResult result = (AsyncTaskResult) msg.obj;\n\n            switch (msg.what) {\n\n                case MESSAGE_POST_RESULT:\n\n                    // There is only one result\n\n                    result.mTask.finish(result.mData[0]);\n\n                    break;\n\n                case MESSAGE_POST_PROGRESS:\n\n                    result.mTask.onProgressUpdate(result.mData);\n\n                    break;\n\n            }\n\n        }\n\n    }\n\n \n\n    private static abstract class WorkerRunnable<Params, Result> implements Callable<Result> {\n\n        Params[] mParams;\n\n    }\n\n \n\n    @SuppressWarnings({\"RawUseOfParameterizedType\"})\n\n    private static class AsyncTaskResult<Data> {\n\n        final AsyncTask mTask;\n\n        final Data[] mData;\n\n \n\n        AsyncTaskResult(AsyncTask task, Data... data) {\n\n            mTask = task;\n\n            mData = data;\n\n        }\n\n    }\n\n}\n  ","DiskLruCache.java":"\n    \n\n/*\n\n * Copyright (C) 2011 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.displayingbitmaps.util;\n\n \n\nimport java.io.BufferedInputStream;\n\nimport java.io.BufferedWriter;\n\nimport java.io.Closeable;\n\nimport java.io.EOFException;\n\nimport java.io.File;\n\nimport java.io.FileInputStream;\n\nimport java.io.FileNotFoundException;\n\nimport java.io.FileOutputStream;\n\nimport java.io.FileWriter;\n\nimport java.io.FilterOutputStream;\n\nimport java.io.IOException;\n\nimport java.io.InputStream;\n\nimport java.io.InputStreamReader;\n\nimport java.io.OutputStream;\n\nimport java.io.OutputStreamWriter;\n\nimport java.io.Reader;\n\nimport java.io.StringWriter;\n\nimport java.io.Writer;\n\nimport java.lang.reflect.Array;\n\nimport java.nio.charset.Charset;\n\nimport java.util.ArrayList;\n\nimport java.util.Arrays;\n\nimport java.util.Iterator;\n\nimport java.util.LinkedHashMap;\n\nimport java.util.Map;\n\nimport java.util.concurrent.Callable;\n\nimport java.util.concurrent.ExecutorService;\n\nimport java.util.concurrent.LinkedBlockingQueue;\n\nimport java.util.concurrent.ThreadPoolExecutor;\n\nimport java.util.concurrent.TimeUnit;\n\n \n\n/**\n\n ******************************************************************************\n\n * Taken from the JB source code, can be found in:\n\n * libcore/luni/src/main/java/libcore/io/DiskLruCache.java\n\n * or direct link:\n\n * https://android.googlesource.com/platform/libcore/+/android-4.1.1_r1/luni/src/main/java/libcore/io/DiskLruCache.java\n\n ******************************************************************************\n\n *\n\n * A cache that uses a bounded amount of space on a filesystem. Each cache\n\n * entry has a string key and a fixed number of values. Values are byte\n\n * sequences, accessible as streams or files. Each value must be between {@code\n\n * 0} and {@code Integer.MAX_VALUE} bytes in length.\n\n *\n\n * <p>The cache stores its data in a directory on the filesystem. This\n\n * directory must be exclusive to the cache; the cache may delete or overwrite\n\n * files from its directory. It is an error for multiple processes to use the\n\n * same cache directory at the same time.\n\n *\n\n * <p>This cache limits the number of bytes that it will store on the\n\n * filesystem. When the number of stored bytes exceeds the limit, the cache will\n\n * remove entries in the background until the limit is satisfied. The limit is\n\n * not strict: the cache may temporarily exceed it while waiting for files to be\n\n * deleted. The limit does not include filesystem overhead or the cache\n\n * journal so space-sensitive applications should set a conservative limit.\n\n *\n\n * <p>Clients call {@link #edit} to create or update the values of an entry. An\n\n * entry may have only one editor at one time; if a value is not available to be\n\n * edited then {@link #edit} will return null.\n\n * <ul>\n\n *     <li>When an entry is being <strong>created</strong> it is necessary to\n\n *         supply a full set of values; the empty value should be used as a\n\n *         placeholder if necessary.\n\n *     <li>When an entry is being <strong>edited</strong>, it is not necessary\n\n *         to supply data for every value; values default to their previous\n\n *         value.\n\n * </ul>\n\n * Every {@link #edit} call must be matched by a call to {@link Editor#commit}\n\n * or {@link Editor#abort}. Committing is atomic: a read observes the full set\n\n * of values as they were before or after the commit, but never a mix of values.\n\n *\n\n * <p>Clients call {@link #get} to read a snapshot of an entry. The read will\n\n * observe the value at the time that {@link #get} was called. Updates and\n\n * removals after the call do not impact ongoing reads.\n\n *\n\n * <p>This class is tolerant of some I/O errors. If files are missing from the\n\n * filesystem, the corresponding entries will be dropped from the cache. If\n\n * an error occurs while writing a cache value, the edit will fail silently.\n\n * Callers should handle other problems by catching {@code IOException} and\n\n * responding appropriately.\n\n */\n\npublic final class DiskLruCache implements Closeable {\n\n    static final String JOURNAL_FILE = \"journal\";\n\n    static final String JOURNAL_FILE_TMP = \"journal.tmp\";\n\n    static final String MAGIC = \"libcore.io.DiskLruCache\";\n\n    static final String VERSION_1 = \"1\";\n\n    static final long ANY_SEQUENCE_NUMBER = -1;\n\n    private static final String CLEAN = \"CLEAN\";\n\n    private static final String DIRTY = \"DIRTY\";\n\n    private static final String REMOVE = \"REMOVE\";\n\n    private static final String READ = \"READ\";\n\n \n\n    private static final Charset UTF_8 = Charset.forName(\"UTF-8\");\n\n    private static final int IO_BUFFER_SIZE = 8 * 1024;\n\n \n\n    /*\n\n     * This cache uses a journal file named \"journal\". A typical journal file\n\n     * looks like this:\n\n     *     libcore.io.DiskLruCache\n\n     *     1\n\n     *     100\n\n     *     2\n\n     *\n\n     *     CLEAN 3400330d1dfc7f3f7f4b8d4d803dfcf6 832 21054\n\n     *     DIRTY 335c4c6028171cfddfbaae1a9c313c52\n\n     *     CLEAN 335c4c6028171cfddfbaae1a9c313c52 3934 2342\n\n     *     REMOVE 335c4c6028171cfddfbaae1a9c313c52\n\n     *     DIRTY 1ab96a171faeeee38496d8b330771a7a\n\n     *     CLEAN 1ab96a171faeeee38496d8b330771a7a 1600 234\n\n     *     READ 335c4c6028171cfddfbaae1a9c313c52\n\n     *     READ 3400330d1dfc7f3f7f4b8d4d803dfcf6\n\n     *\n\n     * The first five lines of the journal form its header. They are the\n\n     * constant string \"libcore.io.DiskLruCache\", the disk cache's version,\n\n     * the application's version, the value count, and a blank line.\n\n     *\n\n     * Each of the subsequent lines in the file is a record of the state of a\n\n     * cache entry. Each line contains space-separated values: a state, a key,\n\n     * and optional state-specific values.\n\n     *   o DIRTY lines track that an entry is actively being created or updated.\n\n     *     Every successful DIRTY action should be followed by a CLEAN or REMOVE\n\n     *     action. DIRTY lines without a matching CLEAN or REMOVE indicate that\n\n     *     temporary files may need to be deleted.\n\n     *   o CLEAN lines track a cache entry that has been successfully published\n\n     *     and may be read. A publish line is followed by the lengths of each of\n\n     *     its values.\n\n     *   o READ lines track accesses for LRU.\n\n     *   o REMOVE lines track entries that have been deleted.\n\n     *\n\n     * The journal file is appended to as cache operations occur. The journal may\n\n     * occasionally be compacted by dropping redundant lines. A temporary file named\n\n     * \"journal.tmp\" will be used during compaction; that file should be deleted if\n\n     * it exists when the cache is opened.\n\n     */\n\n \n\n    private final File directory;\n\n    private final File journalFile;\n\n    private final File journalFileTmp;\n\n    private final int appVersion;\n\n    private final long maxSize;\n\n    private final int valueCount;\n\n    private long size = 0;\n\n    private Writer journalWriter;\n\n    private final LinkedHashMap<String, Entry> lruEntries\n\n            = new LinkedHashMap<String, Entry>(0, 0.75f, true);\n\n    private int redundantOpCount;\n\n \n\n    /**\n\n     * To differentiate between old and current snapshots, each entry is given\n\n     * a sequence number each time an edit is committed. A snapshot is stale if\n\n     * its sequence number is not equal to its entry's sequence number.\n\n     */\n\n    private long nextSequenceNumber = 0;\n\n \n\n    /* From java.util.Arrays */\n\n    @SuppressWarnings(\"unchecked\")\n\n    private static <T> T[] copyOfRange(T[] original, int start, int end) {\n\n        final int originalLength = original.length; // For exception priority compatibility.\n\n        if (start > end) {\n\n            throw new IllegalArgumentException();\n\n        }\n\n        if (start < 0 || start > originalLength) {\n\n            throw new ArrayIndexOutOfBoundsException();\n\n        }\n\n        final int resultLength = end - start;\n\n        final int copyLength = Math.min(resultLength, originalLength - start);\n\n        final T[] result = (T[]) Array\n\n                .newInstance(original.getClass().getComponentType(), resultLength);\n\n        System.arraycopy(original, start, result, 0, copyLength);\n\n        return result;\n\n    }\n\n \n\n    /**\n\n     * Returns the remainder of 'reader' as a string, closing it when done.\n\n     */\n\n    public static String readFully(Reader reader) throws IOException {\n\n        try {\n\n            StringWriter writer = new StringWriter();\n\n            char[] buffer = new char[1024];\n\n            int count;\n\n            while ((count = reader.read(buffer)) != -1) {\n\n                writer.write(buffer, 0, count);\n\n            }\n\n            return writer.toString();\n\n        } finally {\n\n            reader.close();\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the ASCII characters up to but not including the next \"\\r\\n\", or\n\n     * \"\\n\".\n\n     *\n\n     * @throws java.io.EOFException if the stream is exhausted before the next newline\n\n     *     character.\n\n     */\n\n    public static String readAsciiLine(InputStream in) throws IOException {\n\n        // TODO: support UTF-8 here instead\n\n \n\n        StringBuilder result = new StringBuilder(80);\n\n        while (true) {\n\n            int c = in.read();\n\n            if (c == -1) {\n\n                throw new EOFException();\n\n            } else if (c == '\\n') {\n\n                break;\n\n            }\n\n \n\n            result.append((char) c);\n\n        }\n\n        int length = result.length();\n\n        if (length > 0 && result.charAt(length - 1) == '\\r') {\n\n            result.setLength(length - 1);\n\n        }\n\n        return result.toString();\n\n    }\n\n \n\n    /**\n\n     * Closes 'closeable', ignoring any checked exceptions. Does nothing if 'closeable' is null.\n\n     */\n\n    public static void closeQuietly(Closeable closeable) {\n\n        if (closeable != null) {\n\n            try {\n\n                closeable.close();\n\n            } catch (RuntimeException rethrown) {\n\n                throw rethrown;\n\n            } catch (Exception ignored) {\n\n            }\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Recursively delete everything in {@code dir}.\n\n     */\n\n    // TODO: this should specify paths as Strings rather than as Files\n\n    public static void deleteContents(File dir) throws IOException {\n\n        File[] files = dir.listFiles();\n\n        if (files == null) {\n\n            throw new IllegalArgumentException(\"not a directory: \" + dir);\n\n        }\n\n        for (File file : files) {\n\n            if (file.isDirectory()) {\n\n                deleteContents(file);\n\n            }\n\n            if (!file.delete()) {\n\n                throw new IOException(\"failed to delete file: \" + file);\n\n            }\n\n        }\n\n    }\n\n \n\n    /** This cache uses a single background thread to evict entries. */\n\n    private final ExecutorService executorService = new ThreadPoolExecutor(0, 1,\n\n            60L, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());\n\n    private final Callable<Void> cleanupCallable = new Callable<Void>() {\n\n        @Override public Void call() throws Exception {\n\n            synchronized (DiskLruCache.this) {\n\n                if (journalWriter == null) {\n\n                    return null; // closed\n\n                }\n\n                trimToSize();\n\n                if (journalRebuildRequired()) {\n\n                    rebuildJournal();\n\n                    redundantOpCount = 0;\n\n                }\n\n            }\n\n            return null;\n\n        }\n\n    };\n\n \n\n    private DiskLruCache(File directory, int appVersion, int valueCount, long maxSize) {\n\n        this.directory = directory;\n\n        this.appVersion = appVersion;\n\n        this.journalFile = new File(directory, JOURNAL_FILE);\n\n        this.journalFileTmp = new File(directory, JOURNAL_FILE_TMP);\n\n        this.valueCount = valueCount;\n\n        this.maxSize = maxSize;\n\n    }\n\n \n\n    /**\n\n     * Opens the cache in {@code directory}, creating a cache if none exists\n\n     * there.\n\n     *\n\n     * @param directory a writable directory\n\n     * @param appVersion\n\n     * @param valueCount the number of values per cache entry. Must be positive.\n\n     * @param maxSize the maximum number of bytes this cache should use to store\n\n     * @throws java.io.IOException if reading or writing the cache directory fails\n\n     */\n\n    public static DiskLruCache open(File directory, int appVersion, int valueCount, long maxSize)\n\n            throws IOException {\n\n        if (maxSize <= 0) {\n\n            throw new IllegalArgumentException(\"maxSize <= 0\");\n\n        }\n\n        if (valueCount <= 0) {\n\n            throw new IllegalArgumentException(\"valueCount <= 0\");\n\n        }\n\n \n\n        // prefer to pick up where we left off\n\n        DiskLruCache cache = new DiskLruCache(directory, appVersion, valueCount, maxSize);\n\n        if (cache.journalFile.exists()) {\n\n            try {\n\n                cache.readJournal();\n\n                cache.processJournal();\n\n                cache.journalWriter = new BufferedWriter(new FileWriter(cache.journalFile, true),\n\n                        IO_BUFFER_SIZE);\n\n                return cache;\n\n            } catch (IOException journalIsCorrupt) {\n\n//                System.logW(\"DiskLruCache \" + directory + \" is corrupt: \"\n\n//                        + journalIsCorrupt.getMessage() + \", removing\");\n\n                cache.delete();\n\n            }\n\n        }\n\n \n\n        // create a new empty cache\n\n        directory.mkdirs();\n\n        cache = new DiskLruCache(directory, appVersion, valueCount, maxSize);\n\n        cache.rebuildJournal();\n\n        return cache;\n\n    }\n\n \n\n    private void readJournal() throws IOException {\n\n        InputStream in = new BufferedInputStream(new FileInputStream(journalFile), IO_BUFFER_SIZE);\n\n        try {\n\n            String magic = readAsciiLine(in);\n\n            String version = readAsciiLine(in);\n\n            String appVersionString = readAsciiLine(in);\n\n            String valueCountString = readAsciiLine(in);\n\n            String blank = readAsciiLine(in);\n\n            if (!MAGIC.equals(magic)\n\n                    || !VERSION_1.equals(version)\n\n                    || !Integer.toString(appVersion).equals(appVersionString)\n\n                    || !Integer.toString(valueCount).equals(valueCountString)\n\n                    || !\"\".equals(blank)) {\n\n                throw new IOException(\"unexpected journal header: [\"\n\n                        + magic + \", \" + version + \", \" + valueCountString + \", \" + blank + \"]\");\n\n            }\n\n \n\n            while (true) {\n\n                try {\n\n                    readJournalLine(readAsciiLine(in));\n\n                } catch (EOFException endOfJournal) {\n\n                    break;\n\n                }\n\n            }\n\n        } finally {\n\n            closeQuietly(in);\n\n        }\n\n    }\n\n \n\n    private void readJournalLine(String line) throws IOException {\n\n        String[] parts = line.split(\" \");\n\n        if (parts.length < 2) {\n\n            throw new IOException(\"unexpected journal line: \" + line);\n\n        }\n\n \n\n        String key = parts[1];\n\n        if (parts[0].equals(REMOVE) && parts.length == 2) {\n\n            lruEntries.remove(key);\n\n            return;\n\n        }\n\n \n\n        Entry entry = lruEntries.get(key);\n\n        if (entry == null) {\n\n            entry = new Entry(key);\n\n            lruEntries.put(key, entry);\n\n        }\n\n \n\n        if (parts[0].equals(CLEAN) && parts.length == 2 + valueCount) {\n\n            entry.readable = true;\n\n            entry.currentEditor = null;\n\n            entry.setLengths(copyOfRange(parts, 2, parts.length));\n\n        } else if (parts[0].equals(DIRTY) && parts.length == 2) {\n\n            entry.currentEditor = new Editor(entry);\n\n        } else if (parts[0].equals(READ) && parts.length == 2) {\n\n            // this work was already done by calling lruEntries.get()\n\n        } else {\n\n            throw new IOException(\"unexpected journal line: \" + line);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Computes the initial size and collects garbage as a part of opening the\n\n     * cache. Dirty entries are assumed to be inconsistent and will be deleted.\n\n     */\n\n    private void processJournal() throws IOException {\n\n        deleteIfExists(journalFileTmp);\n\n        for (Iterator<Entry> i = lruEntries.values().iterator(); i.hasNext(); ) {\n\n            Entry entry = i.next();\n\n            if (entry.currentEditor == null) {\n\n                for (int t = 0; t < valueCount; t++) {\n\n                    size += entry.lengths[t];\n\n                }\n\n            } else {\n\n                entry.currentEditor = null;\n\n                for (int t = 0; t < valueCount; t++) {\n\n                    deleteIfExists(entry.getCleanFile(t));\n\n                    deleteIfExists(entry.getDirtyFile(t));\n\n                }\n\n                i.remove();\n\n            }\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Creates a new journal that omits redundant information. This replaces the\n\n     * current journal if it exists.\n\n     */\n\n    private synchronized void rebuildJournal() throws IOException {\n\n        if (journalWriter != null) {\n\n            journalWriter.close();\n\n        }\n\n \n\n        Writer writer = new BufferedWriter(new FileWriter(journalFileTmp), IO_BUFFER_SIZE);\n\n        writer.write(MAGIC);\n\n        writer.write(\"\\n\");\n\n        writer.write(VERSION_1);\n\n        writer.write(\"\\n\");\n\n        writer.write(Integer.toString(appVersion));\n\n        writer.write(\"\\n\");\n\n        writer.write(Integer.toString(valueCount));\n\n        writer.write(\"\\n\");\n\n        writer.write(\"\\n\");\n\n \n\n        for (Entry entry : lruEntries.values()) {\n\n            if (entry.currentEditor != null) {\n\n                writer.write(DIRTY + ' ' + entry.key + '\\n');\n\n            } else {\n\n                writer.write(CLEAN + ' ' + entry.key + entry.getLengths() + '\\n');\n\n            }\n\n        }\n\n \n\n        writer.close();\n\n        journalFileTmp.renameTo(journalFile);\n\n        journalWriter = new BufferedWriter(new FileWriter(journalFile, true), IO_BUFFER_SIZE);\n\n    }\n\n \n\n    private static void deleteIfExists(File file) throws IOException {\n\n//        try {\n\n//            Libcore.os.remove(file.getPath());\n\n//        } catch (ErrnoException errnoException) {\n\n//            if (errnoException.errno != OsConstants.ENOENT) {\n\n//                throw errnoException.rethrowAsIOException();\n\n//            }\n\n//        }\n\n        if (file.exists() && !file.delete()) {\n\n            throw new IOException();\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns a snapshot of the entry named {@code key}, or null if it doesn't\n\n     * exist is not currently readable. If a value is returned, it is moved to\n\n     * the head of the LRU queue.\n\n     */\n\n    public synchronized Snapshot get(String key) throws IOException {\n\n        checkNotClosed();\n\n        validateKey(key);\n\n        Entry entry = lruEntries.get(key);\n\n        if (entry == null) {\n\n            return null;\n\n        }\n\n \n\n        if (!entry.readable) {\n\n            return null;\n\n        }\n\n \n\n        /*\n\n         * Open all streams eagerly to guarantee that we see a single published\n\n         * snapshot. If we opened streams lazily then the streams could come\n\n         * from different edits.\n\n         */\n\n        InputStream[] ins = new InputStream[valueCount];\n\n        try {\n\n            for (int i = 0; i < valueCount; i++) {\n\n                ins[i] = new FileInputStream(entry.getCleanFile(i));\n\n            }\n\n        } catch (FileNotFoundException e) {\n\n            // a file must have been deleted manually!\n\n            return null;\n\n        }\n\n \n\n        redundantOpCount++;\n\n        journalWriter.append(READ + ' ' + key + '\\n');\n\n        if (journalRebuildRequired()) {\n\n            executorService.submit(cleanupCallable);\n\n        }\n\n \n\n        return new Snapshot(key, entry.sequenceNumber, ins);\n\n    }\n\n \n\n    /**\n\n     * Returns an editor for the entry named {@code key}, or null if another\n\n     * edit is in progress.\n\n     */\n\n    public Editor edit(String key) throws IOException {\n\n        return edit(key, ANY_SEQUENCE_NUMBER);\n\n    }\n\n \n\n    private synchronized Editor edit(String key, long expectedSequenceNumber) throws IOException {\n\n        checkNotClosed();\n\n        validateKey(key);\n\n        Entry entry = lruEntries.get(key);\n\n        if (expectedSequenceNumber != ANY_SEQUENCE_NUMBER\n\n                && (entry == null || entry.sequenceNumber != expectedSequenceNumber)) {\n\n            return null; // snapshot is stale\n\n        }\n\n        if (entry == null) {\n\n            entry = new Entry(key);\n\n            lruEntries.put(key, entry);\n\n        } else if (entry.currentEditor != null) {\n\n            return null; // another edit is in progress\n\n        }\n\n \n\n        Editor editor = new Editor(entry);\n\n        entry.currentEditor = editor;\n\n \n\n        // flush the journal before creating files to prevent file leaks\n\n        journalWriter.write(DIRTY + ' ' + key + '\\n');\n\n        journalWriter.flush();\n\n        return editor;\n\n    }\n\n \n\n    /**\n\n     * Returns the directory where this cache stores its data.\n\n     */\n\n    public File getDirectory() {\n\n        return directory;\n\n    }\n\n \n\n    /**\n\n     * Returns the maximum number of bytes that this cache should use to store\n\n     * its data.\n\n     */\n\n    public long maxSize() {\n\n        return maxSize;\n\n    }\n\n \n\n    /**\n\n     * Returns the number of bytes currently being used to store the values in\n\n     * this cache. This may be greater than the max size if a background\n\n     * deletion is pending.\n\n     */\n\n    public synchronized long size() {\n\n        return size;\n\n    }\n\n \n\n    private synchronized void completeEdit(Editor editor, boolean success) throws IOException {\n\n        Entry entry = editor.entry;\n\n        if (entry.currentEditor != editor) {\n\n            throw new IllegalStateException();\n\n        }\n\n \n\n        // if this edit is creating the entry for the first time, every index must have a value\n\n        if (success && !entry.readable) {\n\n            for (int i = 0; i < valueCount; i++) {\n\n                if (!entry.getDirtyFile(i).exists()) {\n\n                    editor.abort();\n\n                    throw new IllegalStateException(\"edit didn't create file \" + i);\n\n                }\n\n            }\n\n        }\n\n \n\n        for (int i = 0; i < valueCount; i++) {\n\n            File dirty = entry.getDirtyFile(i);\n\n            if (success) {\n\n                if (dirty.exists()) {\n\n                    File clean = entry.getCleanFile(i);\n\n                    dirty.renameTo(clean);\n\n                    long oldLength = entry.lengths[i];\n\n                    long newLength = clean.length();\n\n                    entry.lengths[i] = newLength;\n\n                    size = size - oldLength + newLength;\n\n                }\n\n            } else {\n\n                deleteIfExists(dirty);\n\n            }\n\n        }\n\n \n\n        redundantOpCount++;\n\n        entry.currentEditor = null;\n\n        if (entry.readable | success) {\n\n            entry.readable = true;\n\n            journalWriter.write(CLEAN + ' ' + entry.key + entry.getLengths() + '\\n');\n\n            if (success) {\n\n                entry.sequenceNumber = nextSequenceNumber++;\n\n            }\n\n        } else {\n\n            lruEntries.remove(entry.key);\n\n            journalWriter.write(REMOVE + ' ' + entry.key + '\\n');\n\n        }\n\n \n\n        if (size > maxSize || journalRebuildRequired()) {\n\n            executorService.submit(cleanupCallable);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * We only rebuild the journal when it will halve the size of the journal\n\n     * and eliminate at least 2000 ops.\n\n     */\n\n    private boolean journalRebuildRequired() {\n\n        final int REDUNDANT_OP_COMPACT_THRESHOLD = 2000;\n\n        return redundantOpCount >= REDUNDANT_OP_COMPACT_THRESHOLD\n\n                && redundantOpCount >= lruEntries.size();\n\n    }\n\n \n\n    /**\n\n     * Drops the entry for {@code key} if it exists and can be removed. Entries\n\n     * actively being edited cannot be removed.\n\n     *\n\n     * @return true if an entry was removed.\n\n     */\n\n    public synchronized boolean remove(String key) throws IOException {\n\n        checkNotClosed();\n\n        validateKey(key);\n\n        Entry entry = lruEntries.get(key);\n\n        if (entry == null || entry.currentEditor != null) {\n\n            return false;\n\n        }\n\n \n\n        for (int i = 0; i < valueCount; i++) {\n\n            File file = entry.getCleanFile(i);\n\n            if (!file.delete()) {\n\n                throw new IOException(\"failed to delete \" + file);\n\n            }\n\n            size -= entry.lengths[i];\n\n            entry.lengths[i] = 0;\n\n        }\n\n \n\n        redundantOpCount++;\n\n        journalWriter.append(REMOVE + ' ' + key + '\\n');\n\n        lruEntries.remove(key);\n\n \n\n        if (journalRebuildRequired()) {\n\n            executorService.submit(cleanupCallable);\n\n        }\n\n \n\n        return true;\n\n    }\n\n \n\n    /**\n\n     * Returns true if this cache has been closed.\n\n     */\n\n    public boolean isClosed() {\n\n        return journalWriter == null;\n\n    }\n\n \n\n    private void checkNotClosed() {\n\n        if (journalWriter == null) {\n\n            throw new IllegalStateException(\"cache is closed\");\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Force buffered operations to the filesystem.\n\n     */\n\n    public synchronized void flush() throws IOException {\n\n        checkNotClosed();\n\n        trimToSize();\n\n        journalWriter.flush();\n\n    }\n\n \n\n    /**\n\n     * Closes this cache. Stored values will remain on the filesystem.\n\n     */\n\n    public synchronized void close() throws IOException {\n\n        if (journalWriter == null) {\n\n            return; // already closed\n\n        }\n\n        for (Entry entry : new ArrayList<Entry>(lruEntries.values())) {\n\n            if (entry.currentEditor != null) {\n\n                entry.currentEditor.abort();\n\n            }\n\n        }\n\n        trimToSize();\n\n        journalWriter.close();\n\n        journalWriter = null;\n\n    }\n\n \n\n    private void trimToSize() throws IOException {\n\n        while (size > maxSize) {\n\n//            Map.Entry<String, Entry> toEvict = lruEntries.eldest();\n\n            final Map.Entry<String, Entry> toEvict = lruEntries.entrySet().iterator().next();\n\n            remove(toEvict.getKey());\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Closes the cache and deletes all of its stored values. This will delete\n\n     * all files in the cache directory including files that weren't created by\n\n     * the cache.\n\n     */\n\n    public void delete() throws IOException {\n\n        close();\n\n        deleteContents(directory);\n\n    }\n\n \n\n    private void validateKey(String key) {\n\n        if (key.contains(\" \") || key.contains(\"\\n\") || key.contains(\"\\r\")) {\n\n            throw new IllegalArgumentException(\n\n                    \"keys must not contain spaces or newlines: \\\"\" + key + \"\\\"\");\n\n        }\n\n    }\n\n \n\n    private static String inputStreamToString(InputStream in) throws IOException {\n\n        return readFully(new InputStreamReader(in, UTF_8));\n\n    }\n\n \n\n    /**\n\n     * A snapshot of the values for an entry.\n\n     */\n\n    public final class Snapshot implements Closeable {\n\n        private final String key;\n\n        private final long sequenceNumber;\n\n        private final InputStream[] ins;\n\n \n\n        private Snapshot(String key, long sequenceNumber, InputStream[] ins) {\n\n            this.key = key;\n\n            this.sequenceNumber = sequenceNumber;\n\n            this.ins = ins;\n\n        }\n\n \n\n        /**\n\n         * Returns an editor for this snapshot's entry, or null if either the\n\n         * entry has changed since this snapshot was created or if another edit\n\n         * is in progress.\n\n         */\n\n        public Editor edit() throws IOException {\n\n            return DiskLruCache.this.edit(key, sequenceNumber);\n\n        }\n\n \n\n        /**\n\n         * Returns the unbuffered stream with the value for {@code index}.\n\n         */\n\n        public InputStream getInputStream(int index) {\n\n            return ins[index];\n\n        }\n\n \n\n        /**\n\n         * Returns the string value for {@code index}.\n\n         */\n\n        public String getString(int index) throws IOException {\n\n            return inputStreamToString(getInputStream(index));\n\n        }\n\n \n\n        @Override public void close() {\n\n            for (InputStream in : ins) {\n\n                closeQuietly(in);\n\n            }\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Edits the values for an entry.\n\n     */\n\n    public final class Editor {\n\n        private final Entry entry;\n\n        private boolean hasErrors;\n\n \n\n        private Editor(Entry entry) {\n\n            this.entry = entry;\n\n        }\n\n \n\n        /**\n\n         * Returns an unbuffered input stream to read the last committed value,\n\n         * or null if no value has been committed.\n\n         */\n\n        public InputStream newInputStream(int index) throws IOException {\n\n            synchronized (DiskLruCache.this) {\n\n                if (entry.currentEditor != this) {\n\n                    throw new IllegalStateException();\n\n                }\n\n                if (!entry.readable) {\n\n                    return null;\n\n                }\n\n                return new FileInputStream(entry.getCleanFile(index));\n\n            }\n\n        }\n\n \n\n        /**\n\n         * Returns the last committed value as a string, or null if no value\n\n         * has been committed.\n\n         */\n\n        public String getString(int index) throws IOException {\n\n            InputStream in = newInputStream(index);\n\n            return in != null ? inputStreamToString(in) : null;\n\n        }\n\n \n\n        /**\n\n         * Returns a new unbuffered output stream to write the value at\n\n         * {@code index}. If the underlying output stream encounters errors\n\n         * when writing to the filesystem, this edit will be aborted when\n\n         * {@link #commit} is called. The returned output stream does not throw\n\n         * IOExceptions.\n\n         */\n\n        public OutputStream newOutputStream(int index) throws IOException {\n\n            synchronized (DiskLruCache.this) {\n\n                if (entry.currentEditor != this) {\n\n                    throw new IllegalStateException();\n\n                }\n\n                return new FaultHidingOutputStream(new FileOutputStream(entry.getDirtyFile(index)));\n\n            }\n\n        }\n\n \n\n        /**\n\n         * Sets the value at {@code index} to {@code value}.\n\n         */\n\n        public void set(int index, String value) throws IOException {\n\n            Writer writer = null;\n\n            try {\n\n                writer = new OutputStreamWriter(newOutputStream(index), UTF_8);\n\n                writer.write(value);\n\n            } finally {\n\n                closeQuietly(writer);\n\n            }\n\n        }\n\n \n\n        /**\n\n         * Commits this edit so it is visible to readers.  This releases the\n\n         * edit lock so another edit may be started on the same key.\n\n         */\n\n        public void commit() throws IOException {\n\n            if (hasErrors) {\n\n                completeEdit(this, false);\n\n                remove(entry.key); // the previous entry is stale\n\n            } else {\n\n                completeEdit(this, true);\n\n            }\n\n        }\n\n \n\n        /**\n\n         * Aborts this edit. This releases the edit lock so another edit may be\n\n         * started on the same key.\n\n         */\n\n        public void abort() throws IOException {\n\n            completeEdit(this, false);\n\n        }\n\n \n\n        private class FaultHidingOutputStream extends FilterOutputStream {\n\n            private FaultHidingOutputStream(OutputStream out) {\n\n                super(out);\n\n            }\n\n \n\n            @Override public void write(int oneByte) {\n\n                try {\n\n                    out.write(oneByte);\n\n                } catch (IOException e) {\n\n                    hasErrors = true;\n\n                }\n\n            }\n\n \n\n            @Override public void write(byte[] buffer, int offset, int length) {\n\n                try {\n\n                    out.write(buffer, offset, length);\n\n                } catch (IOException e) {\n\n                    hasErrors = true;\n\n                }\n\n            }\n\n \n\n            @Override public void close() {\n\n                try {\n\n                    out.close();\n\n                } catch (IOException e) {\n\n                    hasErrors = true;\n\n                }\n\n            }\n\n \n\n            @Override public void flush() {\n\n                try {\n\n                    out.flush();\n\n                } catch (IOException e) {\n\n                    hasErrors = true;\n\n                }\n\n            }\n\n        }\n\n    }\n\n \n\n    private final class Entry {\n\n        private final String key;\n\n \n\n        /** Lengths of this entry's files. */\n\n        private final long[] lengths;\n\n \n\n        /** True if this entry has ever been published */\n\n        private boolean readable;\n\n \n\n        /** The ongoing edit or null if this entry is not being edited. */\n\n        private Editor currentEditor;\n\n \n\n        /** The sequence number of the most recently committed edit to this entry. */\n\n        private long sequenceNumber;\n\n \n\n        private Entry(String key) {\n\n            this.key = key;\n\n            this.lengths = new long[valueCount];\n\n        }\n\n \n\n        public String getLengths() throws IOException {\n\n            StringBuilder result = new StringBuilder();\n\n            for (long size : lengths) {\n\n                result.append(' ').append(size);\n\n            }\n\n            return result.toString();\n\n        }\n\n \n\n        /**\n\n         * Set lengths using decimal numbers like \"10123\".\n\n         */\n\n        private void setLengths(String[] strings) throws IOException {\n\n            if (strings.length != valueCount) {\n\n                throw invalidLengths(strings);\n\n            }\n\n \n\n            try {\n\n                for (int i = 0; i < strings.length; i++) {\n\n                    lengths[i] = Long.parseLong(strings[i]);\n\n                }\n\n            } catch (NumberFormatException e) {\n\n                throw invalidLengths(strings);\n\n            }\n\n        }\n\n \n\n        private IOException invalidLengths(String[] strings) throws IOException {\n\n            throw new IOException(\"unexpected journal line: \" + Arrays.toString(strings));\n\n        }\n\n \n\n        public File getCleanFile(int i) {\n\n            return new File(directory, key + \".\" + i);\n\n        }\n\n \n\n        public File getDirtyFile(int i) {\n\n            return new File(directory, key + \".\" + i + \".tmp\");\n\n        }\n\n    }\n\n}\n  ","ImageCache.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.displayingbitmaps.util;\n\n \n\nimport android.annotation.TargetApi;\n\nimport android.content.Context;\n\nimport android.graphics.Bitmap;\n\nimport android.graphics.Bitmap.CompressFormat;\n\nimport android.graphics.Bitmap.Config;\n\nimport android.graphics.BitmapFactory;\n\nimport android.graphics.drawable.BitmapDrawable;\n\nimport android.os.Build.VERSION_CODES;\n\nimport android.os.Bundle;\n\nimport android.os.Environment;\n\nimport android.os.StatFs;\n\nimport android.support.v4.app.Fragment;\n\nimport android.support.v4.app.FragmentManager;\n\nimport android.support.v4.util.LruCache;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.displayingbitmaps.BuildConfig;\n\n \n\nimport java.io.File;\n\nimport java.io.FileDescriptor;\n\nimport java.io.FileInputStream;\n\nimport java.io.IOException;\n\nimport java.io.InputStream;\n\nimport java.io.OutputStream;\n\nimport java.lang.ref.SoftReference;\n\nimport java.security.MessageDigest;\n\nimport java.security.NoSuchAlgorithmException;\n\nimport java.util.Collections;\n\nimport java.util.HashSet;\n\nimport java.util.Iterator;\n\nimport java.util.Set;\n\n \n\n/**\n\n * This class handles disk and memory caching of bitmaps in conjunction with the\n\n * {@link ImageWorker} class and its subclasses. Use\n\n * {@link ImageCache#getInstance(android.support.v4.app.FragmentManager, ImageCacheParams)} to get an instance of this\n\n * class, although usually a cache should be added directly to an {@link ImageWorker} by calling\n\n * {@link ImageWorker#addImageCache(android.support.v4.app.FragmentManager, ImageCacheParams)}.\n\n */\n\npublic class ImageCache {\n\n    private static final String TAG = \"ImageCache\";\n\n \n\n    // Default memory cache size in kilobytes\n\n    private static final int DEFAULT_MEM_CACHE_SIZE = 1024 * 5; // 5MB\n\n \n\n    // Default disk cache size in bytes\n\n    private static final int DEFAULT_DISK_CACHE_SIZE = 1024 * 1024 * 10; // 10MB\n\n \n\n    // Compression settings when writing images to disk cache\n\n    private static final CompressFormat DEFAULT_COMPRESS_FORMAT = CompressFormat.JPEG;\n\n    private static final int DEFAULT_COMPRESS_QUALITY = 70;\n\n    private static final int DISK_CACHE_INDEX = 0;\n\n \n\n    // Constants to easily toggle various caches\n\n    private static final boolean DEFAULT_MEM_CACHE_ENABLED = true;\n\n    private static final boolean DEFAULT_DISK_CACHE_ENABLED = true;\n\n    private static final boolean DEFAULT_INIT_DISK_CACHE_ON_CREATE = false;\n\n \n\n    private DiskLruCache mDiskLruCache;\n\n    private LruCache<String, BitmapDrawable> mMemoryCache;\n\n    private ImageCacheParams mCacheParams;\n\n    private final Object mDiskCacheLock = new Object();\n\n    private boolean mDiskCacheStarting = true;\n\n \n\n    private Set<SoftReference<Bitmap>> mReusableBitmaps;\n\n \n\n    /**\n\n     * Create a new ImageCache object using the specified parameters. This should not be\n\n     * called directly by other classes, instead use\n\n     * {@link ImageCache#getInstance(android.support.v4.app.FragmentManager, ImageCacheParams)} to fetch an ImageCache\n\n     * instance.\n\n     *\n\n     * @param cacheParams The cache parameters to use to initialize the cache\n\n     */\n\n    private ImageCache(ImageCacheParams cacheParams) {\n\n        init(cacheParams);\n\n    }\n\n \n\n    /**\n\n     * Return an {@link ImageCache} instance. A {@link RetainFragment} is used to retain the\n\n     * ImageCache object across configuration changes such as a change in device orientation.\n\n     *\n\n     * @param fragmentManager The fragment manager to use when dealing with the retained fragment.\n\n     * @param cacheParams The cache parameters to use if the ImageCache needs instantiation.\n\n     * @return An existing retained ImageCache object or a new one if one did not exist\n\n     */\n\n    public static ImageCache getInstance(\n\n            FragmentManager fragmentManager, ImageCacheParams cacheParams) {\n\n \n\n        // Search for, or create an instance of the non-UI RetainFragment\n\n        final RetainFragment mRetainFragment = findOrCreateRetainFragment(fragmentManager);\n\n \n\n        // See if we already have an ImageCache stored in RetainFragment\n\n        ImageCache imageCache = (ImageCache) mRetainFragment.getObject();\n\n \n\n        // No existing ImageCache, create one and store it in RetainFragment\n\n        if (imageCache == null) {\n\n            imageCache = new ImageCache(cacheParams);\n\n            mRetainFragment.setObject(imageCache);\n\n        }\n\n \n\n        return imageCache;\n\n    }\n\n \n\n    /**\n\n     * Initialize the cache, providing all parameters.\n\n     *\n\n     * @param cacheParams The cache parameters to initialize the cache\n\n     */\n\n    private void init(ImageCacheParams cacheParams) {\n\n        mCacheParams = cacheParams;\n\n \n\n        // Set up memory cache\n\n        if (mCacheParams.memoryCacheEnabled) {\n\n            if (BuildConfig.DEBUG) {\n\n                Log.d(TAG, \"Memory cache created (size = \" + mCacheParams.memCacheSize + \")\");\n\n            }\n\n \n\n            // If we're running on Honeycomb or newer, create a set of reusable bitmaps that can be\n\n            // populated into the inBitmap field of BitmapFactory.Options. Note that the set is\n\n            // of SoftReferences which will actually not be very effective due to the garbage\n\n            // collector being aggressive clearing Soft/WeakReferences. A better approach\n\n            // would be to use a strongly references bitmaps, however this would require some\n\n            // balancing of memory usage between this set and the bitmap LruCache. It would also\n\n            // require knowledge of the expected size of the bitmaps. From Honeycomb to JellyBean\n\n            // the size would need to be precise, from KitKat onward the size would just need to\n\n            // be the upper bound (due to changes in how inBitmap can re-use bitmaps).\n\n            if (Utils.hasHoneycomb()) {\n\n                mReusableBitmaps =\n\n                        Collections.synchronizedSet(new HashSet<SoftReference<Bitmap>>());\n\n            }\n\n \n\n            mMemoryCache = new LruCache<String, BitmapDrawable>(mCacheParams.memCacheSize) {\n\n \n\n                /**\n\n                 * Notify the removed entry that is no longer being cached\n\n                 */\n\n                @Override\n\n                protected void entryRemoved(boolean evicted, String key,\n\n                        BitmapDrawable oldValue, BitmapDrawable newValue) {\n\n                    if (RecyclingBitmapDrawable.class.isInstance(oldValue)) {\n\n                        // The removed entry is a recycling drawable, so notify it\n\n                        // that it has been removed from the memory cache\n\n                        ((RecyclingBitmapDrawable) oldValue).setIsCached(false);\n\n                    } else {\n\n                        // The removed entry is a standard BitmapDrawable\n\n \n\n                        if (Utils.hasHoneycomb()) {\n\n                            // We're running on Honeycomb or later, so add the bitmap\n\n                            // to a SoftReference set for possible use with inBitmap later\n\n                            mReusableBitmaps.add(new SoftReference<Bitmap>(oldValue.getBitmap()));\n\n                        }\n\n                    }\n\n                }\n\n \n\n                /**\n\n                 * Measure item size in kilobytes rather than units which is more practical\n\n                 * for a bitmap cache\n\n                 */\n\n                @Override\n\n                protected int sizeOf(String key, BitmapDrawable value) {\n\n                    final int bitmapSize = getBitmapSize(value) / 1024;\n\n                    return bitmapSize == 0 ? 1 : bitmapSize;\n\n                }\n\n            };\n\n        }\n\n \n\n        // By default the disk cache is not initialized here as it should be initialized\n\n        // on a separate thread due to disk access.\n\n        if (cacheParams.initDiskCacheOnCreate) {\n\n            // Set up disk cache\n\n            initDiskCache();\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Initializes the disk cache.  Note that this includes disk access so this should not be\n\n     * executed on the main/UI thread. By default an ImageCache does not initialize the disk\n\n     * cache when it is created, instead you should call initDiskCache() to initialize it on a\n\n     * background thread.\n\n     */\n\n    public void initDiskCache() {\n\n        // Set up disk cache\n\n        synchronized (mDiskCacheLock) {\n\n            if (mDiskLruCache == null || mDiskLruCache.isClosed()) {\n\n                File diskCacheDir = mCacheParams.diskCacheDir;\n\n                if (mCacheParams.diskCacheEnabled && diskCacheDir != null) {\n\n                    if (!diskCacheDir.exists()) {\n\n                        diskCacheDir.mkdirs();\n\n                    }\n\n                    if (getUsableSpace(diskCacheDir) > mCacheParams.diskCacheSize) {\n\n                        try {\n\n                            mDiskLruCache = DiskLruCache.open(\n\n                                    diskCacheDir, 1, 1, mCacheParams.diskCacheSize);\n\n                            if (BuildConfig.DEBUG) {\n\n                                Log.d(TAG, \"Disk cache initialized\");\n\n                            }\n\n                        } catch (final IOException e) {\n\n                            mCacheParams.diskCacheDir = null;\n\n                            Log.e(TAG, \"initDiskCache - \" + e);\n\n                        }\n\n                    }\n\n                }\n\n            }\n\n            mDiskCacheStarting = false;\n\n            mDiskCacheLock.notifyAll();\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Adds a bitmap to both memory and disk cache.\n\n     * @param data Unique identifier for the bitmap to store\n\n     * @param value The bitmap drawable to store\n\n     */\n\n    public void addBitmapToCache(String data, BitmapDrawable value) {\n\n        if (data == null || value == null) {\n\n            return;\n\n        }\n\n \n\n        // Add to memory cache\n\n        if (mMemoryCache != null) {\n\n            if (RecyclingBitmapDrawable.class.isInstance(value)) {\n\n                // The removed entry is a recycling drawable, so notify it\n\n                // that it has been added into the memory cache\n\n                ((RecyclingBitmapDrawable) value).setIsCached(true);\n\n            }\n\n            mMemoryCache.put(data, value);\n\n        }\n\n \n\n        synchronized (mDiskCacheLock) {\n\n            // Add to disk cache\n\n            if (mDiskLruCache != null) {\n\n                final String key = hashKeyForDisk(data);\n\n                OutputStream out = null;\n\n                try {\n\n                    DiskLruCache.Snapshot snapshot = mDiskLruCache.get(key);\n\n                    if (snapshot == null) {\n\n                        final DiskLruCache.Editor editor = mDiskLruCache.edit(key);\n\n                        if (editor != null) {\n\n                            out = editor.newOutputStream(DISK_CACHE_INDEX);\n\n                            value.getBitmap().compress(\n\n                                    mCacheParams.compressFormat, mCacheParams.compressQuality, out);\n\n                            editor.commit();\n\n                            out.close();\n\n                        }\n\n                    } else {\n\n                        snapshot.getInputStream(DISK_CACHE_INDEX).close();\n\n                    }\n\n                } catch (final IOException e) {\n\n                    Log.e(TAG, \"addBitmapToCache - \" + e);\n\n                } catch (Exception e) {\n\n                    Log.e(TAG, \"addBitmapToCache - \" + e);\n\n                } finally {\n\n                    try {\n\n                        if (out != null) {\n\n                            out.close();\n\n                        }\n\n                    } catch (IOException e) {}\n\n                }\n\n            }\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Get from memory cache.\n\n     *\n\n     * @param data Unique identifier for which item to get\n\n     * @return The bitmap drawable if found in cache, null otherwise\n\n     */\n\n    public BitmapDrawable getBitmapFromMemCache(String data) {\n\n        BitmapDrawable memValue = null;\n\n \n\n        if (mMemoryCache != null) {\n\n            memValue = mMemoryCache.get(data);\n\n        }\n\n \n\n        if (BuildConfig.DEBUG && memValue != null) {\n\n            Log.d(TAG, \"Memory cache hit\");\n\n        }\n\n \n\n        return memValue;\n\n    }\n\n \n\n    /**\n\n     * Get from disk cache.\n\n     *\n\n     * @param data Unique identifier for which item to get\n\n     * @return The bitmap if found in cache, null otherwise\n\n     */\n\n    public Bitmap getBitmapFromDiskCache(String data) {\n\n        final String key = hashKeyForDisk(data);\n\n        Bitmap bitmap = null;\n\n \n\n        synchronized (mDiskCacheLock) {\n\n            while (mDiskCacheStarting) {\n\n                try {\n\n                    mDiskCacheLock.wait();\n\n                } catch (InterruptedException e) {}\n\n            }\n\n            if (mDiskLruCache != null) {\n\n                InputStream inputStream = null;\n\n                try {\n\n                    final DiskLruCache.Snapshot snapshot = mDiskLruCache.get(key);\n\n                    if (snapshot != null) {\n\n                        if (BuildConfig.DEBUG) {\n\n                            Log.d(TAG, \"Disk cache hit\");\n\n                        }\n\n                        inputStream = snapshot.getInputStream(DISK_CACHE_INDEX);\n\n                        if (inputStream != null) {\n\n                            FileDescriptor fd = ((FileInputStream) inputStream).getFD();\n\n \n\n                            // Decode bitmap, but we don't want to sample so give\n\n                            // MAX_VALUE as the target dimensions\n\n                            bitmap = ImageResizer.decodeSampledBitmapFromDescriptor(\n\n                                    fd, Integer.MAX_VALUE, Integer.MAX_VALUE, this);\n\n                        }\n\n                    }\n\n                } catch (final IOException e) {\n\n                    Log.e(TAG, \"getBitmapFromDiskCache - \" + e);\n\n                } finally {\n\n                    try {\n\n                        if (inputStream != null) {\n\n                            inputStream.close();\n\n                        }\n\n                    } catch (IOException e) {}\n\n                }\n\n            }\n\n            return bitmap;\n\n        }\n\n    }\n\n \n\n    /**\n\n     * @param options - BitmapFactory.Options with out* options populated\n\n     * @return Bitmap that case be used for inBitmap\n\n     */\n\n    protected Bitmap getBitmapFromReusableSet(BitmapFactory.Options options) {\n\n        Bitmap bitmap = null;\n\n \n\n        if (mReusableBitmaps != null && !mReusableBitmaps.isEmpty()) {\n\n            synchronized (mReusableBitmaps) {\n\n                final Iterator<SoftReference<Bitmap>> iterator = mReusableBitmaps.iterator();\n\n                Bitmap item;\n\n \n\n                while (iterator.hasNext()) {\n\n                    item = iterator.next().get();\n\n \n\n                    if (null != item && item.isMutable()) {\n\n                        // Check to see it the item can be used for inBitmap\n\n                        if (canUseForInBitmap(item, options)) {\n\n                            bitmap = item;\n\n \n\n                            // Remove from reusable set so it can't be used again\n\n                            iterator.remove();\n\n                            break;\n\n                        }\n\n                    } else {\n\n                        // Remove from the set if the reference has been cleared.\n\n                        iterator.remove();\n\n                    }\n\n                }\n\n            }\n\n        }\n\n \n\n        return bitmap;\n\n    }\n\n \n\n    /**\n\n     * Clears both the memory and disk cache associated with this ImageCache object. Note that\n\n     * this includes disk access so this should not be executed on the main/UI thread.\n\n     */\n\n    public void clearCache() {\n\n        if (mMemoryCache != null) {\n\n            mMemoryCache.evictAll();\n\n            if (BuildConfig.DEBUG) {\n\n                Log.d(TAG, \"Memory cache cleared\");\n\n            }\n\n        }\n\n \n\n        synchronized (mDiskCacheLock) {\n\n            mDiskCacheStarting = true;\n\n            if (mDiskLruCache != null && !mDiskLruCache.isClosed()) {\n\n                try {\n\n                    mDiskLruCache.delete();\n\n                    if (BuildConfig.DEBUG) {\n\n                        Log.d(TAG, \"Disk cache cleared\");\n\n                    }\n\n                } catch (IOException e) {\n\n                    Log.e(TAG, \"clearCache - \" + e);\n\n                }\n\n                mDiskLruCache = null;\n\n                initDiskCache();\n\n            }\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Flushes the disk cache associated with this ImageCache object. Note that this includes\n\n     * disk access so this should not be executed on the main/UI thread.\n\n     */\n\n    public void flush() {\n\n        synchronized (mDiskCacheLock) {\n\n            if (mDiskLruCache != null) {\n\n                try {\n\n                    mDiskLruCache.flush();\n\n                    if (BuildConfig.DEBUG) {\n\n                        Log.d(TAG, \"Disk cache flushed\");\n\n                    }\n\n                } catch (IOException e) {\n\n                    Log.e(TAG, \"flush - \" + e);\n\n                }\n\n            }\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Closes the disk cache associated with this ImageCache object. Note that this includes\n\n     * disk access so this should not be executed on the main/UI thread.\n\n     */\n\n    public void close() {\n\n        synchronized (mDiskCacheLock) {\n\n            if (mDiskLruCache != null) {\n\n                try {\n\n                    if (!mDiskLruCache.isClosed()) {\n\n                        mDiskLruCache.close();\n\n                        mDiskLruCache = null;\n\n                        if (BuildConfig.DEBUG) {\n\n                            Log.d(TAG, \"Disk cache closed\");\n\n                        }\n\n                    }\n\n                } catch (IOException e) {\n\n                    Log.e(TAG, \"close - \" + e);\n\n                }\n\n            }\n\n        }\n\n    }\n\n \n\n    /**\n\n     * A holder class that contains cache parameters.\n\n     */\n\n    public static class ImageCacheParams {\n\n        public int memCacheSize = DEFAULT_MEM_CACHE_SIZE;\n\n        public int diskCacheSize = DEFAULT_DISK_CACHE_SIZE;\n\n        public File diskCacheDir;\n\n        public CompressFormat compressFormat = DEFAULT_COMPRESS_FORMAT;\n\n        public int compressQuality = DEFAULT_COMPRESS_QUALITY;\n\n        public boolean memoryCacheEnabled = DEFAULT_MEM_CACHE_ENABLED;\n\n        public boolean diskCacheEnabled = DEFAULT_DISK_CACHE_ENABLED;\n\n        public boolean initDiskCacheOnCreate = DEFAULT_INIT_DISK_CACHE_ON_CREATE;\n\n \n\n        /**\n\n         * Create a set of image cache parameters that can be provided to\n\n         * {@link ImageCache#getInstance(android.support.v4.app.FragmentManager, ImageCacheParams)} or\n\n         * {@link ImageWorker#addImageCache(android.support.v4.app.FragmentManager, ImageCacheParams)}.\n\n         * @param context A context to use.\n\n         * @param diskCacheDirectoryName A unique subdirectory name that will be appended to the\n\n         *                               application cache directory. Usually \"cache\" or \"images\"\n\n         *                               is sufficient.\n\n         */\n\n        public ImageCacheParams(Context context, String diskCacheDirectoryName) {\n\n            diskCacheDir = getDiskCacheDir(context, diskCacheDirectoryName);\n\n        }\n\n \n\n        /**\n\n         * Sets the memory cache size based on a percentage of the max available VM memory.\n\n         * Eg. setting percent to 0.2 would set the memory cache to one fifth of the available\n\n         * memory. Throws {@link IllegalArgumentException} if percent is < 0.01 or > .8.\n\n         * memCacheSize is stored in kilobytes instead of bytes as this will eventually be passed\n\n         * to construct a LruCache which takes an int in its constructor.\n\n         *\n\n         * This value should be chosen carefully based on a number of factors\n\n         * Refer to the corresponding Android Training class for more discussion:\n\n         * http://developer.android.com/training/displaying-bitmaps/\n\n         *\n\n         * @param percent Percent of available app memory to use to size memory cache\n\n         */\n\n        public void setMemCacheSizePercent(float percent) {\n\n            if (percent < 0.01f || percent > 0.8f) {\n\n                throw new IllegalArgumentException(\"setMemCacheSizePercent - percent must be \"\n\n                        + \"between 0.01 and 0.8 (inclusive)\");\n\n            }\n\n            memCacheSize = Math.round(percent * Runtime.getRuntime().maxMemory() / 1024);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * @param candidate - Bitmap to check\n\n     * @param targetOptions - Options that have the out* value populated\n\n     * @return true if <code>candidate</code> can be used for inBitmap re-use with\n\n     *      <code>targetOptions</code>\n\n     */\n\n    @TargetApi(VERSION_CODES.KITKAT)\n\n    private static boolean canUseForInBitmap(\n\n            Bitmap candidate, BitmapFactory.Options targetOptions) {\n\n        if (!Utils.hasKitKat()) {\n\n            // On earlier versions, the dimensions must match exactly and the inSampleSize must be 1\n\n            return candidate.getWidth() == targetOptions.outWidth\n\n                    && candidate.getHeight() == targetOptions.outHeight\n\n                    && targetOptions.inSampleSize == 1;\n\n        }\n\n \n\n        // From Android 4.4 (KitKat) onward we can re-use if the byte size of the new bitmap\n\n        // is smaller than the reusable bitmap candidate allocation byte count.\n\n        int width = targetOptions.outWidth / targetOptions.inSampleSize;\n\n        int height = targetOptions.outHeight / targetOptions.inSampleSize;\n\n        int byteCount = width * height * getBytesPerPixel(candidate.getConfig());\n\n        return byteCount <= candidate.getAllocationByteCount();\n\n    }\n\n \n\n    /**\n\n     * Return the byte usage per pixel of a bitmap based on its configuration.\n\n     * @param config The bitmap configuration.\n\n     * @return The byte usage per pixel.\n\n     */\n\n    private static int getBytesPerPixel(Config config) {\n\n        if (config == Config.ARGB_8888) {\n\n            return 4;\n\n        } else if (config == Config.RGB_565) {\n\n            return 2;\n\n        } else if (config == Config.ARGB_4444) {\n\n            return 2;\n\n        } else if (config == Config.ALPHA_8) {\n\n            return 1;\n\n        }\n\n        return 1;\n\n    }\n\n \n\n    /**\n\n     * Get a usable cache directory (external if available, internal otherwise).\n\n     *\n\n     * @param context The context to use\n\n     * @param uniqueName A unique directory name to append to the cache dir\n\n     * @return The cache dir\n\n     */\n\n    public static File getDiskCacheDir(Context context, String uniqueName) {\n\n        // Check if media is mounted or storage is built-in, if so, try and use external cache dir\n\n        // otherwise use internal cache dir\n\n        final String cachePath =\n\n                Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState()) ||\n\n                        !isExternalStorageRemovable() ? getExternalCacheDir(context).getPath() :\n\n                                context.getCacheDir().getPath();\n\n \n\n        return new File(cachePath + File.separator + uniqueName);\n\n    }\n\n \n\n    /**\n\n     * A hashing method that changes a string (like a URL) into a hash suitable for using as a\n\n     * disk filename.\n\n     */\n\n    public static String hashKeyForDisk(String key) {\n\n        String cacheKey;\n\n        try {\n\n            final MessageDigest mDigest = MessageDigest.getInstance(\"MD5\");\n\n            mDigest.update(key.getBytes());\n\n            cacheKey = bytesToHexString(mDigest.digest());\n\n        } catch (NoSuchAlgorithmException e) {\n\n            cacheKey = String.valueOf(key.hashCode());\n\n        }\n\n        return cacheKey;\n\n    }\n\n \n\n    private static String bytesToHexString(byte[] bytes) {\n\n        // http://stackoverflow.com/questions/332079\n\n        StringBuilder sb = new StringBuilder();\n\n        for (int i = 0; i < bytes.length; i++) {\n\n            String hex = Integer.toHexString(0xFF & bytes[i]);\n\n            if (hex.length() == 1) {\n\n                sb.append('0');\n\n            }\n\n            sb.append(hex);\n\n        }\n\n        return sb.toString();\n\n    }\n\n \n\n    /**\n\n     * Get the size in bytes of a bitmap in a BitmapDrawable. Note that from Android 4.4 (KitKat)\n\n     * onward this returns the allocated memory size of the bitmap which can be larger than the\n\n     * actual bitmap data byte count (in the case it was re-used).\n\n     *\n\n     * @param value\n\n     * @return size in bytes\n\n     */\n\n    @TargetApi(VERSION_CODES.KITKAT)\n\n    public static int getBitmapSize(BitmapDrawable value) {\n\n        Bitmap bitmap = value.getBitmap();\n\n \n\n        // From KitKat onward use getAllocationByteCount() as allocated bytes can potentially be\n\n        // larger than bitmap byte count.\n\n        if (Utils.hasKitKat()) {\n\n            return bitmap.getAllocationByteCount();\n\n        }\n\n \n\n        if (Utils.hasHoneycombMR1()) {\n\n            return bitmap.getByteCount();\n\n        }\n\n \n\n        // Pre HC-MR1\n\n        return bitmap.getRowBytes() * bitmap.getHeight();\n\n    }\n\n \n\n    /**\n\n     * Check if external storage is built-in or removable.\n\n     *\n\n     * @return True if external storage is removable (like an SD card), false\n\n     *         otherwise.\n\n     */\n\n    @TargetApi(VERSION_CODES.GINGERBREAD)\n\n    public static boolean isExternalStorageRemovable() {\n\n        if (Utils.hasGingerbread()) {\n\n            return Environment.isExternalStorageRemovable();\n\n        }\n\n        return true;\n\n    }\n\n \n\n    /**\n\n     * Get the external app cache directory.\n\n     *\n\n     * @param context The context to use\n\n     * @return The external cache dir\n\n     */\n\n    @TargetApi(VERSION_CODES.FROYO)\n\n    public static File getExternalCacheDir(Context context) {\n\n        if (Utils.hasFroyo()) {\n\n            return context.getExternalCacheDir();\n\n        }\n\n \n\n        // Before Froyo we need to construct the external cache dir ourselves\n\n        final String cacheDir = \"/Android/data/\" + context.getPackageName() + \"/cache/\";\n\n        return new File(Environment.getExternalStorageDirectory().getPath() + cacheDir);\n\n    }\n\n \n\n    /**\n\n     * Check how much usable space is available at a given path.\n\n     *\n\n     * @param path The path to check\n\n     * @return The space available in bytes\n\n     */\n\n    @TargetApi(VERSION_CODES.GINGERBREAD)\n\n    public static long getUsableSpace(File path) {\n\n        if (Utils.hasGingerbread()) {\n\n            return path.getUsableSpace();\n\n        }\n\n        final StatFs stats = new StatFs(path.getPath());\n\n        return (long) stats.getBlockSize() * (long) stats.getAvailableBlocks();\n\n    }\n\n \n\n    /**\n\n     * Locate an existing instance of this Fragment or if not found, create and\n\n     * add it using FragmentManager.\n\n     *\n\n     * @param fm The FragmentManager manager to use.\n\n     * @return The existing instance of the Fragment or the new instance if just\n\n     *         created.\n\n     */\n\n    private static RetainFragment findOrCreateRetainFragment(FragmentManager fm) {\n\n        // Check to see if we have retained the worker fragment.\n\n        RetainFragment mRetainFragment = (RetainFragment) fm.findFragmentByTag(TAG);\n\n \n\n        // If not retained (or first time running), we need to create and add it.\n\n        if (mRetainFragment == null) {\n\n            mRetainFragment = new RetainFragment();\n\n            fm.beginTransaction().add(mRetainFragment, TAG).commitAllowingStateLoss();\n\n        }\n\n \n\n        return mRetainFragment;\n\n    }\n\n \n\n    /**\n\n     * A simple non-UI Fragment that stores a single Object and is retained over configuration\n\n     * changes. It will be used to retain the ImageCache object.\n\n     */\n\n    public static class RetainFragment extends Fragment {\n\n        private Object mObject;\n\n \n\n        /**\n\n         * Empty constructor as per the Fragment documentation\n\n         */\n\n        public RetainFragment() {}\n\n \n\n        @Override\n\n        public void onCreate(Bundle savedInstanceState) {\n\n            super.onCreate(savedInstanceState);\n\n \n\n            // Make sure this Fragment is retained over a configuration change\n\n            setRetainInstance(true);\n\n        }\n\n \n\n        /**\n\n         * Store a single object in this Fragment.\n\n         *\n\n         * @param object The object to store\n\n         */\n\n        public void setObject(Object object) {\n\n            mObject = object;\n\n        }\n\n \n\n        /**\n\n         * Get the stored object.\n\n         *\n\n         * @return The stored object\n\n         */\n\n        public Object getObject() {\n\n            return mObject;\n\n        }\n\n    }\n\n \n\n}\n  ","ImageFetcher.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.displayingbitmaps.util;\n\n \n\nimport android.content.Context;\n\nimport android.graphics.Bitmap;\n\nimport android.net.ConnectivityManager;\n\nimport android.net.NetworkInfo;\n\nimport android.os.Build;\n\nimport android.widget.Toast;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.displayingbitmaps.BuildConfig;\n\nimport com.example.android.displayingbitmaps.R;\n\n \n\nimport java.io.BufferedInputStream;\n\nimport java.io.BufferedOutputStream;\n\nimport java.io.File;\n\nimport java.io.FileDescriptor;\n\nimport java.io.FileInputStream;\n\nimport java.io.IOException;\n\nimport java.io.OutputStream;\n\nimport java.net.HttpURLConnection;\n\nimport java.net.URL;\n\n \n\n/**\n\n * A simple subclass of {@link ImageResizer} that fetches and resizes images fetched from a URL.\n\n */\n\npublic class ImageFetcher extends ImageResizer {\n\n    private static final String TAG = \"ImageFetcher\";\n\n    private static final int HTTP_CACHE_SIZE = 10 * 1024 * 1024; // 10MB\n\n    private static final String HTTP_CACHE_DIR = \"http\";\n\n    private static final int IO_BUFFER_SIZE = 8 * 1024;\n\n \n\n    private DiskLruCache mHttpDiskCache;\n\n    private File mHttpCacheDir;\n\n    private boolean mHttpDiskCacheStarting = true;\n\n    private final Object mHttpDiskCacheLock = new Object();\n\n    private static final int DISK_CACHE_INDEX = 0;\n\n \n\n    /**\n\n     * Initialize providing a target image width and height for the processing images.\n\n     *\n\n     * @param context\n\n     * @param imageWidth\n\n     * @param imageHeight\n\n     */\n\n    public ImageFetcher(Context context, int imageWidth, int imageHeight) {\n\n        super(context, imageWidth, imageHeight);\n\n        init(context);\n\n    }\n\n \n\n    /**\n\n     * Initialize providing a single target image size (used for both width and height);\n\n     *\n\n     * @param context\n\n     * @param imageSize\n\n     */\n\n    public ImageFetcher(Context context, int imageSize) {\n\n        super(context, imageSize);\n\n        init(context);\n\n    }\n\n \n\n    private void init(Context context) {\n\n        checkConnection(context);\n\n        mHttpCacheDir = ImageCache.getDiskCacheDir(context, HTTP_CACHE_DIR);\n\n    }\n\n \n\n    @Override\n\n    protected void initDiskCacheInternal() {\n\n        super.initDiskCacheInternal();\n\n        initHttpDiskCache();\n\n    }\n\n \n\n    private void initHttpDiskCache() {\n\n        if (!mHttpCacheDir.exists()) {\n\n            mHttpCacheDir.mkdirs();\n\n        }\n\n        synchronized (mHttpDiskCacheLock) {\n\n            if (ImageCache.getUsableSpace(mHttpCacheDir) > HTTP_CACHE_SIZE) {\n\n                try {\n\n                    mHttpDiskCache = DiskLruCache.open(mHttpCacheDir, 1, 1, HTTP_CACHE_SIZE);\n\n                    if (BuildConfig.DEBUG) {\n\n                        Log.d(TAG, \"HTTP cache initialized\");\n\n                    }\n\n                } catch (IOException e) {\n\n                    mHttpDiskCache = null;\n\n                }\n\n            }\n\n            mHttpDiskCacheStarting = false;\n\n            mHttpDiskCacheLock.notifyAll();\n\n        }\n\n    }\n\n \n\n    @Override\n\n    protected void clearCacheInternal() {\n\n        super.clearCacheInternal();\n\n        synchronized (mHttpDiskCacheLock) {\n\n            if (mHttpDiskCache != null && !mHttpDiskCache.isClosed()) {\n\n                try {\n\n                    mHttpDiskCache.delete();\n\n                    if (BuildConfig.DEBUG) {\n\n                        Log.d(TAG, \"HTTP cache cleared\");\n\n                    }\n\n                } catch (IOException e) {\n\n                    Log.e(TAG, \"clearCacheInternal - \" + e);\n\n                }\n\n                mHttpDiskCache = null;\n\n                mHttpDiskCacheStarting = true;\n\n                initHttpDiskCache();\n\n            }\n\n        }\n\n    }\n\n \n\n    @Override\n\n    protected void flushCacheInternal() {\n\n        super.flushCacheInternal();\n\n        synchronized (mHttpDiskCacheLock) {\n\n            if (mHttpDiskCache != null) {\n\n                try {\n\n                    mHttpDiskCache.flush();\n\n                    if (BuildConfig.DEBUG) {\n\n                        Log.d(TAG, \"HTTP cache flushed\");\n\n                    }\n\n                } catch (IOException e) {\n\n                    Log.e(TAG, \"flush - \" + e);\n\n                }\n\n            }\n\n        }\n\n    }\n\n \n\n    @Override\n\n    protected void closeCacheInternal() {\n\n        super.closeCacheInternal();\n\n        synchronized (mHttpDiskCacheLock) {\n\n            if (mHttpDiskCache != null) {\n\n                try {\n\n                    if (!mHttpDiskCache.isClosed()) {\n\n                        mHttpDiskCache.close();\n\n                        mHttpDiskCache = null;\n\n                        if (BuildConfig.DEBUG) {\n\n                            Log.d(TAG, \"HTTP cache closed\");\n\n                        }\n\n                    }\n\n                } catch (IOException e) {\n\n                    Log.e(TAG, \"closeCacheInternal - \" + e);\n\n                }\n\n            }\n\n        }\n\n    }\n\n \n\n    /**\n\n    * Simple network connection check.\n\n    *\n\n    * @param context\n\n    */\n\n    private void checkConnection(Context context) {\n\n        final ConnectivityManager cm =\n\n                (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\n\n        final NetworkInfo networkInfo = cm.getActiveNetworkInfo();\n\n        if (networkInfo == null || !networkInfo.isConnectedOrConnecting()) {\n\n            Toast.makeText(context, R.string.no_network_connection_toast, Toast.LENGTH_LONG).show();\n\n            Log.e(TAG, \"checkConnection - no connection found\");\n\n        }\n\n    }\n\n \n\n    /**\n\n     * The main process method, which will be called by the ImageWorker in the AsyncTask background\n\n     * thread.\n\n     *\n\n     * @param data The data to load the bitmap, in this case, a regular http URL\n\n     * @return The downloaded and resized bitmap\n\n     */\n\n    private Bitmap processBitmap(String data) {\n\n        if (BuildConfig.DEBUG) {\n\n            Log.d(TAG, \"processBitmap - \" + data);\n\n        }\n\n \n\n        final String key = ImageCache.hashKeyForDisk(data);\n\n        FileDescriptor fileDescriptor = null;\n\n        FileInputStream fileInputStream = null;\n\n        DiskLruCache.Snapshot snapshot;\n\n        synchronized (mHttpDiskCacheLock) {\n\n            // Wait for disk cache to initialize\n\n            while (mHttpDiskCacheStarting) {\n\n                try {\n\n                    mHttpDiskCacheLock.wait();\n\n                } catch (InterruptedException e) {}\n\n            }\n\n \n\n            if (mHttpDiskCache != null) {\n\n                try {\n\n                    snapshot = mHttpDiskCache.get(key);\n\n                    if (snapshot == null) {\n\n                        if (BuildConfig.DEBUG) {\n\n                            Log.d(TAG, \"processBitmap, not found in http cache, downloading...\");\n\n                        }\n\n                        DiskLruCache.Editor editor = mHttpDiskCache.edit(key);\n\n                        if (editor != null) {\n\n                            if (downloadUrlToStream(data,\n\n                                    editor.newOutputStream(DISK_CACHE_INDEX))) {\n\n                                editor.commit();\n\n                            } else {\n\n                                editor.abort();\n\n                            }\n\n                        }\n\n                        snapshot = mHttpDiskCache.get(key);\n\n                    }\n\n                    if (snapshot != null) {\n\n                        fileInputStream =\n\n                                (FileInputStream) snapshot.getInputStream(DISK_CACHE_INDEX);\n\n                        fileDescriptor = fileInputStream.getFD();\n\n                    }\n\n                } catch (IOException e) {\n\n                    Log.e(TAG, \"processBitmap - \" + e);\n\n                } catch (IllegalStateException e) {\n\n                    Log.e(TAG, \"processBitmap - \" + e);\n\n                } finally {\n\n                    if (fileDescriptor == null && fileInputStream != null) {\n\n                        try {\n\n                            fileInputStream.close();\n\n                        } catch (IOException e) {}\n\n                    }\n\n                }\n\n            }\n\n        }\n\n \n\n        Bitmap bitmap = null;\n\n        if (fileDescriptor != null) {\n\n            bitmap = decodeSampledBitmapFromDescriptor(fileDescriptor, mImageWidth,\n\n                    mImageHeight, getImageCache());\n\n        }\n\n        if (fileInputStream != null) {\n\n            try {\n\n                fileInputStream.close();\n\n            } catch (IOException e) {}\n\n        }\n\n        return bitmap;\n\n    }\n\n \n\n    @Override\n\n    protected Bitmap processBitmap(Object data) {\n\n        return processBitmap(String.valueOf(data));\n\n    }\n\n \n\n    /**\n\n     * Download a bitmap from a URL and write the content to an output stream.\n\n     *\n\n     * @param urlString The URL to fetch\n\n     * @return true if successful, false otherwise\n\n     */\n\n    public boolean downloadUrlToStream(String urlString, OutputStream outputStream) {\n\n        disableConnectionReuseIfNecessary();\n\n        HttpURLConnection urlConnection = null;\n\n        BufferedOutputStream out = null;\n\n        BufferedInputStream in = null;\n\n \n\n        try {\n\n            final URL url = new URL(urlString);\n\n            urlConnection = (HttpURLConnection) url.openConnection();\n\n            in = new BufferedInputStream(urlConnection.getInputStream(), IO_BUFFER_SIZE);\n\n            out = new BufferedOutputStream(outputStream, IO_BUFFER_SIZE);\n\n \n\n            int b;\n\n            while ((b = in.read()) != -1) {\n\n                out.write(b);\n\n            }\n\n            return true;\n\n        } catch (final IOException e) {\n\n            Log.e(TAG, \"Error in downloadBitmap - \" + e);\n\n        } finally {\n\n            if (urlConnection != null) {\n\n                urlConnection.disconnect();\n\n            }\n\n            try {\n\n                if (out != null) {\n\n                    out.close();\n\n                }\n\n                if (in != null) {\n\n                    in.close();\n\n                }\n\n            } catch (final IOException e) {}\n\n        }\n\n        return false;\n\n    }\n\n \n\n    /**\n\n     * Workaround for bug pre-Froyo, see here for more info:\n\n     * http://android-developers.blogspot.com/2011/09/androids-http-clients.html\n\n     */\n\n    public static void disableConnectionReuseIfNecessary() {\n\n        // HTTP connection reuse which was buggy pre-froyo\n\n        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.FROYO) {\n\n            System.setProperty(\"http.keepAlive\", \"false\");\n\n        }\n\n    }\n\n}\n  ","ImageResizer.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.displayingbitmaps.util;\n\n \n\nimport android.annotation.TargetApi;\n\nimport android.content.Context;\n\nimport android.content.res.Resources;\n\nimport android.graphics.Bitmap;\n\nimport android.graphics.BitmapFactory;\n\nimport android.os.Build;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.displayingbitmaps.BuildConfig;\n\n \n\nimport java.io.FileDescriptor;\n\n \n\n/**\n\n * A simple subclass of {@link ImageWorker} that resizes images from resources given a target width\n\n * and height. Useful for when the input images might be too large to simply load directly into\n\n * memory.\n\n */\n\npublic class ImageResizer extends ImageWorker {\n\n    private static final String TAG = \"ImageResizer\";\n\n    protected int mImageWidth;\n\n    protected int mImageHeight;\n\n \n\n    /**\n\n     * Initialize providing a single target image size (used for both width and height);\n\n     *\n\n     * @param context\n\n     * @param imageWidth\n\n     * @param imageHeight\n\n     */\n\n    public ImageResizer(Context context, int imageWidth, int imageHeight) {\n\n        super(context);\n\n        setImageSize(imageWidth, imageHeight);\n\n    }\n\n \n\n    /**\n\n     * Initialize providing a single target image size (used for both width and height);\n\n     *\n\n     * @param context\n\n     * @param imageSize\n\n     */\n\n    public ImageResizer(Context context, int imageSize) {\n\n        super(context);\n\n        setImageSize(imageSize);\n\n    }\n\n \n\n    /**\n\n     * Set the target image width and height.\n\n     *\n\n     * @param width\n\n     * @param height\n\n     */\n\n    public void setImageSize(int width, int height) {\n\n        mImageWidth = width;\n\n        mImageHeight = height;\n\n    }\n\n \n\n    /**\n\n     * Set the target image size (width and height will be the same).\n\n     *\n\n     * @param size\n\n     */\n\n    public void setImageSize(int size) {\n\n        setImageSize(size, size);\n\n    }\n\n \n\n    /**\n\n     * The main processing method. This happens in a background task. In this case we are just\n\n     * sampling down the bitmap and returning it from a resource.\n\n     *\n\n     * @param resId\n\n     * @return\n\n     */\n\n    private Bitmap processBitmap(int resId) {\n\n        if (BuildConfig.DEBUG) {\n\n            Log.d(TAG, \"processBitmap - \" + resId);\n\n        }\n\n        return decodeSampledBitmapFromResource(mResources, resId, mImageWidth,\n\n                mImageHeight, getImageCache());\n\n    }\n\n \n\n    @Override\n\n    protected Bitmap processBitmap(Object data) {\n\n        return processBitmap(Integer.parseInt(String.valueOf(data)));\n\n    }\n\n \n\n    /**\n\n     * Decode and sample down a bitmap from resources to the requested width and height.\n\n     *\n\n     * @param res The resources object containing the image data\n\n     * @param resId The resource id of the image data\n\n     * @param reqWidth The requested width of the resulting bitmap\n\n     * @param reqHeight The requested height of the resulting bitmap\n\n     * @param cache The ImageCache used to find candidate bitmaps for use with inBitmap\n\n     * @return A bitmap sampled down from the original with the same aspect ratio and dimensions\n\n     *         that are equal to or greater than the requested width and height\n\n     */\n\n    public static Bitmap decodeSampledBitmapFromResource(Resources res, int resId,\n\n            int reqWidth, int reqHeight, ImageCache cache) {\n\n \n\n        // First decode with inJustDecodeBounds=true to check dimensions\n\n        final BitmapFactory.Options options = new BitmapFactory.Options();\n\n        options.inJustDecodeBounds = true;\n\n        BitmapFactory.decodeResource(res, resId, options);\n\n \n\n        // Calculate inSampleSize\n\n        options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);\n\n \n\n        // If we're running on Honeycomb or newer, try to use inBitmap\n\n        if (Utils.hasHoneycomb()) {\n\n            addInBitmapOptions(options, cache);\n\n        }\n\n \n\n        // Decode bitmap with inSampleSize set\n\n        options.inJustDecodeBounds = false;\n\n        return BitmapFactory.decodeResource(res, resId, options);\n\n    }\n\n \n\n    /**\n\n     * Decode and sample down a bitmap from a file to the requested width and height.\n\n     *\n\n     * @param filename The full path of the file to decode\n\n     * @param reqWidth The requested width of the resulting bitmap\n\n     * @param reqHeight The requested height of the resulting bitmap\n\n     * @param cache The ImageCache used to find candidate bitmaps for use with inBitmap\n\n     * @return A bitmap sampled down from the original with the same aspect ratio and dimensions\n\n     *         that are equal to or greater than the requested width and height\n\n     */\n\n    public static Bitmap decodeSampledBitmapFromFile(String filename,\n\n            int reqWidth, int reqHeight, ImageCache cache) {\n\n \n\n        // First decode with inJustDecodeBounds=true to check dimensions\n\n        final BitmapFactory.Options options = new BitmapFactory.Options();\n\n        options.inJustDecodeBounds = true;\n\n        BitmapFactory.decodeFile(filename, options);\n\n \n\n        // Calculate inSampleSize\n\n        options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);\n\n \n\n        // If we're running on Honeycomb or newer, try to use inBitmap\n\n        if (Utils.hasHoneycomb()) {\n\n            addInBitmapOptions(options, cache);\n\n        }\n\n \n\n        // Decode bitmap with inSampleSize set\n\n        options.inJustDecodeBounds = false;\n\n        return BitmapFactory.decodeFile(filename, options);\n\n    }\n\n \n\n    /**\n\n     * Decode and sample down a bitmap from a file input stream to the requested width and height.\n\n     *\n\n     * @param fileDescriptor The file descriptor to read from\n\n     * @param reqWidth The requested width of the resulting bitmap\n\n     * @param reqHeight The requested height of the resulting bitmap\n\n     * @param cache The ImageCache used to find candidate bitmaps for use with inBitmap\n\n     * @return A bitmap sampled down from the original with the same aspect ratio and dimensions\n\n     *         that are equal to or greater than the requested width and height\n\n     */\n\n    public static Bitmap decodeSampledBitmapFromDescriptor(\n\n            FileDescriptor fileDescriptor, int reqWidth, int reqHeight, ImageCache cache) {\n\n \n\n        // First decode with inJustDecodeBounds=true to check dimensions\n\n        final BitmapFactory.Options options = new BitmapFactory.Options();\n\n        options.inJustDecodeBounds = true;\n\n        BitmapFactory.decodeFileDescriptor(fileDescriptor, null, options);\n\n \n\n        // Calculate inSampleSize\n\n        options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);\n\n \n\n        // Decode bitmap with inSampleSize set\n\n        options.inJustDecodeBounds = false;\n\n \n\n        // If we're running on Honeycomb or newer, try to use inBitmap\n\n        if (Utils.hasHoneycomb()) {\n\n            addInBitmapOptions(options, cache);\n\n        }\n\n \n\n        return BitmapFactory.decodeFileDescriptor(fileDescriptor, null, options);\n\n    }\n\n \n\n    @TargetApi(Build.VERSION_CODES.HONEYCOMB)\n\n    private static void addInBitmapOptions(BitmapFactory.Options options, ImageCache cache) {\n\n        // inBitmap only works with mutable bitmaps so force the decoder to\n\n        // return mutable bitmaps.\n\n        options.inMutable = true;\n\n \n\n        if (cache != null) {\n\n            // Try and find a bitmap to use for inBitmap\n\n            Bitmap inBitmap = cache.getBitmapFromReusableSet(options);\n\n \n\n            if (inBitmap != null) {\n\n                options.inBitmap = inBitmap;\n\n            }\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Calculate an inSampleSize for use in a {@link android.graphics.BitmapFactory.Options} object when decoding\n\n     * bitmaps using the decode* methods from {@link android.graphics.BitmapFactory}. This implementation calculates\n\n     * the closest inSampleSize that is a power of 2 and will result in the final decoded bitmap\n\n     * having a width and height equal to or larger than the requested width and height.\n\n     *\n\n     * @param options An options object with out* params already populated (run through a decode*\n\n     *            method with inJustDecodeBounds==true\n\n     * @param reqWidth The requested width of the resulting bitmap\n\n     * @param reqHeight The requested height of the resulting bitmap\n\n     * @return The value to be used for inSampleSize\n\n     */\n\n    public static int calculateInSampleSize(BitmapFactory.Options options,\n\n            int reqWidth, int reqHeight) {\n\n        // Raw height and width of image\n\n        final int height = options.outHeight;\n\n        final int width = options.outWidth;\n\n        int inSampleSize = 1;\n\n \n\n        if (height > reqHeight || width > reqWidth) {\n\n \n\n            final int halfHeight = height / 2;\n\n            final int halfWidth = width / 2;\n\n \n\n            // Calculate the largest inSampleSize value that is a power of 2 and keeps both\n\n            // height and width larger than the requested height and width.\n\n            while ((halfHeight / inSampleSize) > reqHeight\n\n                    && (halfWidth / inSampleSize) > reqWidth) {\n\n                inSampleSize *= 2;\n\n            }\n\n \n\n            // This offers some additional logic in case the image has a strange\n\n            // aspect ratio. For example, a panorama may have a much larger\n\n            // width than height. In these cases the total pixels might still\n\n            // end up being too large to fit comfortably in memory, so we should\n\n            // be more aggressive with sample down the image (=larger inSampleSize).\n\n \n\n            long totalPixels = width * height / inSampleSize;\n\n \n\n            // Anything more than 2x the requested pixels we'll sample down further\n\n            final long totalReqPixelsCap = reqWidth * reqHeight * 2;\n\n \n\n            while (totalPixels > totalReqPixelsCap) {\n\n                inSampleSize *= 2;\n\n                totalPixels /= 2;\n\n            }\n\n        }\n\n        return inSampleSize;\n\n    }\n\n}\n  ","ImageWorker.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.displayingbitmaps.util;\n\n \n\nimport android.content.Context;\n\nimport android.content.res.Resources;\n\nimport android.graphics.Bitmap;\n\nimport android.graphics.BitmapFactory;\n\nimport android.graphics.drawable.BitmapDrawable;\n\nimport android.graphics.drawable.ColorDrawable;\n\nimport android.graphics.drawable.Drawable;\n\nimport android.graphics.drawable.TransitionDrawable;\n\nimport android.support.v4.app.FragmentActivity;\n\nimport android.support.v4.app.FragmentManager;\n\nimport android.widget.ImageView;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.displayingbitmaps.BuildConfig;\n\n \n\nimport java.lang.ref.WeakReference;\n\n \n\n/**\n\n * This class wraps up completing some arbitrary long running work when loading a bitmap to an\n\n * ImageView. It handles things like using a memory and disk cache, running the work in a background\n\n * thread and setting a placeholder image.\n\n */\n\npublic abstract class ImageWorker {\n\n    private static final String TAG = \"ImageWorker\";\n\n    private static final int FADE_IN_TIME = 200;\n\n \n\n    private ImageCache mImageCache;\n\n    private ImageCache.ImageCacheParams mImageCacheParams;\n\n    private Bitmap mLoadingBitmap;\n\n    private boolean mFadeInBitmap = true;\n\n    private boolean mExitTasksEarly = false;\n\n    protected boolean mPauseWork = false;\n\n    private final Object mPauseWorkLock = new Object();\n\n \n\n    protected Resources mResources;\n\n \n\n    private static final int MESSAGE_CLEAR = 0;\n\n    private static final int MESSAGE_INIT_DISK_CACHE = 1;\n\n    private static final int MESSAGE_FLUSH = 2;\n\n    private static final int MESSAGE_CLOSE = 3;\n\n \n\n    protected ImageWorker(Context context) {\n\n        mResources = context.getResources();\n\n    }\n\n \n\n    /**\n\n     * Load an image specified by the data parameter into an ImageView (override\n\n     * {@link ImageWorker#processBitmap(Object)} to define the processing logic). A memory and\n\n     * disk cache will be used if an {@link ImageCache} has been added using\n\n     * {@link ImageWorker#addImageCache(android.support.v4.app.FragmentManager, ImageCache.ImageCacheParams)}. If the\n\n     * image is found in the memory cache, it is set immediately, otherwise an {@link AsyncTask}\n\n     * will be created to asynchronously load the bitmap.\n\n     *\n\n     * @param data The URL of the image to download.\n\n     * @param imageView The ImageView to bind the downloaded image to.\n\n     */\n\n    public void loadImage(Object data, ImageView imageView) {\n\n        if (data == null) {\n\n            return;\n\n        }\n\n \n\n        BitmapDrawable value = null;\n\n \n\n        if (mImageCache != null) {\n\n            value = mImageCache.getBitmapFromMemCache(String.valueOf(data));\n\n        }\n\n \n\n        if (value != null) {\n\n            // Bitmap found in memory cache\n\n            imageView.setImageDrawable(value);\n\n        } else if (cancelPotentialWork(data, imageView)) {\n\n            final BitmapWorkerTask task = new BitmapWorkerTask(data, imageView);\n\n            final AsyncDrawable asyncDrawable =\n\n                    new AsyncDrawable(mResources, mLoadingBitmap, task);\n\n            imageView.setImageDrawable(asyncDrawable);\n\n \n\n            // NOTE: This uses a custom version of AsyncTask that has been pulled from the\n\n            // framework and slightly modified. Refer to the docs at the top of the class\n\n            // for more info on what was changed.\n\n            task.executeOnExecutor(AsyncTask.DUAL_THREAD_EXECUTOR);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Set placeholder bitmap that shows when the the background thread is running.\n\n     *\n\n     * @param bitmap\n\n     */\n\n    public void setLoadingImage(Bitmap bitmap) {\n\n        mLoadingBitmap = bitmap;\n\n    }\n\n \n\n    /**\n\n     * Set placeholder bitmap that shows when the the background thread is running.\n\n     *\n\n     * @param resId\n\n     */\n\n    public void setLoadingImage(int resId) {\n\n        mLoadingBitmap = BitmapFactory.decodeResource(mResources, resId);\n\n    }\n\n \n\n    /**\n\n     * Adds an {@link ImageCache} to this {@link ImageWorker} to handle disk and memory bitmap\n\n     * caching.\n\n     * @param fragmentManager\n\n     * @param cacheParams The cache parameters to use for the image cache.\n\n     */\n\n    public void addImageCache(FragmentManager fragmentManager,\n\n            ImageCache.ImageCacheParams cacheParams) {\n\n        mImageCacheParams = cacheParams;\n\n        mImageCache = ImageCache.getInstance(fragmentManager, mImageCacheParams);\n\n        new CacheAsyncTask().execute(MESSAGE_INIT_DISK_CACHE);\n\n    }\n\n \n\n    /**\n\n     * Adds an {@link ImageCache} to this {@link ImageWorker} to handle disk and memory bitmap\n\n     * caching.\n\n     * @param activity\n\n     * @param diskCacheDirectoryName See\n\n     * {@link ImageCache.ImageCacheParams#ImageCacheParams(android.content.Context, String)}.\n\n     */\n\n    public void addImageCache(FragmentActivity activity, String diskCacheDirectoryName) {\n\n        mImageCacheParams = new ImageCache.ImageCacheParams(activity, diskCacheDirectoryName);\n\n        mImageCache = ImageCache.getInstance(activity.getSupportFragmentManager(), mImageCacheParams);\n\n        new CacheAsyncTask().execute(MESSAGE_INIT_DISK_CACHE);\n\n    }\n\n \n\n    /**\n\n     * If set to true, the image will fade-in once it has been loaded by the background thread.\n\n     */\n\n    public void setImageFadeIn(boolean fadeIn) {\n\n        mFadeInBitmap = fadeIn;\n\n    }\n\n \n\n    public void setExitTasksEarly(boolean exitTasksEarly) {\n\n        mExitTasksEarly = exitTasksEarly;\n\n        setPauseWork(false);\n\n    }\n\n \n\n    /**\n\n     * Subclasses should override this to define any processing or work that must happen to produce\n\n     * the final bitmap. This will be executed in a background thread and be long running. For\n\n     * example, you could resize a large bitmap here, or pull down an image from the network.\n\n     *\n\n     * @param data The data to identify which image to process, as provided by\n\n     *            {@link ImageWorker#loadImage(Object, android.widget.ImageView)}\n\n     * @return The processed bitmap\n\n     */\n\n    protected abstract Bitmap processBitmap(Object data);\n\n \n\n    /**\n\n     * @return The {@link ImageCache} object currently being used by this ImageWorker.\n\n     */\n\n    protected ImageCache getImageCache() {\n\n        return mImageCache;\n\n    }\n\n \n\n    /**\n\n     * Cancels any pending work attached to the provided ImageView.\n\n     * @param imageView\n\n     */\n\n    public static void cancelWork(ImageView imageView) {\n\n        final BitmapWorkerTask bitmapWorkerTask = getBitmapWorkerTask(imageView);\n\n        if (bitmapWorkerTask != null) {\n\n            bitmapWorkerTask.cancel(true);\n\n            if (BuildConfig.DEBUG) {\n\n                final Object bitmapData = bitmapWorkerTask.mData;\n\n                Log.d(TAG, \"cancelWork - cancelled work for \" + bitmapData);\n\n            }\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns true if the current work has been canceled or if there was no work in\n\n     * progress on this image view.\n\n     * Returns false if the work in progress deals with the same data. The work is not\n\n     * stopped in that case.\n\n     */\n\n    public static boolean cancelPotentialWork(Object data, ImageView imageView) {\n\n        final BitmapWorkerTask bitmapWorkerTask = getBitmapWorkerTask(imageView);\n\n \n\n        if (bitmapWorkerTask != null) {\n\n            final Object bitmapData = bitmapWorkerTask.mData;\n\n            if (bitmapData == null || !bitmapData.equals(data)) {\n\n                bitmapWorkerTask.cancel(true);\n\n                if (BuildConfig.DEBUG) {\n\n                    Log.d(TAG, \"cancelPotentialWork - cancelled work for \" + data);\n\n                }\n\n            } else {\n\n                // The same work is already in progress.\n\n                return false;\n\n            }\n\n        }\n\n        return true;\n\n    }\n\n \n\n    /**\n\n     * @param imageView Any imageView\n\n     * @return Retrieve the currently active work task (if any) associated with this imageView.\n\n     * null if there is no such task.\n\n     */\n\n    private static BitmapWorkerTask getBitmapWorkerTask(ImageView imageView) {\n\n        if (imageView != null) {\n\n            final Drawable drawable = imageView.getDrawable();\n\n            if (drawable instanceof AsyncDrawable) {\n\n                final AsyncDrawable asyncDrawable = (AsyncDrawable) drawable;\n\n                return asyncDrawable.getBitmapWorkerTask();\n\n            }\n\n        }\n\n        return null;\n\n    }\n\n \n\n    /**\n\n     * The actual AsyncTask that will asynchronously process the image.\n\n     */\n\n    private class BitmapWorkerTask extends AsyncTask<Void, Void, BitmapDrawable> {\n\n        private Object mData;\n\n        private final WeakReference<ImageView> imageViewReference;\n\n \n\n        public BitmapWorkerTask(Object data, ImageView imageView) {\n\n            mData = data;\n\n            imageViewReference = new WeakReference<ImageView>(imageView);\n\n        }\n\n \n\n        /**\n\n         * Background processing.\n\n         */\n\n        @Override\n\n        protected BitmapDrawable doInBackground(Void... params) {\n\n            if (BuildConfig.DEBUG) {\n\n                Log.d(TAG, \"doInBackground - starting work\");\n\n            }\n\n \n\n            final String dataString = String.valueOf(mData);\n\n            Bitmap bitmap = null;\n\n            BitmapDrawable drawable = null;\n\n \n\n            // Wait here if work is paused and the task is not cancelled\n\n            synchronized (mPauseWorkLock) {\n\n                while (mPauseWork && !isCancelled()) {\n\n                    try {\n\n                        mPauseWorkLock.wait();\n\n                    } catch (InterruptedException e) {}\n\n                }\n\n            }\n\n \n\n            // If the image cache is available and this task has not been cancelled by another\n\n            // thread and the ImageView that was originally bound to this task is still bound back\n\n            // to this task and our \"exit early\" flag is not set then try and fetch the bitmap from\n\n            // the cache\n\n            if (mImageCache != null && !isCancelled() && getAttachedImageView() != null\n\n                    && !mExitTasksEarly) {\n\n                bitmap = mImageCache.getBitmapFromDiskCache(dataString);\n\n            }\n\n \n\n            // If the bitmap was not found in the cache and this task has not been cancelled by\n\n            // another thread and the ImageView that was originally bound to this task is still\n\n            // bound back to this task and our \"exit early\" flag is not set, then call the main\n\n            // process method (as implemented by a subclass)\n\n            if (bitmap == null && !isCancelled() && getAttachedImageView() != null\n\n                    && !mExitTasksEarly) {\n\n                bitmap = processBitmap(mData);\n\n            }\n\n \n\n            // If the bitmap was processed and the image cache is available, then add the processed\n\n            // bitmap to the cache for future use. Note we don't check if the task was cancelled\n\n            // here, if it was, and the thread is still running, we may as well add the processed\n\n            // bitmap to our cache as it might be used again in the future\n\n            if (bitmap != null) {\n\n                if (Utils.hasHoneycomb()) {\n\n                    // Running on Honeycomb or newer, so wrap in a standard BitmapDrawable\n\n                    drawable = new BitmapDrawable(mResources, bitmap);\n\n                } else {\n\n                    // Running on Gingerbread or older, so wrap in a RecyclingBitmapDrawable\n\n                    // which will recycle automagically\n\n                    drawable = new RecyclingBitmapDrawable(mResources, bitmap);\n\n                }\n\n \n\n                if (mImageCache != null) {\n\n                    mImageCache.addBitmapToCache(dataString, drawable);\n\n                }\n\n            }\n\n \n\n            if (BuildConfig.DEBUG) {\n\n                Log.d(TAG, \"doInBackground - finished work\");\n\n            }\n\n \n\n            return drawable;\n\n        }\n\n \n\n        /**\n\n         * Once the image is processed, associates it to the imageView\n\n         */\n\n        @Override\n\n        protected void onPostExecute(BitmapDrawable value) {\n\n            // if cancel was called on this task or the \"exit early\" flag is set then we're done\n\n            if (isCancelled() || mExitTasksEarly) {\n\n                value = null;\n\n            }\n\n \n\n            final ImageView imageView = getAttachedImageView();\n\n            if (value != null && imageView != null) {\n\n                if (BuildConfig.DEBUG) {\n\n                    Log.d(TAG, \"onPostExecute - setting bitmap\");\n\n                }\n\n                setImageDrawable(imageView, value);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        protected void onCancelled(BitmapDrawable value) {\n\n            super.onCancelled(value);\n\n            synchronized (mPauseWorkLock) {\n\n                mPauseWorkLock.notifyAll();\n\n            }\n\n        }\n\n \n\n        /**\n\n         * Returns the ImageView associated with this task as long as the ImageView's task still\n\n         * points to this task as well. Returns null otherwise.\n\n         */\n\n        private ImageView getAttachedImageView() {\n\n            final ImageView imageView = imageViewReference.get();\n\n            final BitmapWorkerTask bitmapWorkerTask = getBitmapWorkerTask(imageView);\n\n \n\n            if (this == bitmapWorkerTask) {\n\n                return imageView;\n\n            }\n\n \n\n            return null;\n\n        }\n\n    }\n\n \n\n    /**\n\n     * A custom Drawable that will be attached to the imageView while the work is in progress.\n\n     * Contains a reference to the actual worker task, so that it can be stopped if a new binding is\n\n     * required, and makes sure that only the last started worker process can bind its result,\n\n     * independently of the finish order.\n\n     */\n\n    private static class AsyncDrawable extends BitmapDrawable {\n\n        private final WeakReference<BitmapWorkerTask> bitmapWorkerTaskReference;\n\n \n\n        public AsyncDrawable(Resources res, Bitmap bitmap, BitmapWorkerTask bitmapWorkerTask) {\n\n            super(res, bitmap);\n\n            bitmapWorkerTaskReference =\n\n                new WeakReference<BitmapWorkerTask>(bitmapWorkerTask);\n\n        }\n\n \n\n        public BitmapWorkerTask getBitmapWorkerTask() {\n\n            return bitmapWorkerTaskReference.get();\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Called when the processing is complete and the final drawable should be \n\n     * set on the ImageView.\n\n     *\n\n     * @param imageView\n\n     * @param drawable\n\n     */\n\n    private void setImageDrawable(ImageView imageView, Drawable drawable) {\n\n        if (mFadeInBitmap) {\n\n            // Transition drawable with a transparent drawable and the final drawable\n\n            final TransitionDrawable td =\n\n                    new TransitionDrawable(new Drawable[] {\n\n                            new ColorDrawable(android.R.color.transparent),\n\n                            drawable\n\n                    });\n\n            // Set background to loading bitmap\n\n            imageView.setBackgroundDrawable(\n\n                    new BitmapDrawable(mResources, mLoadingBitmap));\n\n \n\n            imageView.setImageDrawable(td);\n\n            td.startTransition(FADE_IN_TIME);\n\n        } else {\n\n            imageView.setImageDrawable(drawable);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Pause any ongoing background work. This can be used as a temporary\n\n     * measure to improve performance. For example background work could\n\n     * be paused when a ListView or GridView is being scrolled using a\n\n     * {@link android.widget.AbsListView.OnScrollListener} to keep\n\n     * scrolling smooth.\n\n     * <p>\n\n     * If work is paused, be sure setPauseWork(false) is called again\n\n     * before your fragment or activity is destroyed (for example during\n\n     * {@link android.app.Activity#onPause()}), or there is a risk the\n\n     * background thread will never finish.\n\n     */\n\n    public void setPauseWork(boolean pauseWork) {\n\n        synchronized (mPauseWorkLock) {\n\n            mPauseWork = pauseWork;\n\n            if (!mPauseWork) {\n\n                mPauseWorkLock.notifyAll();\n\n            }\n\n        }\n\n    }\n\n \n\n    protected class CacheAsyncTask extends AsyncTask<Object, Void, Void> {\n\n \n\n        @Override\n\n        protected Void doInBackground(Object... params) {\n\n            switch ((Integer)params[0]) {\n\n                case MESSAGE_CLEAR:\n\n                    clearCacheInternal();\n\n                    break;\n\n                case MESSAGE_INIT_DISK_CACHE:\n\n                    initDiskCacheInternal();\n\n                    break;\n\n                case MESSAGE_FLUSH:\n\n                    flushCacheInternal();\n\n                    break;\n\n                case MESSAGE_CLOSE:\n\n                    closeCacheInternal();\n\n                    break;\n\n            }\n\n            return null;\n\n        }\n\n    }\n\n \n\n    protected void initDiskCacheInternal() {\n\n        if (mImageCache != null) {\n\n            mImageCache.initDiskCache();\n\n        }\n\n    }\n\n \n\n    protected void clearCacheInternal() {\n\n        if (mImageCache != null) {\n\n            mImageCache.clearCache();\n\n        }\n\n    }\n\n \n\n    protected void flushCacheInternal() {\n\n        if (mImageCache != null) {\n\n            mImageCache.flush();\n\n        }\n\n    }\n\n \n\n    protected void closeCacheInternal() {\n\n        if (mImageCache != null) {\n\n            mImageCache.close();\n\n            mImageCache = null;\n\n        }\n\n    }\n\n \n\n    public void clearCache() {\n\n        new CacheAsyncTask().execute(MESSAGE_CLEAR);\n\n    }\n\n \n\n    public void flushCache() {\n\n        new CacheAsyncTask().execute(MESSAGE_FLUSH);\n\n    }\n\n \n\n    public void closeCache() {\n\n        new CacheAsyncTask().execute(MESSAGE_CLOSE);\n\n    }\n\n}\n  ","RecyclingBitmapDrawable.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.displayingbitmaps.util;\n\n \n\nimport android.content.res.Resources;\n\nimport android.graphics.Bitmap;\n\nimport android.graphics.drawable.BitmapDrawable;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.displayingbitmaps.BuildConfig;\n\n \n\n/**\n\n * A BitmapDrawable that keeps track of whether it is being displayed or cached.\n\n * When the drawable is no longer being displayed or cached,\n\n * {@link android.graphics.Bitmap#recycle() recycle()} will be called on this drawable's bitmap.\n\n */\n\npublic class RecyclingBitmapDrawable extends BitmapDrawable {\n\n \n\n    static final String TAG = \"CountingBitmapDrawable\";\n\n \n\n    private int mCacheRefCount = 0;\n\n    private int mDisplayRefCount = 0;\n\n \n\n    private boolean mHasBeenDisplayed;\n\n \n\n    public RecyclingBitmapDrawable(Resources res, Bitmap bitmap) {\n\n        super(res, bitmap);\n\n    }\n\n \n\n    /**\n\n     * Notify the drawable that the displayed state has changed. Internally a\n\n     * count is kept so that the drawable knows when it is no longer being\n\n     * displayed.\n\n     *\n\n     * @param isDisplayed - Whether the drawable is being displayed or not\n\n     */\n\n    public void setIsDisplayed(boolean isDisplayed) {\n\n        synchronized (this) {\n\n            if (isDisplayed) {\n\n                mDisplayRefCount++;\n\n                mHasBeenDisplayed = true;\n\n            } else {\n\n                mDisplayRefCount--;\n\n            }\n\n        }\n\n \n\n        // Check to see if recycle() can be called\n\n        checkState();\n\n    }\n\n \n\n    /**\n\n     * Notify the drawable that the cache state has changed. Internally a count\n\n     * is kept so that the drawable knows when it is no longer being cached.\n\n     *\n\n     * @param isCached - Whether the drawable is being cached or not\n\n     */\n\n    public void setIsCached(boolean isCached) {\n\n        synchronized (this) {\n\n            if (isCached) {\n\n                mCacheRefCount++;\n\n            } else {\n\n                mCacheRefCount--;\n\n            }\n\n        }\n\n \n\n        // Check to see if recycle() can be called\n\n        checkState();\n\n    }\n\n \n\n    private synchronized void checkState() {\n\n        // If the drawable cache and display ref counts = 0, and this drawable\n\n        // has been displayed, then recycle\n\n        if (mCacheRefCount <= 0 && mDisplayRefCount <= 0 && mHasBeenDisplayed\n\n                && hasValidBitmap()) {\n\n            if (BuildConfig.DEBUG) {\n\n                Log.d(TAG, \"No longer being used or cached so recycling. \"\n\n                        + toString());\n\n            }\n\n \n\n            getBitmap().recycle();\n\n        }\n\n    }\n\n \n\n    private synchronized boolean hasValidBitmap() {\n\n        Bitmap bitmap = getBitmap();\n\n        return bitmap != null && !bitmap.isRecycled();\n\n    }\n\n \n\n}\n  ","Utils.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.displayingbitmaps.util;\n\n \n\nimport android.annotation.TargetApi;\n\nimport android.os.Build;\n\nimport android.os.Build.VERSION_CODES;\n\nimport android.os.StrictMode;\n\n \n\nimport com.example.android.displayingbitmaps.ui.ImageDetailActivity;\n\nimport com.example.android.displayingbitmaps.ui.ImageGridActivity;\n\n \n\n/**\n\n * Class containing some static utility methods.\n\n */\n\npublic class Utils {\n\n    private Utils() {};\n\n \n\n \n\n    @TargetApi(VERSION_CODES.HONEYCOMB)\n\n    public static void enableStrictMode() {\n\n        if (Utils.hasGingerbread()) {\n\n            StrictMode.ThreadPolicy.Builder threadPolicyBuilder =\n\n                    new StrictMode.ThreadPolicy.Builder()\n\n                            .detectAll()\n\n                            .penaltyLog();\n\n            StrictMode.VmPolicy.Builder vmPolicyBuilder =\n\n                    new StrictMode.VmPolicy.Builder()\n\n                            .detectAll()\n\n                            .penaltyLog();\n\n \n\n            if (Utils.hasHoneycomb()) {\n\n                threadPolicyBuilder.penaltyFlashScreen();\n\n                vmPolicyBuilder\n\n                        .setClassInstanceLimit(ImageGridActivity.class, 1)\n\n                        .setClassInstanceLimit(ImageDetailActivity.class, 1);\n\n            }\n\n            StrictMode.setThreadPolicy(threadPolicyBuilder.build());\n\n            StrictMode.setVmPolicy(vmPolicyBuilder.build());\n\n        }\n\n    }\n\n \n\n    public static boolean hasFroyo() {\n\n        // Can use static final constants like FROYO, declared in later versions\n\n        // of the OS since they are inlined at compile time. This is guaranteed behavior.\n\n        return Build.VERSION.SDK_INT >= VERSION_CODES.FROYO;\n\n    }\n\n \n\n    public static boolean hasGingerbread() {\n\n        return Build.VERSION.SDK_INT >= VERSION_CODES.GINGERBREAD;\n\n    }\n\n \n\n    public static boolean hasHoneycomb() {\n\n        return Build.VERSION.SDK_INT >= VERSION_CODES.HONEYCOMB;\n\n    }\n\n \n\n    public static boolean hasHoneycombMR1() {\n\n        return Build.VERSION.SDK_INT >= VERSION_CODES.HONEYCOMB_MR1;\n\n    }\n\n \n\n    public static boolean hasJellyBean() {\n\n        return Build.VERSION.SDK_INT >= VERSION_CODES.JELLY_BEAN;\n\n    }\n\n \n\n    public static boolean hasKitKat() {\n\n        return Build.VERSION.SDK_INT >= VERSION_CODES.KITKAT;\n\n    }\n\n}\n  "}}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.displayingbitmaps\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk android:minSdkVersion=\"7\" android:targetSdkVersion=\"19\" />\n\n \n\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n\n \n\n    <application android:allowBackup=\"true\"\n\n        android:label=\"@string/app_name\"\n\n        android:description=\"@string/intro_message\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:theme=\"@style/AppThemeDark\">\n\n \n\n        <activity android:name=\".ui.ImageGridActivity\"\n\n                  android:label=\"@string/app_name\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n \n\n        <activity\n\n            android:name=\".ui.ImageDetailActivity\"\n\n            android:label=\"@string/app_name\"\n\n            android:parentActivityName=\".ui.ImageGridActivity\"\n\n            android:theme=\"@style/AppThemeDark.FullScreen\" >\n\n            <meta-data android:name=\"android.support.PARENT_ACTIVITY\"\n\n                android:value=\".ui.ImageGridActivity\" />\n\n        </activity>\n\n \n\n    </application>\n\n \n\n</manifest>\n  "},"DoneBar":{"res":{"drawable-hdpi":{"ic_action_cancel.png":"http://developer.android.com/samples/DoneBar/res/drawable-hdpi/ic_action_cancel.png","ic_action_done.png":"http://developer.android.com/samples/DoneBar/res/drawable-hdpi/ic_action_done.png","ic_launcher.png":"http://developer.android.com/samples/DoneBar/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com/samples/DoneBar/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_action_cancel.png":"http://developer.android.com/samples/DoneBar/res/drawable-mdpi/ic_action_cancel.png","ic_action_done.png":"http://developer.android.com/samples/DoneBar/res/drawable-mdpi/ic_action_done.png","ic_launcher.png":"http://developer.android.com/samples/DoneBar/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_action_cancel.png":"http://developer.android.com/samples/DoneBar/res/drawable-xhdpi/ic_action_cancel.png","ic_action_done.png":"http://developer.android.com/samples/DoneBar/res/drawable-xhdpi/ic_action_done.png","ic_launcher.png":"http://developer.android.com/samples/DoneBar/res/drawable-xhdpi/ic_launcher.png","sample_dashboard_item_background.9.png":"http://developer.android.com/samples/DoneBar/res/drawable-xhdpi/sample_dashboard_item_background.9.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com/samples/DoneBar/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"actionbar_custom_view_done.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"horizontal\"\n\n    android:divider=\"?android:attr/dividerVertical\"\n\n    android:showDividers=\"end\"\n\n    android:dividerPadding=\"12dp\">\n\n \n\n    <include layout=\"@layout/include_done_button\" />\n\n</LinearLayout>\n  ","actionbar_custom_view_done_cancel.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"horizontal\"\n\n    android:divider=\"?android:attr/dividerVertical\"\n\n    android:showDividers=\"middle\"\n\n    android:dividerPadding=\"12dp\">\n\n \n\n    <include layout=\"@layout/include_cancel_button\" />\n\n    <include layout=\"@layout/include_done_button\" />\n\n</LinearLayout>\n  ","activity_done_bar.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<ScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleContentContainer\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:text=\"@string/donebaractivity_description\" />\n\n \n\n    </LinearLayout>\n\n</ScrollView>\n  ","activity_done_button.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<ScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleContentContainer\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:text=\"@string/donebuttonactivity_description\" />\n\n \n\n    </LinearLayout>\n\n</ScrollView>\n  ","activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <TextView style=\"@style/Widget.SampleMessage\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n        android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n        android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n        android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n        android:text=\"@string/intro_message\" />\n\n \n\n    <GridView android:id=\"@android:id/list\"\n\n        style=\"@style/Widget.SampleDashboard.Grid\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"0dp\"\n\n        android:layout_weight=\"1\"\n\n        android:paddingLeft=\"@dimen/horizontal_page_margin\"\n\n        android:paddingRight=\"@dimen/horizontal_page_margin\"\n\n        android:paddingBottom=\"@dimen/vertical_page_margin\"\n\n        android:scrollbarStyle=\"outsideOverlay\" />\n\n \n\n</LinearLayout>\n  ","activity_sample_dashboard.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <TextView style=\"@style/Widget.SampleMessage\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n        android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n        android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n        android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n        android:text=\"@string/intro_message\" />\n\n \n\n    <GridView android:id=\"@android:id/list\"\n\n        style=\"@style/Widget.SampleDashboard.Grid\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"0dp\"\n\n        android:layout_weight=\"1\"\n\n        android:paddingLeft=\"@dimen/horizontal_page_margin\"\n\n        android:paddingRight=\"@dimen/horizontal_page_margin\"\n\n        android:paddingBottom=\"@dimen/vertical_page_margin\"\n\n        android:scrollbarStyle=\"outsideOverlay\" />\n\n \n\n</LinearLayout>\n  ","include_cancel_button.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    style=\"?android:actionButtonStyle\"\n\n    android:id=\"@+id/actionbar_cancel\"\n\n    android:layout_width=\"0dp\"\n\n    android:layout_height=\"match_parent\"\n\n    android:layout_weight=\"1\">\n\n \n\n    <TextView style=\"?android:actionBarTabTextStyle\"\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:layout_gravity=\"center\"\n\n        android:paddingRight=\"20dp\"\n\n        android:drawableLeft=\"@drawable/ic_action_cancel\"\n\n        android:drawablePadding=\"8dp\"\n\n        android:gravity=\"center_vertical\"\n\n        android:text=\"@string/cancel\" />\n\n</FrameLayout>\n  ","include_done_button.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    style=\"?android:actionButtonStyle\"\n\n    android:id=\"@+id/actionbar_done\"\n\n    android:layout_width=\"0dp\"\n\n    android:layout_height=\"match_parent\"\n\n    android:layout_weight=\"1\">\n\n \n\n    <TextView style=\"?android:actionBarTabTextStyle\"\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:layout_gravity=\"center\"\n\n        android:paddingRight=\"20dp\"\n\n        android:drawableLeft=\"@drawable/ic_action_done\"\n\n        android:drawablePadding=\"8dp\"\n\n        android:gravity=\"center_vertical\"\n\n        android:text=\"@string/done\" />\n\n</FrameLayout>\n  ","sample_dashboard_item.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    style=\"@style/Widget.SampleDashboard.Item\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <TextView android:id=\"@android:id/text1\"\n\n        style=\"@style/Widget.SampleDashboard.Item.Title\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\" />\n\n \n\n    <TextView android:id=\"@android:id/text2\"\n\n        style=\"@style/Widget.SampleDashboard.Item.Description\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\" />\n\n</LinearLayout>\n  "},"menu":{"cancel.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:id=\"@+id/cancel\"\n\n        android:title=\"@string/cancel\"\n\n        android:icon=\"@drawable/ic_action_cancel\"\n\n        android:showAsAction=\"never\" />\n\n</menu>\n  "},"values":{"activitycards-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"donebaractivity_title\">Done Bar</string>\n\n    <string name=\"donebaractivity_description\">In this presentation, a done bar replaces the action bar entirely, providing\n\n            two direct actions to persist or dismiss changes. This is suitable for cases where no\n\n            additional view details or actions are needed in the action bar.</string>\n\n    <string name=\"donebuttonactivity_title\">Done Button</string>\n\n    <string name=\"donebuttonactivity_description\">In this presentation, a done button replaces the action bar\\'s \"Up\" affordance\n\n            and app icon, while the cancel action is made available in the action overflow. This is\n\n            well-suited to scenarios where additional view details or\n\n            actions may be needed in the action bar.</string>\n\n</resources>\n  ","base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">DoneBar</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n                This sample demonstrates two alternative presentations of the\n\n                action bar that are well-suited for simple data entry scenarios.\n\n \n\n                In this presentation, a done bar replaces the action\n\n                bar entirely, providing two direct actions to persist or dismiss changes. This is\n\n                suitable for cases where no additional view details or actions are needed in the\n\n                action bar.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","strings.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n    <!-- Done bar strings -->\n\n    <string name=\"done\">Done</string>\n\n    <string name=\"cancel\">Cancel</string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleContentContainer\">\n\n        <item name=\"android:paddingTop\">@dimen/vertical_page_margin</item>\n\n        <item name=\"android:paddingBottom\">@dimen/vertical_page_margin</item>\n\n        <item name=\"android:paddingLeft\">@dimen/horizontal_page_margin</item>\n\n        <item name=\"android:paddingRight\">@dimen/horizontal_page_margin</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleDashboard.Grid\" parent=\"Widget\">\n\n        <item name=\"android:stretchMode\">columnWidth</item>\n\n        <item name=\"android:columnWidth\">200dp</item>\n\n        <item name=\"android:numColumns\">auto_fit</item>\n\n        <item name=\"android:drawSelectorOnTop\">true</item>\n\n        <item name=\"android:horizontalSpacing\">@dimen/margin_medium</item>\n\n        <item name=\"android:verticalSpacing\">@dimen/margin_medium</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleDashboard.Item\" parent=\"Widget\">\n\n        <item name=\"android:background\">@drawable/sample_dashboard_item_background</item>\n\n        <item name=\"android:paddingTop\">@dimen/margin_small</item>\n\n        <item name=\"android:paddingLeft\">@dimen/margin_medium</item>\n\n        <item name=\"android:paddingRight\">@dimen/margin_medium</item>\n\n        <item name=\"android:paddingBottom\">@dimen/margin_medium</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleDashboard.Item.Title\" parent=\"Widget\">\n\n        <item name=\"android:layout_marginBottom\">@dimen/margin_tiny</item>\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:textColor\">#09c</item>\n\n        <item name=\"android:textStyle\">bold</item>\n\n        <item name=\"android:textSize\">24sp</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleDashboard.Item.Description\" parent=\"Widget\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceSmall</item>\n\n        <item name=\"android:fontFamily\">sans-serif-light</item>\n\n    </style>\n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.donebar":{"DoneBarActivity.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.donebar;\n\n \n\nimport android.app.ActionBar;\n\nimport android.app.Activity;\n\nimport android.os.Bundle;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\n \n\n/**\n\n * A sample activity demonstrating the \"done bar\" alternative action bar presentation. For a more\n\n * detailed description see {@link R.string.done_bar_description}.\n\n */\n\npublic class DoneBarActivity extends Activity {\n\n    public void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n \n\n        // Inflate a \"Done/Cancel\" custom action bar view.\n\n        final LayoutInflater inflater = (LayoutInflater) getActionBar().getThemedContext()\n\n                .getSystemService(LAYOUT_INFLATER_SERVICE);\n\n        final View customActionBarView = inflater.inflate(\n\n                R.layout.actionbar_custom_view_done_cancel, null);\n\n        customActionBarView.findViewById(R.id.actionbar_done).setOnClickListener(\n\n                new View.OnClickListener() {\n\n                    @Override\n\n                    public void onClick(View v) {\n\n                        // \"Done\"\n\n                        finish();\n\n                    }\n\n                });\n\n        customActionBarView.findViewById(R.id.actionbar_cancel).setOnClickListener(\n\n                new View.OnClickListener() {\n\n                    @Override\n\n                    public void onClick(View v) {\n\n                        // \"Cancel\"\n\n                        finish();\n\n                    }\n\n                });\n\n \n\n        // Show the custom action bar view and hide the normal Home icon and title.\n\n        final ActionBar actionBar = getActionBar();\n\n        actionBar.setDisplayOptions(\n\n                ActionBar.DISPLAY_SHOW_CUSTOM,\n\n                ActionBar.DISPLAY_SHOW_CUSTOM | ActionBar.DISPLAY_SHOW_HOME\n\n                        | ActionBar.DISPLAY_SHOW_TITLE);\n\n        actionBar.setCustomView(customActionBarView,\n\n                new ActionBar.LayoutParams(\n\n                        ViewGroup.LayoutParams.MATCH_PARENT,\n\n                        ViewGroup.LayoutParams.MATCH_PARENT));\n\n \n\n        setContentView(R.layout.activity_done_bar);\n\n    }\n\n}\n  ","DoneButtonActivity.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.donebar;\n\n \n\nimport android.app.ActionBar;\n\nimport android.app.Activity;\n\nimport android.os.Bundle;\n\nimport android.view.LayoutInflater;\n\nimport android.view.Menu;\n\nimport android.view.MenuItem;\n\nimport android.view.View;\n\n \n\n/**\n\n * A sample activity demonstrating the \"done button\" alternative action bar presentation. For a more\n\n * detailed description see {@link R.string.done_button_description}.\n\n */\n\npublic class DoneButtonActivity extends Activity {\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n \n\n        // Inflate a \"Done\" custom action bar view to serve as the \"Up\" affordance.\n\n        final LayoutInflater inflater = (LayoutInflater) getActionBar().getThemedContext()\n\n                .getSystemService(LAYOUT_INFLATER_SERVICE);\n\n        final View customActionBarView = inflater.inflate(\n\n                R.layout.actionbar_custom_view_done, null);\n\n        customActionBarView.findViewById(R.id.actionbar_done).setOnClickListener(\n\n                new View.OnClickListener() {\n\n                    @Override\n\n                    public void onClick(View v) {\n\n                        // \"Done\"\n\n                        finish();\n\n                    }\n\n                });\n\n \n\n        // Show the custom action bar view and hide the normal Home icon and title.\n\n        final ActionBar actionBar = getActionBar();\n\n        actionBar.setDisplayOptions(\n\n                ActionBar.DISPLAY_SHOW_CUSTOM,\n\n                ActionBar.DISPLAY_SHOW_CUSTOM | ActionBar.DISPLAY_SHOW_HOME\n\n                        | ActionBar.DISPLAY_SHOW_TITLE);\n\n        actionBar.setCustomView(customActionBarView);\n\n \n\n        setContentView(R.layout.activity_done_button);\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        super.onCreateOptionsMenu(menu);\n\n        getMenuInflater().inflate(R.menu.cancel, menu);\n\n        return true;\n\n    }\n\n \n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch (item.getItemId()) {\n\n            case R.id.cancel:\n\n                // \"Cancel\"\n\n                finish();\n\n                return true;\n\n        }\n\n        return super.onOptionsItemSelected(item);\n\n    }\n\n}\n  ","MainActivity.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.donebar;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Intent;\n\nimport android.content.res.Resources;\n\nimport android.os.Bundle;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.view.ViewTreeObserver;\n\nimport android.widget.AdapterView;\n\nimport android.widget.BaseAdapter;\n\nimport android.widget.GridView;\n\nimport android.widget.TextView;\n\n \n\n/**\n\n * A simple launcher activity offering access to the individual samples in this project.\n\n */\n\npublic class MainActivity extends Activity implements AdapterView.OnItemClickListener {\n\n    private Sample[] mSamples;\n\n    private GridView mGridView;\n\n \n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_main);\n\n \n\n        // Prepare list of samples in this dashboard.\n\n        mSamples = new Sample[]{\n\n            new Sample(R.string.donebaractivity_title, R.string.donebaractivity_description,\n\n                    DoneBarActivity.class),\n\n            new Sample(R.string.donebuttonactivity_title, R.string.donebuttonactivity_description,\n\n                    DoneButtonActivity.class),\n\n        };\n\n \n\n        // Prepare the GridView\n\n        mGridView = (GridView) findViewById(android.R.id.list);\n\n        mGridView.setAdapter(new SampleAdapter());\n\n        mGridView.setOnItemClickListener(this);\n\n    }\n\n \n\n    @Override\n\n    public void onItemClick(AdapterView<?> container, View view, int position, long id) {\n\n        startActivity(mSamples[position].intent);\n\n    }\n\n \n\n    private class SampleAdapter extends BaseAdapter {\n\n        @Override\n\n        public int getCount() {\n\n            return mSamples.length;\n\n        }\n\n \n\n        @Override\n\n        public Object getItem(int position) {\n\n            return mSamples[position];\n\n        }\n\n \n\n        @Override\n\n        public long getItemId(int position) {\n\n            return mSamples[position].hashCode();\n\n        }\n\n \n\n        @Override\n\n        public View getView(int position, View convertView, ViewGroup container) {\n\n            if (convertView == null) {\n\n                convertView = getLayoutInflater().inflate(R.layout.sample_dashboard_item,\n\n                        container, false);\n\n            }\n\n \n\n            ((TextView) convertView.findViewById(android.R.id.text1)).setText(\n\n                    mSamples[position].titleResId);\n\n            ((TextView) convertView.findViewById(android.R.id.text2)).setText(\n\n                    mSamples[position].descriptionResId);\n\n            return convertView;\n\n        }\n\n    }\n\n \n\n    private class Sample {\n\n        int titleResId;\n\n        int descriptionResId;\n\n        Intent intent;\n\n \n\n        private Sample(int titleResId, int descriptionResId, Intent intent) {\n\n            this.intent = intent;\n\n            this.titleResId = titleResId;\n\n            this.descriptionResId = descriptionResId;\n\n        }\n\n \n\n        private Sample(int titleResId, int descriptionResId,\n\n                Class<? extends Activity> activityClass) {\n\n            this(titleResId, descriptionResId,\n\n                    new Intent(MainActivity.this, activityClass));\n\n        }\n\n    }\n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.donebar\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk android:minSdkVersion=\"14\" android:targetSdkVersion=\"17\" />\n\n \n\n    <application android:label=\"@string/app_name\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:theme=\"@style/Theme.Sample\"\n\n        android:allowBackup=\"true\">\n\n \n\n        <activity android:name=\".MainActivity\"\n\n            android:label=\"@string/app_name\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n \n\n        <activity android:name=\".DoneBarActivity\"\n\n            android:parentActivityName=\".MainActivity\" />\n\n \n\n        <activity android:name=\".DoneButtonActivity\"\n\n            android:parentActivityName=\".MainActivity\" />\n\n \n\n    </application>\n\n \n\n</manifest>\n  "},"FragmentTransition":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com/samples/FragmentTransition/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com/samples/FragmentTransition/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com/samples/FragmentTransition/res/drawable-mdpi/ic_launcher.png"},"drawable-nodpi":{"p1.jpg":"http://developer.android.com/samples/FragmentTransition/res/drawable-nodpi/p1.jpg","p10.jpg":"http://developer.android.com/samples/FragmentTransition/res/drawable-nodpi/p10.jpg","p11.jpg":"http://developer.android.com/samples/FragmentTransition/res/drawable-nodpi/p11.jpg","p2.jpg":"http://developer.android.com/samples/FragmentTransition/res/drawable-nodpi/p2.jpg","p3.jpg":"http://developer.android.com/samples/FragmentTransition/res/drawable-nodpi/p3.jpg","p4.jpg":"http://developer.android.com/samples/FragmentTransition/res/drawable-nodpi/p4.jpg","p5.jpg":"http://developer.android.com/samples/FragmentTransition/res/drawable-nodpi/p5.jpg","p6.jpg":"http://developer.android.com/samples/FragmentTransition/res/drawable-nodpi/p6.jpg","p7.jpg":"http://developer.android.com/samples/FragmentTransition/res/drawable-nodpi/p7.jpg","p8.jpg":"http://developer.android.com/samples/FragmentTransition/res/drawable-nodpi/p8.jpg","p9.jpg":"http://developer.android.com/samples/FragmentTransition/res/drawable-nodpi/p9.jpg"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com/samples/FragmentTransition/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com/samples/FragmentTransition/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"vertical\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <ViewAnimator\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\"\n\n          android:layout_weight=\"1\">\n\n \n\n        <ScrollView\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingRight=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingTop=\"@dimen/vertical_page_margin\"\n\n                  android:paddingBottom=\"@dimen/vertical_page_margin\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </ScrollView>\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\" />\n\n \n\n    </ViewAnimator>\n\n \n\n    <View\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"1dp\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\" />\n\n \n\n</LinearLayout>\n\n \n  ","fragment_detail.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2014 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<FrameLayout\n\n    android:id=\"@+id/container\"\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"wrap_content\"\n\n    android:layout_height=\"match_parent\"/>\n  ","fragment_detail_content.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\nCopyright 2014 The Android Open Source Project\n\n \n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n \n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n \n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n-->\n\n<ScrollView\n\n    android:id=\"@+id/frame\"\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:tools=\"http://schemas.android.com/tools\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:scrollbars=\"none\">\n\n \n\n    <RelativeLayout\n\n        android:id=\"@+id/container\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\">\n\n \n\n        <ImageView\n\n            android:id=\"@+id/image\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"180dp\"\n\n            android:scaleType=\"centerCrop\"\n\n            tools:src=\"@drawable/p1\"/>\n\n \n\n        <TextView\n\n            android:id=\"@+id/title\"\n\n            android:layout_width=\"wrap_content\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_alignBottom=\"@id/image\"\n\n            android:layout_alignEnd=\"@id/image\"\n\n            android:layout_marginEnd=\"16dp\"\n\n            android:shadowColor=\"#000000\"\n\n            android:shadowDx=\"0\"\n\n            android:shadowDy=\"0\"\n\n            android:shadowRadius=\"10\"\n\n            android:textColor=\"#ffffff\"\n\n            android:textSize=\"24sp\"\n\n            android:textStyle=\"bold\"\n\n            tools:text=\"Image\"/>\n\n \n\n        <TextView\n\n            android:id=\"@+id/body\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_below=\"@id/image\"\n\n            android:layout_marginBottom=\"16dp\"\n\n            android:layout_marginEnd=\"16dp\"\n\n            android:layout_marginStart=\"16dp\"\n\n            android:layout_marginTop=\"16dp\"\n\n            android:text=\"@string/lorem_ipsum\"/>\n\n \n\n    </RelativeLayout>\n\n \n\n</ScrollView>\n  ","fragment_fragment_transition.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\nCopyright 2014 The Android Open Source Project\n\n \n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n \n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n \n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n-->\n\n<GridView\n\n    android:id=\"@+id/grid\"\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:tools=\"http://schemas.android.com/tools\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:clipToPadding=\"false\"\n\n    android:columnWidth=\"150dp\"\n\n    android:horizontalSpacing=\"1dp\"\n\n    android:numColumns=\"auto_fit\"\n\n    android:padding=\"1dp\"\n\n    android:scrollbars=\"none\"\n\n    android:stretchMode=\"columnWidth\"\n\n    android:verticalSpacing=\"1dp\"\n\n    tools:context=\"com.example.android.fragmenttransition.FragmentTransitionFragment\"/>\n  ","item_meat_grid.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2014 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<FrameLayout\n\n    android:id=\"@+id/frame\"\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:tools=\"http://schemas.android.com/tools\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\">\n\n \n\n    <RelativeLayout\n\n        android:id=\"@+id/container\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"150dp\"\n\n        tools:ignore=\"UselessParent\">\n\n \n\n        <ImageView\n\n            android:id=\"@+id/image\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"match_parent\"\n\n            android:scaleType=\"centerCrop\"\n\n            tools:src=\"@drawable/p1\"/>\n\n \n\n        <TextView\n\n            android:id=\"@+id/title\"\n\n            android:layout_width=\"wrap_content\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_alignParentBottom=\"true\"\n\n            android:layout_alignParentEnd=\"true\"\n\n            android:layout_gravity=\"bottom|end\"\n\n            android:layout_marginEnd=\"16dp\"\n\n            android:layout_marginStart=\"16dp\"\n\n            android:gravity=\"center_horizontal\"\n\n            android:shadowColor=\"#000000\"\n\n            android:shadowDx=\"0\"\n\n            android:shadowDy=\"0\"\n\n            android:shadowRadius=\"10\"\n\n            android:textColor=\"#ffffff\"\n\n            android:textSize=\"24sp\"\n\n            android:textStyle=\"bold\"\n\n            tools:text=\"Hello\"/>\n\n \n\n    </RelativeLayout>\n\n \n\n</FrameLayout>\n  "},"layout-w720dp":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"horizontal\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <LinearLayout\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\"\n\n          android:layout_weight=\"1\"\n\n          android:orientation=\"vertical\">\n\n \n\n        <FrameLayout\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"wrap_content\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/margin_medium\"\n\n                  android:paddingRight=\"@dimen/margin_medium\"\n\n                  android:paddingTop=\"@dimen/margin_large\"\n\n                  android:paddingBottom=\"@dimen/margin_large\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </FrameLayout>\n\n \n\n        <View\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"1dp\"\n\n              android:background=\"@android:color/darker_gray\" />\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"0px\"\n\n              android:layout_weight=\"1\" />\n\n \n\n    </LinearLayout>\n\n \n\n    <View\n\n          android:layout_width=\"1dp\"\n\n          android:layout_height=\"match_parent\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\" />\n\n \n\n</LinearLayout>\n\n \n\n \n  "},"menu":{"main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:id=\"@+id/menu_toggle_log\"\n\n          android:showAsAction=\"always\"\n\n          android:title=\"@string/sample_show_log\" />\n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">FragmentTransition</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n\t    This sample demonstrates how to start a transition right after a fragment transaction.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","strings.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<resources>\n\n    <string name=\"sample_show_log\">Show Log</string>\n\n    <string name=\"sample_hide_log\">Hide Log</string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.common":{"activities":{"SampleActivityBase.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\npackage com.example.android.common.activities;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentActivity;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogWrapper;\n\n \n\n/**\n\n * Base launcher activity, to handle most of the common plumbing for samples.\n\n */\n\npublic class SampleActivityBase extends FragmentActivity {\n\n \n\n    public static final String TAG = \"SampleActivityBase\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n    }\n\n \n\n    @Override\n\n    protected  void onStart() {\n\n        super.onStart();\n\n        initializeLogging();\n\n    }\n\n \n\n    /** Set up targets to receive log data */\n\n    public void initializeLogging() {\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        // Wraps Android's native log framework\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        Log.setLogNode(logWrapper);\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "},"logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "},"view":{"SlidingTabLayout.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.view;\n\n \n\nimport android.content.Context;\n\nimport android.graphics.Typeface;\n\nimport android.os.Build;\n\nimport android.support.v4.view.PagerAdapter;\n\nimport android.support.v4.view.ViewPager;\n\nimport android.util.AttributeSet;\n\nimport android.util.TypedValue;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.widget.HorizontalScrollView;\n\nimport android.widget.TextView;\n\n \n\n/**\n\n * To be used with ViewPager to provide a tab indicator component which give constant feedback as to\n\n * the user's scroll progress.\n\n * <p>\n\n * To use the component, simply add it to your view hierarchy. Then in your\n\n * {@link android.app.Activity} or {@link android.support.v4.app.Fragment} call\n\n * {@link #setViewPager(ViewPager)} providing it the ViewPager this layout is being used for.\n\n * <p>\n\n * The colors can be customized in two ways. The first and simplest is to provide an array of colors\n\n * via {@link #setSelectedIndicatorColors(int...)} and {@link #setDividerColors(int...)}. The\n\n * alternative is via the {@link TabColorizer} interface which provides you complete control over\n\n * which color is used for any individual position.\n\n * <p>\n\n * The views used as tabs can be customized by calling {@link #setCustomTabView(int, int)},\n\n * providing the layout ID of your custom layout.\n\n */\n\npublic class SlidingTabLayout extends HorizontalScrollView {\n\n \n\n    /**\n\n     * Allows complete control over the colors drawn in the tab layout. Set with\n\n     * {@link #setCustomTabColorizer(TabColorizer)}.\n\n     */\n\n    public interface TabColorizer {\n\n \n\n        /**\n\n         * @return return the color of the indicator used when {@code position} is selected.\n\n         */\n\n        int getIndicatorColor(int position);\n\n \n\n        /**\n\n         * @return return the color of the divider drawn to the right of {@code position}.\n\n         */\n\n        int getDividerColor(int position);\n\n \n\n    }\n\n \n\n    private static final int TITLE_OFFSET_DIPS = 24;\n\n    private static final int TAB_VIEW_PADDING_DIPS = 16;\n\n    private static final int TAB_VIEW_TEXT_SIZE_SP = 12;\n\n \n\n    private int mTitleOffset;\n\n \n\n    private int mTabViewLayoutId;\n\n    private int mTabViewTextViewId;\n\n \n\n    private ViewPager mViewPager;\n\n    private ViewPager.OnPageChangeListener mViewPagerPageChangeListener;\n\n \n\n    private final SlidingTabStrip mTabStrip;\n\n \n\n    public SlidingTabLayout(Context context) {\n\n        this(context, null);\n\n    }\n\n \n\n    public SlidingTabLayout(Context context, AttributeSet attrs) {\n\n        this(context, attrs, 0);\n\n    }\n\n \n\n    public SlidingTabLayout(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n \n\n        // Disable the Scroll Bar\n\n        setHorizontalScrollBarEnabled(false);\n\n        // Make sure that the Tab Strips fills this View\n\n        setFillViewport(true);\n\n \n\n        mTitleOffset = (int) (TITLE_OFFSET_DIPS * getResources().getDisplayMetrics().density);\n\n \n\n        mTabStrip = new SlidingTabStrip(context);\n\n        addView(mTabStrip, LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);\n\n    }\n\n \n\n    /**\n\n     * Set the custom {@link TabColorizer} to be used.\n\n     *\n\n     * If you only require simple custmisation then you can use\n\n     * {@link #setSelectedIndicatorColors(int...)} and {@link #setDividerColors(int...)} to achieve\n\n     * similar effects.\n\n     */\n\n    public void setCustomTabColorizer(TabColorizer tabColorizer) {\n\n        mTabStrip.setCustomTabColorizer(tabColorizer);\n\n    }\n\n \n\n    /**\n\n     * Sets the colors to be used for indicating the selected tab. These colors are treated as a\n\n     * circular array. Providing one color will mean that all tabs are indicated with the same color.\n\n     */\n\n    public void setSelectedIndicatorColors(int... colors) {\n\n        mTabStrip.setSelectedIndicatorColors(colors);\n\n    }\n\n \n\n    /**\n\n     * Sets the colors to be used for tab dividers. These colors are treated as a circular array.\n\n     * Providing one color will mean that all tabs are indicated with the same color.\n\n     */\n\n    public void setDividerColors(int... colors) {\n\n        mTabStrip.setDividerColors(colors);\n\n    }\n\n \n\n    /**\n\n     * Set the {@link ViewPager.OnPageChangeListener}. When using {@link SlidingTabLayout} you are\n\n     * required to set any {@link ViewPager.OnPageChangeListener} through this method. This is so\n\n     * that the layout can update it's scroll position correctly.\n\n     *\n\n     * @see ViewPager#setOnPageChangeListener(ViewPager.OnPageChangeListener)\n\n     */\n\n    public void setOnPageChangeListener(ViewPager.OnPageChangeListener listener) {\n\n        mViewPagerPageChangeListener = listener;\n\n    }\n\n \n\n    /**\n\n     * Set the custom layout to be inflated for the tab views.\n\n     *\n\n     * @param layoutResId Layout id to be inflated\n\n     * @param textViewId id of the {@link TextView} in the inflated view\n\n     */\n\n    public void setCustomTabView(int layoutResId, int textViewId) {\n\n        mTabViewLayoutId = layoutResId;\n\n        mTabViewTextViewId = textViewId;\n\n    }\n\n \n\n    /**\n\n     * Sets the associated view pager. Note that the assumption here is that the pager content\n\n     * (number of tabs and tab titles) does not change after this call has been made.\n\n     */\n\n    public void setViewPager(ViewPager viewPager) {\n\n        mTabStrip.removeAllViews();\n\n \n\n        mViewPager = viewPager;\n\n        if (viewPager != null) {\n\n            viewPager.setOnPageChangeListener(new InternalViewPagerListener());\n\n            populateTabStrip();\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Create a default view to be used for tabs. This is called if a custom tab view is not set via\n\n     * {@link #setCustomTabView(int, int)}.\n\n     */\n\n    protected TextView createDefaultTabView(Context context) {\n\n        TextView textView = new TextView(context);\n\n        textView.setGravity(Gravity.CENTER);\n\n        textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, TAB_VIEW_TEXT_SIZE_SP);\n\n        textView.setTypeface(Typeface.DEFAULT_BOLD);\n\n \n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {\n\n            // If we're running on Honeycomb or newer, then we can use the Theme's\n\n            // selectableItemBackground to ensure that the View has a pressed state\n\n            TypedValue outValue = new TypedValue();\n\n            getContext().getTheme().resolveAttribute(android.R.attr.selectableItemBackground,\n\n                    outValue, true);\n\n            textView.setBackgroundResource(outValue.resourceId);\n\n        }\n\n \n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {\n\n            // If we're running on ICS or newer, enable all-caps to match the Action Bar tab style\n\n            textView.setAllCaps(true);\n\n        }\n\n \n\n        int padding = (int) (TAB_VIEW_PADDING_DIPS * getResources().getDisplayMetrics().density);\n\n        textView.setPadding(padding, padding, padding, padding);\n\n \n\n        return textView;\n\n    }\n\n \n\n    private void populateTabStrip() {\n\n        final PagerAdapter adapter = mViewPager.getAdapter();\n\n        final View.OnClickListener tabClickListener = new TabClickListener();\n\n \n\n        for (int i = 0; i < adapter.getCount(); i++) {\n\n            View tabView = null;\n\n            TextView tabTitleView = null;\n\n \n\n            if (mTabViewLayoutId != 0) {\n\n                // If there is a custom tab view layout id set, try and inflate it\n\n                tabView = LayoutInflater.from(getContext()).inflate(mTabViewLayoutId, mTabStrip,\n\n                        false);\n\n                tabTitleView = (TextView) tabView.findViewById(mTabViewTextViewId);\n\n            }\n\n \n\n            if (tabView == null) {\n\n                tabView = createDefaultTabView(getContext());\n\n            }\n\n \n\n            if (tabTitleView == null && TextView.class.isInstance(tabView)) {\n\n                tabTitleView = (TextView) tabView;\n\n            }\n\n \n\n            tabTitleView.setText(adapter.getPageTitle(i));\n\n            tabView.setOnClickListener(tabClickListener);\n\n \n\n            mTabStrip.addView(tabView);\n\n        }\n\n    }\n\n \n\n    @Override\n\n    protected void onAttachedToWindow() {\n\n        super.onAttachedToWindow();\n\n \n\n        if (mViewPager != null) {\n\n            scrollToTab(mViewPager.getCurrentItem(), 0);\n\n        }\n\n    }\n\n \n\n    private void scrollToTab(int tabIndex, int positionOffset) {\n\n        final int tabStripChildCount = mTabStrip.getChildCount();\n\n        if (tabStripChildCount == 0 || tabIndex < 0 || tabIndex >= tabStripChildCount) {\n\n            return;\n\n        }\n\n \n\n        View selectedChild = mTabStrip.getChildAt(tabIndex);\n\n        if (selectedChild != null) {\n\n            int targetScrollX = selectedChild.getLeft() + positionOffset;\n\n \n\n            if (tabIndex > 0 || positionOffset > 0) {\n\n                // If we're not at the first child and are mid-scroll, make sure we obey the offset\n\n                targetScrollX -= mTitleOffset;\n\n            }\n\n \n\n            scrollTo(targetScrollX, 0);\n\n        }\n\n    }\n\n \n\n    private class InternalViewPagerListener implements ViewPager.OnPageChangeListener {\n\n        private int mScrollState;\n\n \n\n        @Override\n\n        public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\n\n            int tabStripChildCount = mTabStrip.getChildCount();\n\n            if ((tabStripChildCount == 0) || (position < 0) || (position >= tabStripChildCount)) {\n\n                return;\n\n            }\n\n \n\n            mTabStrip.onViewPagerPageChanged(position, positionOffset);\n\n \n\n            View selectedTitle = mTabStrip.getChildAt(position);\n\n            int extraOffset = (selectedTitle != null)\n\n                    ? (int) (positionOffset * selectedTitle.getWidth())\n\n                    : 0;\n\n            scrollToTab(position, extraOffset);\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageScrolled(position, positionOffset,\n\n                        positionOffsetPixels);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void onPageScrollStateChanged(int state) {\n\n            mScrollState = state;\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageScrollStateChanged(state);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void onPageSelected(int position) {\n\n            if (mScrollState == ViewPager.SCROLL_STATE_IDLE) {\n\n                mTabStrip.onViewPagerPageChanged(position, 0f);\n\n                scrollToTab(position, 0);\n\n            }\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageSelected(position);\n\n            }\n\n        }\n\n \n\n    }\n\n \n\n    private class TabClickListener implements View.OnClickListener {\n\n        @Override\n\n        public void onClick(View v) {\n\n            for (int i = 0; i < mTabStrip.getChildCount(); i++) {\n\n                if (v == mTabStrip.getChildAt(i)) {\n\n                    mViewPager.setCurrentItem(i);\n\n                    return;\n\n                }\n\n            }\n\n        }\n\n    }\n\n \n\n}\n  ","SlidingTabStrip.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.view;\n\n \n\nimport android.R;\n\nimport android.content.Context;\n\nimport android.graphics.Canvas;\n\nimport android.graphics.Color;\n\nimport android.graphics.Paint;\n\nimport android.util.AttributeSet;\n\nimport android.util.TypedValue;\n\nimport android.view.View;\n\nimport android.widget.LinearLayout;\n\n \n\nclass SlidingTabStrip extends LinearLayout {\n\n \n\n    private static final int DEFAULT_BOTTOM_BORDER_THICKNESS_DIPS = 2;\n\n    private static final byte DEFAULT_BOTTOM_BORDER_COLOR_ALPHA = 0x26;\n\n    private static final int SELECTED_INDICATOR_THICKNESS_DIPS = 8;\n\n    private static final int DEFAULT_SELECTED_INDICATOR_COLOR = 0xFF33B5E5;\n\n \n\n    private static final int DEFAULT_DIVIDER_THICKNESS_DIPS = 1;\n\n    private static final byte DEFAULT_DIVIDER_COLOR_ALPHA = 0x20;\n\n    private static final float DEFAULT_DIVIDER_HEIGHT = 0.5f;\n\n \n\n    private final int mBottomBorderThickness;\n\n    private final Paint mBottomBorderPaint;\n\n \n\n    private final int mSelectedIndicatorThickness;\n\n    private final Paint mSelectedIndicatorPaint;\n\n \n\n    private final int mDefaultBottomBorderColor;\n\n \n\n    private final Paint mDividerPaint;\n\n    private final float mDividerHeight;\n\n \n\n    private int mSelectedPosition;\n\n    private float mSelectionOffset;\n\n \n\n    private SlidingTabLayout.TabColorizer mCustomTabColorizer;\n\n    private final SimpleTabColorizer mDefaultTabColorizer;\n\n \n\n    SlidingTabStrip(Context context) {\n\n        this(context, null);\n\n    }\n\n \n\n    SlidingTabStrip(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n        setWillNotDraw(false);\n\n \n\n        final float density = getResources().getDisplayMetrics().density;\n\n \n\n        TypedValue outValue = new TypedValue();\n\n        context.getTheme().resolveAttribute(R.attr.colorForeground, outValue, true);\n\n        final int themeForegroundColor =  outValue.data;\n\n \n\n        mDefaultBottomBorderColor = setColorAlpha(themeForegroundColor,\n\n                DEFAULT_BOTTOM_BORDER_COLOR_ALPHA);\n\n \n\n        mDefaultTabColorizer = new SimpleTabColorizer();\n\n        mDefaultTabColorizer.setIndicatorColors(DEFAULT_SELECTED_INDICATOR_COLOR);\n\n        mDefaultTabColorizer.setDividerColors(setColorAlpha(themeForegroundColor,\n\n                DEFAULT_DIVIDER_COLOR_ALPHA));\n\n \n\n        mBottomBorderThickness = (int) (DEFAULT_BOTTOM_BORDER_THICKNESS_DIPS * density);\n\n        mBottomBorderPaint = new Paint();\n\n        mBottomBorderPaint.setColor(mDefaultBottomBorderColor);\n\n \n\n        mSelectedIndicatorThickness = (int) (SELECTED_INDICATOR_THICKNESS_DIPS * density);\n\n        mSelectedIndicatorPaint = new Paint();\n\n \n\n        mDividerHeight = DEFAULT_DIVIDER_HEIGHT;\n\n        mDividerPaint = new Paint();\n\n        mDividerPaint.setStrokeWidth((int) (DEFAULT_DIVIDER_THICKNESS_DIPS * density));\n\n    }\n\n \n\n    void setCustomTabColorizer(SlidingTabLayout.TabColorizer customTabColorizer) {\n\n        mCustomTabColorizer = customTabColorizer;\n\n        invalidate();\n\n    }\n\n \n\n    void setSelectedIndicatorColors(int... colors) {\n\n        // Make sure that the custom colorizer is removed\n\n        mCustomTabColorizer = null;\n\n        mDefaultTabColorizer.setIndicatorColors(colors);\n\n        invalidate();\n\n    }\n\n \n\n    void setDividerColors(int... colors) {\n\n        // Make sure that the custom colorizer is removed\n\n        mCustomTabColorizer = null;\n\n        mDefaultTabColorizer.setDividerColors(colors);\n\n        invalidate();\n\n    }\n\n \n\n    void onViewPagerPageChanged(int position, float positionOffset) {\n\n        mSelectedPosition = position;\n\n        mSelectionOffset = positionOffset;\n\n        invalidate();\n\n    }\n\n \n\n    @Override\n\n    protected void onDraw(Canvas canvas) {\n\n        final int height = getHeight();\n\n        final int childCount = getChildCount();\n\n        final int dividerHeightPx = (int) (Math.min(Math.max(0f, mDividerHeight), 1f) * height);\n\n        final SlidingTabLayout.TabColorizer tabColorizer = mCustomTabColorizer != null\n\n                ? mCustomTabColorizer\n\n                : mDefaultTabColorizer;\n\n \n\n        // Thick colored underline below the current selection\n\n        if (childCount > 0) {\n\n            View selectedTitle = getChildAt(mSelectedPosition);\n\n            int left = selectedTitle.getLeft();\n\n            int right = selectedTitle.getRight();\n\n            int color = tabColorizer.getIndicatorColor(mSelectedPosition);\n\n \n\n            if (mSelectionOffset > 0f && mSelectedPosition < (getChildCount() - 1)) {\n\n                int nextColor = tabColorizer.getIndicatorColor(mSelectedPosition + 1);\n\n                if (color != nextColor) {\n\n                    color = blendColors(nextColor, color, mSelectionOffset);\n\n                }\n\n \n\n                // Draw the selection partway between the tabs\n\n                View nextTitle = getChildAt(mSelectedPosition + 1);\n\n                left = (int) (mSelectionOffset * nextTitle.getLeft() +\n\n                        (1.0f - mSelectionOffset) * left);\n\n                right = (int) (mSelectionOffset * nextTitle.getRight() +\n\n                        (1.0f - mSelectionOffset) * right);\n\n            }\n\n \n\n            mSelectedIndicatorPaint.setColor(color);\n\n \n\n            canvas.drawRect(left, height - mSelectedIndicatorThickness, right,\n\n                    height, mSelectedIndicatorPaint);\n\n        }\n\n \n\n        // Thin underline along the entire bottom edge\n\n        canvas.drawRect(0, height - mBottomBorderThickness, getWidth(), height, mBottomBorderPaint);\n\n \n\n        // Vertical separators between the titles\n\n        int separatorTop = (height - dividerHeightPx) / 2;\n\n        for (int i = 0; i < childCount - 1; i++) {\n\n            View child = getChildAt(i);\n\n            mDividerPaint.setColor(tabColorizer.getDividerColor(i));\n\n            canvas.drawLine(child.getRight(), separatorTop, child.getRight(),\n\n                    separatorTop + dividerHeightPx, mDividerPaint);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Set the alpha value of the {@code color} to be the given {@code alpha} value.\n\n     */\n\n    private static int setColorAlpha(int color, byte alpha) {\n\n        return Color.argb(alpha, Color.red(color), Color.green(color), Color.blue(color));\n\n    }\n\n \n\n    /**\n\n     * Blend {@code color1} and {@code color2} using the given ratio.\n\n     *\n\n     * @param ratio of which to blend. 1.0 will return {@code color1}, 0.5 will give an even blend,\n\n     *              0.0 will return {@code color2}.\n\n     */\n\n    private static int blendColors(int color1, int color2, float ratio) {\n\n        final float inverseRation = 1f - ratio;\n\n        float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRation);\n\n        float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRation);\n\n        float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRation);\n\n        return Color.rgb((int) r, (int) g, (int) b);\n\n    }\n\n \n\n    private static class SimpleTabColorizer implements SlidingTabLayout.TabColorizer {\n\n        private int[] mIndicatorColors;\n\n        private int[] mDividerColors;\n\n \n\n        @Override\n\n        public final int getIndicatorColor(int position) {\n\n            return mIndicatorColors[position % mIndicatorColors.length];\n\n        }\n\n \n\n        @Override\n\n        public final int getDividerColor(int position) {\n\n            return mDividerColors[position % mDividerColors.length];\n\n        }\n\n \n\n        void setIndicatorColors(int... colors) {\n\n            mIndicatorColors = colors;\n\n        }\n\n \n\n        void setDividerColors(int... colors) {\n\n            mDividerColors = colors;\n\n        }\n\n    }\n\n}\n  "}},"com.example.android.fragmenttransition":{"DetailFragment.java":"\n    \n\n/*\n\n * Copyright 2014 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.fragmenttransition;\n\n \n\nimport com.example.android.common.logger.Log;\n\n \n\nimport android.content.Context;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.transition.Scene;\n\nimport android.transition.TransitionManager;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.view.animation.Animation;\n\nimport android.view.animation.AnimationUtils;\n\nimport android.widget.FrameLayout;\n\nimport android.widget.ImageView;\n\nimport android.widget.TextView;\n\n \n\npublic class DetailFragment extends Fragment implements Animation.AnimationListener {\n\n \n\n    private static final String TAG = \"DetailFragment\";\n\n \n\n    private static final String ARG_RESOURCE_ID = \"resource_id\";\n\n    private static final String ARG_TITLE = \"title\";\n\n    private static final String ARG_X = \"x\";\n\n    private static final String ARG_Y = \"y\";\n\n    private static final String ARG_WIDTH = \"width\";\n\n    private static final String ARG_HEIGHT = \"height\";\n\n \n\n    /**\n\n     * Create a new instance of DetailFragment.\n\n     *\n\n     * @param resourceId The resource ID of the Drawable image to show\n\n     * @param title The title of the image\n\n     * @param x The horizontal position of the grid item in pixel\n\n     * @param y The vertical position of the grid item in pixel\n\n     * @param width The width of the grid item in pixel\n\n     * @param height The height of the grid item in pixel\n\n     * @return a new instance of DetailFragment\n\n     */\n\n    public static DetailFragment newInstance(int resourceId, String title,\n\n                                             int x, int y, int width, int height) {\n\n        DetailFragment fragment = new DetailFragment();\n\n        Bundle args = new Bundle();\n\n        args.putInt(ARG_RESOURCE_ID, resourceId);\n\n        args.putString(ARG_TITLE, title);\n\n        args.putInt(ARG_X, x);\n\n        args.putInt(ARG_Y, y);\n\n        args.putInt(ARG_WIDTH, width);\n\n        args.putInt(ARG_HEIGHT, height);\n\n        fragment.setArguments(args);\n\n        return fragment;\n\n    }\n\n \n\n    public DetailFragment() {\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n\n        return inflater.inflate(R.layout.fragment_detail, container, false);\n\n    }\n\n \n\n    @Override\n\n    public void onViewCreated(View view, Bundle savedInstanceState) {\n\n        FrameLayout root = (FrameLayout) view;\n\n        Context context = view.getContext();\n\n        assert context != null;\n\n        // This is how the fragment looks at first. Since the transition is one-way, we don't need to make\n\n        // this a Scene.\n\n        View item = LayoutInflater.from(context).inflate(R.layout.item_meat_grid, root, false);\n\n        assert item != null;\n\n        bind(item);\n\n        // We adjust the position of the initial image with LayoutParams using the values supplied\n\n        // as the fragment arguments.\n\n        Bundle args = getArguments();\n\n        FrameLayout.LayoutParams params = null;\n\n        if (args != null) {\n\n            params = new FrameLayout.LayoutParams(\n\n                    args.getInt(ARG_WIDTH), args.getInt(ARG_HEIGHT));\n\n            params.topMargin = args.getInt(ARG_Y);\n\n            params.leftMargin = args.getInt(ARG_X);\n\n        }\n\n        root.addView(item, params);\n\n    }\n\n \n\n    @Override\n\n    public void onResume() {\n\n        super.onResume();\n\n    }\n\n \n\n    /**\n\n     * Bind the views inside of parent with the fragment arguments.\n\n     *\n\n     * @param parent The parent of views to bind.\n\n     */\n\n    private void bind(View parent) {\n\n        Bundle args = getArguments();\n\n        if (args == null) {\n\n            return;\n\n        }\n\n        ImageView image = (ImageView) parent.findViewById(R.id.image);\n\n        image.setImageResource(args.getInt(ARG_RESOURCE_ID));\n\n        TextView title = (TextView) parent.findViewById(R.id.title);\n\n        title.setText(args.getString(ARG_TITLE));\n\n    }\n\n \n\n    @Override\n\n    public Animation onCreateAnimation(int transit, boolean enter, int nextAnim) {\n\n        Animation animation = AnimationUtils.loadAnimation(getActivity(),\n\n                enter ? android.R.anim.fade_in : android.R.anim.fade_out);\n\n        // We bind a listener for the fragment transaction. We only bind it when\n\n        // this fragment is entering.\n\n        if (animation != null && enter) {\n\n            animation.setAnimationListener(this);\n\n        }\n\n        return animation;\n\n    }\n\n \n\n    @Override\n\n    public void onAnimationStart(Animation animation) {\n\n        // This method is called at the end of the animation for the fragment transaction.\n\n        // There is nothing we need to do in this sample.\n\n    }\n\n \n\n    @Override\n\n    public void onAnimationEnd(Animation animation) {\n\n        // This method is called at the end of the animation for the fragment transaction,\n\n        // which is perfect time to start our Transition.\n\n        Log.i(TAG, \"Fragment animation ended. Starting a Transition.\");\n\n        final Scene scene = Scene.getSceneForLayout((ViewGroup) getView(),\n\n                R.layout.fragment_detail_content, getActivity());\n\n        TransitionManager.go(scene);\n\n        // Note that we need to bind views with data after we call TransitionManager.go().\n\n        bind(scene.getSceneRoot());\n\n    }\n\n \n\n    @Override\n\n    public void onAnimationRepeat(Animation animation) {\n\n        // This method is never called in this sample because the animation doesn't repeat.\n\n    }\n\n \n\n}\n  ","FragmentTransitionFragment.java":"\n    \n\n/*\n\n * Copyright 2014 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.fragmenttransition;\n\n \n\nimport com.example.android.common.logger.Log;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.view.animation.Animation;\n\nimport android.view.animation.AnimationUtils;\n\nimport android.widget.AdapterView;\n\nimport android.widget.GridView;\n\n \n\npublic class FragmentTransitionFragment extends Fragment implements AdapterView.OnItemClickListener {\n\n \n\n    private static final String TAG = \"FragmentTransitionFragment\";\n\n \n\n    private MeatAdapter mAdapter;\n\n \n\n    public static FragmentTransitionFragment newInstance() {\n\n        return new FragmentTransitionFragment();\n\n    }\n\n \n\n    public FragmentTransitionFragment() {\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n\n        // This is the adapter we use to populate the grid.\n\n        mAdapter = new MeatAdapter(inflater, R.layout.item_meat_grid);\n\n        // Inflate the layout with a GridView in it.\n\n        return inflater.inflate(R.layout.fragment_fragment_transition, container, false);\n\n    }\n\n \n\n    @Override\n\n    public void onViewCreated(View view, Bundle savedInstanceState) {\n\n        GridView grid = (GridView) view.findViewById(R.id.grid);\n\n        grid.setAdapter(mAdapter);\n\n        grid.setOnItemClickListener(this);\n\n    }\n\n \n\n    @Override\n\n    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n\n        Meat meat = mAdapter.getItem(position);\n\n        Log.i(TAG, meat.title + \" clicked. Replacing fragment.\");\n\n        // We start the fragment transaction here. It is just an ordinary fragment transaction.\n\n        getActivity().getSupportFragmentManager()\n\n                .beginTransaction()\n\n                .replace(R.id.sample_content_fragment,\n\n                        DetailFragment.newInstance(meat.resourceId, meat.title,\n\n                                (int) view.getX(), (int) view.getY(),\n\n                                view.getWidth(), view.getHeight())\n\n                )\n\n                // We push the fragment transaction to back stack. User can go back to the\n\n                // previous fragment by pressing back button.\n\n                .addToBackStack(\"detail\")\n\n                .commit();\n\n    }\n\n \n\n    @Override\n\n    public Animation onCreateAnimation(int transit, boolean enter, int nextAnim) {\n\n        return AnimationUtils.loadAnimation(getActivity(),\n\n                enter ? android.R.anim.fade_in : android.R.anim.fade_out);\n\n    }\n\n \n\n}\n  ","MainActivity.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.fragmenttransition;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentTransaction;\n\nimport android.view.Menu;\n\nimport android.view.MenuItem;\n\nimport android.widget.ViewAnimator;\n\n \n\nimport com.example.android.common.activities.SampleActivityBase;\n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogFragment;\n\nimport com.example.android.common.logger.LogWrapper;\n\nimport com.example.android.common.logger.MessageOnlyLogFilter;\n\n \n\n/**\n\n * A simple launcher activity containing a summary sample description, sample log and a custom\n\n * {@link android.support.v4.app.Fragment} which can display a view.\n\n * <p>\n\n * For devices with displays with a width of 720dp or greater, the sample log is always visible,\n\n * on other devices it's visibility is controlled by an item on the Action Bar.\n\n */\n\npublic class MainActivity extends SampleActivityBase {\n\n \n\n    public static final String TAG = \"MainActivity\";\n\n \n\n    // Whether the Log Fragment is currently shown\n\n    private boolean mLogShown;\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_main);\n\n \n\n        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n\n        FragmentTransitionFragment fragment = new FragmentTransitionFragment();\n\n        transaction.replace(R.id.sample_content_fragment, fragment);\n\n        transaction.commit();\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        getMenuInflater().inflate(R.menu.main, menu);\n\n        return true;\n\n    }\n\n \n\n    @Override\n\n    public boolean onPrepareOptionsMenu(Menu menu) {\n\n        MenuItem logToggle = menu.findItem(R.id.menu_toggle_log);\n\n        logToggle.setVisible(findViewById(R.id.sample_output) instanceof ViewAnimator);\n\n        logToggle.setTitle(mLogShown ? R.string.sample_hide_log : R.string.sample_show_log);\n\n \n\n        return super.onPrepareOptionsMenu(menu);\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch(item.getItemId()) {\n\n            case R.id.menu_toggle_log:\n\n                mLogShown = !mLogShown;\n\n                ViewAnimator output = (ViewAnimator) findViewById(R.id.sample_output);\n\n                if (mLogShown) {\n\n                    output.setDisplayedChild(1);\n\n                } else {\n\n                    output.setDisplayedChild(0);\n\n                }\n\n                supportInvalidateOptionsMenu();\n\n                return true;\n\n        }\n\n        return super.onOptionsItemSelected(item);\n\n    }\n\n \n\n    /** Create a chain of targets that will receive log data */\n\n    @Override\n\n    public void initializeLogging() {\n\n        // Wraps Android's native log framework.\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        Log.setLogNode(logWrapper);\n\n \n\n        // Filter strips out everything except the message text.\n\n        MessageOnlyLogFilter msgFilter = new MessageOnlyLogFilter();\n\n        logWrapper.setNext(msgFilter);\n\n \n\n        // On screen logging via a fragment with a TextView.\n\n        LogFragment logFragment = (LogFragment) getSupportFragmentManager()\n\n                .findFragmentById(R.id.log_fragment);\n\n        msgFilter.setNext(logFragment.getLogView());\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  ","Meat.java":"\n    \n\n/*\n\n * Copyright 2014 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.fragmenttransition;\n\n \n\n/**\n\n * This represents a sample data.\n\n */\n\npublic class Meat {\n\n \n\n    public int resourceId;\n\n    public String title;\n\n \n\n    public Meat(int resourceId, String title) {\n\n        this.resourceId = resourceId;\n\n        this.title = title;\n\n    }\n\n \n\n    public static final Meat[] MEATS = {\n\n            new Meat(R.drawable.p1, \"First\"),\n\n            new Meat(R.drawable.p2, \"Second\"),\n\n            new Meat(R.drawable.p3, \"Third\"),\n\n            new Meat(R.drawable.p4, \"Fourth\"),\n\n            new Meat(R.drawable.p5, \"Fifth\"),\n\n            new Meat(R.drawable.p6, \"Sixth\"),\n\n            new Meat(R.drawable.p7, \"Seventh\"),\n\n            new Meat(R.drawable.p8, \"Eighth\"),\n\n            new Meat(R.drawable.p9, \"Ninth\"),\n\n            new Meat(R.drawable.p10, \"Tenth\"),\n\n            new Meat(R.drawable.p11, \"Eleventh\"),\n\n    };\n\n \n\n}\n  ","MeatAdapter.java":"\n    \n\n/*\n\n * Copyright 2014 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.fragmenttransition;\n\n \n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.BaseAdapter;\n\nimport android.widget.ImageView;\n\nimport android.widget.TextView;\n\n \n\nclass MeatAdapter extends BaseAdapter {\n\n \n\n    private final LayoutInflater mLayoutInflater;\n\n    private final int mResourceId;\n\n \n\n    public MeatAdapter(LayoutInflater inflater, int resourceId) {\n\n        mLayoutInflater = inflater;\n\n        mResourceId = resourceId;\n\n    }\n\n \n\n    @Override\n\n    public int getCount() {\n\n        return Meat.MEATS.length;\n\n    }\n\n \n\n    @Override\n\n    public Meat getItem(int position) {\n\n        return Meat.MEATS[position];\n\n    }\n\n \n\n    @Override\n\n    public long getItemId(int position) {\n\n        return Meat.MEATS[position].resourceId;\n\n    }\n\n \n\n    @Override\n\n    public View getView(int position, View convertView, ViewGroup parent) {\n\n        final View view;\n\n        final ViewHolder holder;\n\n        if (null == convertView) {\n\n            view = mLayoutInflater.inflate(mResourceId, parent, false);\n\n            holder = new ViewHolder();\n\n            assert view != null;\n\n            holder.image = (ImageView) view.findViewById(R.id.image);\n\n            holder.title = (TextView) view.findViewById(R.id.title);\n\n            view.setTag(holder);\n\n        } else {\n\n            view = convertView;\n\n            holder = (ViewHolder) view.getTag();\n\n        }\n\n        bindView(holder, position);\n\n        return view;\n\n    }\n\n \n\n    public void bindView(ViewHolder holder, int position) {\n\n        Meat meat = getItem(position);\n\n        holder.image.setImageResource(meat.resourceId);\n\n        holder.title.setText(meat.title);\n\n    }\n\n \n\n    public static class ViewHolder {\n\n        public ImageView image;\n\n        public TextView title;\n\n    }\n\n \n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2014 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.fragmenttransition\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk android:minSdkVersion=\"19\" android:targetSdkVersion=\"19\" />\n\n \n\n    <application\n\n        android:allowBackup=\"true\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:label=\"@string/app_name\"\n\n        android:theme=\"@style/AppTheme\" >\n\n        <activity\n\n            android:name=\"com.example.android.fragmenttransition.MainActivity\"\n\n            android:label=\"@string/app_name\" >\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n \n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n</manifest>\n  "},"HorizontalPaging":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com/samples/HorizontalPaging/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com/samples/HorizontalPaging/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com/samples/HorizontalPaging/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com/samples/HorizontalPaging/res/drawable-xhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleMessageTile\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n            android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n            android:text=\"@string/intro_message\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n  ","fragment_main_dummy.xml":"\n    \n\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:tools=\"http://schemas.android.com/tools\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n\n    android:paddingRight=\"@dimen/activity_horizontal_margin\"\n\n    android:paddingTop=\"@dimen/activity_vertical_margin\"\n\n    android:paddingBottom=\"@dimen/activity_vertical_margin\"\n\n    tools:context=\".MainActivity$DummySectionFragment\">\n\n \n\n    <TextView\n\n        android:id=\"@+id/section_label\"\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\" />\n\n \n\n</RelativeLayout>\n  ","sample_main.xml":"\n    \n\n<android.support.v4.view.ViewPager xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:tools=\"http://schemas.android.com/tools\"\n\n    android:id=\"@+id/pager\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    tools:context=\".MainActivity\" />\n  "},"values":{"values-sw720dp-land":{"dimens.xml":"\n    \n\n<resources>\n\n    <!-- Customize dimensions originally defined in res/values/dimens.xml (such as\n\n         screen margins) for sw720dp devices (e.g. 10\" tablets) in landscape here. -->\n\n    <dimen name=\"activity_horizontal_margin\">128dp</dimen>\n\n</resources>\n  "},"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">HorizontalPaging</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            This sample demonstrates how to implement horizontal paging between fragments in\n\n            applications that use ActionBar, using a ViewPager widget.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","dimens.xml":"\n    \n\n<resources>\n\n    <!-- Default screen margins, per the Android Design guidelines. -->\n\n    <dimen name=\"activity_horizontal_margin\">16dp</dimen>\n\n    <dimen name=\"activity_vertical_margin\">16dp</dimen>\n\n</resources>\n  ","strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<resources>\n\n \n\n    <string name=\"action_settings\">Settings</string>\n\n    <string name=\"title_section1\">Section 1</string>\n\n    <string name=\"title_section2\">Section 2</string>\n\n    <string name=\"title_section3\">Section 3</string>\n\n \n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.horizontalpaging":{"MainActivity.java":"\n    \n\npackage com.example.android.horizontalpaging;\n\n \n\nimport android.app.ActionBar;\n\nimport android.app.FragmentTransaction;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.support.v4.app.FragmentActivity;\n\nimport android.support.v4.app.FragmentManager;\n\nimport android.support.v4.app.FragmentPagerAdapter;\n\nimport android.support.v4.view.ViewPager;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.TextView;\n\n \n\nimport java.util.Locale;\n\n \n\npublic class MainActivity extends FragmentActivity implements ActionBar.TabListener {\n\n \n\n    /**\n\n     * The {@link android.support.v4.view.PagerAdapter} that will provide\n\n     * fragments for each of the sections. We use a\n\n     * {@link android.support.v4.app.FragmentPagerAdapter} derivative, which\n\n     * will keep every loaded fragment in memory. If this becomes too memory\n\n     * intensive, it may be best to switch to a\n\n     * {@link android.support.v4.app.FragmentStatePagerAdapter}.\n\n     */\n\n    SectionsPagerAdapter mSectionsPagerAdapter;\n\n \n\n    /**\n\n     * The {@link ViewPager} that will host the section contents.\n\n     */\n\n    ViewPager mViewPager;\n\n \n\n    /**\n\n     * Create the activity. Sets up an {@link android.app.ActionBar} with tabs, and then configures the\n\n     * {@link ViewPager} contained inside R.layout.activity_main.\n\n     *\n\n     * <p>A {@link SectionsPagerAdapter} will be instantiated to hold the different pages of\n\n     * fragments that are to be displayed. A\n\n     * {@link android.support.v4.view.ViewPager.SimpleOnPageChangeListener} will also be configured\n\n     * to receive callbacks when the user swipes between pages in the ViewPager.\n\n     *\n\n     * @param savedInstanceState\n\n     */\n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        // Load the UI from res/layout/activity_main.xml\n\n        setContentView(R.layout.sample_main);\n\n \n\n        // Set up the action bar. The navigation mode is set to NAVIGATION_MODE_TABS, which will\n\n        // cause the ActionBar to render a set of tabs. Note that these tabs are *not* rendered\n\n        // by the ViewPager; additional logic is lower in this file to synchronize the ViewPager\n\n        // state with the tab state. (See mViewPager.setOnPageChangeListener() and onTabSelected().)\n\n        final ActionBar actionBar = getActionBar();\n\n        actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);\n\n \n\n        // Create the adapter that will return a fragment for each of the three primary sections\n\n        // of the app.\n\n        mSectionsPagerAdapter = new SectionsPagerAdapter(getSupportFragmentManager());\n\n \n\n        // Set up the ViewPager with the sections adapter.\n\n        mViewPager = (ViewPager) findViewById(R.id.pager);\n\n        mViewPager.setAdapter(mSectionsPagerAdapter);\n\n \n\n        // When swiping between different sections, select the corresponding tab. We can also use\n\n        // ActionBar.Tab#select() to do this if we have a reference to the Tab.\n\n        mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener() {\n\n            @Override\n\n            public void onPageSelected(int position) {\n\n                actionBar.setSelectedNavigationItem(position);\n\n            }\n\n        });\n\n \n\n        // For each of the sections in the app, add a tab to the action bar.\n\n        for (int i = 0; i < mSectionsPagerAdapter.getCount(); i++) {\n\n            // Create a tab with text corresponding to the page title defined by the adapter. Also\n\n            // specify this Activity object, which implements the TabListener interface, as the\n\n            // callback (listener) for when this tab is selected.\n\n            actionBar.addTab(\n\n                    actionBar.newTab()\n\n                            .setText(mSectionsPagerAdapter.getPageTitle(i))\n\n                            .setTabListener(this));\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Update {@link ViewPager} after a tab has been selected in the ActionBar.\n\n     *\n\n     * @param tab Tab that was selected.\n\n     * @param fragmentTransaction A {@link android.app.FragmentTransaction} for queuing fragment operations to\n\n     *                            execute once this method returns. This FragmentTransaction does\n\n     *                            not support being added to the back stack.\n\n     */\n\n    @Override\n\n    public void onTabSelected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {\n\n        // When the given tab is selected, tell the ViewPager to switch to the corresponding page.\n\n        mViewPager.setCurrentItem(tab.getPosition());\n\n    }\n\n \n\n    /**\n\n     * Unused. Required for {@link android.app.ActionBar.TabListener}.\n\n     */\n\n    @Override\n\n    public void onTabUnselected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {\n\n    }\n\n \n\n    /**\n\n     * Unused. Required for {@link android.app.ActionBar.TabListener}.\n\n     */\n\n    @Override\n\n    public void onTabReselected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {\n\n    }\n\n \n\n    /**\n\n     * A {@link FragmentPagerAdapter} that returns a fragment corresponding to\n\n     * one of the sections/tabs/pages. This provides the data for the {@link ViewPager}.\n\n     */\n\n    public class SectionsPagerAdapter extends FragmentPagerAdapter {\n\n \n\n        public SectionsPagerAdapter(FragmentManager fm) {\n\n            super(fm);\n\n        }\n\n \n\n        /**\n\n         * Get fragment corresponding to a specific position. This will be used to populate the\n\n         * contents of the {@link ViewPager}.\n\n         *\n\n         * @param position Position to fetch fragment for.\n\n         * @return Fragment for specified position.\n\n         */\n\n        @Override\n\n        public Fragment getItem(int position) {\n\n            // getItem is called to instantiate the fragment for the given page.\n\n            // Return a DummySectionFragment (defined as a static inner class\n\n            // below) with the page number as its lone argument.\n\n            Fragment fragment = new DummySectionFragment();\n\n            Bundle args = new Bundle();\n\n            args.putInt(DummySectionFragment.ARG_SECTION_NUMBER, position + 1);\n\n            fragment.setArguments(args);\n\n            return fragment;\n\n        }\n\n \n\n        /**\n\n         * Get number of pages the {@link ViewPager} should render.\n\n         *\n\n         * @return Number of fragments to be rendered as pages.\n\n         */\n\n        @Override\n\n        public int getCount() {\n\n            // Show 3 total pages.\n\n            return 3;\n\n        }\n\n \n\n        /**\n\n         * Get title for each of the pages. This will be displayed on each of the tabs.\n\n         *\n\n         * @param position Page to fetch title for.\n\n         * @return Title for specified page.\n\n         */\n\n        @Override\n\n        public CharSequence getPageTitle(int position) {\n\n            Locale l = Locale.getDefault();\n\n            switch (position) {\n\n                case 0:\n\n                    return getString(R.string.title_section1).toUpperCase(l);\n\n                case 1:\n\n                    return getString(R.string.title_section2).toUpperCase(l);\n\n                case 2:\n\n                    return getString(R.string.title_section3).toUpperCase(l);\n\n            }\n\n            return null;\n\n        }\n\n    }\n\n \n\n    /**\n\n     * A dummy fragment representing a section of the app, but that simply displays dummy text.\n\n     * This would be replaced with your application's content.\n\n     */\n\n    public static class DummySectionFragment extends Fragment {\n\n        /**\n\n         * The fragment argument representing the section number for this\n\n         * fragment.\n\n         */\n\n        public static final String ARG_SECTION_NUMBER = \"section_number\";\n\n \n\n        public DummySectionFragment() {\n\n        }\n\n \n\n        @Override\n\n        public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                Bundle savedInstanceState) {\n\n            View rootView = inflater.inflate(R.layout.fragment_main_dummy, container, false);\n\n            TextView dummyTextView = (TextView) rootView.findViewById(R.id.section_label);\n\n            dummyTextView.setText(Integer.toString(getArguments().getInt(ARG_SECTION_NUMBER)));\n\n            return rootView;\n\n        }\n\n    }\n\n \n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.horizontalpaging\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\" >\n\n \n\n    <!-- While ViewPager will work on API 4 or above, tabs require an ActionBar. ActionBar is only\n\n         available in API 11 or above. -->\n\n    <uses-sdk\n\n        android:minSdkVersion=\"11\"\n\n        android:targetSdkVersion=\"16\" />\n\n \n\n    <application\n\n        android:allowBackup=\"true\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:label=\"@string/app_name\"\n\n        android:theme=\"@style/AppTheme\" >\n\n        <!-- This is a standard Activity invocation for MainActivity. -->\n\n        <activity\n\n            android:name=\"com.example.android.horizontalpaging.MainActivity\"\n\n            android:label=\"@string/app_name\" >\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n \n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n</manifest>\n  "},"ImmersiveMode":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com/samples/ImmersiveMode/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com/samples/ImmersiveMode/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com/samples/ImmersiveMode/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com/samples/ImmersiveMode/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com/samples/ImmersiveMode/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n        android:orientation=\"vertical\"\n\n        android:layout_width=\"fill_parent\"\n\n        android:layout_height=\"fill_parent\"\n\n        android:id=\"@+id/sample_main_layout\">\n\n    <TextView android:id=\"@+id/sample_output\"\n\n              style=\"@style/Widget.SampleMessage\"\n\n              android:layout_weight=\"1\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\"\n\n              android:text=\"@string/intro_message\"\n\n              android:padding=\"16dp\" />\n\n    <View\n\n            android:layout_width=\"fill_parent\"\n\n            android:layout_height=\"1dp\"\n\n            android:background=\"@android:color/darker_gray\"/>\n\n    <fragment\n\n            android:name=\"com.example.android.common.logger.LogFragment\"\n\n            android:id=\"@+id/log_fragment\"\n\n            android:layout_weight=\"1\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"match_parent\" />\n\n</LinearLayout>\n  "},"layout-sw600dp":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:orientation=\"vertical\"\n\n    android:layout_width=\"fill_parent\"\n\n    android:layout_height=\"fill_parent\"\n\n    android:id=\"@+id/sample_main_layout\" >\n\n \n\n    <TextView android:id=\"@+id/sample_output\"\n\n        style=\"@style/Widget.SampleMessage\"\n\n        android:background=\"@android:color/white\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:text=\"@string/intro_message\"\n\n        android:padding=\"16dp\"\n\n        android:layout_margin=\"16dp\"/>\n\n    <fragment\n\n        android:name=\"com.example.android.common.logger.LogFragment\"\n\n        android:id=\"@+id/log_fragment\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"match_parent\"\n\n        android:layout_margin=\"16dp\" />\n\n</LinearLayout>\n  "},"layout-sw600dp-land":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n        android:orientation=\"horizontal\"\n\n        android:layout_width=\"fill_parent\"\n\n        android:layout_height=\"fill_parent\"\n\n        android:id=\"@+id/sample_main_layout\">\n\n    <TextView android:id=\"@+id/sample_output\"\n\n              style=\"@style/Widget.SampleMessage\"\n\n              android:background=\"@android:color/white\"\n\n              android:layout_weight=\"1\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\"\n\n              android:text=\"@string/intro_message\"\n\n              android:layout_margin=\"16dp\" />\n\n    <fragment\n\n            android:name=\"com.example.android.common.logger.LogFragment\"\n\n            android:id=\"@+id/log_fragment\"\n\n            android:layout_weight=\"1\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"match_parent\"\n\n            android:layout_margin=\"16dp\" />\n\n</LinearLayout>\n  "},"menu":{"main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:id=\"@+id/sample_action\"\n\n          android:showAsAction=\"ifRoom|withText\"\n\n          android:title=\"@string/sample_action\" />\n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">ImmersiveMode</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            One of the features introduced in KitKat is \"immersive mode\". Immersive mode gives the\n\n            user the ability to show/hide the status bar and navigation bar with a swipe.  To try,\n\n            click the \"Toggle immersive mode\" button, then try swiping the bar in and out!\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n        <string name=\"sample_action\">Toggle immersive mode!</string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Base\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n \n\n    <style name=\"Widget.SampleOutput\">\n\n        <item name=\"android:padding\">@dimen/margin_medium</item>\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Log\" parent=\"Widget.SampleOutput\">\n\n        <item name=\"android:typeface\">monospace</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:padding\">@dimen/margin_medium</item>\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n \n\n        <item name=\"android:layout_margin\">16dp</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n    <style name=\"Log\" parent=\"Widget.SampleOutput\">\n\n        <item name=\"android:typeface\">monospace</item>\n\n    </style>\n\n \n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.common":{"activities":{"SampleActivityBase.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\npackage com.example.android.common.activities;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentActivity;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogWrapper;\n\n \n\n/**\n\n * Base launcher activity, to handle most of the common plumbing for samples.\n\n */\n\npublic class SampleActivityBase extends FragmentActivity {\n\n \n\n    public static final String TAG = \"SampleActivityBase\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n    }\n\n \n\n    @Override\n\n    protected  void onStart() {\n\n        super.onStart();\n\n        initializeLogging();\n\n    }\n\n \n\n    /** Set up targets to receive log data */\n\n    public void initializeLogging() {\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        // Wraps Android's native log framework\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        Log.setLogNode(logWrapper);\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "},"logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "}},"com.example.android.immersivemode":{"ImmersiveModeFragment.java":"\n    \n\n/*\n\n* Copyright (C) 2012 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*      http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\npackage com.example.android.immersivemode;\n\n \n\nimport android.os.Build;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.view.MenuItem;\n\nimport android.view.View;\n\n \n\nimport com.example.android.common.logger.Log;\n\n \n\npublic class ImmersiveModeFragment extends Fragment {\n\n \n\n    public static final String TAG = \"ImmersiveModeFragment\";\n\n \n\n    @Override\n\n    public void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setHasOptionsMenu(true);\n\n    }\n\n \n\n    @Override\n\n    public void onActivityCreated(Bundle savedInstanceState) {\n\n        super.onActivityCreated(savedInstanceState);\n\n        final View decorView = getActivity().getWindow().getDecorView();\n\n        decorView.setOnSystemUiVisibilityChangeListener(\n\n                new View.OnSystemUiVisibilityChangeListener() {\n\n                    @Override\n\n                    public void onSystemUiVisibilityChange(int i) {\n\n                        int height = decorView.getHeight();\n\n                        Log.i(TAG, \"Current height: \" + height);\n\n                    }\n\n                });\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        if (item.getItemId() == R.id.sample_action) {\n\n            toggleHideyBar();\n\n        }\n\n        return true;\n\n    }\n\n \n\n    /**\n\n     * Detects and toggles immersive mode (also known as \"hidey bar\" mode).\n\n     */\n\n    public void toggleHideyBar() {\n\n \n\n        // The UI options currently enabled are represented by a bitfield.\n\n        // getSystemUiVisibility() gives us that bitfield.\n\n        int uiOptions = getActivity().getWindow().getDecorView().getSystemUiVisibility();\n\n        int newUiOptions = uiOptions;\n\n        boolean isImmersiveModeEnabled =\n\n                ((uiOptions | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY) == uiOptions);\n\n        if (isImmersiveModeEnabled) {\n\n            Log.i(TAG, \"Turning immersive mode mode off. \");\n\n        } else {\n\n            Log.i(TAG, \"Turning immersive mode mode on.\");\n\n        }\n\n \n\n        // Navigation bar hiding:  Backwards compatible to ICS.\n\n        if (Build.VERSION.SDK_INT >= 14) {\n\n            newUiOptions ^= View.SYSTEM_UI_FLAG_HIDE_NAVIGATION;\n\n        }\n\n \n\n        // Status bar hiding: Backwards compatible to Jellybean\n\n        if (Build.VERSION.SDK_INT >= 16) {\n\n            newUiOptions ^= View.SYSTEM_UI_FLAG_FULLSCREEN;\n\n        }\n\n \n\n        // Immersive mode: Backward compatible to KitKat.\n\n        // Note that this flag doesn't do anything by itself, it only augments the behavior\n\n        // of HIDE_NAVIGATION and FLAG_FULLSCREEN.  For the purposes of this sample\n\n        // all three flags are being toggled together.\n\n        // Note that there are two immersive mode UI flags, one of which is referred to as \"sticky\".\n\n        // Sticky immersive mode differs in that it makes the navigation and status bars\n\n        // semi-transparent, and the UI flag does not get cleared when the user interacts with\n\n        // the screen.\n\n        if (Build.VERSION.SDK_INT >= 18) {\n\n            newUiOptions ^= View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;\n\n        }\n\n \n\n        getActivity().getWindow().getDecorView().setSystemUiVisibility(newUiOptions);\n\n    }\n\n}\n  ","MainActivity.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.immersivemode;\n\n \n\nimport android.graphics.Color;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentTransaction;\n\nimport android.view.Menu;\n\n \n\nimport com.example.android.common.activities.SampleActivityBase;\n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogFragment;\n\nimport com.example.android.common.logger.LogWrapper;\n\nimport com.example.android.common.logger.MessageOnlyLogFilter;\n\n \n\n/**\n\n * A simple launcher activity containing a summary sample description\n\n * and a few action bar buttons.\n\n */\n\npublic class MainActivity extends SampleActivityBase {\n\n \n\n    public static final String TAG = \"MainActivity\";\n\n \n\n    public static final String FRAGTAG = \"ImmersiveModeFragment\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_main);\n\n \n\n        if (getSupportFragmentManager().findFragmentByTag(FRAGTAG) == null ) {\n\n            FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n\n            ImmersiveModeFragment fragment = new ImmersiveModeFragment();\n\n            transaction.add(fragment, FRAGTAG);\n\n            transaction.commit();\n\n        }\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        getMenuInflater().inflate(R.menu.main, menu);\n\n        return true;\n\n    }\n\n \n\n    /** Create a chain of targets that will receive log data */\n\n    @Override\n\n    public void initializeLogging() {\n\n        // Wraps Android's native log framework.\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        Log.setLogNode(logWrapper);\n\n \n\n        // Filter strips out everything except the message text.\n\n        MessageOnlyLogFilter msgFilter = new MessageOnlyLogFilter();\n\n        logWrapper.setNext(msgFilter);\n\n \n\n        // On screen logging via a fragment with a TextView.\n\n        LogFragment logFragment = (LogFragment) getSupportFragmentManager()\n\n                .findFragmentById(R.id.log_fragment);\n\n        msgFilter.setNext(logFragment.getLogView());\n\n        logFragment.getLogView().setTextAppearance(this, R.style.Log);\n\n        logFragment.getLogView().setBackgroundColor(Color.WHITE);\n\n \n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.immersivemode\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk android:minSdkVersion=\"11\" android:targetSdkVersion=\"19\" />\n\n \n\n    <application android:allowBackup=\"true\"\n\n        android:label=\"@string/app_name\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:theme=\"@style/AppTheme\">\n\n \n\n        <activity android:name=\".MainActivity\"\n\n                  android:label=\"@string/app_name\"\n\n                  android:uiOptions=\"splitActionBarWhenNarrow\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n \n\n</manifest>\n  "},"SlidingTabsBasic":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com/samples/SlidingTabsBasic/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com/samples/SlidingTabsBasic/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com/samples/SlidingTabsBasic/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com/samples/SlidingTabsBasic/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com/samples/SlidingTabsBasic/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"vertical\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <ViewAnimator\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\"\n\n          android:layout_weight=\"1\">\n\n \n\n        <ScrollView\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingRight=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingTop=\"@dimen/vertical_page_margin\"\n\n                  android:paddingBottom=\"@dimen/vertical_page_margin\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </ScrollView>\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\" />\n\n \n\n    </ViewAnimator>\n\n \n\n    <View\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"1dp\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\" />\n\n \n\n</LinearLayout>\n\n \n  ","fragment_sample.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:orientation=\"vertical\">\n\n \n\n    <com.example.android.common.view.SlidingTabLayout\n\n          android:id=\"@+id/sliding_tabs\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"wrap_content\" />\n\n \n\n    <android.support.v4.view.ViewPager\n\n          android:id=\"@+id/viewpager\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\"\n\n          android:layout_weight=\"1\"\n\n          android:background=\"@android:color/white\"/>\n\n \n\n</LinearLayout>\n  ","pager_item.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:orientation=\"vertical\"\n\n      android:gravity=\"center\">\n\n \n\n    <TextView\n\n          android:id=\"@+id/item_subtitle\"\n\n          android:layout_width=\"wrap_content\"\n\n          android:layout_height=\"wrap_content\"\n\n          android:textAppearance=\"?android:attr/textAppearanceLarge\"\n\n          android:text=\"Page:\"/>\n\n \n\n    <TextView\n\n          android:id=\"@+id/item_title\"\n\n          android:layout_width=\"wrap_content\"\n\n          android:layout_height=\"wrap_content\"\n\n          android:textSize=\"80sp\" />\n\n \n\n</LinearLayout>\n  "},"layout-w720dp":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"horizontal\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <LinearLayout\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\"\n\n          android:layout_weight=\"1\"\n\n          android:orientation=\"vertical\">\n\n \n\n        <FrameLayout\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"wrap_content\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/margin_medium\"\n\n                  android:paddingRight=\"@dimen/margin_medium\"\n\n                  android:paddingTop=\"@dimen/margin_large\"\n\n                  android:paddingBottom=\"@dimen/margin_large\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </FrameLayout>\n\n \n\n        <View\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"1dp\"\n\n              android:background=\"@android:color/darker_gray\" />\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"0px\"\n\n              android:layout_weight=\"1\" />\n\n \n\n    </LinearLayout>\n\n \n\n    <View\n\n          android:layout_width=\"1dp\"\n\n          android:layout_height=\"match_parent\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\" />\n\n \n\n</LinearLayout>\n\n \n\n \n  "},"menu":{"main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:id=\"@+id/menu_toggle_log\"\n\n          android:showAsAction=\"always\"\n\n          android:title=\"@string/sample_show_log\" />\n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">SlidingTabsBasic</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            A basic sample which shows how to use SlidingTabLayout to display a custom\n\n            ViewPager title strip which gives continuous feedback to the user when scrolling.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","strings.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<resources>\n\n    <string name=\"sample_show_log\">Show Log</string>\n\n    <string name=\"sample_hide_log\">Hide Log</string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.common":{"activities":{"SampleActivityBase.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\npackage com.example.android.common.activities;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentActivity;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogWrapper;\n\n \n\n/**\n\n * Base launcher activity, to handle most of the common plumbing for samples.\n\n */\n\npublic class SampleActivityBase extends FragmentActivity {\n\n \n\n    public static final String TAG = \"SampleActivityBase\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n    }\n\n \n\n    @Override\n\n    protected  void onStart() {\n\n        super.onStart();\n\n        initializeLogging();\n\n    }\n\n \n\n    /** Set up targets to receive log data */\n\n    public void initializeLogging() {\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        // Wraps Android's native log framework\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        Log.setLogNode(logWrapper);\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "},"logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "},"view":{"SlidingTabLayout.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.view;\n\n \n\nimport android.content.Context;\n\nimport android.graphics.Typeface;\n\nimport android.os.Build;\n\nimport android.support.v4.view.PagerAdapter;\n\nimport android.support.v4.view.ViewPager;\n\nimport android.util.AttributeSet;\n\nimport android.util.TypedValue;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.widget.HorizontalScrollView;\n\nimport android.widget.TextView;\n\n \n\n/**\n\n * To be used with ViewPager to provide a tab indicator component which give constant feedback as to\n\n * the user's scroll progress.\n\n * <p>\n\n * To use the component, simply add it to your view hierarchy. Then in your\n\n * {@link android.app.Activity} or {@link android.support.v4.app.Fragment} call\n\n * {@link #setViewPager(ViewPager)} providing it the ViewPager this layout is being used for.\n\n * <p>\n\n * The colors can be customized in two ways. The first and simplest is to provide an array of colors\n\n * via {@link #setSelectedIndicatorColors(int...)} and {@link #setDividerColors(int...)}. The\n\n * alternative is via the {@link TabColorizer} interface which provides you complete control over\n\n * which color is used for any individual position.\n\n * <p>\n\n * The views used as tabs can be customized by calling {@link #setCustomTabView(int, int)},\n\n * providing the layout ID of your custom layout.\n\n */\n\npublic class SlidingTabLayout extends HorizontalScrollView {\n\n \n\n    /**\n\n     * Allows complete control over the colors drawn in the tab layout. Set with\n\n     * {@link #setCustomTabColorizer(TabColorizer)}.\n\n     */\n\n    public interface TabColorizer {\n\n \n\n        /**\n\n         * @return return the color of the indicator used when {@code position} is selected.\n\n         */\n\n        int getIndicatorColor(int position);\n\n \n\n        /**\n\n         * @return return the color of the divider drawn to the right of {@code position}.\n\n         */\n\n        int getDividerColor(int position);\n\n \n\n    }\n\n \n\n    private static final int TITLE_OFFSET_DIPS = 24;\n\n    private static final int TAB_VIEW_PADDING_DIPS = 16;\n\n    private static final int TAB_VIEW_TEXT_SIZE_SP = 12;\n\n \n\n    private int mTitleOffset;\n\n \n\n    private int mTabViewLayoutId;\n\n    private int mTabViewTextViewId;\n\n \n\n    private ViewPager mViewPager;\n\n    private ViewPager.OnPageChangeListener mViewPagerPageChangeListener;\n\n \n\n    private final SlidingTabStrip mTabStrip;\n\n \n\n    public SlidingTabLayout(Context context) {\n\n        this(context, null);\n\n    }\n\n \n\n    public SlidingTabLayout(Context context, AttributeSet attrs) {\n\n        this(context, attrs, 0);\n\n    }\n\n \n\n    public SlidingTabLayout(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n \n\n        // Disable the Scroll Bar\n\n        setHorizontalScrollBarEnabled(false);\n\n        // Make sure that the Tab Strips fills this View\n\n        setFillViewport(true);\n\n \n\n        mTitleOffset = (int) (TITLE_OFFSET_DIPS * getResources().getDisplayMetrics().density);\n\n \n\n        mTabStrip = new SlidingTabStrip(context);\n\n        addView(mTabStrip, LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);\n\n    }\n\n \n\n    /**\n\n     * Set the custom {@link TabColorizer} to be used.\n\n     *\n\n     * If you only require simple custmisation then you can use\n\n     * {@link #setSelectedIndicatorColors(int...)} and {@link #setDividerColors(int...)} to achieve\n\n     * similar effects.\n\n     */\n\n    public void setCustomTabColorizer(TabColorizer tabColorizer) {\n\n        mTabStrip.setCustomTabColorizer(tabColorizer);\n\n    }\n\n \n\n    /**\n\n     * Sets the colors to be used for indicating the selected tab. These colors are treated as a\n\n     * circular array. Providing one color will mean that all tabs are indicated with the same color.\n\n     */\n\n    public void setSelectedIndicatorColors(int... colors) {\n\n        mTabStrip.setSelectedIndicatorColors(colors);\n\n    }\n\n \n\n    /**\n\n     * Sets the colors to be used for tab dividers. These colors are treated as a circular array.\n\n     * Providing one color will mean that all tabs are indicated with the same color.\n\n     */\n\n    public void setDividerColors(int... colors) {\n\n        mTabStrip.setDividerColors(colors);\n\n    }\n\n \n\n    /**\n\n     * Set the {@link ViewPager.OnPageChangeListener}. When using {@link SlidingTabLayout} you are\n\n     * required to set any {@link ViewPager.OnPageChangeListener} through this method. This is so\n\n     * that the layout can update it's scroll position correctly.\n\n     *\n\n     * @see ViewPager#setOnPageChangeListener(ViewPager.OnPageChangeListener)\n\n     */\n\n    public void setOnPageChangeListener(ViewPager.OnPageChangeListener listener) {\n\n        mViewPagerPageChangeListener = listener;\n\n    }\n\n \n\n    /**\n\n     * Set the custom layout to be inflated for the tab views.\n\n     *\n\n     * @param layoutResId Layout id to be inflated\n\n     * @param textViewId id of the {@link TextView} in the inflated view\n\n     */\n\n    public void setCustomTabView(int layoutResId, int textViewId) {\n\n        mTabViewLayoutId = layoutResId;\n\n        mTabViewTextViewId = textViewId;\n\n    }\n\n \n\n    /**\n\n     * Sets the associated view pager. Note that the assumption here is that the pager content\n\n     * (number of tabs and tab titles) does not change after this call has been made.\n\n     */\n\n    public void setViewPager(ViewPager viewPager) {\n\n        mTabStrip.removeAllViews();\n\n \n\n        mViewPager = viewPager;\n\n        if (viewPager != null) {\n\n            viewPager.setOnPageChangeListener(new InternalViewPagerListener());\n\n            populateTabStrip();\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Create a default view to be used for tabs. This is called if a custom tab view is not set via\n\n     * {@link #setCustomTabView(int, int)}.\n\n     */\n\n    protected TextView createDefaultTabView(Context context) {\n\n        TextView textView = new TextView(context);\n\n        textView.setGravity(Gravity.CENTER);\n\n        textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, TAB_VIEW_TEXT_SIZE_SP);\n\n        textView.setTypeface(Typeface.DEFAULT_BOLD);\n\n \n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {\n\n            // If we're running on Honeycomb or newer, then we can use the Theme's\n\n            // selectableItemBackground to ensure that the View has a pressed state\n\n            TypedValue outValue = new TypedValue();\n\n            getContext().getTheme().resolveAttribute(android.R.attr.selectableItemBackground,\n\n                    outValue, true);\n\n            textView.setBackgroundResource(outValue.resourceId);\n\n        }\n\n \n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {\n\n            // If we're running on ICS or newer, enable all-caps to match the Action Bar tab style\n\n            textView.setAllCaps(true);\n\n        }\n\n \n\n        int padding = (int) (TAB_VIEW_PADDING_DIPS * getResources().getDisplayMetrics().density);\n\n        textView.setPadding(padding, padding, padding, padding);\n\n \n\n        return textView;\n\n    }\n\n \n\n    private void populateTabStrip() {\n\n        final PagerAdapter adapter = mViewPager.getAdapter();\n\n        final View.OnClickListener tabClickListener = new TabClickListener();\n\n \n\n        for (int i = 0; i < adapter.getCount(); i++) {\n\n            View tabView = null;\n\n            TextView tabTitleView = null;\n\n \n\n            if (mTabViewLayoutId != 0) {\n\n                // If there is a custom tab view layout id set, try and inflate it\n\n                tabView = LayoutInflater.from(getContext()).inflate(mTabViewLayoutId, mTabStrip,\n\n                        false);\n\n                tabTitleView = (TextView) tabView.findViewById(mTabViewTextViewId);\n\n            }\n\n \n\n            if (tabView == null) {\n\n                tabView = createDefaultTabView(getContext());\n\n            }\n\n \n\n            if (tabTitleView == null && TextView.class.isInstance(tabView)) {\n\n                tabTitleView = (TextView) tabView;\n\n            }\n\n \n\n            tabTitleView.setText(adapter.getPageTitle(i));\n\n            tabView.setOnClickListener(tabClickListener);\n\n \n\n            mTabStrip.addView(tabView);\n\n        }\n\n    }\n\n \n\n    @Override\n\n    protected void onAttachedToWindow() {\n\n        super.onAttachedToWindow();\n\n \n\n        if (mViewPager != null) {\n\n            scrollToTab(mViewPager.getCurrentItem(), 0);\n\n        }\n\n    }\n\n \n\n    private void scrollToTab(int tabIndex, int positionOffset) {\n\n        final int tabStripChildCount = mTabStrip.getChildCount();\n\n        if (tabStripChildCount == 0 || tabIndex < 0 || tabIndex >= tabStripChildCount) {\n\n            return;\n\n        }\n\n \n\n        View selectedChild = mTabStrip.getChildAt(tabIndex);\n\n        if (selectedChild != null) {\n\n            int targetScrollX = selectedChild.getLeft() + positionOffset;\n\n \n\n            if (tabIndex > 0 || positionOffset > 0) {\n\n                // If we're not at the first child and are mid-scroll, make sure we obey the offset\n\n                targetScrollX -= mTitleOffset;\n\n            }\n\n \n\n            scrollTo(targetScrollX, 0);\n\n        }\n\n    }\n\n \n\n    private class InternalViewPagerListener implements ViewPager.OnPageChangeListener {\n\n        private int mScrollState;\n\n \n\n        @Override\n\n        public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\n\n            int tabStripChildCount = mTabStrip.getChildCount();\n\n            if ((tabStripChildCount == 0) || (position < 0) || (position >= tabStripChildCount)) {\n\n                return;\n\n            }\n\n \n\n            mTabStrip.onViewPagerPageChanged(position, positionOffset);\n\n \n\n            View selectedTitle = mTabStrip.getChildAt(position);\n\n            int extraOffset = (selectedTitle != null)\n\n                    ? (int) (positionOffset * selectedTitle.getWidth())\n\n                    : 0;\n\n            scrollToTab(position, extraOffset);\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageScrolled(position, positionOffset,\n\n                        positionOffsetPixels);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void onPageScrollStateChanged(int state) {\n\n            mScrollState = state;\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageScrollStateChanged(state);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void onPageSelected(int position) {\n\n            if (mScrollState == ViewPager.SCROLL_STATE_IDLE) {\n\n                mTabStrip.onViewPagerPageChanged(position, 0f);\n\n                scrollToTab(position, 0);\n\n            }\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageSelected(position);\n\n            }\n\n        }\n\n \n\n    }\n\n \n\n    private class TabClickListener implements View.OnClickListener {\n\n        @Override\n\n        public void onClick(View v) {\n\n            for (int i = 0; i < mTabStrip.getChildCount(); i++) {\n\n                if (v == mTabStrip.getChildAt(i)) {\n\n                    mViewPager.setCurrentItem(i);\n\n                    return;\n\n                }\n\n            }\n\n        }\n\n    }\n\n \n\n}\n  ","SlidingTabStrip.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.view;\n\n \n\nimport android.R;\n\nimport android.content.Context;\n\nimport android.graphics.Canvas;\n\nimport android.graphics.Color;\n\nimport android.graphics.Paint;\n\nimport android.util.AttributeSet;\n\nimport android.util.TypedValue;\n\nimport android.view.View;\n\nimport android.widget.LinearLayout;\n\n \n\nclass SlidingTabStrip extends LinearLayout {\n\n \n\n    private static final int DEFAULT_BOTTOM_BORDER_THICKNESS_DIPS = 2;\n\n    private static final byte DEFAULT_BOTTOM_BORDER_COLOR_ALPHA = 0x26;\n\n    private static final int SELECTED_INDICATOR_THICKNESS_DIPS = 8;\n\n    private static final int DEFAULT_SELECTED_INDICATOR_COLOR = 0xFF33B5E5;\n\n \n\n    private static final int DEFAULT_DIVIDER_THICKNESS_DIPS = 1;\n\n    private static final byte DEFAULT_DIVIDER_COLOR_ALPHA = 0x20;\n\n    private static final float DEFAULT_DIVIDER_HEIGHT = 0.5f;\n\n \n\n    private final int mBottomBorderThickness;\n\n    private final Paint mBottomBorderPaint;\n\n \n\n    private final int mSelectedIndicatorThickness;\n\n    private final Paint mSelectedIndicatorPaint;\n\n \n\n    private final int mDefaultBottomBorderColor;\n\n \n\n    private final Paint mDividerPaint;\n\n    private final float mDividerHeight;\n\n \n\n    private int mSelectedPosition;\n\n    private float mSelectionOffset;\n\n \n\n    private SlidingTabLayout.TabColorizer mCustomTabColorizer;\n\n    private final SimpleTabColorizer mDefaultTabColorizer;\n\n \n\n    SlidingTabStrip(Context context) {\n\n        this(context, null);\n\n    }\n\n \n\n    SlidingTabStrip(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n        setWillNotDraw(false);\n\n \n\n        final float density = getResources().getDisplayMetrics().density;\n\n \n\n        TypedValue outValue = new TypedValue();\n\n        context.getTheme().resolveAttribute(R.attr.colorForeground, outValue, true);\n\n        final int themeForegroundColor =  outValue.data;\n\n \n\n        mDefaultBottomBorderColor = setColorAlpha(themeForegroundColor,\n\n                DEFAULT_BOTTOM_BORDER_COLOR_ALPHA);\n\n \n\n        mDefaultTabColorizer = new SimpleTabColorizer();\n\n        mDefaultTabColorizer.setIndicatorColors(DEFAULT_SELECTED_INDICATOR_COLOR);\n\n        mDefaultTabColorizer.setDividerColors(setColorAlpha(themeForegroundColor,\n\n                DEFAULT_DIVIDER_COLOR_ALPHA));\n\n \n\n        mBottomBorderThickness = (int) (DEFAULT_BOTTOM_BORDER_THICKNESS_DIPS * density);\n\n        mBottomBorderPaint = new Paint();\n\n        mBottomBorderPaint.setColor(mDefaultBottomBorderColor);\n\n \n\n        mSelectedIndicatorThickness = (int) (SELECTED_INDICATOR_THICKNESS_DIPS * density);\n\n        mSelectedIndicatorPaint = new Paint();\n\n \n\n        mDividerHeight = DEFAULT_DIVIDER_HEIGHT;\n\n        mDividerPaint = new Paint();\n\n        mDividerPaint.setStrokeWidth((int) (DEFAULT_DIVIDER_THICKNESS_DIPS * density));\n\n    }\n\n \n\n    void setCustomTabColorizer(SlidingTabLayout.TabColorizer customTabColorizer) {\n\n        mCustomTabColorizer = customTabColorizer;\n\n        invalidate();\n\n    }\n\n \n\n    void setSelectedIndicatorColors(int... colors) {\n\n        // Make sure that the custom colorizer is removed\n\n        mCustomTabColorizer = null;\n\n        mDefaultTabColorizer.setIndicatorColors(colors);\n\n        invalidate();\n\n    }\n\n \n\n    void setDividerColors(int... colors) {\n\n        // Make sure that the custom colorizer is removed\n\n        mCustomTabColorizer = null;\n\n        mDefaultTabColorizer.setDividerColors(colors);\n\n        invalidate();\n\n    }\n\n \n\n    void onViewPagerPageChanged(int position, float positionOffset) {\n\n        mSelectedPosition = position;\n\n        mSelectionOffset = positionOffset;\n\n        invalidate();\n\n    }\n\n \n\n    @Override\n\n    protected void onDraw(Canvas canvas) {\n\n        final int height = getHeight();\n\n        final int childCount = getChildCount();\n\n        final int dividerHeightPx = (int) (Math.min(Math.max(0f, mDividerHeight), 1f) * height);\n\n        final SlidingTabLayout.TabColorizer tabColorizer = mCustomTabColorizer != null\n\n                ? mCustomTabColorizer\n\n                : mDefaultTabColorizer;\n\n \n\n        // Thick colored underline below the current selection\n\n        if (childCount > 0) {\n\n            View selectedTitle = getChildAt(mSelectedPosition);\n\n            int left = selectedTitle.getLeft();\n\n            int right = selectedTitle.getRight();\n\n            int color = tabColorizer.getIndicatorColor(mSelectedPosition);\n\n \n\n            if (mSelectionOffset > 0f && mSelectedPosition < (getChildCount() - 1)) {\n\n                int nextColor = tabColorizer.getIndicatorColor(mSelectedPosition + 1);\n\n                if (color != nextColor) {\n\n                    color = blendColors(nextColor, color, mSelectionOffset);\n\n                }\n\n \n\n                // Draw the selection partway between the tabs\n\n                View nextTitle = getChildAt(mSelectedPosition + 1);\n\n                left = (int) (mSelectionOffset * nextTitle.getLeft() +\n\n                        (1.0f - mSelectionOffset) * left);\n\n                right = (int) (mSelectionOffset * nextTitle.getRight() +\n\n                        (1.0f - mSelectionOffset) * right);\n\n            }\n\n \n\n            mSelectedIndicatorPaint.setColor(color);\n\n \n\n            canvas.drawRect(left, height - mSelectedIndicatorThickness, right,\n\n                    height, mSelectedIndicatorPaint);\n\n        }\n\n \n\n        // Thin underline along the entire bottom edge\n\n        canvas.drawRect(0, height - mBottomBorderThickness, getWidth(), height, mBottomBorderPaint);\n\n \n\n        // Vertical separators between the titles\n\n        int separatorTop = (height - dividerHeightPx) / 2;\n\n        for (int i = 0; i < childCount - 1; i++) {\n\n            View child = getChildAt(i);\n\n            mDividerPaint.setColor(tabColorizer.getDividerColor(i));\n\n            canvas.drawLine(child.getRight(), separatorTop, child.getRight(),\n\n                    separatorTop + dividerHeightPx, mDividerPaint);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Set the alpha value of the {@code color} to be the given {@code alpha} value.\n\n     */\n\n    private static int setColorAlpha(int color, byte alpha) {\n\n        return Color.argb(alpha, Color.red(color), Color.green(color), Color.blue(color));\n\n    }\n\n \n\n    /**\n\n     * Blend {@code color1} and {@code color2} using the given ratio.\n\n     *\n\n     * @param ratio of which to blend. 1.0 will return {@code color1}, 0.5 will give an even blend,\n\n     *              0.0 will return {@code color2}.\n\n     */\n\n    private static int blendColors(int color1, int color2, float ratio) {\n\n        final float inverseRation = 1f - ratio;\n\n        float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRation);\n\n        float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRation);\n\n        float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRation);\n\n        return Color.rgb((int) r, (int) g, (int) b);\n\n    }\n\n \n\n    private static class SimpleTabColorizer implements SlidingTabLayout.TabColorizer {\n\n        private int[] mIndicatorColors;\n\n        private int[] mDividerColors;\n\n \n\n        @Override\n\n        public final int getIndicatorColor(int position) {\n\n            return mIndicatorColors[position % mIndicatorColors.length];\n\n        }\n\n \n\n        @Override\n\n        public final int getDividerColor(int position) {\n\n            return mDividerColors[position % mDividerColors.length];\n\n        }\n\n \n\n        void setIndicatorColors(int... colors) {\n\n            mIndicatorColors = colors;\n\n        }\n\n \n\n        void setDividerColors(int... colors) {\n\n            mDividerColors = colors;\n\n        }\n\n    }\n\n}\n  "}},"com.example.android.slidingtabsbasic":{"MainActivity.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.slidingtabsbasic;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentTransaction;\n\nimport android.view.Menu;\n\nimport android.view.MenuItem;\n\nimport android.widget.ViewAnimator;\n\n \n\nimport com.example.android.common.activities.SampleActivityBase;\n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogFragment;\n\nimport com.example.android.common.logger.LogWrapper;\n\nimport com.example.android.common.logger.MessageOnlyLogFilter;\n\n \n\n/**\n\n * A simple launcher activity containing a summary sample description, sample log and a custom\n\n * {@link android.support.v4.app.Fragment} which can display a view.\n\n * <p>\n\n * For devices with displays with a width of 720dp or greater, the sample log is always visible,\n\n * on other devices it's visibility is controlled by an item on the Action Bar.\n\n */\n\npublic class MainActivity extends SampleActivityBase {\n\n \n\n    public static final String TAG = \"MainActivity\";\n\n \n\n    // Whether the Log Fragment is currently shown\n\n    private boolean mLogShown;\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_main);\n\n \n\n        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n\n        SlidingTabsBasicFragment fragment = new SlidingTabsBasicFragment();\n\n        transaction.replace(R.id.sample_content_fragment, fragment);\n\n        transaction.commit();\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        getMenuInflater().inflate(R.menu.main, menu);\n\n        return true;\n\n    }\n\n \n\n    @Override\n\n    public boolean onPrepareOptionsMenu(Menu menu) {\n\n        MenuItem logToggle = menu.findItem(R.id.menu_toggle_log);\n\n        logToggle.setVisible(findViewById(R.id.sample_output) instanceof ViewAnimator);\n\n        logToggle.setTitle(mLogShown ? R.string.sample_hide_log : R.string.sample_show_log);\n\n \n\n        return super.onPrepareOptionsMenu(menu);\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch(item.getItemId()) {\n\n            case R.id.menu_toggle_log:\n\n                mLogShown = !mLogShown;\n\n                ViewAnimator output = (ViewAnimator) findViewById(R.id.sample_output);\n\n                if (mLogShown) {\n\n                    output.setDisplayedChild(1);\n\n                } else {\n\n                    output.setDisplayedChild(0);\n\n                }\n\n                supportInvalidateOptionsMenu();\n\n                return true;\n\n        }\n\n        return super.onOptionsItemSelected(item);\n\n    }\n\n \n\n    /** Create a chain of targets that will receive log data */\n\n    @Override\n\n    public void initializeLogging() {\n\n        // Wraps Android's native log framework.\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        Log.setLogNode(logWrapper);\n\n \n\n        // Filter strips out everything except the message text.\n\n        MessageOnlyLogFilter msgFilter = new MessageOnlyLogFilter();\n\n        logWrapper.setNext(msgFilter);\n\n \n\n        // On screen logging via a fragment with a TextView.\n\n        LogFragment logFragment = (LogFragment) getSupportFragmentManager()\n\n                .findFragmentById(R.id.log_fragment);\n\n        msgFilter.setNext(logFragment.getLogView());\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  ","SlidingTabsBasicFragment.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.slidingtabsbasic;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.view.SlidingTabLayout;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.support.v4.view.PagerAdapter;\n\nimport android.support.v4.view.ViewPager;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.TextView;\n\n \n\n/**\n\n * A basic sample which shows how to use {@link com.example.android.common.view.SlidingTabLayout}\n\n * to display a custom {@link ViewPager} title strip which gives continuous feedback to the user\n\n * when scrolling.\n\n */\n\npublic class SlidingTabsBasicFragment extends Fragment {\n\n \n\n    static final String LOG_TAG = \"SlidingTabsBasicFragment\";\n\n \n\n    /**\n\n     * A custom {@link ViewPager} title strip which looks much like Tabs present in Android v4.0 and\n\n     * above, but is designed to give continuous feedback to the user when scrolling.\n\n     */\n\n    private SlidingTabLayout mSlidingTabLayout;\n\n \n\n    /**\n\n     * A {@link ViewPager} which will be used in conjunction with the {@link SlidingTabLayout} above.\n\n     */\n\n    private ViewPager mViewPager;\n\n \n\n    /**\n\n     * Inflates the {@link View} which will be displayed by this {@link Fragment}, from the app's\n\n     * resources.\n\n     */\n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n            Bundle savedInstanceState) {\n\n        return inflater.inflate(R.layout.fragment_sample, container, false);\n\n    }\n\n \n\n    /**\n\n     * This is called after the {@link #onCreateView(LayoutInflater, ViewGroup, Bundle)} has finished.\n\n     * Here we can pick out the {@link View}s we need to configure from the content view.\n\n     *\n\n     * We set the {@link ViewPager}'s adapter to be an instance of {@link SamplePagerAdapter}. The\n\n     * {@link SlidingTabLayout} is then given the {@link ViewPager} so that it can populate itself.\n\n     *\n\n     * @param view View created in {@link #onCreateView(LayoutInflater, ViewGroup, Bundle)}\n\n     */\n\n    @Override\n\n    public void onViewCreated(View view, Bundle savedInstanceState) {\n\n        // Get the ViewPager and set it's PagerAdapter so that it can display items\n\n        mViewPager = (ViewPager) view.findViewById(R.id.viewpager);\n\n        mViewPager.setAdapter(new SamplePagerAdapter());\n\n \n\n        // Give the SlidingTabLayout the ViewPager, this must be done AFTER the ViewPager has had\n\n        // it's PagerAdapter set.\n\n        mSlidingTabLayout = (SlidingTabLayout) view.findViewById(R.id.sliding_tabs);\n\n        mSlidingTabLayout.setViewPager(mViewPager);\n\n    }\n\n \n\n    /**\n\n     * The {@link android.support.v4.view.PagerAdapter} used to display pages in this sample.\n\n     * The individual pages are simple and just display two lines of text. The important section of\n\n     * this class is the {@link #getPageTitle(int)} method which controls what is displayed in the\n\n     * {@link SlidingTabLayout}.\n\n     */\n\n    class SamplePagerAdapter extends PagerAdapter {\n\n \n\n        /**\n\n         * @return the number of pages to display\n\n         */\n\n        @Override\n\n        public int getCount() {\n\n            return 10;\n\n        }\n\n \n\n        /**\n\n         * @return true if the value returned from {@link #instantiateItem(ViewGroup, int)} is the\n\n         * same object as the {@link View} added to the {@link ViewPager}.\n\n         */\n\n        @Override\n\n        public boolean isViewFromObject(View view, Object o) {\n\n            return o == view;\n\n        }\n\n \n\n        /**\n\n         * Return the title of the item at {@code position}. This is important as what this method\n\n         * returns is what is displayed in the {@link SlidingTabLayout}.\n\n         * <p>\n\n         * Here we construct one using the position value, but for real application the title should\n\n         * refer to the item's contents.\n\n         */\n\n        @Override\n\n        public CharSequence getPageTitle(int position) {\n\n            return \"Item \" + (position + 1);\n\n        }\n\n \n\n        /**\n\n         * Instantiate the {@link View} which should be displayed at {@code position}. Here we\n\n         * inflate a layout from the apps resources and then change the text view to signify the position.\n\n         */\n\n        @Override\n\n        public Object instantiateItem(ViewGroup container, int position) {\n\n            // Inflate a new layout from our resources\n\n            View view = getActivity().getLayoutInflater().inflate(R.layout.pager_item,\n\n                    container, false);\n\n            // Add the newly created View to the ViewPager\n\n            container.addView(view);\n\n \n\n            // Retrieve a TextView from the inflated View, and update it's text\n\n            TextView title = (TextView) view.findViewById(R.id.item_title);\n\n            title.setText(String.valueOf(position + 1));\n\n \n\n            Log.i(LOG_TAG, \"instantiateItem() [position: \" + position + \"]\");\n\n \n\n            // Return the View\n\n            return view;\n\n        }\n\n \n\n        /**\n\n         * Destroy the item from the {@link ViewPager}. In our case this is simply removing the\n\n         * {@link View}.\n\n         */\n\n        @Override\n\n        public void destroyItem(ViewGroup container, int position, Object object) {\n\n            container.removeView((View) object);\n\n            Log.i(LOG_TAG, \"destroyItem() [position: \" + position + \"]\");\n\n        }\n\n \n\n    }\n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.slidingtabsbasic\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk android:minSdkVersion=\"4\" android:targetSdkVersion=\"19\" />\n\n \n\n    <application android:allowBackup=\"true\"\n\n        android:label=\"@string/app_name\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:theme=\"@style/AppTheme\">\n\n \n\n        <activity android:name=\".MainActivity\"\n\n                  android:label=\"@string/app_name\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n \n\n</manifest>\n  "},"SlidingTabsColors":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com/samples/SlidingTabsColors/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com/samples/SlidingTabsColors/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com/samples/SlidingTabsColors/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com/samples/SlidingTabsColors/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com/samples/SlidingTabsColors/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"vertical\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <ViewAnimator\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\"\n\n          android:layout_weight=\"1\">\n\n \n\n        <ScrollView\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingRight=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingTop=\"@dimen/vertical_page_margin\"\n\n                  android:paddingBottom=\"@dimen/vertical_page_margin\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </ScrollView>\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\" />\n\n \n\n    </ViewAnimator>\n\n \n\n    <View\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"1dp\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\" />\n\n \n\n</LinearLayout>\n\n \n  ","fragment_sample.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\"\n\n              android:orientation=\"vertical\">\n\n \n\n    <com.example.android.common.view.SlidingTabLayout\n\n          android:id=\"@+id/sliding_tabs\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"wrap_content\" />\n\n \n\n    <android.support.v4.view.ViewPager\n\n          android:id=\"@+id/viewpager\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\"\n\n          android:layout_weight=\"1\"\n\n          android:background=\"@android:color/white\" />\n\n \n\n</LinearLayout>\n  ","pager_item.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\"\n\n              android:orientation=\"vertical\"\n\n              android:gravity=\"center\">\n\n \n\n    <TextView\n\n          android:id=\"@+id/item_title\"\n\n          android:layout_width=\"wrap_content\"\n\n          android:layout_height=\"wrap_content\"\n\n          android:textAppearance=\"?android:attr/textAppearanceLarge\" />\n\n \n\n    <TextView\n\n          android:id=\"@+id/item_indicator_color\"\n\n          android:layout_width=\"wrap_content\"\n\n          android:layout_height=\"wrap_content\"\n\n          android:textAppearance=\"?android:attr/textAppearanceLarge\" />\n\n \n\n    <TextView\n\n          android:id=\"@+id/item_divider_color\"\n\n          android:layout_width=\"wrap_content\"\n\n          android:layout_height=\"wrap_content\"\n\n          android:textAppearance=\"?android:attr/textAppearanceLarge\" />\n\n \n\n</LinearLayout>\n  "},"layout-w720dp":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"horizontal\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <LinearLayout\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\"\n\n          android:layout_weight=\"1\"\n\n          android:orientation=\"vertical\">\n\n \n\n        <FrameLayout\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"wrap_content\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/margin_medium\"\n\n                  android:paddingRight=\"@dimen/margin_medium\"\n\n                  android:paddingTop=\"@dimen/margin_large\"\n\n                  android:paddingBottom=\"@dimen/margin_large\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </FrameLayout>\n\n \n\n        <View\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"1dp\"\n\n              android:background=\"@android:color/darker_gray\" />\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"0px\"\n\n              android:layout_weight=\"1\" />\n\n \n\n    </LinearLayout>\n\n \n\n    <View\n\n          android:layout_width=\"1dp\"\n\n          android:layout_height=\"match_parent\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\" />\n\n \n\n</LinearLayout>\n\n \n\n \n  "},"menu":{"main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:id=\"@+id/menu_toggle_log\"\n\n          android:showAsAction=\"always\"\n\n          android:title=\"@string/sample_show_log\" />\n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">SlidingTabsColors</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            A more advanced sample which shows how to use SlidingTabLayout to display a custom\n\n            ViewPager title strip, with custom coloring for each tab.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","strings.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<resources>\n\n    <string name=\"sample_show_log\">Show Log</string>\n\n    <string name=\"sample_hide_log\">Hide Log</string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.common":{"activities":{"SampleActivityBase.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\npackage com.example.android.common.activities;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentActivity;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogWrapper;\n\n \n\n/**\n\n * Base launcher activity, to handle most of the common plumbing for samples.\n\n */\n\npublic class SampleActivityBase extends FragmentActivity {\n\n \n\n    public static final String TAG = \"SampleActivityBase\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n    }\n\n \n\n    @Override\n\n    protected  void onStart() {\n\n        super.onStart();\n\n        initializeLogging();\n\n    }\n\n \n\n    /** Set up targets to receive log data */\n\n    public void initializeLogging() {\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        // Wraps Android's native log framework\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        Log.setLogNode(logWrapper);\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "},"logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "},"view":{"SlidingTabLayout.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.view;\n\n \n\nimport android.content.Context;\n\nimport android.graphics.Typeface;\n\nimport android.os.Build;\n\nimport android.support.v4.view.PagerAdapter;\n\nimport android.support.v4.view.ViewPager;\n\nimport android.util.AttributeSet;\n\nimport android.util.TypedValue;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.widget.HorizontalScrollView;\n\nimport android.widget.TextView;\n\n \n\n/**\n\n * To be used with ViewPager to provide a tab indicator component which give constant feedback as to\n\n * the user's scroll progress.\n\n * <p>\n\n * To use the component, simply add it to your view hierarchy. Then in your\n\n * {@link android.app.Activity} or {@link android.support.v4.app.Fragment} call\n\n * {@link #setViewPager(ViewPager)} providing it the ViewPager this layout is being used for.\n\n * <p>\n\n * The colors can be customized in two ways. The first and simplest is to provide an array of colors\n\n * via {@link #setSelectedIndicatorColors(int...)} and {@link #setDividerColors(int...)}. The\n\n * alternative is via the {@link TabColorizer} interface which provides you complete control over\n\n * which color is used for any individual position.\n\n * <p>\n\n * The views used as tabs can be customized by calling {@link #setCustomTabView(int, int)},\n\n * providing the layout ID of your custom layout.\n\n */\n\npublic class SlidingTabLayout extends HorizontalScrollView {\n\n \n\n    /**\n\n     * Allows complete control over the colors drawn in the tab layout. Set with\n\n     * {@link #setCustomTabColorizer(TabColorizer)}.\n\n     */\n\n    public interface TabColorizer {\n\n \n\n        /**\n\n         * @return return the color of the indicator used when {@code position} is selected.\n\n         */\n\n        int getIndicatorColor(int position);\n\n \n\n        /**\n\n         * @return return the color of the divider drawn to the right of {@code position}.\n\n         */\n\n        int getDividerColor(int position);\n\n \n\n    }\n\n \n\n    private static final int TITLE_OFFSET_DIPS = 24;\n\n    private static final int TAB_VIEW_PADDING_DIPS = 16;\n\n    private static final int TAB_VIEW_TEXT_SIZE_SP = 12;\n\n \n\n    private int mTitleOffset;\n\n \n\n    private int mTabViewLayoutId;\n\n    private int mTabViewTextViewId;\n\n \n\n    private ViewPager mViewPager;\n\n    private ViewPager.OnPageChangeListener mViewPagerPageChangeListener;\n\n \n\n    private final SlidingTabStrip mTabStrip;\n\n \n\n    public SlidingTabLayout(Context context) {\n\n        this(context, null);\n\n    }\n\n \n\n    public SlidingTabLayout(Context context, AttributeSet attrs) {\n\n        this(context, attrs, 0);\n\n    }\n\n \n\n    public SlidingTabLayout(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n \n\n        // Disable the Scroll Bar\n\n        setHorizontalScrollBarEnabled(false);\n\n        // Make sure that the Tab Strips fills this View\n\n        setFillViewport(true);\n\n \n\n        mTitleOffset = (int) (TITLE_OFFSET_DIPS * getResources().getDisplayMetrics().density);\n\n \n\n        mTabStrip = new SlidingTabStrip(context);\n\n        addView(mTabStrip, LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);\n\n    }\n\n \n\n    /**\n\n     * Set the custom {@link TabColorizer} to be used.\n\n     *\n\n     * If you only require simple custmisation then you can use\n\n     * {@link #setSelectedIndicatorColors(int...)} and {@link #setDividerColors(int...)} to achieve\n\n     * similar effects.\n\n     */\n\n    public void setCustomTabColorizer(TabColorizer tabColorizer) {\n\n        mTabStrip.setCustomTabColorizer(tabColorizer);\n\n    }\n\n \n\n    /**\n\n     * Sets the colors to be used for indicating the selected tab. These colors are treated as a\n\n     * circular array. Providing one color will mean that all tabs are indicated with the same color.\n\n     */\n\n    public void setSelectedIndicatorColors(int... colors) {\n\n        mTabStrip.setSelectedIndicatorColors(colors);\n\n    }\n\n \n\n    /**\n\n     * Sets the colors to be used for tab dividers. These colors are treated as a circular array.\n\n     * Providing one color will mean that all tabs are indicated with the same color.\n\n     */\n\n    public void setDividerColors(int... colors) {\n\n        mTabStrip.setDividerColors(colors);\n\n    }\n\n \n\n    /**\n\n     * Set the {@link ViewPager.OnPageChangeListener}. When using {@link SlidingTabLayout} you are\n\n     * required to set any {@link ViewPager.OnPageChangeListener} through this method. This is so\n\n     * that the layout can update it's scroll position correctly.\n\n     *\n\n     * @see ViewPager#setOnPageChangeListener(ViewPager.OnPageChangeListener)\n\n     */\n\n    public void setOnPageChangeListener(ViewPager.OnPageChangeListener listener) {\n\n        mViewPagerPageChangeListener = listener;\n\n    }\n\n \n\n    /**\n\n     * Set the custom layout to be inflated for the tab views.\n\n     *\n\n     * @param layoutResId Layout id to be inflated\n\n     * @param textViewId id of the {@link TextView} in the inflated view\n\n     */\n\n    public void setCustomTabView(int layoutResId, int textViewId) {\n\n        mTabViewLayoutId = layoutResId;\n\n        mTabViewTextViewId = textViewId;\n\n    }\n\n \n\n    /**\n\n     * Sets the associated view pager. Note that the assumption here is that the pager content\n\n     * (number of tabs and tab titles) does not change after this call has been made.\n\n     */\n\n    public void setViewPager(ViewPager viewPager) {\n\n        mTabStrip.removeAllViews();\n\n \n\n        mViewPager = viewPager;\n\n        if (viewPager != null) {\n\n            viewPager.setOnPageChangeListener(new InternalViewPagerListener());\n\n            populateTabStrip();\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Create a default view to be used for tabs. This is called if a custom tab view is not set via\n\n     * {@link #setCustomTabView(int, int)}.\n\n     */\n\n    protected TextView createDefaultTabView(Context context) {\n\n        TextView textView = new TextView(context);\n\n        textView.setGravity(Gravity.CENTER);\n\n        textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, TAB_VIEW_TEXT_SIZE_SP);\n\n        textView.setTypeface(Typeface.DEFAULT_BOLD);\n\n \n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {\n\n            // If we're running on Honeycomb or newer, then we can use the Theme's\n\n            // selectableItemBackground to ensure that the View has a pressed state\n\n            TypedValue outValue = new TypedValue();\n\n            getContext().getTheme().resolveAttribute(android.R.attr.selectableItemBackground,\n\n                    outValue, true);\n\n            textView.setBackgroundResource(outValue.resourceId);\n\n        }\n\n \n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {\n\n            // If we're running on ICS or newer, enable all-caps to match the Action Bar tab style\n\n            textView.setAllCaps(true);\n\n        }\n\n \n\n        int padding = (int) (TAB_VIEW_PADDING_DIPS * getResources().getDisplayMetrics().density);\n\n        textView.setPadding(padding, padding, padding, padding);\n\n \n\n        return textView;\n\n    }\n\n \n\n    private void populateTabStrip() {\n\n        final PagerAdapter adapter = mViewPager.getAdapter();\n\n        final View.OnClickListener tabClickListener = new TabClickListener();\n\n \n\n        for (int i = 0; i < adapter.getCount(); i++) {\n\n            View tabView = null;\n\n            TextView tabTitleView = null;\n\n \n\n            if (mTabViewLayoutId != 0) {\n\n                // If there is a custom tab view layout id set, try and inflate it\n\n                tabView = LayoutInflater.from(getContext()).inflate(mTabViewLayoutId, mTabStrip,\n\n                        false);\n\n                tabTitleView = (TextView) tabView.findViewById(mTabViewTextViewId);\n\n            }\n\n \n\n            if (tabView == null) {\n\n                tabView = createDefaultTabView(getContext());\n\n            }\n\n \n\n            if (tabTitleView == null && TextView.class.isInstance(tabView)) {\n\n                tabTitleView = (TextView) tabView;\n\n            }\n\n \n\n            tabTitleView.setText(adapter.getPageTitle(i));\n\n            tabView.setOnClickListener(tabClickListener);\n\n \n\n            mTabStrip.addView(tabView);\n\n        }\n\n    }\n\n \n\n    @Override\n\n    protected void onAttachedToWindow() {\n\n        super.onAttachedToWindow();\n\n \n\n        if (mViewPager != null) {\n\n            scrollToTab(mViewPager.getCurrentItem(), 0);\n\n        }\n\n    }\n\n \n\n    private void scrollToTab(int tabIndex, int positionOffset) {\n\n        final int tabStripChildCount = mTabStrip.getChildCount();\n\n        if (tabStripChildCount == 0 || tabIndex < 0 || tabIndex >= tabStripChildCount) {\n\n            return;\n\n        }\n\n \n\n        View selectedChild = mTabStrip.getChildAt(tabIndex);\n\n        if (selectedChild != null) {\n\n            int targetScrollX = selectedChild.getLeft() + positionOffset;\n\n \n\n            if (tabIndex > 0 || positionOffset > 0) {\n\n                // If we're not at the first child and are mid-scroll, make sure we obey the offset\n\n                targetScrollX -= mTitleOffset;\n\n            }\n\n \n\n            scrollTo(targetScrollX, 0);\n\n        }\n\n    }\n\n \n\n    private class InternalViewPagerListener implements ViewPager.OnPageChangeListener {\n\n        private int mScrollState;\n\n \n\n        @Override\n\n        public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\n\n            int tabStripChildCount = mTabStrip.getChildCount();\n\n            if ((tabStripChildCount == 0) || (position < 0) || (position >= tabStripChildCount)) {\n\n                return;\n\n            }\n\n \n\n            mTabStrip.onViewPagerPageChanged(position, positionOffset);\n\n \n\n            View selectedTitle = mTabStrip.getChildAt(position);\n\n            int extraOffset = (selectedTitle != null)\n\n                    ? (int) (positionOffset * selectedTitle.getWidth())\n\n                    : 0;\n\n            scrollToTab(position, extraOffset);\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageScrolled(position, positionOffset,\n\n                        positionOffsetPixels);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void onPageScrollStateChanged(int state) {\n\n            mScrollState = state;\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageScrollStateChanged(state);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void onPageSelected(int position) {\n\n            if (mScrollState == ViewPager.SCROLL_STATE_IDLE) {\n\n                mTabStrip.onViewPagerPageChanged(position, 0f);\n\n                scrollToTab(position, 0);\n\n            }\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageSelected(position);\n\n            }\n\n        }\n\n \n\n    }\n\n \n\n    private class TabClickListener implements View.OnClickListener {\n\n        @Override\n\n        public void onClick(View v) {\n\n            for (int i = 0; i < mTabStrip.getChildCount(); i++) {\n\n                if (v == mTabStrip.getChildAt(i)) {\n\n                    mViewPager.setCurrentItem(i);\n\n                    return;\n\n                }\n\n            }\n\n        }\n\n    }\n\n \n\n}\n  ","SlidingTabStrip.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.view;\n\n \n\nimport android.R;\n\nimport android.content.Context;\n\nimport android.graphics.Canvas;\n\nimport android.graphics.Color;\n\nimport android.graphics.Paint;\n\nimport android.util.AttributeSet;\n\nimport android.util.TypedValue;\n\nimport android.view.View;\n\nimport android.widget.LinearLayout;\n\n \n\nclass SlidingTabStrip extends LinearLayout {\n\n \n\n    private static final int DEFAULT_BOTTOM_BORDER_THICKNESS_DIPS = 2;\n\n    private static final byte DEFAULT_BOTTOM_BORDER_COLOR_ALPHA = 0x26;\n\n    private static final int SELECTED_INDICATOR_THICKNESS_DIPS = 8;\n\n    private static final int DEFAULT_SELECTED_INDICATOR_COLOR = 0xFF33B5E5;\n\n \n\n    private static final int DEFAULT_DIVIDER_THICKNESS_DIPS = 1;\n\n    private static final byte DEFAULT_DIVIDER_COLOR_ALPHA = 0x20;\n\n    private static final float DEFAULT_DIVIDER_HEIGHT = 0.5f;\n\n \n\n    private final int mBottomBorderThickness;\n\n    private final Paint mBottomBorderPaint;\n\n \n\n    private final int mSelectedIndicatorThickness;\n\n    private final Paint mSelectedIndicatorPaint;\n\n \n\n    private final int mDefaultBottomBorderColor;\n\n \n\n    private final Paint mDividerPaint;\n\n    private final float mDividerHeight;\n\n \n\n    private int mSelectedPosition;\n\n    private float mSelectionOffset;\n\n \n\n    private SlidingTabLayout.TabColorizer mCustomTabColorizer;\n\n    private final SimpleTabColorizer mDefaultTabColorizer;\n\n \n\n    SlidingTabStrip(Context context) {\n\n        this(context, null);\n\n    }\n\n \n\n    SlidingTabStrip(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n        setWillNotDraw(false);\n\n \n\n        final float density = getResources().getDisplayMetrics().density;\n\n \n\n        TypedValue outValue = new TypedValue();\n\n        context.getTheme().resolveAttribute(R.attr.colorForeground, outValue, true);\n\n        final int themeForegroundColor =  outValue.data;\n\n \n\n        mDefaultBottomBorderColor = setColorAlpha(themeForegroundColor,\n\n                DEFAULT_BOTTOM_BORDER_COLOR_ALPHA);\n\n \n\n        mDefaultTabColorizer = new SimpleTabColorizer();\n\n        mDefaultTabColorizer.setIndicatorColors(DEFAULT_SELECTED_INDICATOR_COLOR);\n\n        mDefaultTabColorizer.setDividerColors(setColorAlpha(themeForegroundColor,\n\n                DEFAULT_DIVIDER_COLOR_ALPHA));\n\n \n\n        mBottomBorderThickness = (int) (DEFAULT_BOTTOM_BORDER_THICKNESS_DIPS * density);\n\n        mBottomBorderPaint = new Paint();\n\n        mBottomBorderPaint.setColor(mDefaultBottomBorderColor);\n\n \n\n        mSelectedIndicatorThickness = (int) (SELECTED_INDICATOR_THICKNESS_DIPS * density);\n\n        mSelectedIndicatorPaint = new Paint();\n\n \n\n        mDividerHeight = DEFAULT_DIVIDER_HEIGHT;\n\n        mDividerPaint = new Paint();\n\n        mDividerPaint.setStrokeWidth((int) (DEFAULT_DIVIDER_THICKNESS_DIPS * density));\n\n    }\n\n \n\n    void setCustomTabColorizer(SlidingTabLayout.TabColorizer customTabColorizer) {\n\n        mCustomTabColorizer = customTabColorizer;\n\n        invalidate();\n\n    }\n\n \n\n    void setSelectedIndicatorColors(int... colors) {\n\n        // Make sure that the custom colorizer is removed\n\n        mCustomTabColorizer = null;\n\n        mDefaultTabColorizer.setIndicatorColors(colors);\n\n        invalidate();\n\n    }\n\n \n\n    void setDividerColors(int... colors) {\n\n        // Make sure that the custom colorizer is removed\n\n        mCustomTabColorizer = null;\n\n        mDefaultTabColorizer.setDividerColors(colors);\n\n        invalidate();\n\n    }\n\n \n\n    void onViewPagerPageChanged(int position, float positionOffset) {\n\n        mSelectedPosition = position;\n\n        mSelectionOffset = positionOffset;\n\n        invalidate();\n\n    }\n\n \n\n    @Override\n\n    protected void onDraw(Canvas canvas) {\n\n        final int height = getHeight();\n\n        final int childCount = getChildCount();\n\n        final int dividerHeightPx = (int) (Math.min(Math.max(0f, mDividerHeight), 1f) * height);\n\n        final SlidingTabLayout.TabColorizer tabColorizer = mCustomTabColorizer != null\n\n                ? mCustomTabColorizer\n\n                : mDefaultTabColorizer;\n\n \n\n        // Thick colored underline below the current selection\n\n        if (childCount > 0) {\n\n            View selectedTitle = getChildAt(mSelectedPosition);\n\n            int left = selectedTitle.getLeft();\n\n            int right = selectedTitle.getRight();\n\n            int color = tabColorizer.getIndicatorColor(mSelectedPosition);\n\n \n\n            if (mSelectionOffset > 0f && mSelectedPosition < (getChildCount() - 1)) {\n\n                int nextColor = tabColorizer.getIndicatorColor(mSelectedPosition + 1);\n\n                if (color != nextColor) {\n\n                    color = blendColors(nextColor, color, mSelectionOffset);\n\n                }\n\n \n\n                // Draw the selection partway between the tabs\n\n                View nextTitle = getChildAt(mSelectedPosition + 1);\n\n                left = (int) (mSelectionOffset * nextTitle.getLeft() +\n\n                        (1.0f - mSelectionOffset) * left);\n\n                right = (int) (mSelectionOffset * nextTitle.getRight() +\n\n                        (1.0f - mSelectionOffset) * right);\n\n            }\n\n \n\n            mSelectedIndicatorPaint.setColor(color);\n\n \n\n            canvas.drawRect(left, height - mSelectedIndicatorThickness, right,\n\n                    height, mSelectedIndicatorPaint);\n\n        }\n\n \n\n        // Thin underline along the entire bottom edge\n\n        canvas.drawRect(0, height - mBottomBorderThickness, getWidth(), height, mBottomBorderPaint);\n\n \n\n        // Vertical separators between the titles\n\n        int separatorTop = (height - dividerHeightPx) / 2;\n\n        for (int i = 0; i < childCount - 1; i++) {\n\n            View child = getChildAt(i);\n\n            mDividerPaint.setColor(tabColorizer.getDividerColor(i));\n\n            canvas.drawLine(child.getRight(), separatorTop, child.getRight(),\n\n                    separatorTop + dividerHeightPx, mDividerPaint);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Set the alpha value of the {@code color} to be the given {@code alpha} value.\n\n     */\n\n    private static int setColorAlpha(int color, byte alpha) {\n\n        return Color.argb(alpha, Color.red(color), Color.green(color), Color.blue(color));\n\n    }\n\n \n\n    /**\n\n     * Blend {@code color1} and {@code color2} using the given ratio.\n\n     *\n\n     * @param ratio of which to blend. 1.0 will return {@code color1}, 0.5 will give an even blend,\n\n     *              0.0 will return {@code color2}.\n\n     */\n\n    private static int blendColors(int color1, int color2, float ratio) {\n\n        final float inverseRation = 1f - ratio;\n\n        float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRation);\n\n        float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRation);\n\n        float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRation);\n\n        return Color.rgb((int) r, (int) g, (int) b);\n\n    }\n\n \n\n    private static class SimpleTabColorizer implements SlidingTabLayout.TabColorizer {\n\n        private int[] mIndicatorColors;\n\n        private int[] mDividerColors;\n\n \n\n        @Override\n\n        public final int getIndicatorColor(int position) {\n\n            return mIndicatorColors[position % mIndicatorColors.length];\n\n        }\n\n \n\n        @Override\n\n        public final int getDividerColor(int position) {\n\n            return mDividerColors[position % mDividerColors.length];\n\n        }\n\n \n\n        void setIndicatorColors(int... colors) {\n\n            mIndicatorColors = colors;\n\n        }\n\n \n\n        void setDividerColors(int... colors) {\n\n            mDividerColors = colors;\n\n        }\n\n    }\n\n}\n  "}},"com.example.android.slidingtabscolors":{"ContentFragment.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *       http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.slidingtabscolors;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.TextView;\n\n \n\n/**\n\n * Simple Fragment used to display some meaningful content for each page in the sample's\n\n * {@link android.support.v4.view.ViewPager}.\n\n */\n\npublic class ContentFragment extends Fragment {\n\n \n\n    private static final String KEY_TITLE = \"title\";\n\n    private static final String KEY_INDICATOR_COLOR = \"indicator_color\";\n\n    private static final String KEY_DIVIDER_COLOR = \"divider_color\";\n\n \n\n    /**\n\n     * @return a new instance of {@link ContentFragment}, adding the parameters into a bundle and\n\n     * setting them as arguments.\n\n     */\n\n    public static ContentFragment newInstance(CharSequence title, int indicatorColor,\n\n            int dividerColor) {\n\n        Bundle bundle = new Bundle();\n\n        bundle.putCharSequence(KEY_TITLE, title);\n\n        bundle.putInt(KEY_INDICATOR_COLOR, indicatorColor);\n\n        bundle.putInt(KEY_DIVIDER_COLOR, dividerColor);\n\n \n\n        ContentFragment fragment = new ContentFragment();\n\n        fragment.setArguments(bundle);\n\n \n\n        return fragment;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n            Bundle savedInstanceState) {\n\n        return inflater.inflate(R.layout.pager_item, container, false);\n\n    }\n\n \n\n    @Override\n\n    public void onViewCreated(View view, Bundle savedInstanceState) {\n\n        super.onViewCreated(view, savedInstanceState);\n\n \n\n        Bundle args = getArguments();\n\n \n\n        if (args != null) {\n\n            TextView title = (TextView) view.findViewById(R.id.item_title);\n\n            title.setText(\"Title: \" + args.getCharSequence(KEY_TITLE));\n\n \n\n            int indicatorColor = args.getInt(KEY_INDICATOR_COLOR);\n\n            TextView indicatorColorView = (TextView) view.findViewById(R.id.item_indicator_color);\n\n            indicatorColorView.setText(\"Indicator: #\" + Integer.toHexString(indicatorColor));\n\n            indicatorColorView.setTextColor(indicatorColor);\n\n \n\n            int dividerColor = args.getInt(KEY_DIVIDER_COLOR);\n\n            TextView dividerColorView = (TextView) view.findViewById(R.id.item_divider_color);\n\n            dividerColorView.setText(\"Divider: #\" + Integer.toHexString(dividerColor));\n\n            dividerColorView.setTextColor(dividerColor);\n\n        }\n\n    }\n\n}\n  ","MainActivity.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.slidingtabscolors;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentTransaction;\n\nimport android.view.Menu;\n\nimport android.view.MenuItem;\n\nimport android.widget.ViewAnimator;\n\n \n\nimport com.example.android.common.activities.SampleActivityBase;\n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogFragment;\n\nimport com.example.android.common.logger.LogWrapper;\n\nimport com.example.android.common.logger.MessageOnlyLogFilter;\n\n \n\n/**\n\n * A simple launcher activity containing a summary sample description, sample log and a custom\n\n * {@link android.support.v4.app.Fragment} which can display a view.\n\n * <p>\n\n * For devices with displays with a width of 720dp or greater, the sample log is always visible,\n\n * on other devices it's visibility is controlled by an item on the Action Bar.\n\n */\n\npublic class MainActivity extends SampleActivityBase {\n\n \n\n    public static final String TAG = \"MainActivity\";\n\n \n\n    // Whether the Log Fragment is currently shown\n\n    private boolean mLogShown;\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_main);\n\n \n\n        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n\n        SlidingTabsColorsFragment fragment = new SlidingTabsColorsFragment();\n\n        transaction.replace(R.id.sample_content_fragment, fragment);\n\n        transaction.commit();\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        getMenuInflater().inflate(R.menu.main, menu);\n\n        return true;\n\n    }\n\n \n\n    @Override\n\n    public boolean onPrepareOptionsMenu(Menu menu) {\n\n        MenuItem logToggle = menu.findItem(R.id.menu_toggle_log);\n\n        logToggle.setVisible(findViewById(R.id.sample_output) instanceof ViewAnimator);\n\n        logToggle.setTitle(mLogShown ? R.string.sample_hide_log : R.string.sample_show_log);\n\n \n\n        return super.onPrepareOptionsMenu(menu);\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch(item.getItemId()) {\n\n            case R.id.menu_toggle_log:\n\n                mLogShown = !mLogShown;\n\n                ViewAnimator output = (ViewAnimator) findViewById(R.id.sample_output);\n\n                if (mLogShown) {\n\n                    output.setDisplayedChild(1);\n\n                } else {\n\n                    output.setDisplayedChild(0);\n\n                }\n\n                supportInvalidateOptionsMenu();\n\n                return true;\n\n        }\n\n        return super.onOptionsItemSelected(item);\n\n    }\n\n \n\n    /** Create a chain of targets that will receive log data */\n\n    @Override\n\n    public void initializeLogging() {\n\n        // Wraps Android's native log framework.\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        Log.setLogNode(logWrapper);\n\n \n\n        // Filter strips out everything except the message text.\n\n        MessageOnlyLogFilter msgFilter = new MessageOnlyLogFilter();\n\n        logWrapper.setNext(msgFilter);\n\n \n\n        // On screen logging via a fragment with a TextView.\n\n        LogFragment logFragment = (LogFragment) getSupportFragmentManager()\n\n                .findFragmentById(R.id.log_fragment);\n\n        msgFilter.setNext(logFragment.getLogView());\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  ","SlidingTabsColorsFragment.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *       http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.slidingtabscolors;\n\n \n\nimport com.example.android.common.view.SlidingTabLayout;\n\n \n\nimport android.graphics.Color;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.support.v4.app.FragmentManager;\n\nimport android.support.v4.app.FragmentPagerAdapter;\n\nimport android.support.v4.view.ViewPager;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\n \n\nimport java.util.ArrayList;\n\nimport java.util.List;\n\n \n\n/**\n\n * A basic sample which shows how to use {@link com.example.android.common.view.SlidingTabLayout}\n\n * to display a custom {@link ViewPager} title strip which gives continuous feedback to the user\n\n * when scrolling.\n\n */\n\npublic class SlidingTabsColorsFragment extends Fragment {\n\n \n\n    /**\n\n     * This class represents a tab to be displayed by {@link ViewPager} and it's associated\n\n     * {@link SlidingTabLayout}.\n\n     */\n\n    static class SamplePagerItem {\n\n        private final CharSequence mTitle;\n\n        private final int mIndicatorColor;\n\n        private final int mDividerColor;\n\n \n\n        SamplePagerItem(CharSequence title, int indicatorColor, int dividerColor) {\n\n            mTitle = title;\n\n            mIndicatorColor = indicatorColor;\n\n            mDividerColor = dividerColor;\n\n        }\n\n \n\n        /**\n\n         * @return A new {@link Fragment} to be displayed by a {@link ViewPager}\n\n         */\n\n        Fragment createFragment() {\n\n            return ContentFragment.newInstance(mTitle, mIndicatorColor, mDividerColor);\n\n        }\n\n \n\n        /**\n\n         * @return the title which represents this tab. In this sample this is used directly by\n\n         * {@link android.support.v4.view.PagerAdapter#getPageTitle(int)}\n\n         */\n\n        CharSequence getTitle() {\n\n            return mTitle;\n\n        }\n\n \n\n        /**\n\n         * @return the color to be used for indicator on the {@link SlidingTabLayout}\n\n         */\n\n        int getIndicatorColor() {\n\n            return mIndicatorColor;\n\n        }\n\n \n\n        /**\n\n         * @return the color to be used for right divider on the {@link SlidingTabLayout}\n\n         */\n\n        int getDividerColor() {\n\n            return mDividerColor;\n\n        }\n\n    }\n\n \n\n    static final String LOG_TAG = \"SlidingTabsColorsFragment\";\n\n \n\n    /**\n\n     * A custom {@link ViewPager} title strip which looks much like Tabs present in Android v4.0 and\n\n     * above, but is designed to give continuous feedback to the user when scrolling.\n\n     */\n\n    private SlidingTabLayout mSlidingTabLayout;\n\n \n\n    /**\n\n     * A {@link ViewPager} which will be used in conjunction with the {@link SlidingTabLayout} above.\n\n     */\n\n    private ViewPager mViewPager;\n\n \n\n    /**\n\n     * List of {@link SamplePagerItem} which represent this sample's tabs.\n\n     */\n\n    private List<SamplePagerItem> mTabs = new ArrayList<SamplePagerItem>();\n\n \n\n    @Override\n\n    public void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n \n\n        /**\n\n         * Populate our tab list with tabs. Each item contains a title, indicator color and divider\n\n         * color, which are used by {@link SlidingTabLayout}.\n\n         */\n\n        mTabs.add(new SamplePagerItem(\n\n                getString(R.string.tab_stream), // Title\n\n                Color.BLUE, // Indicator color\n\n                Color.GRAY // Divider color\n\n        ));\n\n \n\n        mTabs.add(new SamplePagerItem(\n\n                getString(R.string.tab_messages), // Title\n\n                Color.RED, // Indicator color\n\n                Color.GRAY // Divider color\n\n        ));\n\n \n\n        mTabs.add(new SamplePagerItem(\n\n                getString(R.string.tab_photos), // Title\n\n                Color.YELLOW, // Indicator color\n\n                Color.GRAY // Divider color\n\n        ));\n\n \n\n        mTabs.add(new SamplePagerItem(\n\n                getString(R.string.tab_notifications), // Title\n\n                Color.GREEN, // Indicator color\n\n                Color.GRAY // Divider color\n\n        ));\n\n    }\n\n \n\n    /**\n\n     * Inflates the {@link View} which will be displayed by this {@link Fragment}, from the app's\n\n     * resources.\n\n     */\n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n            Bundle savedInstanceState) {\n\n        return inflater.inflate(R.layout.fragment_sample, container, false);\n\n    }\n\n \n\n    /**\n\n     * This is called after the {@link #onCreateView(LayoutInflater, ViewGroup, Bundle)} has finished.\n\n     * Here we can pick out the {@link View}s we need to configure from the content view.\n\n     *\n\n     * We set the {@link ViewPager}'s adapter to be an instance of\n\n     * {@link SampleFragmentPagerAdapter}. The {@link SlidingTabLayout} is then given the\n\n     * {@link ViewPager} so that it can populate itself.\n\n     *\n\n     * @param view View created in {@link #onCreateView(LayoutInflater, ViewGroup, Bundle)}\n\n     */\n\n    @Override\n\n    public void onViewCreated(View view, Bundle savedInstanceState) {\n\n        // Get the ViewPager and set it's PagerAdapter so that it can display items\n\n        mViewPager = (ViewPager) view.findViewById(R.id.viewpager);\n\n        mViewPager.setAdapter(new SampleFragmentPagerAdapter(getChildFragmentManager()));\n\n \n\n        // Give the SlidingTabLayout the ViewPager, this must be done AFTER the ViewPager has had\n\n        // it's PagerAdapter set.\n\n        mSlidingTabLayout = (SlidingTabLayout) view.findViewById(R.id.sliding_tabs);\n\n        mSlidingTabLayout.setViewPager(mViewPager);\n\n \n\n        // Set a TabColorizer to customize the indicator and divider colors. Here we just retrieve\n\n        // the tab at the position, and return it's set color\n\n        mSlidingTabLayout.setCustomTabColorizer(new SlidingTabLayout.TabColorizer() {\n\n \n\n            @Override\n\n            public int getIndicatorColor(int position) {\n\n                return mTabs.get(position).getIndicatorColor();\n\n            }\n\n \n\n            @Override\n\n            public int getDividerColor(int position) {\n\n                return mTabs.get(position).getDividerColor();\n\n            }\n\n \n\n        });\n\n    }\n\n \n\n    /**\n\n     * The {@link FragmentPagerAdapter} used to display pages in this sample. The individual pages\n\n     * are instances of {@link ContentFragment} which just display three lines of text. Each page is\n\n     * created by the relevant {@link SamplePagerItem} for the requested position.\n\n     * <p>\n\n     * The important section of this class is the {@link #getPageTitle(int)} method which controls\n\n     * what is displayed in the {@link SlidingTabLayout}.\n\n     */\n\n    class SampleFragmentPagerAdapter extends FragmentPagerAdapter {\n\n \n\n        SampleFragmentPagerAdapter(FragmentManager fm) {\n\n            super(fm);\n\n        }\n\n \n\n        /**\n\n         * Return the {@link android.support.v4.app.Fragment} to be displayed at {@code position}.\n\n         * <p>\n\n         * Here we return the value returned from {@link SamplePagerItem#createFragment()}.\n\n         */\n\n        @Override\n\n        public Fragment getItem(int i) {\n\n            return mTabs.get(i).createFragment();\n\n        }\n\n \n\n        @Override\n\n        public int getCount() {\n\n            return mTabs.size();\n\n        }\n\n \n\n        /**\n\n         * Return the title of the item at {@code position}. This is important as what this method\n\n         * returns is what is displayed in the {@link SlidingTabLayout}.\n\n         * <p>\n\n         * Here we return the value returned from {@link SamplePagerItem#getTitle()}.\n\n         */\n\n        @Override\n\n        public CharSequence getPageTitle(int position) {\n\n            return mTabs.get(position).getTitle();\n\n        }\n\n \n\n    }\n\n \n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.slidingtabscolors\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk android:minSdkVersion=\"4\" android:targetSdkVersion=\"19\" />\n\n \n\n    <application android:allowBackup=\"true\"\n\n        android:label=\"@string/app_name\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:theme=\"@style/AppTheme\">\n\n \n\n        <activity android:name=\".MainActivity\"\n\n                  android:label=\"@string/app_name\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n \n\n</manifest>\n  "},"SwipeRefreshLayoutBasic":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com/samples/SwipeRefreshLayoutBasic/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com/samples/SwipeRefreshLayoutBasic/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com/samples/SwipeRefreshLayoutBasic/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com/samples/SwipeRefreshLayoutBasic/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com/samples/SwipeRefreshLayoutBasic/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"vertical\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <ViewAnimator\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\"\n\n          android:layout_weight=\"1\">\n\n \n\n        <ScrollView\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingRight=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingTop=\"@dimen/vertical_page_margin\"\n\n                  android:paddingBottom=\"@dimen/vertical_page_margin\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </ScrollView>\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\" />\n\n \n\n    </ViewAnimator>\n\n \n\n    <View\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"1dp\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\" />\n\n \n\n</LinearLayout>\n\n \n  ","fragment_sample.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n<android.support.v4.widget.SwipeRefreshLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:id=\"@+id/swiperefresh\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\">\n\n \n\n    <ListView\n\n          android:id=\"@android:id/list\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"match_parent\" />\n\n \n\n</android.support.v4.widget.SwipeRefreshLayout>\n  "},"layout-w720dp":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"horizontal\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <LinearLayout\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\"\n\n          android:layout_weight=\"1\"\n\n          android:orientation=\"vertical\">\n\n \n\n        <FrameLayout\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"wrap_content\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/margin_medium\"\n\n                  android:paddingRight=\"@dimen/margin_medium\"\n\n                  android:paddingTop=\"@dimen/margin_large\"\n\n                  android:paddingBottom=\"@dimen/margin_large\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </FrameLayout>\n\n \n\n        <View\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"1dp\"\n\n              android:background=\"@android:color/darker_gray\" />\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"0px\"\n\n              android:layout_weight=\"1\" />\n\n \n\n    </LinearLayout>\n\n \n\n    <View\n\n          android:layout_width=\"1dp\"\n\n          android:layout_height=\"match_parent\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\" />\n\n \n\n</LinearLayout>\n\n \n\n \n  "},"menu":{"main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:id=\"@+id/menu_toggle_log\"\n\n          android:showAsAction=\"always\"\n\n          android:title=\"@string/sample_show_log\" />\n\n</menu>\n  ","main_menu.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n \n\n    <item\n\n          android:id=\"@+id/menu_refresh\"\n\n          android:title=\"@string/menu_refresh\"\n\n          android:showAsAction=\"never\" />\n\n \n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">SwipeRefreshLayoutBasic</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            A basic sample which shows how to use SwipeRefreshLayout to add the \\'swipe-to-refresh\\'\n\n            gesture to a View, enabling the ability to trigger a refresh from swiping down on the view.\n\n            In this sample the View which can be refreshed is a ListView.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","colors.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<resources>\n\n \n\n    <color name=\"swipe_color_1\">#B6DB49</color>\n\n    <color name=\"swipe_color_2\">#99CC00</color>\n\n    <color name=\"swipe_color_3\">#8ABD00</color>\n\n    <color name=\"swipe_color_4\">#7CAF00</color>\n\n \n\n</resources>\n  ","strings.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<resources>\n\n    <string name=\"sample_show_log\">Show Log</string>\n\n    <string name=\"sample_hide_log\">Hide Log</string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.common":{"activities":{"SampleActivityBase.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\npackage com.example.android.common.activities;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentActivity;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogWrapper;\n\n \n\n/**\n\n * Base launcher activity, to handle most of the common plumbing for samples.\n\n */\n\npublic class SampleActivityBase extends FragmentActivity {\n\n \n\n    public static final String TAG = \"SampleActivityBase\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n    }\n\n \n\n    @Override\n\n    protected  void onStart() {\n\n        super.onStart();\n\n        initializeLogging();\n\n    }\n\n \n\n    /** Set up targets to receive log data */\n\n    public void initializeLogging() {\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        // Wraps Android's native log framework\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        Log.setLogNode(logWrapper);\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "},"dummydata":{"Cheeses.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.dummydata;\n\n \n\nimport java.util.ArrayList;\n\nimport java.util.HashSet;\n\nimport java.util.Random;\n\n \n\n/**\n\n * Dummy data.\n\n */\n\npublic class Cheeses {\n\n    static final String[] CHEESES = {\n\n            \"Abbaye de Belloc\", \"Abbaye du Mont des Cats\", \"Abertam\", \"Abondance\", \"Ackawi\",\n\n            \"Acorn\", \"Adelost\", \"Affidelice au Chablis\", \"Afuega'l Pitu\", \"Airag\", \"Airedale\",\n\n            \"Aisy Cendre\", \"Allgauer Emmentaler\", \"Alverca\", \"Ambert\", \"American Cheese\",\n\n            \"Ami du Chambertin\", \"Anejo Enchilado\", \"Anneau du Vic-Bilh\", \"Anthoriro\", \"Appenzell\",\n\n            \"Aragon\", \"Ardi Gasna\", \"Ardrahan\", \"Armenian String\", \"Aromes au Gene de Marc\",\n\n            \"Asadero\", \"Asiago\", \"Aubisque Pyrenees\", \"Autun\", \"Avaxtskyr\", \"Baby Swiss\",\n\n            \"Babybel\", \"Baguette Laonnaise\", \"Bakers\", \"Baladi\", \"Balaton\", \"Bandal\", \"Banon\",\n\n            \"Barry's Bay Cheddar\", \"Basing\", \"Basket Cheese\", \"Bath Cheese\", \"Bavarian Bergkase\",\n\n            \"Baylough\", \"Beaufort\", \"Beauvoorde\", \"Beenleigh Blue\", \"Beer Cheese\", \"Bel Paese\",\n\n            \"Bergader\", \"Bergere Bleue\", \"Berkswell\", \"Beyaz Peynir\", \"Bierkase\", \"Bishop Kennedy\",\n\n            \"Blarney\", \"Bleu d'Auvergne\", \"Bleu de Gex\", \"Bleu de Laqueuille\",\n\n            \"Bleu de Septmoncel\", \"Bleu Des Causses\", \"Blue\", \"Blue Castello\", \"Blue Rathgore\",\n\n            \"Blue Vein (Australian)\", \"Blue Vein Cheeses\", \"Bocconcini\", \"Bocconcini (Australian)\",\n\n            \"Boeren Leidenkaas\", \"Bonchester\", \"Bosworth\", \"Bougon\", \"Boule Du Roves\",\n\n            \"Boulette d'Avesnes\", \"Boursault\", \"Boursin\", \"Bouyssou\", \"Bra\", \"Braudostur\",\n\n            \"Breakfast Cheese\", \"Brebis du Lavort\", \"Brebis du Lochois\", \"Brebis du Puyfaucon\",\n\n            \"Bresse Bleu\", \"Brick\", \"Brie\", \"Brie de Meaux\", \"Brie de Melun\", \"Brillat-Savarin\",\n\n            \"Brin\", \"Brin d' Amour\", \"Brin d'Amour\", \"Brinza (Burduf Brinza)\",\n\n            \"Briquette de Brebis\", \"Briquette du Forez\", \"Broccio\", \"Broccio Demi-Affine\",\n\n            \"Brousse du Rove\", \"Bruder Basil\", \"Brusselae Kaas (Fromage de Bruxelles)\", \"Bryndza\",\n\n            \"Buchette d'Anjou\", \"Buffalo\", \"Burgos\", \"Butte\", \"Butterkase\", \"Button (Innes)\",\n\n            \"Buxton Blue\", \"Cabecou\", \"Caboc\", \"Cabrales\", \"Cachaille\", \"Caciocavallo\", \"Caciotta\",\n\n            \"Caerphilly\", \"Cairnsmore\", \"Calenzana\", \"Cambazola\", \"Camembert de Normandie\",\n\n            \"Canadian Cheddar\", \"Canestrato\", \"Cantal\", \"Caprice des Dieux\", \"Capricorn Goat\",\n\n            \"Capriole Banon\", \"Carre de l'Est\", \"Casciotta di Urbino\", \"Cashel Blue\", \"Castellano\",\n\n            \"Castelleno\", \"Castelmagno\", \"Castelo Branco\", \"Castigliano\", \"Cathelain\",\n\n            \"Celtic Promise\", \"Cendre d'Olivet\", \"Cerney\", \"Chabichou\", \"Chabichou du Poitou\",\n\n            \"Chabis de Gatine\", \"Chaource\", \"Charolais\", \"Chaumes\", \"Cheddar\",\n\n            \"Cheddar Clothbound\", \"Cheshire\", \"Chevres\", \"Chevrotin des Aravis\", \"Chontaleno\",\n\n            \"Civray\", \"Coeur de Camembert au Calvados\", \"Coeur de Chevre\", \"Colby\", \"Cold Pack\",\n\n            \"Comte\", \"Coolea\", \"Cooleney\", \"Coquetdale\", \"Corleggy\", \"Cornish Pepper\",\n\n            \"Cotherstone\", \"Cotija\", \"Cottage Cheese\", \"Cottage Cheese (Australian)\",\n\n            \"Cougar Gold\", \"Coulommiers\", \"Coverdale\", \"Crayeux de Roncq\", \"Cream Cheese\",\n\n            \"Cream Havarti\", \"Crema Agria\", \"Crema Mexicana\", \"Creme Fraiche\", \"Crescenza\",\n\n            \"Croghan\", \"Crottin de Chavignol\", \"Crottin du Chavignol\", \"Crowdie\", \"Crowley\",\n\n            \"Cuajada\", \"Curd\", \"Cure Nantais\", \"Curworthy\", \"Cwmtawe Pecorino\",\n\n            \"Cypress Grove Chevre\", \"Danablu (Danish Blue)\", \"Danbo\", \"Danish Fontina\",\n\n            \"Daralagjazsky\", \"Dauphin\", \"Delice des Fiouves\", \"Denhany Dorset Drum\", \"Derby\",\n\n            \"Dessertnyj Belyj\", \"Devon Blue\", \"Devon Garland\", \"Dolcelatte\", \"Doolin\",\n\n            \"Doppelrhamstufel\", \"Dorset Blue Vinney\", \"Double Gloucester\", \"Double Worcester\",\n\n            \"Dreux a la Feuille\", \"Dry Jack\", \"Duddleswell\", \"Dunbarra\", \"Dunlop\", \"Dunsyre Blue\",\n\n            \"Duroblando\", \"Durrus\", \"Dutch Mimolette (Commissiekaas)\", \"Edam\", \"Edelpilz\",\n\n            \"Emental Grand Cru\", \"Emlett\", \"Emmental\", \"Epoisses de Bourgogne\", \"Esbareich\",\n\n            \"Esrom\", \"Etorki\", \"Evansdale Farmhouse Brie\", \"Evora De L'Alentejo\", \"Exmoor Blue\",\n\n            \"Explorateur\", \"Feta\", \"Feta (Australian)\", \"Figue\", \"Filetta\", \"Fin-de-Siecle\",\n\n            \"Finlandia Swiss\", \"Finn\", \"Fiore Sardo\", \"Fleur du Maquis\", \"Flor de Guia\",\n\n            \"Flower Marie\", \"Folded\", \"Folded cheese with mint\", \"Fondant de Brebis\",\n\n            \"Fontainebleau\", \"Fontal\", \"Fontina Val d'Aosta\", \"Formaggio di capra\", \"Fougerus\",\n\n            \"Four Herb Gouda\", \"Fourme d' Ambert\", \"Fourme de Haute Loire\", \"Fourme de Montbrison\",\n\n            \"Fresh Jack\", \"Fresh Mozzarella\", \"Fresh Ricotta\", \"Fresh Truffles\", \"Fribourgeois\",\n\n            \"Friesekaas\", \"Friesian\", \"Friesla\", \"Frinault\", \"Fromage a Raclette\", \"Fromage Corse\",\n\n            \"Fromage de Montagne de Savoie\", \"Fromage Frais\", \"Fruit Cream Cheese\",\n\n            \"Frying Cheese\", \"Fynbo\", \"Gabriel\", \"Galette du Paludier\", \"Galette Lyonnaise\",\n\n            \"Galloway Goat's Milk Gems\", \"Gammelost\", \"Gaperon a l'Ail\", \"Garrotxa\", \"Gastanberra\",\n\n            \"Geitost\", \"Gippsland Blue\", \"Gjetost\", \"Gloucester\", \"Golden Cross\", \"Gorgonzola\",\n\n            \"Gornyaltajski\", \"Gospel Green\", \"Gouda\", \"Goutu\", \"Gowrie\", \"Grabetto\", \"Graddost\",\n\n            \"Grafton Village Cheddar\", \"Grana\", \"Grana Padano\", \"Grand Vatel\",\n\n            \"Grataron d' Areches\", \"Gratte-Paille\", \"Graviera\", \"Greuilh\", \"Greve\",\n\n            \"Gris de Lille\", \"Gruyere\", \"Gubbeen\", \"Guerbigny\", \"Halloumi\",\n\n            \"Halloumy (Australian)\", \"Haloumi-Style Cheese\", \"Harbourne Blue\", \"Havarti\",\n\n            \"Heidi Gruyere\", \"Hereford Hop\", \"Herrgardsost\", \"Herriot Farmhouse\", \"Herve\",\n\n            \"Hipi Iti\", \"Hubbardston Blue Cow\", \"Hushallsost\", \"Iberico\", \"Idaho Goatster\",\n\n            \"Idiazabal\", \"Il Boschetto al Tartufo\", \"Ile d'Yeu\", \"Isle of Mull\", \"Jarlsberg\",\n\n            \"Jermi Tortes\", \"Jibneh Arabieh\", \"Jindi Brie\", \"Jubilee Blue\", \"Juustoleipa\",\n\n            \"Kadchgall\", \"Kaseri\", \"Kashta\", \"Kefalotyri\", \"Kenafa\", \"Kernhem\", \"Kervella Affine\",\n\n            \"Kikorangi\", \"King Island Cape Wickham Brie\", \"King River Gold\", \"Klosterkaese\",\n\n            \"Knockalara\", \"Kugelkase\", \"L'Aveyronnais\", \"L'Ecir de l'Aubrac\", \"La Taupiniere\",\n\n            \"La Vache Qui Rit\", \"Laguiole\", \"Lairobell\", \"Lajta\", \"Lanark Blue\", \"Lancashire\",\n\n            \"Langres\", \"Lappi\", \"Laruns\", \"Lavistown\", \"Le Brin\", \"Le Fium Orbo\", \"Le Lacandou\",\n\n            \"Le Roule\", \"Leafield\", \"Lebbene\", \"Leerdammer\", \"Leicester\", \"Leyden\", \"Limburger\",\n\n            \"Lincolnshire Poacher\", \"Lingot Saint Bousquet d'Orb\", \"Liptauer\", \"Little Rydings\",\n\n            \"Livarot\", \"Llanboidy\", \"Llanglofan Farmhouse\", \"Loch Arthur Farmhouse\",\n\n            \"Loddiswell Avondale\", \"Longhorn\", \"Lou Palou\", \"Lou Pevre\", \"Lyonnais\", \"Maasdam\",\n\n            \"Macconais\", \"Mahoe Aged Gouda\", \"Mahon\", \"Malvern\", \"Mamirolle\", \"Manchego\",\n\n            \"Manouri\", \"Manur\", \"Marble Cheddar\", \"Marbled Cheeses\", \"Maredsous\", \"Margotin\",\n\n            \"Maribo\", \"Maroilles\", \"Mascares\", \"Mascarpone\", \"Mascarpone (Australian)\",\n\n            \"Mascarpone Torta\", \"Matocq\", \"Maytag Blue\", \"Meira\", \"Menallack Farmhouse\",\n\n            \"Menonita\", \"Meredith Blue\", \"Mesost\", \"Metton (Cancoillotte)\", \"Meyer Vintage Gouda\",\n\n            \"Mihalic Peynir\", \"Milleens\", \"Mimolette\", \"Mine-Gabhar\", \"Mini Baby Bells\", \"Mixte\",\n\n            \"Molbo\", \"Monastery Cheeses\", \"Mondseer\", \"Mont D'or Lyonnais\", \"Montasio\",\n\n            \"Monterey Jack\", \"Monterey Jack Dry\", \"Morbier\", \"Morbier Cru de Montagne\",\n\n            \"Mothais a la Feuille\", \"Mozzarella\", \"Mozzarella (Australian)\",\n\n            \"Mozzarella di Bufala\", \"Mozzarella Fresh, in water\", \"Mozzarella Rolls\", \"Munster\",\n\n            \"Murol\", \"Mycella\", \"Myzithra\", \"Naboulsi\", \"Nantais\", \"Neufchatel\",\n\n            \"Neufchatel (Australian)\", \"Niolo\", \"Nokkelost\", \"Northumberland\", \"Oaxaca\",\n\n            \"Olde York\", \"Olivet au Foin\", \"Olivet Bleu\", \"Olivet Cendre\",\n\n            \"Orkney Extra Mature Cheddar\", \"Orla\", \"Oschtjepka\", \"Ossau Fermier\", \"Ossau-Iraty\",\n\n            \"Oszczypek\", \"Oxford Blue\", \"P'tit Berrichon\", \"Palet de Babligny\", \"Paneer\", \"Panela\",\n\n            \"Pannerone\", \"Pant ys Gawn\", \"Parmesan (Parmigiano)\", \"Parmigiano Reggiano\",\n\n            \"Pas de l'Escalette\", \"Passendale\", \"Pasteurized Processed\", \"Pate de Fromage\",\n\n            \"Patefine Fort\", \"Pave d'Affinois\", \"Pave d'Auge\", \"Pave de Chirac\", \"Pave du Berry\",\n\n            \"Pecorino\", \"Pecorino in Walnut Leaves\", \"Pecorino Romano\", \"Peekskill Pyramid\",\n\n            \"Pelardon des Cevennes\", \"Pelardon des Corbieres\", \"Penamellera\", \"Penbryn\",\n\n            \"Pencarreg\", \"Perail de Brebis\", \"Petit Morin\", \"Petit Pardou\", \"Petit-Suisse\",\n\n            \"Picodon de Chevre\", \"Picos de Europa\", \"Piora\", \"Pithtviers au Foin\",\n\n            \"Plateau de Herve\", \"Plymouth Cheese\", \"Podhalanski\", \"Poivre d'Ane\", \"Polkolbin\",\n\n            \"Pont l'Eveque\", \"Port Nicholson\", \"Port-Salut\", \"Postel\", \"Pouligny-Saint-Pierre\",\n\n            \"Pourly\", \"Prastost\", \"Pressato\", \"Prince-Jean\", \"Processed Cheddar\", \"Provolone\",\n\n            \"Provolone (Australian)\", \"Pyengana Cheddar\", \"Pyramide\", \"Quark\",\n\n            \"Quark (Australian)\", \"Quartirolo Lombardo\", \"Quatre-Vents\", \"Quercy Petit\",\n\n            \"Queso Blanco\", \"Queso Blanco con Frutas --Pina y Mango\", \"Queso de Murcia\",\n\n            \"Queso del Montsec\", \"Queso del Tietar\", \"Queso Fresco\", \"Queso Fresco (Adobera)\",\n\n            \"Queso Iberico\", \"Queso Jalapeno\", \"Queso Majorero\", \"Queso Media Luna\",\n\n            \"Queso Para Frier\", \"Queso Quesadilla\", \"Rabacal\", \"Raclette\", \"Ragusano\", \"Raschera\",\n\n            \"Reblochon\", \"Red Leicester\", \"Regal de la Dombes\", \"Reggianito\", \"Remedou\",\n\n            \"Requeson\", \"Richelieu\", \"Ricotta\", \"Ricotta (Australian)\", \"Ricotta Salata\", \"Ridder\",\n\n            \"Rigotte\", \"Rocamadour\", \"Rollot\", \"Romano\", \"Romans Part Dieu\", \"Roncal\", \"Roquefort\",\n\n            \"Roule\", \"Rouleau De Beaulieu\", \"Royalp Tilsit\", \"Rubens\", \"Rustinu\", \"Saaland Pfarr\",\n\n            \"Saanenkaese\", \"Saga\", \"Sage Derby\", \"Sainte Maure\", \"Saint-Marcellin\",\n\n            \"Saint-Nectaire\", \"Saint-Paulin\", \"Salers\", \"Samso\", \"San Simon\", \"Sancerre\",\n\n            \"Sap Sago\", \"Sardo\", \"Sardo Egyptian\", \"Sbrinz\", \"Scamorza\", \"Schabzieger\", \"Schloss\",\n\n            \"Selles sur Cher\", \"Selva\", \"Serat\", \"Seriously Strong Cheddar\", \"Serra da Estrela\",\n\n            \"Sharpam\", \"Shelburne Cheddar\", \"Shropshire Blue\", \"Siraz\", \"Sirene\", \"Smoked Gouda\",\n\n            \"Somerset Brie\", \"Sonoma Jack\", \"Sottocenare al Tartufo\", \"Soumaintrain\",\n\n            \"Sourire Lozerien\", \"Spenwood\", \"Sraffordshire Organic\", \"St. Agur Blue Cheese\",\n\n            \"Stilton\", \"Stinking Bishop\", \"String\", \"Sussex Slipcote\", \"Sveciaost\", \"Swaledale\",\n\n            \"Sweet Style Swiss\", \"Swiss\", \"Syrian (Armenian String)\", \"Tala\", \"Taleggio\", \"Tamie\",\n\n            \"Tasmania Highland Chevre Log\", \"Taupiniere\", \"Teifi\", \"Telemea\", \"Testouri\",\n\n            \"Tete de Moine\", \"Tetilla\", \"Texas Goat Cheese\", \"Tibet\", \"Tillamook Cheddar\",\n\n            \"Tilsit\", \"Timboon Brie\", \"Toma\", \"Tomme Brulee\", \"Tomme d'Abondance\",\n\n            \"Tomme de Chevre\", \"Tomme de Romans\", \"Tomme de Savoie\", \"Tomme des Chouans\", \"Tommes\",\n\n            \"Torta del Casar\", \"Toscanello\", \"Touree de L'Aubier\", \"Tourmalet\",\n\n            \"Trappe (Veritable)\", \"Trois Cornes De Vendee\", \"Tronchon\", \"Trou du Cru\", \"Truffe\",\n\n            \"Tupi\", \"Turunmaa\", \"Tymsboro\", \"Tyn Grug\", \"Tyning\", \"Ubriaco\", \"Ulloa\",\n\n            \"Vacherin-Fribourgeois\", \"Valencay\", \"Vasterbottenost\", \"Venaco\", \"Vendomois\",\n\n            \"Vieux Corse\", \"Vignotte\", \"Vulscombe\", \"Waimata Farmhouse Blue\",\n\n            \"Washed Rind Cheese (Australian)\", \"Waterloo\", \"Weichkaese\", \"Wellington\",\n\n            \"Wensleydale\", \"White Stilton\", \"Whitestone Farmhouse\", \"Wigmore\", \"Woodside Cabecou\",\n\n            \"Xanadu\", \"Xynotyro\", \"Yarg Cornish\", \"Yarra Valley Pyramid\", \"Yorkshire Blue\",\n\n            \"Zamorano\", \"Zanetti Grana Padano\", \"Zanetti Parmigiano Reggiano\"\n\n    };\n\n \n\n    public static ArrayList<String> asList() {\n\n        ArrayList<String> items = new ArrayList<String>();\n\n        for (int i = 0, z = CHEESES.length ; i < z ; i++) {\n\n            items.add(CHEESES[i]);\n\n        }\n\n        return items;\n\n    }\n\n \n\n    /**\n\n     * Return a list of random cheeses.\n\n     *\n\n     * @param count the amount of cheeses to return.\n\n     */\n\n    public static ArrayList<String> randomList(int count) {\n\n        Random random = new Random();\n\n        HashSet<String> items = new HashSet<String>();\n\n \n\n        // Make sure that don't infinity loop\n\n        count = Math.min(count, CHEESES.length);\n\n \n\n        while (items.size() < count) {\n\n            items.add(CHEESES[random.nextInt(CHEESES.length)]);\n\n        }\n\n \n\n        return new ArrayList<String>(items);\n\n    }\n\n}\n  "},"logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "},"view":{"SlidingTabLayout.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.view;\n\n \n\nimport android.content.Context;\n\nimport android.graphics.Typeface;\n\nimport android.os.Build;\n\nimport android.support.v4.view.PagerAdapter;\n\nimport android.support.v4.view.ViewPager;\n\nimport android.util.AttributeSet;\n\nimport android.util.TypedValue;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.widget.HorizontalScrollView;\n\nimport android.widget.TextView;\n\n \n\n/**\n\n * To be used with ViewPager to provide a tab indicator component which give constant feedback as to\n\n * the user's scroll progress.\n\n * <p>\n\n * To use the component, simply add it to your view hierarchy. Then in your\n\n * {@link android.app.Activity} or {@link android.support.v4.app.Fragment} call\n\n * {@link #setViewPager(ViewPager)} providing it the ViewPager this layout is being used for.\n\n * <p>\n\n * The colors can be customized in two ways. The first and simplest is to provide an array of colors\n\n * via {@link #setSelectedIndicatorColors(int...)} and {@link #setDividerColors(int...)}. The\n\n * alternative is via the {@link TabColorizer} interface which provides you complete control over\n\n * which color is used for any individual position.\n\n * <p>\n\n * The views used as tabs can be customized by calling {@link #setCustomTabView(int, int)},\n\n * providing the layout ID of your custom layout.\n\n */\n\npublic class SlidingTabLayout extends HorizontalScrollView {\n\n \n\n    /**\n\n     * Allows complete control over the colors drawn in the tab layout. Set with\n\n     * {@link #setCustomTabColorizer(TabColorizer)}.\n\n     */\n\n    public interface TabColorizer {\n\n \n\n        /**\n\n         * @return return the color of the indicator used when {@code position} is selected.\n\n         */\n\n        int getIndicatorColor(int position);\n\n \n\n        /**\n\n         * @return return the color of the divider drawn to the right of {@code position}.\n\n         */\n\n        int getDividerColor(int position);\n\n \n\n    }\n\n \n\n    private static final int TITLE_OFFSET_DIPS = 24;\n\n    private static final int TAB_VIEW_PADDING_DIPS = 16;\n\n    private static final int TAB_VIEW_TEXT_SIZE_SP = 12;\n\n \n\n    private int mTitleOffset;\n\n \n\n    private int mTabViewLayoutId;\n\n    private int mTabViewTextViewId;\n\n \n\n    private ViewPager mViewPager;\n\n    private ViewPager.OnPageChangeListener mViewPagerPageChangeListener;\n\n \n\n    private final SlidingTabStrip mTabStrip;\n\n \n\n    public SlidingTabLayout(Context context) {\n\n        this(context, null);\n\n    }\n\n \n\n    public SlidingTabLayout(Context context, AttributeSet attrs) {\n\n        this(context, attrs, 0);\n\n    }\n\n \n\n    public SlidingTabLayout(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n \n\n        // Disable the Scroll Bar\n\n        setHorizontalScrollBarEnabled(false);\n\n        // Make sure that the Tab Strips fills this View\n\n        setFillViewport(true);\n\n \n\n        mTitleOffset = (int) (TITLE_OFFSET_DIPS * getResources().getDisplayMetrics().density);\n\n \n\n        mTabStrip = new SlidingTabStrip(context);\n\n        addView(mTabStrip, LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);\n\n    }\n\n \n\n    /**\n\n     * Set the custom {@link TabColorizer} to be used.\n\n     *\n\n     * If you only require simple custmisation then you can use\n\n     * {@link #setSelectedIndicatorColors(int...)} and {@link #setDividerColors(int...)} to achieve\n\n     * similar effects.\n\n     */\n\n    public void setCustomTabColorizer(TabColorizer tabColorizer) {\n\n        mTabStrip.setCustomTabColorizer(tabColorizer);\n\n    }\n\n \n\n    /**\n\n     * Sets the colors to be used for indicating the selected tab. These colors are treated as a\n\n     * circular array. Providing one color will mean that all tabs are indicated with the same color.\n\n     */\n\n    public void setSelectedIndicatorColors(int... colors) {\n\n        mTabStrip.setSelectedIndicatorColors(colors);\n\n    }\n\n \n\n    /**\n\n     * Sets the colors to be used for tab dividers. These colors are treated as a circular array.\n\n     * Providing one color will mean that all tabs are indicated with the same color.\n\n     */\n\n    public void setDividerColors(int... colors) {\n\n        mTabStrip.setDividerColors(colors);\n\n    }\n\n \n\n    /**\n\n     * Set the {@link ViewPager.OnPageChangeListener}. When using {@link SlidingTabLayout} you are\n\n     * required to set any {@link ViewPager.OnPageChangeListener} through this method. This is so\n\n     * that the layout can update it's scroll position correctly.\n\n     *\n\n     * @see ViewPager#setOnPageChangeListener(ViewPager.OnPageChangeListener)\n\n     */\n\n    public void setOnPageChangeListener(ViewPager.OnPageChangeListener listener) {\n\n        mViewPagerPageChangeListener = listener;\n\n    }\n\n \n\n    /**\n\n     * Set the custom layout to be inflated for the tab views.\n\n     *\n\n     * @param layoutResId Layout id to be inflated\n\n     * @param textViewId id of the {@link TextView} in the inflated view\n\n     */\n\n    public void setCustomTabView(int layoutResId, int textViewId) {\n\n        mTabViewLayoutId = layoutResId;\n\n        mTabViewTextViewId = textViewId;\n\n    }\n\n \n\n    /**\n\n     * Sets the associated view pager. Note that the assumption here is that the pager content\n\n     * (number of tabs and tab titles) does not change after this call has been made.\n\n     */\n\n    public void setViewPager(ViewPager viewPager) {\n\n        mTabStrip.removeAllViews();\n\n \n\n        mViewPager = viewPager;\n\n        if (viewPager != null) {\n\n            viewPager.setOnPageChangeListener(new InternalViewPagerListener());\n\n            populateTabStrip();\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Create a default view to be used for tabs. This is called if a custom tab view is not set via\n\n     * {@link #setCustomTabView(int, int)}.\n\n     */\n\n    protected TextView createDefaultTabView(Context context) {\n\n        TextView textView = new TextView(context);\n\n        textView.setGravity(Gravity.CENTER);\n\n        textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, TAB_VIEW_TEXT_SIZE_SP);\n\n        textView.setTypeface(Typeface.DEFAULT_BOLD);\n\n \n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {\n\n            // If we're running on Honeycomb or newer, then we can use the Theme's\n\n            // selectableItemBackground to ensure that the View has a pressed state\n\n            TypedValue outValue = new TypedValue();\n\n            getContext().getTheme().resolveAttribute(android.R.attr.selectableItemBackground,\n\n                    outValue, true);\n\n            textView.setBackgroundResource(outValue.resourceId);\n\n        }\n\n \n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {\n\n            // If we're running on ICS or newer, enable all-caps to match the Action Bar tab style\n\n            textView.setAllCaps(true);\n\n        }\n\n \n\n        int padding = (int) (TAB_VIEW_PADDING_DIPS * getResources().getDisplayMetrics().density);\n\n        textView.setPadding(padding, padding, padding, padding);\n\n \n\n        return textView;\n\n    }\n\n \n\n    private void populateTabStrip() {\n\n        final PagerAdapter adapter = mViewPager.getAdapter();\n\n        final View.OnClickListener tabClickListener = new TabClickListener();\n\n \n\n        for (int i = 0; i < adapter.getCount(); i++) {\n\n            View tabView = null;\n\n            TextView tabTitleView = null;\n\n \n\n            if (mTabViewLayoutId != 0) {\n\n                // If there is a custom tab view layout id set, try and inflate it\n\n                tabView = LayoutInflater.from(getContext()).inflate(mTabViewLayoutId, mTabStrip,\n\n                        false);\n\n                tabTitleView = (TextView) tabView.findViewById(mTabViewTextViewId);\n\n            }\n\n \n\n            if (tabView == null) {\n\n                tabView = createDefaultTabView(getContext());\n\n            }\n\n \n\n            if (tabTitleView == null && TextView.class.isInstance(tabView)) {\n\n                tabTitleView = (TextView) tabView;\n\n            }\n\n \n\n            tabTitleView.setText(adapter.getPageTitle(i));\n\n            tabView.setOnClickListener(tabClickListener);\n\n \n\n            mTabStrip.addView(tabView);\n\n        }\n\n    }\n\n \n\n    @Override\n\n    protected void onAttachedToWindow() {\n\n        super.onAttachedToWindow();\n\n \n\n        if (mViewPager != null) {\n\n            scrollToTab(mViewPager.getCurrentItem(), 0);\n\n        }\n\n    }\n\n \n\n    private void scrollToTab(int tabIndex, int positionOffset) {\n\n        final int tabStripChildCount = mTabStrip.getChildCount();\n\n        if (tabStripChildCount == 0 || tabIndex < 0 || tabIndex >= tabStripChildCount) {\n\n            return;\n\n        }\n\n \n\n        View selectedChild = mTabStrip.getChildAt(tabIndex);\n\n        if (selectedChild != null) {\n\n            int targetScrollX = selectedChild.getLeft() + positionOffset;\n\n \n\n            if (tabIndex > 0 || positionOffset > 0) {\n\n                // If we're not at the first child and are mid-scroll, make sure we obey the offset\n\n                targetScrollX -= mTitleOffset;\n\n            }\n\n \n\n            scrollTo(targetScrollX, 0);\n\n        }\n\n    }\n\n \n\n    private class InternalViewPagerListener implements ViewPager.OnPageChangeListener {\n\n        private int mScrollState;\n\n \n\n        @Override\n\n        public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\n\n            int tabStripChildCount = mTabStrip.getChildCount();\n\n            if ((tabStripChildCount == 0) || (position < 0) || (position >= tabStripChildCount)) {\n\n                return;\n\n            }\n\n \n\n            mTabStrip.onViewPagerPageChanged(position, positionOffset);\n\n \n\n            View selectedTitle = mTabStrip.getChildAt(position);\n\n            int extraOffset = (selectedTitle != null)\n\n                    ? (int) (positionOffset * selectedTitle.getWidth())\n\n                    : 0;\n\n            scrollToTab(position, extraOffset);\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageScrolled(position, positionOffset,\n\n                        positionOffsetPixels);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void onPageScrollStateChanged(int state) {\n\n            mScrollState = state;\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageScrollStateChanged(state);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void onPageSelected(int position) {\n\n            if (mScrollState == ViewPager.SCROLL_STATE_IDLE) {\n\n                mTabStrip.onViewPagerPageChanged(position, 0f);\n\n                scrollToTab(position, 0);\n\n            }\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageSelected(position);\n\n            }\n\n        }\n\n \n\n    }\n\n \n\n    private class TabClickListener implements View.OnClickListener {\n\n        @Override\n\n        public void onClick(View v) {\n\n            for (int i = 0; i < mTabStrip.getChildCount(); i++) {\n\n                if (v == mTabStrip.getChildAt(i)) {\n\n                    mViewPager.setCurrentItem(i);\n\n                    return;\n\n                }\n\n            }\n\n        }\n\n    }\n\n \n\n}\n  ","SlidingTabStrip.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.view;\n\n \n\nimport android.R;\n\nimport android.content.Context;\n\nimport android.graphics.Canvas;\n\nimport android.graphics.Color;\n\nimport android.graphics.Paint;\n\nimport android.util.AttributeSet;\n\nimport android.util.TypedValue;\n\nimport android.view.View;\n\nimport android.widget.LinearLayout;\n\n \n\nclass SlidingTabStrip extends LinearLayout {\n\n \n\n    private static final int DEFAULT_BOTTOM_BORDER_THICKNESS_DIPS = 2;\n\n    private static final byte DEFAULT_BOTTOM_BORDER_COLOR_ALPHA = 0x26;\n\n    private static final int SELECTED_INDICATOR_THICKNESS_DIPS = 8;\n\n    private static final int DEFAULT_SELECTED_INDICATOR_COLOR = 0xFF33B5E5;\n\n \n\n    private static final int DEFAULT_DIVIDER_THICKNESS_DIPS = 1;\n\n    private static final byte DEFAULT_DIVIDER_COLOR_ALPHA = 0x20;\n\n    private static final float DEFAULT_DIVIDER_HEIGHT = 0.5f;\n\n \n\n    private final int mBottomBorderThickness;\n\n    private final Paint mBottomBorderPaint;\n\n \n\n    private final int mSelectedIndicatorThickness;\n\n    private final Paint mSelectedIndicatorPaint;\n\n \n\n    private final int mDefaultBottomBorderColor;\n\n \n\n    private final Paint mDividerPaint;\n\n    private final float mDividerHeight;\n\n \n\n    private int mSelectedPosition;\n\n    private float mSelectionOffset;\n\n \n\n    private SlidingTabLayout.TabColorizer mCustomTabColorizer;\n\n    private final SimpleTabColorizer mDefaultTabColorizer;\n\n \n\n    SlidingTabStrip(Context context) {\n\n        this(context, null);\n\n    }\n\n \n\n    SlidingTabStrip(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n        setWillNotDraw(false);\n\n \n\n        final float density = getResources().getDisplayMetrics().density;\n\n \n\n        TypedValue outValue = new TypedValue();\n\n        context.getTheme().resolveAttribute(R.attr.colorForeground, outValue, true);\n\n        final int themeForegroundColor =  outValue.data;\n\n \n\n        mDefaultBottomBorderColor = setColorAlpha(themeForegroundColor,\n\n                DEFAULT_BOTTOM_BORDER_COLOR_ALPHA);\n\n \n\n        mDefaultTabColorizer = new SimpleTabColorizer();\n\n        mDefaultTabColorizer.setIndicatorColors(DEFAULT_SELECTED_INDICATOR_COLOR);\n\n        mDefaultTabColorizer.setDividerColors(setColorAlpha(themeForegroundColor,\n\n                DEFAULT_DIVIDER_COLOR_ALPHA));\n\n \n\n        mBottomBorderThickness = (int) (DEFAULT_BOTTOM_BORDER_THICKNESS_DIPS * density);\n\n        mBottomBorderPaint = new Paint();\n\n        mBottomBorderPaint.setColor(mDefaultBottomBorderColor);\n\n \n\n        mSelectedIndicatorThickness = (int) (SELECTED_INDICATOR_THICKNESS_DIPS * density);\n\n        mSelectedIndicatorPaint = new Paint();\n\n \n\n        mDividerHeight = DEFAULT_DIVIDER_HEIGHT;\n\n        mDividerPaint = new Paint();\n\n        mDividerPaint.setStrokeWidth((int) (DEFAULT_DIVIDER_THICKNESS_DIPS * density));\n\n    }\n\n \n\n    void setCustomTabColorizer(SlidingTabLayout.TabColorizer customTabColorizer) {\n\n        mCustomTabColorizer = customTabColorizer;\n\n        invalidate();\n\n    }\n\n \n\n    void setSelectedIndicatorColors(int... colors) {\n\n        // Make sure that the custom colorizer is removed\n\n        mCustomTabColorizer = null;\n\n        mDefaultTabColorizer.setIndicatorColors(colors);\n\n        invalidate();\n\n    }\n\n \n\n    void setDividerColors(int... colors) {\n\n        // Make sure that the custom colorizer is removed\n\n        mCustomTabColorizer = null;\n\n        mDefaultTabColorizer.setDividerColors(colors);\n\n        invalidate();\n\n    }\n\n \n\n    void onViewPagerPageChanged(int position, float positionOffset) {\n\n        mSelectedPosition = position;\n\n        mSelectionOffset = positionOffset;\n\n        invalidate();\n\n    }\n\n \n\n    @Override\n\n    protected void onDraw(Canvas canvas) {\n\n        final int height = getHeight();\n\n        final int childCount = getChildCount();\n\n        final int dividerHeightPx = (int) (Math.min(Math.max(0f, mDividerHeight), 1f) * height);\n\n        final SlidingTabLayout.TabColorizer tabColorizer = mCustomTabColorizer != null\n\n                ? mCustomTabColorizer\n\n                : mDefaultTabColorizer;\n\n \n\n        // Thick colored underline below the current selection\n\n        if (childCount > 0) {\n\n            View selectedTitle = getChildAt(mSelectedPosition);\n\n            int left = selectedTitle.getLeft();\n\n            int right = selectedTitle.getRight();\n\n            int color = tabColorizer.getIndicatorColor(mSelectedPosition);\n\n \n\n            if (mSelectionOffset > 0f && mSelectedPosition < (getChildCount() - 1)) {\n\n                int nextColor = tabColorizer.getIndicatorColor(mSelectedPosition + 1);\n\n                if (color != nextColor) {\n\n                    color = blendColors(nextColor, color, mSelectionOffset);\n\n                }\n\n \n\n                // Draw the selection partway between the tabs\n\n                View nextTitle = getChildAt(mSelectedPosition + 1);\n\n                left = (int) (mSelectionOffset * nextTitle.getLeft() +\n\n                        (1.0f - mSelectionOffset) * left);\n\n                right = (int) (mSelectionOffset * nextTitle.getRight() +\n\n                        (1.0f - mSelectionOffset) * right);\n\n            }\n\n \n\n            mSelectedIndicatorPaint.setColor(color);\n\n \n\n            canvas.drawRect(left, height - mSelectedIndicatorThickness, right,\n\n                    height, mSelectedIndicatorPaint);\n\n        }\n\n \n\n        // Thin underline along the entire bottom edge\n\n        canvas.drawRect(0, height - mBottomBorderThickness, getWidth(), height, mBottomBorderPaint);\n\n \n\n        // Vertical separators between the titles\n\n        int separatorTop = (height - dividerHeightPx) / 2;\n\n        for (int i = 0; i < childCount - 1; i++) {\n\n            View child = getChildAt(i);\n\n            mDividerPaint.setColor(tabColorizer.getDividerColor(i));\n\n            canvas.drawLine(child.getRight(), separatorTop, child.getRight(),\n\n                    separatorTop + dividerHeightPx, mDividerPaint);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Set the alpha value of the {@code color} to be the given {@code alpha} value.\n\n     */\n\n    private static int setColorAlpha(int color, byte alpha) {\n\n        return Color.argb(alpha, Color.red(color), Color.green(color), Color.blue(color));\n\n    }\n\n \n\n    /**\n\n     * Blend {@code color1} and {@code color2} using the given ratio.\n\n     *\n\n     * @param ratio of which to blend. 1.0 will return {@code color1}, 0.5 will give an even blend,\n\n     *              0.0 will return {@code color2}.\n\n     */\n\n    private static int blendColors(int color1, int color2, float ratio) {\n\n        final float inverseRation = 1f - ratio;\n\n        float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRation);\n\n        float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRation);\n\n        float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRation);\n\n        return Color.rgb((int) r, (int) g, (int) b);\n\n    }\n\n \n\n    private static class SimpleTabColorizer implements SlidingTabLayout.TabColorizer {\n\n        private int[] mIndicatorColors;\n\n        private int[] mDividerColors;\n\n \n\n        @Override\n\n        public final int getIndicatorColor(int position) {\n\n            return mIndicatorColors[position % mIndicatorColors.length];\n\n        }\n\n \n\n        @Override\n\n        public final int getDividerColor(int position) {\n\n            return mDividerColors[position % mDividerColors.length];\n\n        }\n\n \n\n        void setIndicatorColors(int... colors) {\n\n            mIndicatorColors = colors;\n\n        }\n\n \n\n        void setDividerColors(int... colors) {\n\n            mDividerColors = colors;\n\n        }\n\n    }\n\n}\n  "}},"com.example.android.swiperefreshlayoutbasic":{"MainActivity.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.swiperefreshlayoutbasic;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentTransaction;\n\nimport android.view.Menu;\n\nimport android.view.MenuItem;\n\nimport android.widget.ViewAnimator;\n\n \n\nimport com.example.android.common.activities.SampleActivityBase;\n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogFragment;\n\nimport com.example.android.common.logger.LogWrapper;\n\nimport com.example.android.common.logger.MessageOnlyLogFilter;\n\n \n\n/**\n\n * A simple launcher activity containing a summary sample description, sample log and a custom\n\n * {@link android.support.v4.app.Fragment} which can display a view.\n\n * <p>\n\n * For devices with displays with a width of 720dp or greater, the sample log is always visible,\n\n * on other devices it's visibility is controlled by an item on the Action Bar.\n\n */\n\npublic class MainActivity extends SampleActivityBase {\n\n \n\n    public static final String TAG = \"MainActivity\";\n\n \n\n    // Whether the Log Fragment is currently shown\n\n    private boolean mLogShown;\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_main);\n\n \n\n        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n\n        SwipeRefreshLayoutBasicFragment fragment = new SwipeRefreshLayoutBasicFragment();\n\n        transaction.replace(R.id.sample_content_fragment, fragment);\n\n        transaction.commit();\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        getMenuInflater().inflate(R.menu.main, menu);\n\n        return true;\n\n    }\n\n \n\n    @Override\n\n    public boolean onPrepareOptionsMenu(Menu menu) {\n\n        MenuItem logToggle = menu.findItem(R.id.menu_toggle_log);\n\n        logToggle.setVisible(findViewById(R.id.sample_output) instanceof ViewAnimator);\n\n        logToggle.setTitle(mLogShown ? R.string.sample_hide_log : R.string.sample_show_log);\n\n \n\n        return super.onPrepareOptionsMenu(menu);\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch(item.getItemId()) {\n\n            case R.id.menu_toggle_log:\n\n                mLogShown = !mLogShown;\n\n                ViewAnimator output = (ViewAnimator) findViewById(R.id.sample_output);\n\n                if (mLogShown) {\n\n                    output.setDisplayedChild(1);\n\n                } else {\n\n                    output.setDisplayedChild(0);\n\n                }\n\n                supportInvalidateOptionsMenu();\n\n                return true;\n\n        }\n\n        return super.onOptionsItemSelected(item);\n\n    }\n\n \n\n    /** Create a chain of targets that will receive log data */\n\n    @Override\n\n    public void initializeLogging() {\n\n        // Wraps Android's native log framework.\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        Log.setLogNode(logWrapper);\n\n \n\n        // Filter strips out everything except the message text.\n\n        MessageOnlyLogFilter msgFilter = new MessageOnlyLogFilter();\n\n        logWrapper.setNext(msgFilter);\n\n \n\n        // On screen logging via a fragment with a TextView.\n\n        LogFragment logFragment = (LogFragment) getSupportFragmentManager()\n\n                .findFragmentById(R.id.log_fragment);\n\n        msgFilter.setNext(logFragment.getLogView());\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  ","SwipeRefreshLayoutBasicFragment.java":"\n    \n\n/*\n\n * Copyright 2014 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *       http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.swiperefreshlayoutbasic;\n\n \n\nimport com.example.android.common.dummydata.Cheeses;\n\nimport com.example.android.common.logger.Log;\n\n \n\nimport android.os.AsyncTask;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.support.v4.widget.SwipeRefreshLayout;\n\nimport android.view.LayoutInflater;\n\nimport android.view.Menu;\n\nimport android.view.MenuInflater;\n\nimport android.view.MenuItem;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ArrayAdapter;\n\nimport android.widget.ListView;\n\n \n\nimport java.util.List;\n\n \n\n/**\n\n * A basic sample that shows how to use {@link android.support.v4.widget.SwipeRefreshLayout} to add\n\n * the 'swipe-to-refresh' gesture to a layout. In this sample, SwipeRefreshLayout contains a\n\n * scrollable {@link android.widget.ListView} as its only child.\n\n *\n\n * <p>To provide an accessible way to trigger the refresh, this app also provides a refresh\n\n * action item.\n\n *\n\n * <p>In this sample app, the refresh updates the ListView with a random set of new items.\n\n */\n\npublic class SwipeRefreshLayoutBasicFragment extends Fragment {\n\n \n\n    private static final String LOG_TAG = SwipeRefreshLayoutBasicFragment.class.getSimpleName();\n\n \n\n    private static final int LIST_ITEM_COUNT = 20;\n\n \n\n    /**\n\n     * The {@link android.support.v4.widget.SwipeRefreshLayout} that detects swipe gestures and\n\n     * triggers callbacks in the app.\n\n     */\n\n    private SwipeRefreshLayout mSwipeRefreshLayout;\n\n \n\n    /**\n\n     * The {@link android.widget.ListView} that displays the content that should be refreshed.\n\n     */\n\n    private ListView mListView;\n\n \n\n    /**\n\n     * The {@link android.widget.ListAdapter} used to populate the {@link android.widget.ListView}\n\n     * defined in the previous statement.\n\n     */\n\n    private ArrayAdapter<String> mListAdapter;\n\n \n\n    @Override\n\n    public void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n \n\n        // Notify the system to allow an options menu for this fragment.\n\n        setHasOptionsMenu(true);\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n            Bundle savedInstanceState) {\n\n        View view = inflater.inflate(R.layout.fragment_sample, container, false);\n\n \n\n        // Retrieve the SwipeRefreshLayout and ListView instances\n\n        mSwipeRefreshLayout = (SwipeRefreshLayout) view.findViewById(R.id.swiperefresh);\n\n \n\n        // Set the color scheme of the SwipeRefreshLayout by providing 4 color resource ids\n\n        mSwipeRefreshLayout.setColorScheme(\n\n                R.color.swipe_color_1, R.color.swipe_color_2,\n\n                R.color.swipe_color_3, R.color.swipe_color_4);\n\n \n\n        // Retrieve the ListView\n\n        mListView = (ListView) view.findViewById(android.R.id.list);\n\n \n\n        return view;\n\n    }\n\n \n\n    @Override\n\n    public void onViewCreated(View view, Bundle savedInstanceState) {\n\n        super.onViewCreated(view, savedInstanceState);\n\n \n\n        /**\n\n         * Create an ArrayAdapter to contain the data for the ListView. Each item in the ListView\n\n         * uses the system-defined simple_list_item_1 layout that contains one TextView.\n\n         */\n\n        mListAdapter = new ArrayAdapter<String>(\n\n                getActivity(),\n\n                android.R.layout.simple_list_item_1,\n\n                android.R.id.text1,\n\n                Cheeses.randomList(LIST_ITEM_COUNT));\n\n \n\n        // Set the adapter between the ListView and its backing data.\n\n        mListView.setAdapter(mListAdapter);\n\n \n\n        /**\n\n         * Implement {@link SwipeRefreshLayout.OnRefreshListener}. When users do the \"swipe to\n\n         * refresh\" gesture, SwipeRefreshLayout invokes\n\n         * {@link SwipeRefreshLayout.OnRefreshListener#onRefresh onRefresh()}. In\n\n         * {@link SwipeRefreshLayout.OnRefreshListener#onRefresh onRefresh()}, call a method that\n\n         * refreshes the content. Call the same method in response to the Refresh action from the\n\n         * action bar.\n\n         */\n\n        mSwipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\n\n            @Override\n\n            public void onRefresh() {\n\n                Log.i(LOG_TAG, \"onRefresh called from SwipeRefreshLayout\");\n\n \n\n                initiateRefresh();\n\n            }\n\n        });\n\n    }\n\n \n\n    @Override\n\n    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {\n\n        inflater.inflate(R.menu.main_menu, menu);\n\n    }\n\n \n\n    /**\n\n     * Respond to the user's selection of the Refresh action item. Start the SwipeRefreshLayout\n\n     * progress bar, then initiate the background task that refreshes the content.\n\n     */\n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch (item.getItemId()) {\n\n            case R.id.menu_refresh:\n\n                Log.i(LOG_TAG, \"Refresh menu item selected\");\n\n \n\n                // We make sure that the SwipeRefreshLayout is displaying it's refreshing indicator\n\n                if (!mSwipeRefreshLayout.isRefreshing()) {\n\n                    mSwipeRefreshLayout.setRefreshing(true);\n\n                }\n\n \n\n                // Start our refresh background task\n\n                initiateRefresh();\n\n \n\n                return true;\n\n        }\n\n \n\n        return super.onOptionsItemSelected(item);\n\n    }\n\n \n\n    /**\n\n     * By abstracting the refresh process to a single method, the app allows both the\n\n     * SwipeGestureLayout onRefresh() method and the Refresh action item to refresh the content.\n\n     */\n\n    private void initiateRefresh() {\n\n        Log.i(LOG_TAG, \"initiateRefresh\");\n\n \n\n        /**\n\n         * Execute the background task, which uses {@link android.os.AsyncTask} to load the data.\n\n         */\n\n        new DummyBackgroundTask().execute();\n\n    }\n\n \n\n    /**\n\n     * When the AsyncTask finishes, it calls onRefreshComplete(), which updates the data in the\n\n     * ListAdapter and turns off the progress bar.\n\n     */\n\n    private void onRefreshComplete(List<String> result) {\n\n        Log.i(LOG_TAG, \"onRefreshComplete\");\n\n \n\n        // Remove all items from the ListAdapter, and then replace them with the new items\n\n        mListAdapter.clear();\n\n        for (String cheese : result) {\n\n            mListAdapter.add(cheese);\n\n        }\n\n \n\n        // Stop the refreshing indicator\n\n        mSwipeRefreshLayout.setRefreshing(false);\n\n    }\n\n \n\n    /**\n\n     * Dummy {@link AsyncTask} which simulates a long running task to fetch new cheeses.\n\n     */\n\n    private class DummyBackgroundTask extends AsyncTask<Void, Void, List<String>> {\n\n \n\n        static final int TASK_DURATION = 3 * 1000; // 3 seconds\n\n \n\n        @Override\n\n        protected List<String> doInBackground(Void... params) {\n\n            // Sleep for a small amount of time to simulate a background-task\n\n            try {\n\n                Thread.sleep(TASK_DURATION);\n\n            } catch (InterruptedException e) {\n\n                e.printStackTrace();\n\n            }\n\n \n\n            // Return a new random list of cheeses\n\n            return Cheeses.randomList(LIST_ITEM_COUNT);\n\n        }\n\n \n\n        @Override\n\n        protected void onPostExecute(List<String> result) {\n\n            super.onPostExecute(result);\n\n \n\n            // Tell the Fragment that the refresh has completed\n\n            onRefreshComplete(result);\n\n        }\n\n \n\n    }\n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.swiperefreshlayoutbasic\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk android:minSdkVersion=\"10\" android:targetSdkVersion=\"17\" />\n\n \n\n    <application android:allowBackup=\"true\"\n\n        android:label=\"@string/app_name\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:theme=\"@style/AppTheme\">\n\n \n\n        <activity android:name=\".MainActivity\"\n\n                  android:label=\"@string/app_name\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n \n\n</manifest>\n  "},"SwipeRefreshListFragment":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com/samples/SwipeRefreshListFragment/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com/samples/SwipeRefreshListFragment/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com/samples/SwipeRefreshListFragment/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com/samples/SwipeRefreshListFragment/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com/samples/SwipeRefreshListFragment/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"vertical\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <ViewAnimator\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\"\n\n          android:layout_weight=\"1\">\n\n \n\n        <ScrollView\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingRight=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingTop=\"@dimen/vertical_page_margin\"\n\n                  android:paddingBottom=\"@dimen/vertical_page_margin\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </ScrollView>\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\" />\n\n \n\n    </ViewAnimator>\n\n \n\n    <View\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"1dp\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\" />\n\n \n\n</LinearLayout>\n\n \n  "},"layout-w720dp":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"horizontal\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <LinearLayout\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\"\n\n          android:layout_weight=\"1\"\n\n          android:orientation=\"vertical\">\n\n \n\n        <FrameLayout\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"wrap_content\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/margin_medium\"\n\n                  android:paddingRight=\"@dimen/margin_medium\"\n\n                  android:paddingTop=\"@dimen/margin_large\"\n\n                  android:paddingBottom=\"@dimen/margin_large\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </FrameLayout>\n\n \n\n        <View\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"1dp\"\n\n              android:background=\"@android:color/darker_gray\" />\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"0px\"\n\n              android:layout_weight=\"1\" />\n\n \n\n    </LinearLayout>\n\n \n\n    <View\n\n          android:layout_width=\"1dp\"\n\n          android:layout_height=\"match_parent\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\" />\n\n \n\n</LinearLayout>\n\n \n\n \n  "},"menu":{"main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:id=\"@+id/menu_toggle_log\"\n\n          android:showAsAction=\"always\"\n\n          android:title=\"@string/sample_show_log\" />\n\n</menu>\n  ","main_menu.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n \n\n    <!--\n\n        A color scheme menu item used for demonstrating the use of SwipeRefreshLayout's color\n\n        scheme functionality. This kind of menu item should not be incorporated into your app,\n\n        it just to demonstrate the use of color. Instead you should choose a color scheme based\n\n        off of your application's branding.\n\n    -->\n\n    <item\n\n          android:id=\"@+id/menu_color_scheme\"\n\n          android:title=\"@string/menu_color_scheme\"\n\n          android:showAsAction=\"ifRoom\">\n\n        <menu>\n\n            <group android:checkableBehavior=\"single\">\n\n \n\n                <item\n\n                      android:id=\"@+id/menu_color_scheme_1\"\n\n                      android:title=\"@string/menu_color_scheme_1\" />\n\n \n\n                <item\n\n                      android:id=\"@+id/menu_color_scheme_2\"\n\n                      android:title=\"@string/menu_color_scheme_2\" />\n\n \n\n                <item\n\n                      android:id=\"@+id/menu_color_scheme_3\"\n\n                      android:title=\"@string/menu_color_scheme_3\" />\n\n \n\n            </group>\n\n        </menu>\n\n    </item>\n\n \n\n    <!--\n\n        Refresh action item which should be presented in the Action Bar's overflow area\n\n        by setting showAsAction='never'. This is so that users which are not using touch input\n\n        can still perform a refresh.\n\n    -->\n\n    <item\n\n          android:id=\"@+id/menu_refresh\"\n\n          android:title=\"@string/menu_refresh\"\n\n          android:showAsAction=\"never\" />\n\n \n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">SwipeRefreshListFragment</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            A sample which shows how to use SwipeRefreshLayout within a ListFragment to add the\n\n            \\'swipe-to-refresh\\' gesture to a ListView, enabling the ability to trigger a refresh\n\n            from swiping down on that view. This is provided through the re-usable\n\n            SwipeRefreshListFragment class.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","colors.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <!--\n\n        These are the different color schemes to be displayed by the SwipeRefreshLayout's loading\n\n        indicator. It expects exactly four colors.\n\n \n\n        Color scheme #1: a selection of holo colors.\n\n        Color scheme #2: a graduation of holo blue.\n\n        Color scheme #3: a graduation of holo green.\n\n    -->\n\n \n\n    <color name=\"color_scheme_1_1\">#33B5E5</color>\n\n    <color name=\"color_scheme_1_2\">#99CC00</color>\n\n    <color name=\"color_scheme_1_3\">#FFBB33</color>\n\n    <color name=\"color_scheme_1_4\">#FF4444</color>\n\n \n\n    <color name=\"color_scheme_2_1\">#6DCAEC</color>\n\n    <color name=\"color_scheme_2_2\">#33B5E5</color>\n\n    <color name=\"color_scheme_2_3\">#24ADDE</color>\n\n    <color name=\"color_scheme_2_4\">#16A5D7</color>\n\n \n\n    <color name=\"color_scheme_3_1\">#B6DB49</color>\n\n    <color name=\"color_scheme_3_2\">#99CC00</color>\n\n    <color name=\"color_scheme_3_3\">#8ABD00</color>\n\n    <color name=\"color_scheme_3_4\">#7CAF00</color>\n\n \n\n</resources>\n  ","strings.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<resources>\n\n    <string name=\"sample_show_log\">Show Log</string>\n\n    <string name=\"sample_hide_log\">Hide Log</string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.common":{"activities":{"SampleActivityBase.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\npackage com.example.android.common.activities;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentActivity;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogWrapper;\n\n \n\n/**\n\n * Base launcher activity, to handle most of the common plumbing for samples.\n\n */\n\npublic class SampleActivityBase extends FragmentActivity {\n\n \n\n    public static final String TAG = \"SampleActivityBase\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n    }\n\n \n\n    @Override\n\n    protected  void onStart() {\n\n        super.onStart();\n\n        initializeLogging();\n\n    }\n\n \n\n    /** Set up targets to receive log data */\n\n    public void initializeLogging() {\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        // Wraps Android's native log framework\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        Log.setLogNode(logWrapper);\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "},"dummydata":{"Cheeses.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.dummydata;\n\n \n\nimport java.util.ArrayList;\n\nimport java.util.HashSet;\n\nimport java.util.Random;\n\n \n\n/**\n\n * Dummy data.\n\n */\n\npublic class Cheeses {\n\n    static final String[] CHEESES = {\n\n            \"Abbaye de Belloc\", \"Abbaye du Mont des Cats\", \"Abertam\", \"Abondance\", \"Ackawi\",\n\n            \"Acorn\", \"Adelost\", \"Affidelice au Chablis\", \"Afuega'l Pitu\", \"Airag\", \"Airedale\",\n\n            \"Aisy Cendre\", \"Allgauer Emmentaler\", \"Alverca\", \"Ambert\", \"American Cheese\",\n\n            \"Ami du Chambertin\", \"Anejo Enchilado\", \"Anneau du Vic-Bilh\", \"Anthoriro\", \"Appenzell\",\n\n            \"Aragon\", \"Ardi Gasna\", \"Ardrahan\", \"Armenian String\", \"Aromes au Gene de Marc\",\n\n            \"Asadero\", \"Asiago\", \"Aubisque Pyrenees\", \"Autun\", \"Avaxtskyr\", \"Baby Swiss\",\n\n            \"Babybel\", \"Baguette Laonnaise\", \"Bakers\", \"Baladi\", \"Balaton\", \"Bandal\", \"Banon\",\n\n            \"Barry's Bay Cheddar\", \"Basing\", \"Basket Cheese\", \"Bath Cheese\", \"Bavarian Bergkase\",\n\n            \"Baylough\", \"Beaufort\", \"Beauvoorde\", \"Beenleigh Blue\", \"Beer Cheese\", \"Bel Paese\",\n\n            \"Bergader\", \"Bergere Bleue\", \"Berkswell\", \"Beyaz Peynir\", \"Bierkase\", \"Bishop Kennedy\",\n\n            \"Blarney\", \"Bleu d'Auvergne\", \"Bleu de Gex\", \"Bleu de Laqueuille\",\n\n            \"Bleu de Septmoncel\", \"Bleu Des Causses\", \"Blue\", \"Blue Castello\", \"Blue Rathgore\",\n\n            \"Blue Vein (Australian)\", \"Blue Vein Cheeses\", \"Bocconcini\", \"Bocconcini (Australian)\",\n\n            \"Boeren Leidenkaas\", \"Bonchester\", \"Bosworth\", \"Bougon\", \"Boule Du Roves\",\n\n            \"Boulette d'Avesnes\", \"Boursault\", \"Boursin\", \"Bouyssou\", \"Bra\", \"Braudostur\",\n\n            \"Breakfast Cheese\", \"Brebis du Lavort\", \"Brebis du Lochois\", \"Brebis du Puyfaucon\",\n\n            \"Bresse Bleu\", \"Brick\", \"Brie\", \"Brie de Meaux\", \"Brie de Melun\", \"Brillat-Savarin\",\n\n            \"Brin\", \"Brin d' Amour\", \"Brin d'Amour\", \"Brinza (Burduf Brinza)\",\n\n            \"Briquette de Brebis\", \"Briquette du Forez\", \"Broccio\", \"Broccio Demi-Affine\",\n\n            \"Brousse du Rove\", \"Bruder Basil\", \"Brusselae Kaas (Fromage de Bruxelles)\", \"Bryndza\",\n\n            \"Buchette d'Anjou\", \"Buffalo\", \"Burgos\", \"Butte\", \"Butterkase\", \"Button (Innes)\",\n\n            \"Buxton Blue\", \"Cabecou\", \"Caboc\", \"Cabrales\", \"Cachaille\", \"Caciocavallo\", \"Caciotta\",\n\n            \"Caerphilly\", \"Cairnsmore\", \"Calenzana\", \"Cambazola\", \"Camembert de Normandie\",\n\n            \"Canadian Cheddar\", \"Canestrato\", \"Cantal\", \"Caprice des Dieux\", \"Capricorn Goat\",\n\n            \"Capriole Banon\", \"Carre de l'Est\", \"Casciotta di Urbino\", \"Cashel Blue\", \"Castellano\",\n\n            \"Castelleno\", \"Castelmagno\", \"Castelo Branco\", \"Castigliano\", \"Cathelain\",\n\n            \"Celtic Promise\", \"Cendre d'Olivet\", \"Cerney\", \"Chabichou\", \"Chabichou du Poitou\",\n\n            \"Chabis de Gatine\", \"Chaource\", \"Charolais\", \"Chaumes\", \"Cheddar\",\n\n            \"Cheddar Clothbound\", \"Cheshire\", \"Chevres\", \"Chevrotin des Aravis\", \"Chontaleno\",\n\n            \"Civray\", \"Coeur de Camembert au Calvados\", \"Coeur de Chevre\", \"Colby\", \"Cold Pack\",\n\n            \"Comte\", \"Coolea\", \"Cooleney\", \"Coquetdale\", \"Corleggy\", \"Cornish Pepper\",\n\n            \"Cotherstone\", \"Cotija\", \"Cottage Cheese\", \"Cottage Cheese (Australian)\",\n\n            \"Cougar Gold\", \"Coulommiers\", \"Coverdale\", \"Crayeux de Roncq\", \"Cream Cheese\",\n\n            \"Cream Havarti\", \"Crema Agria\", \"Crema Mexicana\", \"Creme Fraiche\", \"Crescenza\",\n\n            \"Croghan\", \"Crottin de Chavignol\", \"Crottin du Chavignol\", \"Crowdie\", \"Crowley\",\n\n            \"Cuajada\", \"Curd\", \"Cure Nantais\", \"Curworthy\", \"Cwmtawe Pecorino\",\n\n            \"Cypress Grove Chevre\", \"Danablu (Danish Blue)\", \"Danbo\", \"Danish Fontina\",\n\n            \"Daralagjazsky\", \"Dauphin\", \"Delice des Fiouves\", \"Denhany Dorset Drum\", \"Derby\",\n\n            \"Dessertnyj Belyj\", \"Devon Blue\", \"Devon Garland\", \"Dolcelatte\", \"Doolin\",\n\n            \"Doppelrhamstufel\", \"Dorset Blue Vinney\", \"Double Gloucester\", \"Double Worcester\",\n\n            \"Dreux a la Feuille\", \"Dry Jack\", \"Duddleswell\", \"Dunbarra\", \"Dunlop\", \"Dunsyre Blue\",\n\n            \"Duroblando\", \"Durrus\", \"Dutch Mimolette (Commissiekaas)\", \"Edam\", \"Edelpilz\",\n\n            \"Emental Grand Cru\", \"Emlett\", \"Emmental\", \"Epoisses de Bourgogne\", \"Esbareich\",\n\n            \"Esrom\", \"Etorki\", \"Evansdale Farmhouse Brie\", \"Evora De L'Alentejo\", \"Exmoor Blue\",\n\n            \"Explorateur\", \"Feta\", \"Feta (Australian)\", \"Figue\", \"Filetta\", \"Fin-de-Siecle\",\n\n            \"Finlandia Swiss\", \"Finn\", \"Fiore Sardo\", \"Fleur du Maquis\", \"Flor de Guia\",\n\n            \"Flower Marie\", \"Folded\", \"Folded cheese with mint\", \"Fondant de Brebis\",\n\n            \"Fontainebleau\", \"Fontal\", \"Fontina Val d'Aosta\", \"Formaggio di capra\", \"Fougerus\",\n\n            \"Four Herb Gouda\", \"Fourme d' Ambert\", \"Fourme de Haute Loire\", \"Fourme de Montbrison\",\n\n            \"Fresh Jack\", \"Fresh Mozzarella\", \"Fresh Ricotta\", \"Fresh Truffles\", \"Fribourgeois\",\n\n            \"Friesekaas\", \"Friesian\", \"Friesla\", \"Frinault\", \"Fromage a Raclette\", \"Fromage Corse\",\n\n            \"Fromage de Montagne de Savoie\", \"Fromage Frais\", \"Fruit Cream Cheese\",\n\n            \"Frying Cheese\", \"Fynbo\", \"Gabriel\", \"Galette du Paludier\", \"Galette Lyonnaise\",\n\n            \"Galloway Goat's Milk Gems\", \"Gammelost\", \"Gaperon a l'Ail\", \"Garrotxa\", \"Gastanberra\",\n\n            \"Geitost\", \"Gippsland Blue\", \"Gjetost\", \"Gloucester\", \"Golden Cross\", \"Gorgonzola\",\n\n            \"Gornyaltajski\", \"Gospel Green\", \"Gouda\", \"Goutu\", \"Gowrie\", \"Grabetto\", \"Graddost\",\n\n            \"Grafton Village Cheddar\", \"Grana\", \"Grana Padano\", \"Grand Vatel\",\n\n            \"Grataron d' Areches\", \"Gratte-Paille\", \"Graviera\", \"Greuilh\", \"Greve\",\n\n            \"Gris de Lille\", \"Gruyere\", \"Gubbeen\", \"Guerbigny\", \"Halloumi\",\n\n            \"Halloumy (Australian)\", \"Haloumi-Style Cheese\", \"Harbourne Blue\", \"Havarti\",\n\n            \"Heidi Gruyere\", \"Hereford Hop\", \"Herrgardsost\", \"Herriot Farmhouse\", \"Herve\",\n\n            \"Hipi Iti\", \"Hubbardston Blue Cow\", \"Hushallsost\", \"Iberico\", \"Idaho Goatster\",\n\n            \"Idiazabal\", \"Il Boschetto al Tartufo\", \"Ile d'Yeu\", \"Isle of Mull\", \"Jarlsberg\",\n\n            \"Jermi Tortes\", \"Jibneh Arabieh\", \"Jindi Brie\", \"Jubilee Blue\", \"Juustoleipa\",\n\n            \"Kadchgall\", \"Kaseri\", \"Kashta\", \"Kefalotyri\", \"Kenafa\", \"Kernhem\", \"Kervella Affine\",\n\n            \"Kikorangi\", \"King Island Cape Wickham Brie\", \"King River Gold\", \"Klosterkaese\",\n\n            \"Knockalara\", \"Kugelkase\", \"L'Aveyronnais\", \"L'Ecir de l'Aubrac\", \"La Taupiniere\",\n\n            \"La Vache Qui Rit\", \"Laguiole\", \"Lairobell\", \"Lajta\", \"Lanark Blue\", \"Lancashire\",\n\n            \"Langres\", \"Lappi\", \"Laruns\", \"Lavistown\", \"Le Brin\", \"Le Fium Orbo\", \"Le Lacandou\",\n\n            \"Le Roule\", \"Leafield\", \"Lebbene\", \"Leerdammer\", \"Leicester\", \"Leyden\", \"Limburger\",\n\n            \"Lincolnshire Poacher\", \"Lingot Saint Bousquet d'Orb\", \"Liptauer\", \"Little Rydings\",\n\n            \"Livarot\", \"Llanboidy\", \"Llanglofan Farmhouse\", \"Loch Arthur Farmhouse\",\n\n            \"Loddiswell Avondale\", \"Longhorn\", \"Lou Palou\", \"Lou Pevre\", \"Lyonnais\", \"Maasdam\",\n\n            \"Macconais\", \"Mahoe Aged Gouda\", \"Mahon\", \"Malvern\", \"Mamirolle\", \"Manchego\",\n\n            \"Manouri\", \"Manur\", \"Marble Cheddar\", \"Marbled Cheeses\", \"Maredsous\", \"Margotin\",\n\n            \"Maribo\", \"Maroilles\", \"Mascares\", \"Mascarpone\", \"Mascarpone (Australian)\",\n\n            \"Mascarpone Torta\", \"Matocq\", \"Maytag Blue\", \"Meira\", \"Menallack Farmhouse\",\n\n            \"Menonita\", \"Meredith Blue\", \"Mesost\", \"Metton (Cancoillotte)\", \"Meyer Vintage Gouda\",\n\n            \"Mihalic Peynir\", \"Milleens\", \"Mimolette\", \"Mine-Gabhar\", \"Mini Baby Bells\", \"Mixte\",\n\n            \"Molbo\", \"Monastery Cheeses\", \"Mondseer\", \"Mont D'or Lyonnais\", \"Montasio\",\n\n            \"Monterey Jack\", \"Monterey Jack Dry\", \"Morbier\", \"Morbier Cru de Montagne\",\n\n            \"Mothais a la Feuille\", \"Mozzarella\", \"Mozzarella (Australian)\",\n\n            \"Mozzarella di Bufala\", \"Mozzarella Fresh, in water\", \"Mozzarella Rolls\", \"Munster\",\n\n            \"Murol\", \"Mycella\", \"Myzithra\", \"Naboulsi\", \"Nantais\", \"Neufchatel\",\n\n            \"Neufchatel (Australian)\", \"Niolo\", \"Nokkelost\", \"Northumberland\", \"Oaxaca\",\n\n            \"Olde York\", \"Olivet au Foin\", \"Olivet Bleu\", \"Olivet Cendre\",\n\n            \"Orkney Extra Mature Cheddar\", \"Orla\", \"Oschtjepka\", \"Ossau Fermier\", \"Ossau-Iraty\",\n\n            \"Oszczypek\", \"Oxford Blue\", \"P'tit Berrichon\", \"Palet de Babligny\", \"Paneer\", \"Panela\",\n\n            \"Pannerone\", \"Pant ys Gawn\", \"Parmesan (Parmigiano)\", \"Parmigiano Reggiano\",\n\n            \"Pas de l'Escalette\", \"Passendale\", \"Pasteurized Processed\", \"Pate de Fromage\",\n\n            \"Patefine Fort\", \"Pave d'Affinois\", \"Pave d'Auge\", \"Pave de Chirac\", \"Pave du Berry\",\n\n            \"Pecorino\", \"Pecorino in Walnut Leaves\", \"Pecorino Romano\", \"Peekskill Pyramid\",\n\n            \"Pelardon des Cevennes\", \"Pelardon des Corbieres\", \"Penamellera\", \"Penbryn\",\n\n            \"Pencarreg\", \"Perail de Brebis\", \"Petit Morin\", \"Petit Pardou\", \"Petit-Suisse\",\n\n            \"Picodon de Chevre\", \"Picos de Europa\", \"Piora\", \"Pithtviers au Foin\",\n\n            \"Plateau de Herve\", \"Plymouth Cheese\", \"Podhalanski\", \"Poivre d'Ane\", \"Polkolbin\",\n\n            \"Pont l'Eveque\", \"Port Nicholson\", \"Port-Salut\", \"Postel\", \"Pouligny-Saint-Pierre\",\n\n            \"Pourly\", \"Prastost\", \"Pressato\", \"Prince-Jean\", \"Processed Cheddar\", \"Provolone\",\n\n            \"Provolone (Australian)\", \"Pyengana Cheddar\", \"Pyramide\", \"Quark\",\n\n            \"Quark (Australian)\", \"Quartirolo Lombardo\", \"Quatre-Vents\", \"Quercy Petit\",\n\n            \"Queso Blanco\", \"Queso Blanco con Frutas --Pina y Mango\", \"Queso de Murcia\",\n\n            \"Queso del Montsec\", \"Queso del Tietar\", \"Queso Fresco\", \"Queso Fresco (Adobera)\",\n\n            \"Queso Iberico\", \"Queso Jalapeno\", \"Queso Majorero\", \"Queso Media Luna\",\n\n            \"Queso Para Frier\", \"Queso Quesadilla\", \"Rabacal\", \"Raclette\", \"Ragusano\", \"Raschera\",\n\n            \"Reblochon\", \"Red Leicester\", \"Regal de la Dombes\", \"Reggianito\", \"Remedou\",\n\n            \"Requeson\", \"Richelieu\", \"Ricotta\", \"Ricotta (Australian)\", \"Ricotta Salata\", \"Ridder\",\n\n            \"Rigotte\", \"Rocamadour\", \"Rollot\", \"Romano\", \"Romans Part Dieu\", \"Roncal\", \"Roquefort\",\n\n            \"Roule\", \"Rouleau De Beaulieu\", \"Royalp Tilsit\", \"Rubens\", \"Rustinu\", \"Saaland Pfarr\",\n\n            \"Saanenkaese\", \"Saga\", \"Sage Derby\", \"Sainte Maure\", \"Saint-Marcellin\",\n\n            \"Saint-Nectaire\", \"Saint-Paulin\", \"Salers\", \"Samso\", \"San Simon\", \"Sancerre\",\n\n            \"Sap Sago\", \"Sardo\", \"Sardo Egyptian\", \"Sbrinz\", \"Scamorza\", \"Schabzieger\", \"Schloss\",\n\n            \"Selles sur Cher\", \"Selva\", \"Serat\", \"Seriously Strong Cheddar\", \"Serra da Estrela\",\n\n            \"Sharpam\", \"Shelburne Cheddar\", \"Shropshire Blue\", \"Siraz\", \"Sirene\", \"Smoked Gouda\",\n\n            \"Somerset Brie\", \"Sonoma Jack\", \"Sottocenare al Tartufo\", \"Soumaintrain\",\n\n            \"Sourire Lozerien\", \"Spenwood\", \"Sraffordshire Organic\", \"St. Agur Blue Cheese\",\n\n            \"Stilton\", \"Stinking Bishop\", \"String\", \"Sussex Slipcote\", \"Sveciaost\", \"Swaledale\",\n\n            \"Sweet Style Swiss\", \"Swiss\", \"Syrian (Armenian String)\", \"Tala\", \"Taleggio\", \"Tamie\",\n\n            \"Tasmania Highland Chevre Log\", \"Taupiniere\", \"Teifi\", \"Telemea\", \"Testouri\",\n\n            \"Tete de Moine\", \"Tetilla\", \"Texas Goat Cheese\", \"Tibet\", \"Tillamook Cheddar\",\n\n            \"Tilsit\", \"Timboon Brie\", \"Toma\", \"Tomme Brulee\", \"Tomme d'Abondance\",\n\n            \"Tomme de Chevre\", \"Tomme de Romans\", \"Tomme de Savoie\", \"Tomme des Chouans\", \"Tommes\",\n\n            \"Torta del Casar\", \"Toscanello\", \"Touree de L'Aubier\", \"Tourmalet\",\n\n            \"Trappe (Veritable)\", \"Trois Cornes De Vendee\", \"Tronchon\", \"Trou du Cru\", \"Truffe\",\n\n            \"Tupi\", \"Turunmaa\", \"Tymsboro\", \"Tyn Grug\", \"Tyning\", \"Ubriaco\", \"Ulloa\",\n\n            \"Vacherin-Fribourgeois\", \"Valencay\", \"Vasterbottenost\", \"Venaco\", \"Vendomois\",\n\n            \"Vieux Corse\", \"Vignotte\", \"Vulscombe\", \"Waimata Farmhouse Blue\",\n\n            \"Washed Rind Cheese (Australian)\", \"Waterloo\", \"Weichkaese\", \"Wellington\",\n\n            \"Wensleydale\", \"White Stilton\", \"Whitestone Farmhouse\", \"Wigmore\", \"Woodside Cabecou\",\n\n            \"Xanadu\", \"Xynotyro\", \"Yarg Cornish\", \"Yarra Valley Pyramid\", \"Yorkshire Blue\",\n\n            \"Zamorano\", \"Zanetti Grana Padano\", \"Zanetti Parmigiano Reggiano\"\n\n    };\n\n \n\n    public static ArrayList<String> asList() {\n\n        ArrayList<String> items = new ArrayList<String>();\n\n        for (int i = 0, z = CHEESES.length ; i < z ; i++) {\n\n            items.add(CHEESES[i]);\n\n        }\n\n        return items;\n\n    }\n\n \n\n    /**\n\n     * Return a list of random cheeses.\n\n     *\n\n     * @param count the amount of cheeses to return.\n\n     */\n\n    public static ArrayList<String> randomList(int count) {\n\n        Random random = new Random();\n\n        HashSet<String> items = new HashSet<String>();\n\n \n\n        // Make sure that don't infinity loop\n\n        count = Math.min(count, CHEESES.length);\n\n \n\n        while (items.size() < count) {\n\n            items.add(CHEESES[random.nextInt(CHEESES.length)]);\n\n        }\n\n \n\n        return new ArrayList<String>(items);\n\n    }\n\n}\n  "},"logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "},"view":{"SlidingTabLayout.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.view;\n\n \n\nimport android.content.Context;\n\nimport android.graphics.Typeface;\n\nimport android.os.Build;\n\nimport android.support.v4.view.PagerAdapter;\n\nimport android.support.v4.view.ViewPager;\n\nimport android.util.AttributeSet;\n\nimport android.util.TypedValue;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.widget.HorizontalScrollView;\n\nimport android.widget.TextView;\n\n \n\n/**\n\n * To be used with ViewPager to provide a tab indicator component which give constant feedback as to\n\n * the user's scroll progress.\n\n * <p>\n\n * To use the component, simply add it to your view hierarchy. Then in your\n\n * {@link android.app.Activity} or {@link android.support.v4.app.Fragment} call\n\n * {@link #setViewPager(ViewPager)} providing it the ViewPager this layout is being used for.\n\n * <p>\n\n * The colors can be customized in two ways. The first and simplest is to provide an array of colors\n\n * via {@link #setSelectedIndicatorColors(int...)} and {@link #setDividerColors(int...)}. The\n\n * alternative is via the {@link TabColorizer} interface which provides you complete control over\n\n * which color is used for any individual position.\n\n * <p>\n\n * The views used as tabs can be customized by calling {@link #setCustomTabView(int, int)},\n\n * providing the layout ID of your custom layout.\n\n */\n\npublic class SlidingTabLayout extends HorizontalScrollView {\n\n \n\n    /**\n\n     * Allows complete control over the colors drawn in the tab layout. Set with\n\n     * {@link #setCustomTabColorizer(TabColorizer)}.\n\n     */\n\n    public interface TabColorizer {\n\n \n\n        /**\n\n         * @return return the color of the indicator used when {@code position} is selected.\n\n         */\n\n        int getIndicatorColor(int position);\n\n \n\n        /**\n\n         * @return return the color of the divider drawn to the right of {@code position}.\n\n         */\n\n        int getDividerColor(int position);\n\n \n\n    }\n\n \n\n    private static final int TITLE_OFFSET_DIPS = 24;\n\n    private static final int TAB_VIEW_PADDING_DIPS = 16;\n\n    private static final int TAB_VIEW_TEXT_SIZE_SP = 12;\n\n \n\n    private int mTitleOffset;\n\n \n\n    private int mTabViewLayoutId;\n\n    private int mTabViewTextViewId;\n\n \n\n    private ViewPager mViewPager;\n\n    private ViewPager.OnPageChangeListener mViewPagerPageChangeListener;\n\n \n\n    private final SlidingTabStrip mTabStrip;\n\n \n\n    public SlidingTabLayout(Context context) {\n\n        this(context, null);\n\n    }\n\n \n\n    public SlidingTabLayout(Context context, AttributeSet attrs) {\n\n        this(context, attrs, 0);\n\n    }\n\n \n\n    public SlidingTabLayout(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n \n\n        // Disable the Scroll Bar\n\n        setHorizontalScrollBarEnabled(false);\n\n        // Make sure that the Tab Strips fills this View\n\n        setFillViewport(true);\n\n \n\n        mTitleOffset = (int) (TITLE_OFFSET_DIPS * getResources().getDisplayMetrics().density);\n\n \n\n        mTabStrip = new SlidingTabStrip(context);\n\n        addView(mTabStrip, LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);\n\n    }\n\n \n\n    /**\n\n     * Set the custom {@link TabColorizer} to be used.\n\n     *\n\n     * If you only require simple custmisation then you can use\n\n     * {@link #setSelectedIndicatorColors(int...)} and {@link #setDividerColors(int...)} to achieve\n\n     * similar effects.\n\n     */\n\n    public void setCustomTabColorizer(TabColorizer tabColorizer) {\n\n        mTabStrip.setCustomTabColorizer(tabColorizer);\n\n    }\n\n \n\n    /**\n\n     * Sets the colors to be used for indicating the selected tab. These colors are treated as a\n\n     * circular array. Providing one color will mean that all tabs are indicated with the same color.\n\n     */\n\n    public void setSelectedIndicatorColors(int... colors) {\n\n        mTabStrip.setSelectedIndicatorColors(colors);\n\n    }\n\n \n\n    /**\n\n     * Sets the colors to be used for tab dividers. These colors are treated as a circular array.\n\n     * Providing one color will mean that all tabs are indicated with the same color.\n\n     */\n\n    public void setDividerColors(int... colors) {\n\n        mTabStrip.setDividerColors(colors);\n\n    }\n\n \n\n    /**\n\n     * Set the {@link ViewPager.OnPageChangeListener}. When using {@link SlidingTabLayout} you are\n\n     * required to set any {@link ViewPager.OnPageChangeListener} through this method. This is so\n\n     * that the layout can update it's scroll position correctly.\n\n     *\n\n     * @see ViewPager#setOnPageChangeListener(ViewPager.OnPageChangeListener)\n\n     */\n\n    public void setOnPageChangeListener(ViewPager.OnPageChangeListener listener) {\n\n        mViewPagerPageChangeListener = listener;\n\n    }\n\n \n\n    /**\n\n     * Set the custom layout to be inflated for the tab views.\n\n     *\n\n     * @param layoutResId Layout id to be inflated\n\n     * @param textViewId id of the {@link TextView} in the inflated view\n\n     */\n\n    public void setCustomTabView(int layoutResId, int textViewId) {\n\n        mTabViewLayoutId = layoutResId;\n\n        mTabViewTextViewId = textViewId;\n\n    }\n\n \n\n    /**\n\n     * Sets the associated view pager. Note that the assumption here is that the pager content\n\n     * (number of tabs and tab titles) does not change after this call has been made.\n\n     */\n\n    public void setViewPager(ViewPager viewPager) {\n\n        mTabStrip.removeAllViews();\n\n \n\n        mViewPager = viewPager;\n\n        if (viewPager != null) {\n\n            viewPager.setOnPageChangeListener(new InternalViewPagerListener());\n\n            populateTabStrip();\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Create a default view to be used for tabs. This is called if a custom tab view is not set via\n\n     * {@link #setCustomTabView(int, int)}.\n\n     */\n\n    protected TextView createDefaultTabView(Context context) {\n\n        TextView textView = new TextView(context);\n\n        textView.setGravity(Gravity.CENTER);\n\n        textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, TAB_VIEW_TEXT_SIZE_SP);\n\n        textView.setTypeface(Typeface.DEFAULT_BOLD);\n\n \n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {\n\n            // If we're running on Honeycomb or newer, then we can use the Theme's\n\n            // selectableItemBackground to ensure that the View has a pressed state\n\n            TypedValue outValue = new TypedValue();\n\n            getContext().getTheme().resolveAttribute(android.R.attr.selectableItemBackground,\n\n                    outValue, true);\n\n            textView.setBackgroundResource(outValue.resourceId);\n\n        }\n\n \n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {\n\n            // If we're running on ICS or newer, enable all-caps to match the Action Bar tab style\n\n            textView.setAllCaps(true);\n\n        }\n\n \n\n        int padding = (int) (TAB_VIEW_PADDING_DIPS * getResources().getDisplayMetrics().density);\n\n        textView.setPadding(padding, padding, padding, padding);\n\n \n\n        return textView;\n\n    }\n\n \n\n    private void populateTabStrip() {\n\n        final PagerAdapter adapter = mViewPager.getAdapter();\n\n        final View.OnClickListener tabClickListener = new TabClickListener();\n\n \n\n        for (int i = 0; i < adapter.getCount(); i++) {\n\n            View tabView = null;\n\n            TextView tabTitleView = null;\n\n \n\n            if (mTabViewLayoutId != 0) {\n\n                // If there is a custom tab view layout id set, try and inflate it\n\n                tabView = LayoutInflater.from(getContext()).inflate(mTabViewLayoutId, mTabStrip,\n\n                        false);\n\n                tabTitleView = (TextView) tabView.findViewById(mTabViewTextViewId);\n\n            }\n\n \n\n            if (tabView == null) {\n\n                tabView = createDefaultTabView(getContext());\n\n            }\n\n \n\n            if (tabTitleView == null && TextView.class.isInstance(tabView)) {\n\n                tabTitleView = (TextView) tabView;\n\n            }\n\n \n\n            tabTitleView.setText(adapter.getPageTitle(i));\n\n            tabView.setOnClickListener(tabClickListener);\n\n \n\n            mTabStrip.addView(tabView);\n\n        }\n\n    }\n\n \n\n    @Override\n\n    protected void onAttachedToWindow() {\n\n        super.onAttachedToWindow();\n\n \n\n        if (mViewPager != null) {\n\n            scrollToTab(mViewPager.getCurrentItem(), 0);\n\n        }\n\n    }\n\n \n\n    private void scrollToTab(int tabIndex, int positionOffset) {\n\n        final int tabStripChildCount = mTabStrip.getChildCount();\n\n        if (tabStripChildCount == 0 || tabIndex < 0 || tabIndex >= tabStripChildCount) {\n\n            return;\n\n        }\n\n \n\n        View selectedChild = mTabStrip.getChildAt(tabIndex);\n\n        if (selectedChild != null) {\n\n            int targetScrollX = selectedChild.getLeft() + positionOffset;\n\n \n\n            if (tabIndex > 0 || positionOffset > 0) {\n\n                // If we're not at the first child and are mid-scroll, make sure we obey the offset\n\n                targetScrollX -= mTitleOffset;\n\n            }\n\n \n\n            scrollTo(targetScrollX, 0);\n\n        }\n\n    }\n\n \n\n    private class InternalViewPagerListener implements ViewPager.OnPageChangeListener {\n\n        private int mScrollState;\n\n \n\n        @Override\n\n        public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\n\n            int tabStripChildCount = mTabStrip.getChildCount();\n\n            if ((tabStripChildCount == 0) || (position < 0) || (position >= tabStripChildCount)) {\n\n                return;\n\n            }\n\n \n\n            mTabStrip.onViewPagerPageChanged(position, positionOffset);\n\n \n\n            View selectedTitle = mTabStrip.getChildAt(position);\n\n            int extraOffset = (selectedTitle != null)\n\n                    ? (int) (positionOffset * selectedTitle.getWidth())\n\n                    : 0;\n\n            scrollToTab(position, extraOffset);\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageScrolled(position, positionOffset,\n\n                        positionOffsetPixels);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void onPageScrollStateChanged(int state) {\n\n            mScrollState = state;\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageScrollStateChanged(state);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void onPageSelected(int position) {\n\n            if (mScrollState == ViewPager.SCROLL_STATE_IDLE) {\n\n                mTabStrip.onViewPagerPageChanged(position, 0f);\n\n                scrollToTab(position, 0);\n\n            }\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageSelected(position);\n\n            }\n\n        }\n\n \n\n    }\n\n \n\n    private class TabClickListener implements View.OnClickListener {\n\n        @Override\n\n        public void onClick(View v) {\n\n            for (int i = 0; i < mTabStrip.getChildCount(); i++) {\n\n                if (v == mTabStrip.getChildAt(i)) {\n\n                    mViewPager.setCurrentItem(i);\n\n                    return;\n\n                }\n\n            }\n\n        }\n\n    }\n\n \n\n}\n  ","SlidingTabStrip.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.view;\n\n \n\nimport android.R;\n\nimport android.content.Context;\n\nimport android.graphics.Canvas;\n\nimport android.graphics.Color;\n\nimport android.graphics.Paint;\n\nimport android.util.AttributeSet;\n\nimport android.util.TypedValue;\n\nimport android.view.View;\n\nimport android.widget.LinearLayout;\n\n \n\nclass SlidingTabStrip extends LinearLayout {\n\n \n\n    private static final int DEFAULT_BOTTOM_BORDER_THICKNESS_DIPS = 2;\n\n    private static final byte DEFAULT_BOTTOM_BORDER_COLOR_ALPHA = 0x26;\n\n    private static final int SELECTED_INDICATOR_THICKNESS_DIPS = 8;\n\n    private static final int DEFAULT_SELECTED_INDICATOR_COLOR = 0xFF33B5E5;\n\n \n\n    private static final int DEFAULT_DIVIDER_THICKNESS_DIPS = 1;\n\n    private static final byte DEFAULT_DIVIDER_COLOR_ALPHA = 0x20;\n\n    private static final float DEFAULT_DIVIDER_HEIGHT = 0.5f;\n\n \n\n    private final int mBottomBorderThickness;\n\n    private final Paint mBottomBorderPaint;\n\n \n\n    private final int mSelectedIndicatorThickness;\n\n    private final Paint mSelectedIndicatorPaint;\n\n \n\n    private final int mDefaultBottomBorderColor;\n\n \n\n    private final Paint mDividerPaint;\n\n    private final float mDividerHeight;\n\n \n\n    private int mSelectedPosition;\n\n    private float mSelectionOffset;\n\n \n\n    private SlidingTabLayout.TabColorizer mCustomTabColorizer;\n\n    private final SimpleTabColorizer mDefaultTabColorizer;\n\n \n\n    SlidingTabStrip(Context context) {\n\n        this(context, null);\n\n    }\n\n \n\n    SlidingTabStrip(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n        setWillNotDraw(false);\n\n \n\n        final float density = getResources().getDisplayMetrics().density;\n\n \n\n        TypedValue outValue = new TypedValue();\n\n        context.getTheme().resolveAttribute(R.attr.colorForeground, outValue, true);\n\n        final int themeForegroundColor =  outValue.data;\n\n \n\n        mDefaultBottomBorderColor = setColorAlpha(themeForegroundColor,\n\n                DEFAULT_BOTTOM_BORDER_COLOR_ALPHA);\n\n \n\n        mDefaultTabColorizer = new SimpleTabColorizer();\n\n        mDefaultTabColorizer.setIndicatorColors(DEFAULT_SELECTED_INDICATOR_COLOR);\n\n        mDefaultTabColorizer.setDividerColors(setColorAlpha(themeForegroundColor,\n\n                DEFAULT_DIVIDER_COLOR_ALPHA));\n\n \n\n        mBottomBorderThickness = (int) (DEFAULT_BOTTOM_BORDER_THICKNESS_DIPS * density);\n\n        mBottomBorderPaint = new Paint();\n\n        mBottomBorderPaint.setColor(mDefaultBottomBorderColor);\n\n \n\n        mSelectedIndicatorThickness = (int) (SELECTED_INDICATOR_THICKNESS_DIPS * density);\n\n        mSelectedIndicatorPaint = new Paint();\n\n \n\n        mDividerHeight = DEFAULT_DIVIDER_HEIGHT;\n\n        mDividerPaint = new Paint();\n\n        mDividerPaint.setStrokeWidth((int) (DEFAULT_DIVIDER_THICKNESS_DIPS * density));\n\n    }\n\n \n\n    void setCustomTabColorizer(SlidingTabLayout.TabColorizer customTabColorizer) {\n\n        mCustomTabColorizer = customTabColorizer;\n\n        invalidate();\n\n    }\n\n \n\n    void setSelectedIndicatorColors(int... colors) {\n\n        // Make sure that the custom colorizer is removed\n\n        mCustomTabColorizer = null;\n\n        mDefaultTabColorizer.setIndicatorColors(colors);\n\n        invalidate();\n\n    }\n\n \n\n    void setDividerColors(int... colors) {\n\n        // Make sure that the custom colorizer is removed\n\n        mCustomTabColorizer = null;\n\n        mDefaultTabColorizer.setDividerColors(colors);\n\n        invalidate();\n\n    }\n\n \n\n    void onViewPagerPageChanged(int position, float positionOffset) {\n\n        mSelectedPosition = position;\n\n        mSelectionOffset = positionOffset;\n\n        invalidate();\n\n    }\n\n \n\n    @Override\n\n    protected void onDraw(Canvas canvas) {\n\n        final int height = getHeight();\n\n        final int childCount = getChildCount();\n\n        final int dividerHeightPx = (int) (Math.min(Math.max(0f, mDividerHeight), 1f) * height);\n\n        final SlidingTabLayout.TabColorizer tabColorizer = mCustomTabColorizer != null\n\n                ? mCustomTabColorizer\n\n                : mDefaultTabColorizer;\n\n \n\n        // Thick colored underline below the current selection\n\n        if (childCount > 0) {\n\n            View selectedTitle = getChildAt(mSelectedPosition);\n\n            int left = selectedTitle.getLeft();\n\n            int right = selectedTitle.getRight();\n\n            int color = tabColorizer.getIndicatorColor(mSelectedPosition);\n\n \n\n            if (mSelectionOffset > 0f && mSelectedPosition < (getChildCount() - 1)) {\n\n                int nextColor = tabColorizer.getIndicatorColor(mSelectedPosition + 1);\n\n                if (color != nextColor) {\n\n                    color = blendColors(nextColor, color, mSelectionOffset);\n\n                }\n\n \n\n                // Draw the selection partway between the tabs\n\n                View nextTitle = getChildAt(mSelectedPosition + 1);\n\n                left = (int) (mSelectionOffset * nextTitle.getLeft() +\n\n                        (1.0f - mSelectionOffset) * left);\n\n                right = (int) (mSelectionOffset * nextTitle.getRight() +\n\n                        (1.0f - mSelectionOffset) * right);\n\n            }\n\n \n\n            mSelectedIndicatorPaint.setColor(color);\n\n \n\n            canvas.drawRect(left, height - mSelectedIndicatorThickness, right,\n\n                    height, mSelectedIndicatorPaint);\n\n        }\n\n \n\n        // Thin underline along the entire bottom edge\n\n        canvas.drawRect(0, height - mBottomBorderThickness, getWidth(), height, mBottomBorderPaint);\n\n \n\n        // Vertical separators between the titles\n\n        int separatorTop = (height - dividerHeightPx) / 2;\n\n        for (int i = 0; i < childCount - 1; i++) {\n\n            View child = getChildAt(i);\n\n            mDividerPaint.setColor(tabColorizer.getDividerColor(i));\n\n            canvas.drawLine(child.getRight(), separatorTop, child.getRight(),\n\n                    separatorTop + dividerHeightPx, mDividerPaint);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Set the alpha value of the {@code color} to be the given {@code alpha} value.\n\n     */\n\n    private static int setColorAlpha(int color, byte alpha) {\n\n        return Color.argb(alpha, Color.red(color), Color.green(color), Color.blue(color));\n\n    }\n\n \n\n    /**\n\n     * Blend {@code color1} and {@code color2} using the given ratio.\n\n     *\n\n     * @param ratio of which to blend. 1.0 will return {@code color1}, 0.5 will give an even blend,\n\n     *              0.0 will return {@code color2}.\n\n     */\n\n    private static int blendColors(int color1, int color2, float ratio) {\n\n        final float inverseRation = 1f - ratio;\n\n        float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRation);\n\n        float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRation);\n\n        float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRation);\n\n        return Color.rgb((int) r, (int) g, (int) b);\n\n    }\n\n \n\n    private static class SimpleTabColorizer implements SlidingTabLayout.TabColorizer {\n\n        private int[] mIndicatorColors;\n\n        private int[] mDividerColors;\n\n \n\n        @Override\n\n        public final int getIndicatorColor(int position) {\n\n            return mIndicatorColors[position % mIndicatorColors.length];\n\n        }\n\n \n\n        @Override\n\n        public final int getDividerColor(int position) {\n\n            return mDividerColors[position % mDividerColors.length];\n\n        }\n\n \n\n        void setIndicatorColors(int... colors) {\n\n            mIndicatorColors = colors;\n\n        }\n\n \n\n        void setDividerColors(int... colors) {\n\n            mDividerColors = colors;\n\n        }\n\n    }\n\n}\n  "}},"com.example.android.swiperefreshlistfragment":{"MainActivity.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.swiperefreshlistfragment;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentTransaction;\n\nimport android.view.Menu;\n\nimport android.view.MenuItem;\n\nimport android.widget.ViewAnimator;\n\n \n\nimport com.example.android.common.activities.SampleActivityBase;\n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogFragment;\n\nimport com.example.android.common.logger.LogWrapper;\n\nimport com.example.android.common.logger.MessageOnlyLogFilter;\n\n \n\n/**\n\n * A simple launcher activity containing a summary sample description, sample log and a custom\n\n * {@link android.support.v4.app.Fragment} which can display a view.\n\n * <p>\n\n * For devices with displays with a width of 720dp or greater, the sample log is always visible,\n\n * on other devices it's visibility is controlled by an item on the Action Bar.\n\n */\n\npublic class MainActivity extends SampleActivityBase {\n\n \n\n    public static final String TAG = \"MainActivity\";\n\n \n\n    // Whether the Log Fragment is currently shown\n\n    private boolean mLogShown;\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_main);\n\n \n\n        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n\n        SwipeRefreshListFragmentFragment fragment = new SwipeRefreshListFragmentFragment();\n\n        transaction.replace(R.id.sample_content_fragment, fragment);\n\n        transaction.commit();\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        getMenuInflater().inflate(R.menu.main, menu);\n\n        return true;\n\n    }\n\n \n\n    @Override\n\n    public boolean onPrepareOptionsMenu(Menu menu) {\n\n        MenuItem logToggle = menu.findItem(R.id.menu_toggle_log);\n\n        logToggle.setVisible(findViewById(R.id.sample_output) instanceof ViewAnimator);\n\n        logToggle.setTitle(mLogShown ? R.string.sample_hide_log : R.string.sample_show_log);\n\n \n\n        return super.onPrepareOptionsMenu(menu);\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch(item.getItemId()) {\n\n            case R.id.menu_toggle_log:\n\n                mLogShown = !mLogShown;\n\n                ViewAnimator output = (ViewAnimator) findViewById(R.id.sample_output);\n\n                if (mLogShown) {\n\n                    output.setDisplayedChild(1);\n\n                } else {\n\n                    output.setDisplayedChild(0);\n\n                }\n\n                supportInvalidateOptionsMenu();\n\n                return true;\n\n        }\n\n        return super.onOptionsItemSelected(item);\n\n    }\n\n \n\n    /** Create a chain of targets that will receive log data */\n\n    @Override\n\n    public void initializeLogging() {\n\n        // Wraps Android's native log framework.\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        Log.setLogNode(logWrapper);\n\n \n\n        // Filter strips out everything except the message text.\n\n        MessageOnlyLogFilter msgFilter = new MessageOnlyLogFilter();\n\n        logWrapper.setNext(msgFilter);\n\n \n\n        // On screen logging via a fragment with a TextView.\n\n        LogFragment logFragment = (LogFragment) getSupportFragmentManager()\n\n                .findFragmentById(R.id.log_fragment);\n\n        msgFilter.setNext(logFragment.getLogView());\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  ","SwipeRefreshListFragment.java":"\n    \n\n/*\n\n * Copyright 2014 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *       http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.swiperefreshlistfragment;\n\n \n\nimport android.content.Context;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.ListFragment;\n\nimport android.support.v4.view.ViewCompat;\n\nimport android.support.v4.widget.SwipeRefreshLayout;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ListView;\n\n \n\n/**\n\n * Subclass of {@link android.support.v4.app.ListFragment} which provides automatic support for\n\n * providing the 'swipe-to-refresh' UX gesture by wrapping the the content view in a\n\n * {@link android.support.v4.widget.SwipeRefreshLayout}.\n\n */\n\npublic class SwipeRefreshListFragment extends ListFragment {\n\n \n\n    private SwipeRefreshLayout mSwipeRefreshLayout;\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n            Bundle savedInstanceState) {\n\n \n\n        // Create the list fragment's content view by calling the super method\n\n        final View listFragmentView = super.onCreateView(inflater, container, savedInstanceState);\n\n \n\n        // Now create a SwipeRefreshLayout to wrap the fragment's content view\n\n        mSwipeRefreshLayout = new ListFragmentSwipeRefreshLayout(container.getContext());\n\n \n\n        // Add the list fragment's content view to the SwipeRefreshLayout, making sure that it fills\n\n        // the SwipeRefreshLayout\n\n        mSwipeRefreshLayout.addView(listFragmentView,\n\n                ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\n\n \n\n        // Make sure that the SwipeRefreshLayout will fill the fragment\n\n        mSwipeRefreshLayout.setLayoutParams(\n\n                new ViewGroup.LayoutParams(\n\n                        ViewGroup.LayoutParams.MATCH_PARENT,\n\n                        ViewGroup.LayoutParams.MATCH_PARENT));\n\n \n\n        // Now return the SwipeRefreshLayout as this fragment's content view\n\n        return mSwipeRefreshLayout;\n\n    }\n\n \n\n    /**\n\n     * Set the {@link android.support.v4.widget.SwipeRefreshLayout.OnRefreshListener} to listen for\n\n     * initiated refreshes.\n\n     *\n\n     * @see android.support.v4.widget.SwipeRefreshLayout#setOnRefreshListener(android.support.v4.widget.SwipeRefreshLayout.OnRefreshListener)\n\n     */\n\n    public void setOnRefreshListener(SwipeRefreshLayout.OnRefreshListener listener) {\n\n        mSwipeRefreshLayout.setOnRefreshListener(listener);\n\n    }\n\n \n\n    /**\n\n     * Returns whether the {@link android.support.v4.widget.SwipeRefreshLayout} is currently\n\n     * refreshing or not.\n\n     *\n\n     * @see android.support.v4.widget.SwipeRefreshLayout#isRefreshing()\n\n     */\n\n    public boolean isRefreshing() {\n\n        return mSwipeRefreshLayout.isRefreshing();\n\n    }\n\n \n\n    /**\n\n     * Set whether the {@link android.support.v4.widget.SwipeRefreshLayout} should be displaying\n\n     * that it is refreshing or not.\n\n     *\n\n     * @see android.support.v4.widget.SwipeRefreshLayout#setRefreshing(boolean)\n\n     */\n\n    public void setRefreshing(boolean refreshing) {\n\n        mSwipeRefreshLayout.setRefreshing(refreshing);\n\n    }\n\n \n\n    /**\n\n     * Set the color scheme for the {@link android.support.v4.widget.SwipeRefreshLayout}.\n\n     *\n\n     * @see android.support.v4.widget.SwipeRefreshLayout#setColorScheme(int, int, int, int)\n\n     */\n\n    public void setColorScheme(int colorRes1, int colorRes2, int colorRes3, int colorRes4) {\n\n        mSwipeRefreshLayout.setColorScheme(colorRes1, colorRes2, colorRes3, colorRes4);\n\n    }\n\n \n\n    /**\n\n     * @return the fragment's {@link android.support.v4.widget.SwipeRefreshLayout} widget.\n\n     */\n\n    public SwipeRefreshLayout getSwipeRefreshLayout() {\n\n        return mSwipeRefreshLayout;\n\n    }\n\n \n\n    /**\n\n     * Sub-class of {@link android.support.v4.widget.SwipeRefreshLayout} for use in this\n\n     * {@link android.support.v4.app.ListFragment}. The reason that this is needed is because\n\n     * {@link android.support.v4.widget.SwipeRefreshLayout} only supports a single child, which it\n\n     * expects to be the one which triggers refreshes. In our case the layout's child is the content\n\n     * view returned from\n\n     * {@link android.support.v4.app.ListFragment#onCreateView(android.view.LayoutInflater, android.view.ViewGroup, android.os.Bundle)}\n\n     * which is a {@link android.view.ViewGroup}.\n\n     *\n\n     * <p>To enable 'swipe-to-refresh' support via the {@link android.widget.ListView} we need to\n\n     * override the default behavior and properly signal when a gesture is possible. This is done by\n\n     * overriding {@link #canChildScrollUp()}.\n\n     */\n\n    private class ListFragmentSwipeRefreshLayout extends SwipeRefreshLayout {\n\n \n\n        public ListFragmentSwipeRefreshLayout(Context context) {\n\n            super(context);\n\n        }\n\n \n\n        /**\n\n         * As mentioned above, we need to override this method to properly signal when a\n\n         * 'swipe-to-refresh' is possible.\n\n         *\n\n         * @return true if the {@link android.widget.ListView} is visible and can scroll up.\n\n         */\n\n        @Override\n\n        public boolean canChildScrollUp() {\n\n            final ListView listView = getListView();\n\n            if (listView.getVisibility() == View.VISIBLE) {\n\n                return canListViewScrollUp(listView);\n\n            } else {\n\n                return false;\n\n            }\n\n        }\n\n \n\n    }\n\n \n\n    /**\n\n     * Utility method to check whether a {@link ListView} can scroll up from it's current position.\n\n     * Handles platform version differences, providing backwards compatible functionality where\n\n     * needed.\n\n     */\n\n    private static boolean canListViewScrollUp(ListView listView) {\n\n        if (android.os.Build.VERSION.SDK_INT >= 14) {\n\n            // For ICS and above we can call canScrollVertically() to determine this\n\n            return ViewCompat.canScrollVertically(listView, -1);\n\n        } else {\n\n            // Pre-ICS we need to manually check the first visible item and the child view's top\n\n            // value\n\n            return listView.getChildCount() > 0 &&\n\n                    (listView.getFirstVisiblePosition() > 0\n\n                            || listView.getChildAt(0).getTop() < listView.getPaddingTop());\n\n        }\n\n    }\n\n \n\n}\n  ","SwipeRefreshListFragmentFragment.java":"\n    \n\n/*\n\n * Copyright 2014 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *       http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.swiperefreshlistfragment;\n\n \n\nimport com.example.android.common.dummydata.Cheeses;\n\nimport com.example.android.common.logger.Log;\n\n \n\nimport android.os.AsyncTask;\n\nimport android.os.Bundle;\n\nimport android.support.v4.widget.SwipeRefreshLayout;\n\nimport android.view.Menu;\n\nimport android.view.MenuInflater;\n\nimport android.view.MenuItem;\n\nimport android.view.View;\n\nimport android.widget.ArrayAdapter;\n\nimport android.widget.ListAdapter;\n\n \n\nimport java.util.List;\n\n \n\n/**\n\n * A sample which shows how to use {@link android.support.v4.widget.SwipeRefreshLayout} within a\n\n * {@link android.support.v4.app.ListFragment} to add the 'swipe-to-refresh' gesture to a\n\n * {@link android.widget.ListView}. This is provided through the provided re-usable\n\n * {@link SwipeRefreshListFragment} class.\n\n *\n\n * <p>To provide an accessible way to trigger the refresh, this app also provides a refresh\n\n * action item. This item should be displayed in the Action Bar's overflow item.\n\n *\n\n * <p>In this sample app, the refresh updates the ListView with a random set of new items.\n\n *\n\n * <p>This sample also provides the functionality to change the colors displayed in the\n\n * {@link android.support.v4.widget.SwipeRefreshLayout} through the options menu. This is meant to\n\n * showcase the use of color rather than being something that should be integrated into apps.\n\n */\n\npublic class SwipeRefreshListFragmentFragment extends SwipeRefreshListFragment {\n\n \n\n    private static final String LOG_TAG = SwipeRefreshListFragmentFragment.class.getSimpleName();\n\n \n\n    private static final int LIST_ITEM_COUNT = 20;\n\n \n\n    @Override\n\n    public void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n \n\n        // Notify the system to allow an options menu for this fragment.\n\n        setHasOptionsMenu(true);\n\n    }\n\n \n\n    @Override\n\n    public void onViewCreated(View view, Bundle savedInstanceState) {\n\n        super.onViewCreated(view, savedInstanceState);\n\n \n\n        /**\n\n         * Create an ArrayAdapter to contain the data for the ListView. Each item in the ListView\n\n         * uses the system-defined simple_list_item_1 layout that contains one TextView.\n\n         */\n\n        ListAdapter adapter = new ArrayAdapter<String>(\n\n                getActivity(),\n\n                android.R.layout.simple_list_item_1,\n\n                android.R.id.text1,\n\n                Cheeses.randomList(LIST_ITEM_COUNT));\n\n \n\n        // Set the adapter between the ListView and its backing data.\n\n        setListAdapter(adapter);\n\n \n\n        /**\n\n         * Implement {@link SwipeRefreshLayout.OnRefreshListener}. When users do the \"swipe to\n\n         * refresh\" gesture, SwipeRefreshLayout invokes\n\n         * {@link SwipeRefreshLayout.OnRefreshListener#onRefresh onRefresh()}. In\n\n         * {@link SwipeRefreshLayout.OnRefreshListener#onRefresh onRefresh()}, call a method that\n\n         * refreshes the content. Call the same method in response to the Refresh action from the\n\n         * action bar.\n\n         */\n\n        setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\n\n            @Override\n\n            public void onRefresh() {\n\n                Log.i(LOG_TAG, \"onRefresh called from SwipeRefreshLayout\");\n\n \n\n                initiateRefresh();\n\n            }\n\n        });\n\n    }\n\n \n\n    @Override\n\n    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {\n\n        inflater.inflate(R.menu.main_menu, menu);\n\n    }\n\n \n\n    /**\n\n     * Respond to the user's selection of the Refresh action item. Start the SwipeRefreshLayout\n\n     * progress bar, then initiate the background task that refreshes the content.\n\n     *\n\n     * <p>A color scheme menu item used for demonstrating the use of SwipeRefreshLayout's color\n\n     * scheme functionality. This kind of menu item should not be incorporated into your app,\n\n     * it just to demonstrate the use of color. Instead you should choose a color scheme based\n\n     * off of your application's branding.\n\n     */\n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch (item.getItemId()) {\n\n            case R.id.menu_refresh:\n\n                Log.i(LOG_TAG, \"Refresh menu item selected\");\n\n \n\n                // We make sure that the SwipeRefreshLayout is displaying it's refreshing indicator\n\n                if (!isRefreshing()) {\n\n                    setRefreshing(true);\n\n                }\n\n \n\n                // Start our refresh background task\n\n                initiateRefresh();\n\n                return true;\n\n \n\n            case R.id.menu_color_scheme_1:\n\n                Log.i(LOG_TAG, \"setColorScheme #1\");\n\n                item.setChecked(true);\n\n \n\n                // Change the colors displayed by the SwipeRefreshLayout by providing it with 4\n\n                // color resource ids\n\n                setColorScheme(R.color.color_scheme_1_1, R.color.color_scheme_1_2,\n\n                        R.color.color_scheme_1_3, R.color.color_scheme_1_4);\n\n                return true;\n\n \n\n            case R.id.menu_color_scheme_2:\n\n                Log.i(LOG_TAG, \"setColorScheme #2\");\n\n                item.setChecked(true);\n\n \n\n                // Change the colors displayed by the SwipeRefreshLayout by providing it with 4\n\n                // color resource ids\n\n                setColorScheme(R.color.color_scheme_2_1, R.color.color_scheme_2_2,\n\n                        R.color.color_scheme_2_3, R.color.color_scheme_2_4);\n\n                return true;\n\n \n\n            case R.id.menu_color_scheme_3:\n\n                Log.i(LOG_TAG, \"setColorScheme #3\");\n\n                item.setChecked(true);\n\n \n\n                // Change the colors displayed by the SwipeRefreshLayout by providing it with 4\n\n                // color resource ids\n\n                setColorScheme(R.color.color_scheme_3_1, R.color.color_scheme_3_2,\n\n                        R.color.color_scheme_3_3, R.color.color_scheme_3_4);\n\n                return true;\n\n        }\n\n \n\n        return super.onOptionsItemSelected(item);\n\n    }\n\n \n\n    /**\n\n     * By abstracting the refresh process to a single method, the app allows both the\n\n     * SwipeGestureLayout onRefresh() method and the Refresh action item to refresh the content.\n\n     */\n\n    private void initiateRefresh() {\n\n        Log.i(LOG_TAG, \"initiateRefresh\");\n\n \n\n        /**\n\n         * Execute the background task, which uses {@link android.os.AsyncTask} to load the data.\n\n         */\n\n        new DummyBackgroundTask().execute();\n\n    }\n\n \n\n    /**\n\n     * When the AsyncTask finishes, it calls onRefreshComplete(), which updates the data in the\n\n     * ListAdapter and turns off the progress bar.\n\n     */\n\n    private void onRefreshComplete(List<String> result) {\n\n        Log.i(LOG_TAG, \"onRefreshComplete\");\n\n \n\n        // Remove all items from the ListAdapter, and then replace them with the new items\n\n        ArrayAdapter<String> adapter = (ArrayAdapter<String>) getListAdapter();\n\n        adapter.clear();\n\n        for (String cheese : result) {\n\n            adapter.add(cheese);\n\n        }\n\n \n\n        // Stop the refreshing indicator\n\n        setRefreshing(false);\n\n    }\n\n \n\n    /**\n\n     * Dummy {@link AsyncTask} which simulates a long running task to fetch new cheeses.\n\n     */\n\n    private class DummyBackgroundTask extends AsyncTask<Void, Void, List<String>> {\n\n \n\n        static final int TASK_DURATION = 3 * 1000; // 3 seconds\n\n \n\n        @Override\n\n        protected List<String> doInBackground(Void... params) {\n\n            // Sleep for a small amount of time to simulate a background-task\n\n            try {\n\n                Thread.sleep(TASK_DURATION);\n\n            } catch (InterruptedException e) {\n\n                e.printStackTrace();\n\n            }\n\n \n\n            // Return a new random list of cheeses\n\n            return Cheeses.randomList(LIST_ITEM_COUNT);\n\n        }\n\n \n\n        @Override\n\n        protected void onPostExecute(List<String> result) {\n\n            super.onPostExecute(result);\n\n \n\n            // Tell the Fragment that the refresh has completed\n\n            onRefreshComplete(result);\n\n        }\n\n \n\n    }\n\n \n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.swiperefreshlistfragment\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk android:minSdkVersion=\"10\" android:targetSdkVersion=\"19\" />\n\n \n\n    <application android:allowBackup=\"true\"\n\n        android:label=\"@string/app_name\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:theme=\"@style/AppTheme\">\n\n \n\n        <activity android:name=\".MainActivity\"\n\n                  android:label=\"@string/app_name\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n \n\n</manifest>\n  "},"SwipeRefreshMultipleViews":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com/samples/SwipeRefreshMultipleViews/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com/samples/SwipeRefreshMultipleViews/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com/samples/SwipeRefreshMultipleViews/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com/samples/SwipeRefreshMultipleViews/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com/samples/SwipeRefreshMultipleViews/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"vertical\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <ViewAnimator\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\"\n\n          android:layout_weight=\"1\">\n\n \n\n        <ScrollView\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingRight=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingTop=\"@dimen/vertical_page_margin\"\n\n                  android:paddingBottom=\"@dimen/vertical_page_margin\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </ScrollView>\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\" />\n\n \n\n    </ViewAnimator>\n\n \n\n    <View\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"1dp\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\" />\n\n \n\n</LinearLayout>\n\n \n  ","fragment_sample.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n<com.example.android.swiperefreshmultipleviews.MultiSwipeRefreshLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:id=\"@+id/swiperefresh\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\">\n\n \n\n    <FrameLayout\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"match_parent\">\n\n \n\n        <GridView\n\n              android:id=\"@android:id/list\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\"\n\n              android:numColumns=\"2\" />\n\n \n\n        <TextView\n\n              android:id=\"@android:id/empty\"\n\n              android:layout_width=\"wrap_content\"\n\n              android:layout_height=\"wrap_content\"\n\n              android:text=\"@string/empty_text\"\n\n              android:layout_gravity=\"center\"/>\n\n \n\n    </FrameLayout>\n\n \n\n</com.example.android.swiperefreshmultipleviews.MultiSwipeRefreshLayout>\n  "},"layout-w720dp":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"horizontal\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <LinearLayout\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\"\n\n          android:layout_weight=\"1\"\n\n          android:orientation=\"vertical\">\n\n \n\n        <FrameLayout\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"wrap_content\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/margin_medium\"\n\n                  android:paddingRight=\"@dimen/margin_medium\"\n\n                  android:paddingTop=\"@dimen/margin_large\"\n\n                  android:paddingBottom=\"@dimen/margin_large\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </FrameLayout>\n\n \n\n        <View\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"1dp\"\n\n              android:background=\"@android:color/darker_gray\" />\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"0px\"\n\n              android:layout_weight=\"1\" />\n\n \n\n    </LinearLayout>\n\n \n\n    <View\n\n          android:layout_width=\"1dp\"\n\n          android:layout_height=\"match_parent\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\" />\n\n \n\n</LinearLayout>\n\n \n\n \n  "},"menu":{"main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:id=\"@+id/menu_toggle_log\"\n\n          android:showAsAction=\"always\"\n\n          android:title=\"@string/sample_show_log\" />\n\n</menu>\n  ","main_menu.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n \n\n    <item\n\n          android:id=\"@+id/menu_clear\"\n\n          android:title=\"@string/menu_clear\"\n\n          android:showAsAction=\"never\" />\n\n \n\n    <item\n\n          android:id=\"@+id/menu_refresh\"\n\n          android:title=\"@string/menu_refresh\"\n\n          android:showAsAction=\"never\" />\n\n \n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">SwipeRefreshMultipleViews</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            A sample which shows how to use SwipeRefreshLayout to add the \\'swipe-to-refresh\\'\n\n            gesture to a layout with multiple children, enabling the ability to trigger a\n\n            refresh from swiping down on the visible view. In this sample, SwipeRefreshLayout\n\n            contains a scrollable GridView, along with a TextView empty view.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","color.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <color name=\"swipe_color_1\">#B6DB49</color>\n\n    <color name=\"swipe_color_2\">#99CC00</color>\n\n    <color name=\"swipe_color_3\">#8ABD00</color>\n\n    <color name=\"swipe_color_4\">#7CAF00</color>\n\n \n\n</resources>\n  ","strings.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<resources>\n\n    <string name=\"sample_show_log\">Show Log</string>\n\n    <string name=\"sample_hide_log\">Hide Log</string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.common":{"activities":{"SampleActivityBase.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\npackage com.example.android.common.activities;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentActivity;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogWrapper;\n\n \n\n/**\n\n * Base launcher activity, to handle most of the common plumbing for samples.\n\n */\n\npublic class SampleActivityBase extends FragmentActivity {\n\n \n\n    public static final String TAG = \"SampleActivityBase\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n    }\n\n \n\n    @Override\n\n    protected  void onStart() {\n\n        super.onStart();\n\n        initializeLogging();\n\n    }\n\n \n\n    /** Set up targets to receive log data */\n\n    public void initializeLogging() {\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        // Wraps Android's native log framework\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        Log.setLogNode(logWrapper);\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "},"dummydata":{"Cheeses.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.dummydata;\n\n \n\nimport java.util.ArrayList;\n\nimport java.util.HashSet;\n\nimport java.util.Random;\n\n \n\n/**\n\n * Dummy data.\n\n */\n\npublic class Cheeses {\n\n    static final String[] CHEESES = {\n\n            \"Abbaye de Belloc\", \"Abbaye du Mont des Cats\", \"Abertam\", \"Abondance\", \"Ackawi\",\n\n            \"Acorn\", \"Adelost\", \"Affidelice au Chablis\", \"Afuega'l Pitu\", \"Airag\", \"Airedale\",\n\n            \"Aisy Cendre\", \"Allgauer Emmentaler\", \"Alverca\", \"Ambert\", \"American Cheese\",\n\n            \"Ami du Chambertin\", \"Anejo Enchilado\", \"Anneau du Vic-Bilh\", \"Anthoriro\", \"Appenzell\",\n\n            \"Aragon\", \"Ardi Gasna\", \"Ardrahan\", \"Armenian String\", \"Aromes au Gene de Marc\",\n\n            \"Asadero\", \"Asiago\", \"Aubisque Pyrenees\", \"Autun\", \"Avaxtskyr\", \"Baby Swiss\",\n\n            \"Babybel\", \"Baguette Laonnaise\", \"Bakers\", \"Baladi\", \"Balaton\", \"Bandal\", \"Banon\",\n\n            \"Barry's Bay Cheddar\", \"Basing\", \"Basket Cheese\", \"Bath Cheese\", \"Bavarian Bergkase\",\n\n            \"Baylough\", \"Beaufort\", \"Beauvoorde\", \"Beenleigh Blue\", \"Beer Cheese\", \"Bel Paese\",\n\n            \"Bergader\", \"Bergere Bleue\", \"Berkswell\", \"Beyaz Peynir\", \"Bierkase\", \"Bishop Kennedy\",\n\n            \"Blarney\", \"Bleu d'Auvergne\", \"Bleu de Gex\", \"Bleu de Laqueuille\",\n\n            \"Bleu de Septmoncel\", \"Bleu Des Causses\", \"Blue\", \"Blue Castello\", \"Blue Rathgore\",\n\n            \"Blue Vein (Australian)\", \"Blue Vein Cheeses\", \"Bocconcini\", \"Bocconcini (Australian)\",\n\n            \"Boeren Leidenkaas\", \"Bonchester\", \"Bosworth\", \"Bougon\", \"Boule Du Roves\",\n\n            \"Boulette d'Avesnes\", \"Boursault\", \"Boursin\", \"Bouyssou\", \"Bra\", \"Braudostur\",\n\n            \"Breakfast Cheese\", \"Brebis du Lavort\", \"Brebis du Lochois\", \"Brebis du Puyfaucon\",\n\n            \"Bresse Bleu\", \"Brick\", \"Brie\", \"Brie de Meaux\", \"Brie de Melun\", \"Brillat-Savarin\",\n\n            \"Brin\", \"Brin d' Amour\", \"Brin d'Amour\", \"Brinza (Burduf Brinza)\",\n\n            \"Briquette de Brebis\", \"Briquette du Forez\", \"Broccio\", \"Broccio Demi-Affine\",\n\n            \"Brousse du Rove\", \"Bruder Basil\", \"Brusselae Kaas (Fromage de Bruxelles)\", \"Bryndza\",\n\n            \"Buchette d'Anjou\", \"Buffalo\", \"Burgos\", \"Butte\", \"Butterkase\", \"Button (Innes)\",\n\n            \"Buxton Blue\", \"Cabecou\", \"Caboc\", \"Cabrales\", \"Cachaille\", \"Caciocavallo\", \"Caciotta\",\n\n            \"Caerphilly\", \"Cairnsmore\", \"Calenzana\", \"Cambazola\", \"Camembert de Normandie\",\n\n            \"Canadian Cheddar\", \"Canestrato\", \"Cantal\", \"Caprice des Dieux\", \"Capricorn Goat\",\n\n            \"Capriole Banon\", \"Carre de l'Est\", \"Casciotta di Urbino\", \"Cashel Blue\", \"Castellano\",\n\n            \"Castelleno\", \"Castelmagno\", \"Castelo Branco\", \"Castigliano\", \"Cathelain\",\n\n            \"Celtic Promise\", \"Cendre d'Olivet\", \"Cerney\", \"Chabichou\", \"Chabichou du Poitou\",\n\n            \"Chabis de Gatine\", \"Chaource\", \"Charolais\", \"Chaumes\", \"Cheddar\",\n\n            \"Cheddar Clothbound\", \"Cheshire\", \"Chevres\", \"Chevrotin des Aravis\", \"Chontaleno\",\n\n            \"Civray\", \"Coeur de Camembert au Calvados\", \"Coeur de Chevre\", \"Colby\", \"Cold Pack\",\n\n            \"Comte\", \"Coolea\", \"Cooleney\", \"Coquetdale\", \"Corleggy\", \"Cornish Pepper\",\n\n            \"Cotherstone\", \"Cotija\", \"Cottage Cheese\", \"Cottage Cheese (Australian)\",\n\n            \"Cougar Gold\", \"Coulommiers\", \"Coverdale\", \"Crayeux de Roncq\", \"Cream Cheese\",\n\n            \"Cream Havarti\", \"Crema Agria\", \"Crema Mexicana\", \"Creme Fraiche\", \"Crescenza\",\n\n            \"Croghan\", \"Crottin de Chavignol\", \"Crottin du Chavignol\", \"Crowdie\", \"Crowley\",\n\n            \"Cuajada\", \"Curd\", \"Cure Nantais\", \"Curworthy\", \"Cwmtawe Pecorino\",\n\n            \"Cypress Grove Chevre\", \"Danablu (Danish Blue)\", \"Danbo\", \"Danish Fontina\",\n\n            \"Daralagjazsky\", \"Dauphin\", \"Delice des Fiouves\", \"Denhany Dorset Drum\", \"Derby\",\n\n            \"Dessertnyj Belyj\", \"Devon Blue\", \"Devon Garland\", \"Dolcelatte\", \"Doolin\",\n\n            \"Doppelrhamstufel\", \"Dorset Blue Vinney\", \"Double Gloucester\", \"Double Worcester\",\n\n            \"Dreux a la Feuille\", \"Dry Jack\", \"Duddleswell\", \"Dunbarra\", \"Dunlop\", \"Dunsyre Blue\",\n\n            \"Duroblando\", \"Durrus\", \"Dutch Mimolette (Commissiekaas)\", \"Edam\", \"Edelpilz\",\n\n            \"Emental Grand Cru\", \"Emlett\", \"Emmental\", \"Epoisses de Bourgogne\", \"Esbareich\",\n\n            \"Esrom\", \"Etorki\", \"Evansdale Farmhouse Brie\", \"Evora De L'Alentejo\", \"Exmoor Blue\",\n\n            \"Explorateur\", \"Feta\", \"Feta (Australian)\", \"Figue\", \"Filetta\", \"Fin-de-Siecle\",\n\n            \"Finlandia Swiss\", \"Finn\", \"Fiore Sardo\", \"Fleur du Maquis\", \"Flor de Guia\",\n\n            \"Flower Marie\", \"Folded\", \"Folded cheese with mint\", \"Fondant de Brebis\",\n\n            \"Fontainebleau\", \"Fontal\", \"Fontina Val d'Aosta\", \"Formaggio di capra\", \"Fougerus\",\n\n            \"Four Herb Gouda\", \"Fourme d' Ambert\", \"Fourme de Haute Loire\", \"Fourme de Montbrison\",\n\n            \"Fresh Jack\", \"Fresh Mozzarella\", \"Fresh Ricotta\", \"Fresh Truffles\", \"Fribourgeois\",\n\n            \"Friesekaas\", \"Friesian\", \"Friesla\", \"Frinault\", \"Fromage a Raclette\", \"Fromage Corse\",\n\n            \"Fromage de Montagne de Savoie\", \"Fromage Frais\", \"Fruit Cream Cheese\",\n\n            \"Frying Cheese\", \"Fynbo\", \"Gabriel\", \"Galette du Paludier\", \"Galette Lyonnaise\",\n\n            \"Galloway Goat's Milk Gems\", \"Gammelost\", \"Gaperon a l'Ail\", \"Garrotxa\", \"Gastanberra\",\n\n            \"Geitost\", \"Gippsland Blue\", \"Gjetost\", \"Gloucester\", \"Golden Cross\", \"Gorgonzola\",\n\n            \"Gornyaltajski\", \"Gospel Green\", \"Gouda\", \"Goutu\", \"Gowrie\", \"Grabetto\", \"Graddost\",\n\n            \"Grafton Village Cheddar\", \"Grana\", \"Grana Padano\", \"Grand Vatel\",\n\n            \"Grataron d' Areches\", \"Gratte-Paille\", \"Graviera\", \"Greuilh\", \"Greve\",\n\n            \"Gris de Lille\", \"Gruyere\", \"Gubbeen\", \"Guerbigny\", \"Halloumi\",\n\n            \"Halloumy (Australian)\", \"Haloumi-Style Cheese\", \"Harbourne Blue\", \"Havarti\",\n\n            \"Heidi Gruyere\", \"Hereford Hop\", \"Herrgardsost\", \"Herriot Farmhouse\", \"Herve\",\n\n            \"Hipi Iti\", \"Hubbardston Blue Cow\", \"Hushallsost\", \"Iberico\", \"Idaho Goatster\",\n\n            \"Idiazabal\", \"Il Boschetto al Tartufo\", \"Ile d'Yeu\", \"Isle of Mull\", \"Jarlsberg\",\n\n            \"Jermi Tortes\", \"Jibneh Arabieh\", \"Jindi Brie\", \"Jubilee Blue\", \"Juustoleipa\",\n\n            \"Kadchgall\", \"Kaseri\", \"Kashta\", \"Kefalotyri\", \"Kenafa\", \"Kernhem\", \"Kervella Affine\",\n\n            \"Kikorangi\", \"King Island Cape Wickham Brie\", \"King River Gold\", \"Klosterkaese\",\n\n            \"Knockalara\", \"Kugelkase\", \"L'Aveyronnais\", \"L'Ecir de l'Aubrac\", \"La Taupiniere\",\n\n            \"La Vache Qui Rit\", \"Laguiole\", \"Lairobell\", \"Lajta\", \"Lanark Blue\", \"Lancashire\",\n\n            \"Langres\", \"Lappi\", \"Laruns\", \"Lavistown\", \"Le Brin\", \"Le Fium Orbo\", \"Le Lacandou\",\n\n            \"Le Roule\", \"Leafield\", \"Lebbene\", \"Leerdammer\", \"Leicester\", \"Leyden\", \"Limburger\",\n\n            \"Lincolnshire Poacher\", \"Lingot Saint Bousquet d'Orb\", \"Liptauer\", \"Little Rydings\",\n\n            \"Livarot\", \"Llanboidy\", \"Llanglofan Farmhouse\", \"Loch Arthur Farmhouse\",\n\n            \"Loddiswell Avondale\", \"Longhorn\", \"Lou Palou\", \"Lou Pevre\", \"Lyonnais\", \"Maasdam\",\n\n            \"Macconais\", \"Mahoe Aged Gouda\", \"Mahon\", \"Malvern\", \"Mamirolle\", \"Manchego\",\n\n            \"Manouri\", \"Manur\", \"Marble Cheddar\", \"Marbled Cheeses\", \"Maredsous\", \"Margotin\",\n\n            \"Maribo\", \"Maroilles\", \"Mascares\", \"Mascarpone\", \"Mascarpone (Australian)\",\n\n            \"Mascarpone Torta\", \"Matocq\", \"Maytag Blue\", \"Meira\", \"Menallack Farmhouse\",\n\n            \"Menonita\", \"Meredith Blue\", \"Mesost\", \"Metton (Cancoillotte)\", \"Meyer Vintage Gouda\",\n\n            \"Mihalic Peynir\", \"Milleens\", \"Mimolette\", \"Mine-Gabhar\", \"Mini Baby Bells\", \"Mixte\",\n\n            \"Molbo\", \"Monastery Cheeses\", \"Mondseer\", \"Mont D'or Lyonnais\", \"Montasio\",\n\n            \"Monterey Jack\", \"Monterey Jack Dry\", \"Morbier\", \"Morbier Cru de Montagne\",\n\n            \"Mothais a la Feuille\", \"Mozzarella\", \"Mozzarella (Australian)\",\n\n            \"Mozzarella di Bufala\", \"Mozzarella Fresh, in water\", \"Mozzarella Rolls\", \"Munster\",\n\n            \"Murol\", \"Mycella\", \"Myzithra\", \"Naboulsi\", \"Nantais\", \"Neufchatel\",\n\n            \"Neufchatel (Australian)\", \"Niolo\", \"Nokkelost\", \"Northumberland\", \"Oaxaca\",\n\n            \"Olde York\", \"Olivet au Foin\", \"Olivet Bleu\", \"Olivet Cendre\",\n\n            \"Orkney Extra Mature Cheddar\", \"Orla\", \"Oschtjepka\", \"Ossau Fermier\", \"Ossau-Iraty\",\n\n            \"Oszczypek\", \"Oxford Blue\", \"P'tit Berrichon\", \"Palet de Babligny\", \"Paneer\", \"Panela\",\n\n            \"Pannerone\", \"Pant ys Gawn\", \"Parmesan (Parmigiano)\", \"Parmigiano Reggiano\",\n\n            \"Pas de l'Escalette\", \"Passendale\", \"Pasteurized Processed\", \"Pate de Fromage\",\n\n            \"Patefine Fort\", \"Pave d'Affinois\", \"Pave d'Auge\", \"Pave de Chirac\", \"Pave du Berry\",\n\n            \"Pecorino\", \"Pecorino in Walnut Leaves\", \"Pecorino Romano\", \"Peekskill Pyramid\",\n\n            \"Pelardon des Cevennes\", \"Pelardon des Corbieres\", \"Penamellera\", \"Penbryn\",\n\n            \"Pencarreg\", \"Perail de Brebis\", \"Petit Morin\", \"Petit Pardou\", \"Petit-Suisse\",\n\n            \"Picodon de Chevre\", \"Picos de Europa\", \"Piora\", \"Pithtviers au Foin\",\n\n            \"Plateau de Herve\", \"Plymouth Cheese\", \"Podhalanski\", \"Poivre d'Ane\", \"Polkolbin\",\n\n            \"Pont l'Eveque\", \"Port Nicholson\", \"Port-Salut\", \"Postel\", \"Pouligny-Saint-Pierre\",\n\n            \"Pourly\", \"Prastost\", \"Pressato\", \"Prince-Jean\", \"Processed Cheddar\", \"Provolone\",\n\n            \"Provolone (Australian)\", \"Pyengana Cheddar\", \"Pyramide\", \"Quark\",\n\n            \"Quark (Australian)\", \"Quartirolo Lombardo\", \"Quatre-Vents\", \"Quercy Petit\",\n\n            \"Queso Blanco\", \"Queso Blanco con Frutas --Pina y Mango\", \"Queso de Murcia\",\n\n            \"Queso del Montsec\", \"Queso del Tietar\", \"Queso Fresco\", \"Queso Fresco (Adobera)\",\n\n            \"Queso Iberico\", \"Queso Jalapeno\", \"Queso Majorero\", \"Queso Media Luna\",\n\n            \"Queso Para Frier\", \"Queso Quesadilla\", \"Rabacal\", \"Raclette\", \"Ragusano\", \"Raschera\",\n\n            \"Reblochon\", \"Red Leicester\", \"Regal de la Dombes\", \"Reggianito\", \"Remedou\",\n\n            \"Requeson\", \"Richelieu\", \"Ricotta\", \"Ricotta (Australian)\", \"Ricotta Salata\", \"Ridder\",\n\n            \"Rigotte\", \"Rocamadour\", \"Rollot\", \"Romano\", \"Romans Part Dieu\", \"Roncal\", \"Roquefort\",\n\n            \"Roule\", \"Rouleau De Beaulieu\", \"Royalp Tilsit\", \"Rubens\", \"Rustinu\", \"Saaland Pfarr\",\n\n            \"Saanenkaese\", \"Saga\", \"Sage Derby\", \"Sainte Maure\", \"Saint-Marcellin\",\n\n            \"Saint-Nectaire\", \"Saint-Paulin\", \"Salers\", \"Samso\", \"San Simon\", \"Sancerre\",\n\n            \"Sap Sago\", \"Sardo\", \"Sardo Egyptian\", \"Sbrinz\", \"Scamorza\", \"Schabzieger\", \"Schloss\",\n\n            \"Selles sur Cher\", \"Selva\", \"Serat\", \"Seriously Strong Cheddar\", \"Serra da Estrela\",\n\n            \"Sharpam\", \"Shelburne Cheddar\", \"Shropshire Blue\", \"Siraz\", \"Sirene\", \"Smoked Gouda\",\n\n            \"Somerset Brie\", \"Sonoma Jack\", \"Sottocenare al Tartufo\", \"Soumaintrain\",\n\n            \"Sourire Lozerien\", \"Spenwood\", \"Sraffordshire Organic\", \"St. Agur Blue Cheese\",\n\n            \"Stilton\", \"Stinking Bishop\", \"String\", \"Sussex Slipcote\", \"Sveciaost\", \"Swaledale\",\n\n            \"Sweet Style Swiss\", \"Swiss\", \"Syrian (Armenian String)\", \"Tala\", \"Taleggio\", \"Tamie\",\n\n            \"Tasmania Highland Chevre Log\", \"Taupiniere\", \"Teifi\", \"Telemea\", \"Testouri\",\n\n            \"Tete de Moine\", \"Tetilla\", \"Texas Goat Cheese\", \"Tibet\", \"Tillamook Cheddar\",\n\n            \"Tilsit\", \"Timboon Brie\", \"Toma\", \"Tomme Brulee\", \"Tomme d'Abondance\",\n\n            \"Tomme de Chevre\", \"Tomme de Romans\", \"Tomme de Savoie\", \"Tomme des Chouans\", \"Tommes\",\n\n            \"Torta del Casar\", \"Toscanello\", \"Touree de L'Aubier\", \"Tourmalet\",\n\n            \"Trappe (Veritable)\", \"Trois Cornes De Vendee\", \"Tronchon\", \"Trou du Cru\", \"Truffe\",\n\n            \"Tupi\", \"Turunmaa\", \"Tymsboro\", \"Tyn Grug\", \"Tyning\", \"Ubriaco\", \"Ulloa\",\n\n            \"Vacherin-Fribourgeois\", \"Valencay\", \"Vasterbottenost\", \"Venaco\", \"Vendomois\",\n\n            \"Vieux Corse\", \"Vignotte\", \"Vulscombe\", \"Waimata Farmhouse Blue\",\n\n            \"Washed Rind Cheese (Australian)\", \"Waterloo\", \"Weichkaese\", \"Wellington\",\n\n            \"Wensleydale\", \"White Stilton\", \"Whitestone Farmhouse\", \"Wigmore\", \"Woodside Cabecou\",\n\n            \"Xanadu\", \"Xynotyro\", \"Yarg Cornish\", \"Yarra Valley Pyramid\", \"Yorkshire Blue\",\n\n            \"Zamorano\", \"Zanetti Grana Padano\", \"Zanetti Parmigiano Reggiano\"\n\n    };\n\n \n\n    public static ArrayList<String> asList() {\n\n        ArrayList<String> items = new ArrayList<String>();\n\n        for (int i = 0, z = CHEESES.length ; i < z ; i++) {\n\n            items.add(CHEESES[i]);\n\n        }\n\n        return items;\n\n    }\n\n \n\n    /**\n\n     * Return a list of random cheeses.\n\n     *\n\n     * @param count the amount of cheeses to return.\n\n     */\n\n    public static ArrayList<String> randomList(int count) {\n\n        Random random = new Random();\n\n        HashSet<String> items = new HashSet<String>();\n\n \n\n        // Make sure that don't infinity loop\n\n        count = Math.min(count, CHEESES.length);\n\n \n\n        while (items.size() < count) {\n\n            items.add(CHEESES[random.nextInt(CHEESES.length)]);\n\n        }\n\n \n\n        return new ArrayList<String>(items);\n\n    }\n\n}\n  "},"logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "},"view":{"SlidingTabLayout.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.view;\n\n \n\nimport android.content.Context;\n\nimport android.graphics.Typeface;\n\nimport android.os.Build;\n\nimport android.support.v4.view.PagerAdapter;\n\nimport android.support.v4.view.ViewPager;\n\nimport android.util.AttributeSet;\n\nimport android.util.TypedValue;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.widget.HorizontalScrollView;\n\nimport android.widget.TextView;\n\n \n\n/**\n\n * To be used with ViewPager to provide a tab indicator component which give constant feedback as to\n\n * the user's scroll progress.\n\n * <p>\n\n * To use the component, simply add it to your view hierarchy. Then in your\n\n * {@link android.app.Activity} or {@link android.support.v4.app.Fragment} call\n\n * {@link #setViewPager(ViewPager)} providing it the ViewPager this layout is being used for.\n\n * <p>\n\n * The colors can be customized in two ways. The first and simplest is to provide an array of colors\n\n * via {@link #setSelectedIndicatorColors(int...)} and {@link #setDividerColors(int...)}. The\n\n * alternative is via the {@link TabColorizer} interface which provides you complete control over\n\n * which color is used for any individual position.\n\n * <p>\n\n * The views used as tabs can be customized by calling {@link #setCustomTabView(int, int)},\n\n * providing the layout ID of your custom layout.\n\n */\n\npublic class SlidingTabLayout extends HorizontalScrollView {\n\n \n\n    /**\n\n     * Allows complete control over the colors drawn in the tab layout. Set with\n\n     * {@link #setCustomTabColorizer(TabColorizer)}.\n\n     */\n\n    public interface TabColorizer {\n\n \n\n        /**\n\n         * @return return the color of the indicator used when {@code position} is selected.\n\n         */\n\n        int getIndicatorColor(int position);\n\n \n\n        /**\n\n         * @return return the color of the divider drawn to the right of {@code position}.\n\n         */\n\n        int getDividerColor(int position);\n\n \n\n    }\n\n \n\n    private static final int TITLE_OFFSET_DIPS = 24;\n\n    private static final int TAB_VIEW_PADDING_DIPS = 16;\n\n    private static final int TAB_VIEW_TEXT_SIZE_SP = 12;\n\n \n\n    private int mTitleOffset;\n\n \n\n    private int mTabViewLayoutId;\n\n    private int mTabViewTextViewId;\n\n \n\n    private ViewPager mViewPager;\n\n    private ViewPager.OnPageChangeListener mViewPagerPageChangeListener;\n\n \n\n    private final SlidingTabStrip mTabStrip;\n\n \n\n    public SlidingTabLayout(Context context) {\n\n        this(context, null);\n\n    }\n\n \n\n    public SlidingTabLayout(Context context, AttributeSet attrs) {\n\n        this(context, attrs, 0);\n\n    }\n\n \n\n    public SlidingTabLayout(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n \n\n        // Disable the Scroll Bar\n\n        setHorizontalScrollBarEnabled(false);\n\n        // Make sure that the Tab Strips fills this View\n\n        setFillViewport(true);\n\n \n\n        mTitleOffset = (int) (TITLE_OFFSET_DIPS * getResources().getDisplayMetrics().density);\n\n \n\n        mTabStrip = new SlidingTabStrip(context);\n\n        addView(mTabStrip, LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);\n\n    }\n\n \n\n    /**\n\n     * Set the custom {@link TabColorizer} to be used.\n\n     *\n\n     * If you only require simple custmisation then you can use\n\n     * {@link #setSelectedIndicatorColors(int...)} and {@link #setDividerColors(int...)} to achieve\n\n     * similar effects.\n\n     */\n\n    public void setCustomTabColorizer(TabColorizer tabColorizer) {\n\n        mTabStrip.setCustomTabColorizer(tabColorizer);\n\n    }\n\n \n\n    /**\n\n     * Sets the colors to be used for indicating the selected tab. These colors are treated as a\n\n     * circular array. Providing one color will mean that all tabs are indicated with the same color.\n\n     */\n\n    public void setSelectedIndicatorColors(int... colors) {\n\n        mTabStrip.setSelectedIndicatorColors(colors);\n\n    }\n\n \n\n    /**\n\n     * Sets the colors to be used for tab dividers. These colors are treated as a circular array.\n\n     * Providing one color will mean that all tabs are indicated with the same color.\n\n     */\n\n    public void setDividerColors(int... colors) {\n\n        mTabStrip.setDividerColors(colors);\n\n    }\n\n \n\n    /**\n\n     * Set the {@link ViewPager.OnPageChangeListener}. When using {@link SlidingTabLayout} you are\n\n     * required to set any {@link ViewPager.OnPageChangeListener} through this method. This is so\n\n     * that the layout can update it's scroll position correctly.\n\n     *\n\n     * @see ViewPager#setOnPageChangeListener(ViewPager.OnPageChangeListener)\n\n     */\n\n    public void setOnPageChangeListener(ViewPager.OnPageChangeListener listener) {\n\n        mViewPagerPageChangeListener = listener;\n\n    }\n\n \n\n    /**\n\n     * Set the custom layout to be inflated for the tab views.\n\n     *\n\n     * @param layoutResId Layout id to be inflated\n\n     * @param textViewId id of the {@link TextView} in the inflated view\n\n     */\n\n    public void setCustomTabView(int layoutResId, int textViewId) {\n\n        mTabViewLayoutId = layoutResId;\n\n        mTabViewTextViewId = textViewId;\n\n    }\n\n \n\n    /**\n\n     * Sets the associated view pager. Note that the assumption here is that the pager content\n\n     * (number of tabs and tab titles) does not change after this call has been made.\n\n     */\n\n    public void setViewPager(ViewPager viewPager) {\n\n        mTabStrip.removeAllViews();\n\n \n\n        mViewPager = viewPager;\n\n        if (viewPager != null) {\n\n            viewPager.setOnPageChangeListener(new InternalViewPagerListener());\n\n            populateTabStrip();\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Create a default view to be used for tabs. This is called if a custom tab view is not set via\n\n     * {@link #setCustomTabView(int, int)}.\n\n     */\n\n    protected TextView createDefaultTabView(Context context) {\n\n        TextView textView = new TextView(context);\n\n        textView.setGravity(Gravity.CENTER);\n\n        textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, TAB_VIEW_TEXT_SIZE_SP);\n\n        textView.setTypeface(Typeface.DEFAULT_BOLD);\n\n \n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {\n\n            // If we're running on Honeycomb or newer, then we can use the Theme's\n\n            // selectableItemBackground to ensure that the View has a pressed state\n\n            TypedValue outValue = new TypedValue();\n\n            getContext().getTheme().resolveAttribute(android.R.attr.selectableItemBackground,\n\n                    outValue, true);\n\n            textView.setBackgroundResource(outValue.resourceId);\n\n        }\n\n \n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {\n\n            // If we're running on ICS or newer, enable all-caps to match the Action Bar tab style\n\n            textView.setAllCaps(true);\n\n        }\n\n \n\n        int padding = (int) (TAB_VIEW_PADDING_DIPS * getResources().getDisplayMetrics().density);\n\n        textView.setPadding(padding, padding, padding, padding);\n\n \n\n        return textView;\n\n    }\n\n \n\n    private void populateTabStrip() {\n\n        final PagerAdapter adapter = mViewPager.getAdapter();\n\n        final View.OnClickListener tabClickListener = new TabClickListener();\n\n \n\n        for (int i = 0; i < adapter.getCount(); i++) {\n\n            View tabView = null;\n\n            TextView tabTitleView = null;\n\n \n\n            if (mTabViewLayoutId != 0) {\n\n                // If there is a custom tab view layout id set, try and inflate it\n\n                tabView = LayoutInflater.from(getContext()).inflate(mTabViewLayoutId, mTabStrip,\n\n                        false);\n\n                tabTitleView = (TextView) tabView.findViewById(mTabViewTextViewId);\n\n            }\n\n \n\n            if (tabView == null) {\n\n                tabView = createDefaultTabView(getContext());\n\n            }\n\n \n\n            if (tabTitleView == null && TextView.class.isInstance(tabView)) {\n\n                tabTitleView = (TextView) tabView;\n\n            }\n\n \n\n            tabTitleView.setText(adapter.getPageTitle(i));\n\n            tabView.setOnClickListener(tabClickListener);\n\n \n\n            mTabStrip.addView(tabView);\n\n        }\n\n    }\n\n \n\n    @Override\n\n    protected void onAttachedToWindow() {\n\n        super.onAttachedToWindow();\n\n \n\n        if (mViewPager != null) {\n\n            scrollToTab(mViewPager.getCurrentItem(), 0);\n\n        }\n\n    }\n\n \n\n    private void scrollToTab(int tabIndex, int positionOffset) {\n\n        final int tabStripChildCount = mTabStrip.getChildCount();\n\n        if (tabStripChildCount == 0 || tabIndex < 0 || tabIndex >= tabStripChildCount) {\n\n            return;\n\n        }\n\n \n\n        View selectedChild = mTabStrip.getChildAt(tabIndex);\n\n        if (selectedChild != null) {\n\n            int targetScrollX = selectedChild.getLeft() + positionOffset;\n\n \n\n            if (tabIndex > 0 || positionOffset > 0) {\n\n                // If we're not at the first child and are mid-scroll, make sure we obey the offset\n\n                targetScrollX -= mTitleOffset;\n\n            }\n\n \n\n            scrollTo(targetScrollX, 0);\n\n        }\n\n    }\n\n \n\n    private class InternalViewPagerListener implements ViewPager.OnPageChangeListener {\n\n        private int mScrollState;\n\n \n\n        @Override\n\n        public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\n\n            int tabStripChildCount = mTabStrip.getChildCount();\n\n            if ((tabStripChildCount == 0) || (position < 0) || (position >= tabStripChildCount)) {\n\n                return;\n\n            }\n\n \n\n            mTabStrip.onViewPagerPageChanged(position, positionOffset);\n\n \n\n            View selectedTitle = mTabStrip.getChildAt(position);\n\n            int extraOffset = (selectedTitle != null)\n\n                    ? (int) (positionOffset * selectedTitle.getWidth())\n\n                    : 0;\n\n            scrollToTab(position, extraOffset);\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageScrolled(position, positionOffset,\n\n                        positionOffsetPixels);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void onPageScrollStateChanged(int state) {\n\n            mScrollState = state;\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageScrollStateChanged(state);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void onPageSelected(int position) {\n\n            if (mScrollState == ViewPager.SCROLL_STATE_IDLE) {\n\n                mTabStrip.onViewPagerPageChanged(position, 0f);\n\n                scrollToTab(position, 0);\n\n            }\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageSelected(position);\n\n            }\n\n        }\n\n \n\n    }\n\n \n\n    private class TabClickListener implements View.OnClickListener {\n\n        @Override\n\n        public void onClick(View v) {\n\n            for (int i = 0; i < mTabStrip.getChildCount(); i++) {\n\n                if (v == mTabStrip.getChildAt(i)) {\n\n                    mViewPager.setCurrentItem(i);\n\n                    return;\n\n                }\n\n            }\n\n        }\n\n    }\n\n \n\n}\n  ","SlidingTabStrip.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.view;\n\n \n\nimport android.R;\n\nimport android.content.Context;\n\nimport android.graphics.Canvas;\n\nimport android.graphics.Color;\n\nimport android.graphics.Paint;\n\nimport android.util.AttributeSet;\n\nimport android.util.TypedValue;\n\nimport android.view.View;\n\nimport android.widget.LinearLayout;\n\n \n\nclass SlidingTabStrip extends LinearLayout {\n\n \n\n    private static final int DEFAULT_BOTTOM_BORDER_THICKNESS_DIPS = 2;\n\n    private static final byte DEFAULT_BOTTOM_BORDER_COLOR_ALPHA = 0x26;\n\n    private static final int SELECTED_INDICATOR_THICKNESS_DIPS = 8;\n\n    private static final int DEFAULT_SELECTED_INDICATOR_COLOR = 0xFF33B5E5;\n\n \n\n    private static final int DEFAULT_DIVIDER_THICKNESS_DIPS = 1;\n\n    private static final byte DEFAULT_DIVIDER_COLOR_ALPHA = 0x20;\n\n    private static final float DEFAULT_DIVIDER_HEIGHT = 0.5f;\n\n \n\n    private final int mBottomBorderThickness;\n\n    private final Paint mBottomBorderPaint;\n\n \n\n    private final int mSelectedIndicatorThickness;\n\n    private final Paint mSelectedIndicatorPaint;\n\n \n\n    private final int mDefaultBottomBorderColor;\n\n \n\n    private final Paint mDividerPaint;\n\n    private final float mDividerHeight;\n\n \n\n    private int mSelectedPosition;\n\n    private float mSelectionOffset;\n\n \n\n    private SlidingTabLayout.TabColorizer mCustomTabColorizer;\n\n    private final SimpleTabColorizer mDefaultTabColorizer;\n\n \n\n    SlidingTabStrip(Context context) {\n\n        this(context, null);\n\n    }\n\n \n\n    SlidingTabStrip(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n        setWillNotDraw(false);\n\n \n\n        final float density = getResources().getDisplayMetrics().density;\n\n \n\n        TypedValue outValue = new TypedValue();\n\n        context.getTheme().resolveAttribute(R.attr.colorForeground, outValue, true);\n\n        final int themeForegroundColor =  outValue.data;\n\n \n\n        mDefaultBottomBorderColor = setColorAlpha(themeForegroundColor,\n\n                DEFAULT_BOTTOM_BORDER_COLOR_ALPHA);\n\n \n\n        mDefaultTabColorizer = new SimpleTabColorizer();\n\n        mDefaultTabColorizer.setIndicatorColors(DEFAULT_SELECTED_INDICATOR_COLOR);\n\n        mDefaultTabColorizer.setDividerColors(setColorAlpha(themeForegroundColor,\n\n                DEFAULT_DIVIDER_COLOR_ALPHA));\n\n \n\n        mBottomBorderThickness = (int) (DEFAULT_BOTTOM_BORDER_THICKNESS_DIPS * density);\n\n        mBottomBorderPaint = new Paint();\n\n        mBottomBorderPaint.setColor(mDefaultBottomBorderColor);\n\n \n\n        mSelectedIndicatorThickness = (int) (SELECTED_INDICATOR_THICKNESS_DIPS * density);\n\n        mSelectedIndicatorPaint = new Paint();\n\n \n\n        mDividerHeight = DEFAULT_DIVIDER_HEIGHT;\n\n        mDividerPaint = new Paint();\n\n        mDividerPaint.setStrokeWidth((int) (DEFAULT_DIVIDER_THICKNESS_DIPS * density));\n\n    }\n\n \n\n    void setCustomTabColorizer(SlidingTabLayout.TabColorizer customTabColorizer) {\n\n        mCustomTabColorizer = customTabColorizer;\n\n        invalidate();\n\n    }\n\n \n\n    void setSelectedIndicatorColors(int... colors) {\n\n        // Make sure that the custom colorizer is removed\n\n        mCustomTabColorizer = null;\n\n        mDefaultTabColorizer.setIndicatorColors(colors);\n\n        invalidate();\n\n    }\n\n \n\n    void setDividerColors(int... colors) {\n\n        // Make sure that the custom colorizer is removed\n\n        mCustomTabColorizer = null;\n\n        mDefaultTabColorizer.setDividerColors(colors);\n\n        invalidate();\n\n    }\n\n \n\n    void onViewPagerPageChanged(int position, float positionOffset) {\n\n        mSelectedPosition = position;\n\n        mSelectionOffset = positionOffset;\n\n        invalidate();\n\n    }\n\n \n\n    @Override\n\n    protected void onDraw(Canvas canvas) {\n\n        final int height = getHeight();\n\n        final int childCount = getChildCount();\n\n        final int dividerHeightPx = (int) (Math.min(Math.max(0f, mDividerHeight), 1f) * height);\n\n        final SlidingTabLayout.TabColorizer tabColorizer = mCustomTabColorizer != null\n\n                ? mCustomTabColorizer\n\n                : mDefaultTabColorizer;\n\n \n\n        // Thick colored underline below the current selection\n\n        if (childCount > 0) {\n\n            View selectedTitle = getChildAt(mSelectedPosition);\n\n            int left = selectedTitle.getLeft();\n\n            int right = selectedTitle.getRight();\n\n            int color = tabColorizer.getIndicatorColor(mSelectedPosition);\n\n \n\n            if (mSelectionOffset > 0f && mSelectedPosition < (getChildCount() - 1)) {\n\n                int nextColor = tabColorizer.getIndicatorColor(mSelectedPosition + 1);\n\n                if (color != nextColor) {\n\n                    color = blendColors(nextColor, color, mSelectionOffset);\n\n                }\n\n \n\n                // Draw the selection partway between the tabs\n\n                View nextTitle = getChildAt(mSelectedPosition + 1);\n\n                left = (int) (mSelectionOffset * nextTitle.getLeft() +\n\n                        (1.0f - mSelectionOffset) * left);\n\n                right = (int) (mSelectionOffset * nextTitle.getRight() +\n\n                        (1.0f - mSelectionOffset) * right);\n\n            }\n\n \n\n            mSelectedIndicatorPaint.setColor(color);\n\n \n\n            canvas.drawRect(left, height - mSelectedIndicatorThickness, right,\n\n                    height, mSelectedIndicatorPaint);\n\n        }\n\n \n\n        // Thin underline along the entire bottom edge\n\n        canvas.drawRect(0, height - mBottomBorderThickness, getWidth(), height, mBottomBorderPaint);\n\n \n\n        // Vertical separators between the titles\n\n        int separatorTop = (height - dividerHeightPx) / 2;\n\n        for (int i = 0; i < childCount - 1; i++) {\n\n            View child = getChildAt(i);\n\n            mDividerPaint.setColor(tabColorizer.getDividerColor(i));\n\n            canvas.drawLine(child.getRight(), separatorTop, child.getRight(),\n\n                    separatorTop + dividerHeightPx, mDividerPaint);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Set the alpha value of the {@code color} to be the given {@code alpha} value.\n\n     */\n\n    private static int setColorAlpha(int color, byte alpha) {\n\n        return Color.argb(alpha, Color.red(color), Color.green(color), Color.blue(color));\n\n    }\n\n \n\n    /**\n\n     * Blend {@code color1} and {@code color2} using the given ratio.\n\n     *\n\n     * @param ratio of which to blend. 1.0 will return {@code color1}, 0.5 will give an even blend,\n\n     *              0.0 will return {@code color2}.\n\n     */\n\n    private static int blendColors(int color1, int color2, float ratio) {\n\n        final float inverseRation = 1f - ratio;\n\n        float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRation);\n\n        float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRation);\n\n        float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRation);\n\n        return Color.rgb((int) r, (int) g, (int) b);\n\n    }\n\n \n\n    private static class SimpleTabColorizer implements SlidingTabLayout.TabColorizer {\n\n        private int[] mIndicatorColors;\n\n        private int[] mDividerColors;\n\n \n\n        @Override\n\n        public final int getIndicatorColor(int position) {\n\n            return mIndicatorColors[position % mIndicatorColors.length];\n\n        }\n\n \n\n        @Override\n\n        public final int getDividerColor(int position) {\n\n            return mDividerColors[position % mDividerColors.length];\n\n        }\n\n \n\n        void setIndicatorColors(int... colors) {\n\n            mIndicatorColors = colors;\n\n        }\n\n \n\n        void setDividerColors(int... colors) {\n\n            mDividerColors = colors;\n\n        }\n\n    }\n\n}\n  "}},"com.example.android.swiperefreshmultipleviews":{"MainActivity.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.swiperefreshmultipleviews;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentTransaction;\n\nimport android.view.Menu;\n\nimport android.view.MenuItem;\n\nimport android.widget.ViewAnimator;\n\n \n\nimport com.example.android.common.activities.SampleActivityBase;\n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogFragment;\n\nimport com.example.android.common.logger.LogWrapper;\n\nimport com.example.android.common.logger.MessageOnlyLogFilter;\n\n \n\n/**\n\n * A simple launcher activity containing a summary sample description, sample log and a custom\n\n * {@link android.support.v4.app.Fragment} which can display a view.\n\n * <p>\n\n * For devices with displays with a width of 720dp or greater, the sample log is always visible,\n\n * on other devices it's visibility is controlled by an item on the Action Bar.\n\n */\n\npublic class MainActivity extends SampleActivityBase {\n\n \n\n    public static final String TAG = \"MainActivity\";\n\n \n\n    // Whether the Log Fragment is currently shown\n\n    private boolean mLogShown;\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_main);\n\n \n\n        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n\n        SwipeRefreshMultipleViewsFragment fragment = new SwipeRefreshMultipleViewsFragment();\n\n        transaction.replace(R.id.sample_content_fragment, fragment);\n\n        transaction.commit();\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        getMenuInflater().inflate(R.menu.main, menu);\n\n        return true;\n\n    }\n\n \n\n    @Override\n\n    public boolean onPrepareOptionsMenu(Menu menu) {\n\n        MenuItem logToggle = menu.findItem(R.id.menu_toggle_log);\n\n        logToggle.setVisible(findViewById(R.id.sample_output) instanceof ViewAnimator);\n\n        logToggle.setTitle(mLogShown ? R.string.sample_hide_log : R.string.sample_show_log);\n\n \n\n        return super.onPrepareOptionsMenu(menu);\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch(item.getItemId()) {\n\n            case R.id.menu_toggle_log:\n\n                mLogShown = !mLogShown;\n\n                ViewAnimator output = (ViewAnimator) findViewById(R.id.sample_output);\n\n                if (mLogShown) {\n\n                    output.setDisplayedChild(1);\n\n                } else {\n\n                    output.setDisplayedChild(0);\n\n                }\n\n                supportInvalidateOptionsMenu();\n\n                return true;\n\n        }\n\n        return super.onOptionsItemSelected(item);\n\n    }\n\n \n\n    /** Create a chain of targets that will receive log data */\n\n    @Override\n\n    public void initializeLogging() {\n\n        // Wraps Android's native log framework.\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        Log.setLogNode(logWrapper);\n\n \n\n        // Filter strips out everything except the message text.\n\n        MessageOnlyLogFilter msgFilter = new MessageOnlyLogFilter();\n\n        logWrapper.setNext(msgFilter);\n\n \n\n        // On screen logging via a fragment with a TextView.\n\n        LogFragment logFragment = (LogFragment) getSupportFragmentManager()\n\n                .findFragmentById(R.id.log_fragment);\n\n        msgFilter.setNext(logFragment.getLogView());\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  ","MultiSwipeRefreshLayout.java":"\n    \n\n/*\n\n * Copyright 2014 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *       http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.swiperefreshmultipleviews;\n\n \n\nimport android.content.Context;\n\nimport android.support.v4.view.ViewCompat;\n\nimport android.support.v4.widget.SwipeRefreshLayout;\n\nimport android.util.AttributeSet;\n\nimport android.view.View;\n\nimport android.widget.AbsListView;\n\n \n\n/**\n\n * A descendant of {@link android.support.v4.widget.SwipeRefreshLayout} which supports multiple\n\n * child views triggering a refresh gesture. You set the views which can trigger the gesture via\n\n * {@link #setSwipeableChildren(int...)}, providing it the child ids.\n\n */\n\npublic class MultiSwipeRefreshLayout extends SwipeRefreshLayout {\n\n \n\n    private View[] mSwipeableChildren;\n\n \n\n    public MultiSwipeRefreshLayout(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public MultiSwipeRefreshLayout(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    /**\n\n     * Set the children which can trigger a refresh by swiping down when they are visible. These\n\n     * views need to be a descendant of this view.\n\n     */\n\n    public void setSwipeableChildren(final int... ids) {\n\n        assert ids != null;\n\n \n\n        // Iterate through the ids and find the Views\n\n        mSwipeableChildren = new View[ids.length];\n\n        for (int i = 0; i < ids.length; i++) {\n\n            mSwipeableChildren[i] = findViewById(ids[i]);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * This method controls when the swipe-to-refresh gesture is triggered. By returning false here\n\n     * we are signifying that the view is in a state where a refresh gesture can start.\n\n     *\n\n     * <p>As {@link android.support.v4.widget.SwipeRefreshLayout} only supports one direct child by\n\n     * default, we need to manually iterate through our swipeable children to see if any are in a\n\n     * state to trigger the gesture. If so we return false to start the gesture.\n\n     */\n\n    @Override\n\n    public boolean canChildScrollUp() {\n\n        if (mSwipeableChildren != null && mSwipeableChildren.length > 0) {\n\n            // Iterate through the scrollable children and check if any of them can not scroll up\n\n            for (View view : mSwipeableChildren) {\n\n                if (view != null && view.isShown() && !canViewScrollUp(view)) {\n\n                    // If the view is shown, and can not scroll upwards, return false and start the\n\n                    // gesture.\n\n                    return false;\n\n                }\n\n            }\n\n        }\n\n        return true;\n\n    }\n\n \n\n    /**\n\n     * Utility method to check whether a {@link View} can scroll up from it's current position.\n\n     * Handles platform version differences, providing backwards compatible functionality where\n\n     * needed.\n\n     */\n\n    private static boolean canViewScrollUp(View view) {\n\n        if (android.os.Build.VERSION.SDK_INT >= 14) {\n\n            // For ICS and above we can call canScrollVertically() to determine this\n\n            return ViewCompat.canScrollVertically(view, -1);\n\n        } else {\n\n            if (view instanceof AbsListView) {\n\n                // Pre-ICS we need to manually check the first visible item and the child view's top\n\n                // value\n\n                final AbsListView listView = (AbsListView) view;\n\n                return listView.getChildCount() > 0 &&\n\n                        (listView.getFirstVisiblePosition() > 0\n\n                                || listView.getChildAt(0).getTop() < listView.getPaddingTop());\n\n            } else {\n\n                // For all other view types we just check the getScrollY() value\n\n                return view.getScrollY() > 0;\n\n            }\n\n        }\n\n    }\n\n}\n  ","SwipeRefreshMultipleViewsFragment.java":"\n    \n\n/*\n\n * Copyright 2014 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *       http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.swiperefreshmultipleviews;\n\n \n\nimport com.example.android.common.dummydata.Cheeses;\n\nimport com.example.android.common.logger.Log;\n\n \n\nimport android.os.AsyncTask;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.support.v4.widget.SwipeRefreshLayout;\n\nimport android.view.LayoutInflater;\n\nimport android.view.Menu;\n\nimport android.view.MenuInflater;\n\nimport android.view.MenuItem;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ArrayAdapter;\n\nimport android.widget.GridView;\n\n \n\nimport java.util.List;\n\n \n\n/**\n\n * A sample which shows how to use {@link android.support.v4.widget.SwipeRefreshLayout} to add\n\n * the 'swipe-to-refresh' gesture to a layout with multiple children. In this sample,\n\n * SwipeRefreshLayout contains a scrollable {@link android.widget.GridView}, along with a\n\n * {@link android.widget.TextView} empty view.\n\n *\n\n * <p>To provide an accessible way to trigger the refresh, this app also provides a refresh\n\n * action item.\n\n *\n\n * <p>In this sample app, the refresh updates the GridView with a random set of new items.\n\n */\n\npublic class SwipeRefreshMultipleViewsFragment extends Fragment {\n\n \n\n    private static final String LOG_TAG = SwipeRefreshMultipleViewsFragment.class.getSimpleName();\n\n \n\n    private static final int LIST_ITEM_COUNT = 40;\n\n \n\n    /**\n\n     * The {@link MultiSwipeRefreshLayout} that detects swipe gestures and triggers callbacks in\n\n     * the app.\n\n     */\n\n    private MultiSwipeRefreshLayout mSwipeRefreshLayout;\n\n \n\n    /**\n\n     * The {@link android.widget.GridView} that displays the content that should be refreshed.\n\n     */\n\n    private GridView mGridView;\n\n \n\n    /**\n\n     * The {@link android.widget.ListAdapter} used to populate the {@link android.widget.GridView}\n\n     * defined in the previous statement.\n\n     */\n\n    private ArrayAdapter<String> mListAdapter;\n\n \n\n    /**\n\n     * The {@link View} which is displayed when the GridView is empty.\n\n     */\n\n    private View mEmptyView;\n\n \n\n    @Override\n\n    public void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n \n\n        // Notify the system to allow an options menu for this fragment.\n\n        setHasOptionsMenu(true);\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n            Bundle savedInstanceState) {\n\n        View view = inflater.inflate(R.layout.fragment_sample, container, false);\n\n \n\n        // Retrieve the SwipeRefreshLayout and GridView instances\n\n        mSwipeRefreshLayout = (MultiSwipeRefreshLayout) view.findViewById(R.id.swiperefresh);\n\n \n\n        // Set the color scheme of the SwipeRefreshLayout by providing 4 color resource ids\n\n        mSwipeRefreshLayout.setColorScheme(\n\n                R.color.swipe_color_1, R.color.swipe_color_2,\n\n                R.color.swipe_color_3, R.color.swipe_color_4);\n\n \n\n        // Retrieve the GridView\n\n        mGridView = (GridView) view.findViewById(android.R.id.list);\n\n \n\n        // Retrieve the empty view\n\n        mEmptyView = view.findViewById(android.R.id.empty);\n\n \n\n        return view;\n\n    }\n\n \n\n    @Override\n\n    public void onViewCreated(View view, Bundle savedInstanceState) {\n\n        super.onViewCreated(view, savedInstanceState);\n\n \n\n        /**\n\n         * Create an ArrayAdapter to contain the data for the GridView. Each item in the GridView\n\n         * uses the system-defined simple_list_item_1 layout that contains one TextView. Initially\n\n         */\n\n        mListAdapter = new ArrayAdapter<String>(\n\n                getActivity(),\n\n                android.R.layout.simple_list_item_1,\n\n                android.R.id.text1);\n\n \n\n        // Set the adapter between the GridView and its backing data.\n\n        mGridView.setAdapter(mListAdapter);\n\n \n\n        // Set the empty view so that it is displayed as needed\n\n        mGridView.setEmptyView(mEmptyView);\n\n \n\n        // Tell the MultiSwipeRefreshLayout which views are swipeable. In this case, the GridView\n\n        // and empty view.\n\n        mSwipeRefreshLayout.setSwipeableChildren(android.R.id.list, android.R.id.empty);\n\n \n\n        /**\n\n         * Implement {@link SwipeRefreshLayout.OnRefreshListener}. When users do the \"swipe to\n\n         * refresh\" gesture, SwipeRefreshLayout invokes\n\n         * {@link SwipeRefreshLayout.OnRefreshListener#onRefresh onRefresh()}. In\n\n         * {@link SwipeRefreshLayout.OnRefreshListener#onRefresh onRefresh()}, call a method that\n\n         * refreshes the content. Call the same method in response to the Refresh action from the\n\n         * action bar.\n\n         */\n\n        mSwipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\n\n            @Override\n\n            public void onRefresh() {\n\n                Log.i(LOG_TAG, \"onRefresh called from SwipeRefreshLayout\");\n\n \n\n                initiateRefresh();\n\n            }\n\n        });\n\n    }\n\n \n\n    @Override\n\n    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {\n\n        inflater.inflate(R.menu.main_menu, menu);\n\n    }\n\n \n\n    /**\n\n     * Respond to the user's selection of the Refresh action item. Start the SwipeRefreshLayout\n\n     * progress bar, then initiate the background task that refreshes the content.\n\n     */\n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch (item.getItemId()) {\n\n            case R.id.menu_clear:\n\n                Log.i(LOG_TAG, \"Clear menu item selected\");\n\n                mListAdapter.clear();\n\n                return true;\n\n \n\n            case R.id.menu_refresh:\n\n                Log.i(LOG_TAG, \"Refresh menu item selected\");\n\n \n\n                // We make sure that the SwipeRefreshLayout is displaying it's refreshing indicator\n\n                if (!mSwipeRefreshLayout.isRefreshing()) {\n\n                    mSwipeRefreshLayout.setRefreshing(true);\n\n                }\n\n \n\n                // Start our refresh background task\n\n                initiateRefresh();\n\n \n\n                return true;\n\n        }\n\n \n\n        return super.onOptionsItemSelected(item);\n\n    }\n\n \n\n    /**\n\n     * By abstracting the refresh process to a single method, the app allows both the\n\n     * SwipeGestureLayout onRefresh() method and the Refresh action item to refresh the content.\n\n     */\n\n    private void initiateRefresh() {\n\n        Log.i(LOG_TAG, \"initiateRefresh\");\n\n \n\n        /**\n\n         * Execute the background task, which uses {@link android.os.AsyncTask} to load the data.\n\n         */\n\n        new DummyBackgroundTask().execute();\n\n    }\n\n \n\n    /**\n\n     * When the AsyncTask finishes, it calls onRefreshComplete(), which updates the data in the\n\n     * ListAdapter and turns off the progress bar.\n\n     */\n\n    private void onRefreshComplete(List<String> result) {\n\n        Log.i(LOG_TAG, \"onRefreshComplete\");\n\n \n\n        // Remove all items from the ListAdapter, and then replace them with the new items\n\n        mListAdapter.clear();\n\n        for (String cheese : result) {\n\n            mListAdapter.add(cheese);\n\n        }\n\n \n\n        // Stop the refreshing indicator\n\n        mSwipeRefreshLayout.setRefreshing(false);\n\n    }\n\n \n\n    /**\n\n     * Dummy {@link AsyncTask} which simulates a long running task to fetch new cheeses.\n\n     */\n\n    private class DummyBackgroundTask extends AsyncTask<Void, Void, List<String>> {\n\n \n\n        static final int TASK_DURATION = 3 * 1000; // 3 seconds\n\n \n\n        @Override\n\n        protected List<String> doInBackground(Void... params) {\n\n            // Sleep for a small amount of time to simulate a background-task\n\n            try {\n\n                Thread.sleep(TASK_DURATION);\n\n            } catch (InterruptedException e) {\n\n                e.printStackTrace();\n\n            }\n\n \n\n            // Return a new random list of cheeses\n\n            return Cheeses.randomList(LIST_ITEM_COUNT);\n\n        }\n\n \n\n        @Override\n\n        protected void onPostExecute(List<String> result) {\n\n            super.onPostExecute(result);\n\n \n\n            // Tell the Fragment that the refresh has completed\n\n            onRefreshComplete(result);\n\n        }\n\n \n\n    }\n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.swiperefreshmultipleviews\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk android:minSdkVersion=\"10\" android:targetSdkVersion=\"17\" />\n\n \n\n    <application android:allowBackup=\"true\"\n\n        android:label=\"@string/app_name\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:theme=\"@style/AppTheme\">\n\n \n\n        <activity android:name=\".MainActivity\"\n\n                  android:label=\"@string/app_name\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n \n\n</manifest>\n  "},"TextSwitcher":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com/samples/TextSwitcher/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com/samples/TextSwitcher/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com/samples/TextSwitcher/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com/samples/TextSwitcher/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com/samples/TextSwitcher/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleMessageTile\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n            android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n            android:text=\"@string/intro_message\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n  ","sample_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:tools=\"http://schemas.android.com/tools\"\n\n    android:id=\"@+id/LinearLayout1\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:layout_gravity=\"top|center_horizontal\"\n\n    android:gravity=\"center_horizontal\"\n\n    android:orientation=\"vertical\"\n\n    android:paddingBottom=\"@dimen/activity_vertical_margin\"\n\n    android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n\n    android:paddingRight=\"@dimen/activity_horizontal_margin\"\n\n    android:paddingTop=\"@dimen/activity_vertical_margin\"\n\n    tools:context=\".MainActivity\" >\n\n \n\n    <TextView\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:text=\"@string/intro\" />\n\n \n\n    <Button\n\n        android:id=\"@+id/button\"\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:text=\"@string/next\" />\n\n \n\n    <TextSwitcher\n\n        android:id=\"@+id/switcher\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\"/>\n\n \n\n</LinearLayout>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">TextSwitcher</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n                This sample illustrates the use of a TextSwitcher to display text.\n\n                \\n\\nClick the button below to set new text in the TextSwitcher and observe the\n\n                in and out fade animations.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <!-- Default screen margins, per the Android Design guidelines. -->\n\n    <dimen name=\"activity_horizontal_margin\">16dp</dimen>\n\n    <dimen name=\"activity_vertical_margin\">16dp</dimen>\n\n \n\n</resources>\n  ","strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <string name=\"intro\">This sample illustrates the use of a <b>TextSwitcher</b> to display text.\n\n\\n\\n<b>Click the button</b> below to set new text in the TextSwitcher and observe the in and out\n\n fade animations.</string>\n\n    <string name=\"next\">Next</string>\n\n \n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <!--\n\n         Customize dimensions originally defined in res/values/dimens.xml (such as\n\n         screen margins) for sw600dp devices (e.g. 7\" tablets) here.\n\n    -->\n\n \n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw720dp-land":{"dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <!--\n\n         Customize dimensions originally defined in res/values/dimens.xml (such as\n\n         screen margins) for sw720dp devices (e.g. 10\" tablets) in landscape here.\n\n    -->\n\n    <dimen name=\"activity_horizontal_margin\">128dp</dimen>\n\n \n\n</resources>\n  "},"values-v11":{"styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <!--\n\n        Base application theme for API 11+. This theme completely replaces\n\n        AppBaseTheme from res/values/styles.xml on API 11+ devices.\n\n    -->\n\n    <style name=\"AppBaseTheme\" parent=\"android:Theme.Holo.Light\">\n\n        <!-- API 11 theme customizations can go here. -->\n\n    </style>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "},"values-v14":{"styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <!--\n\n        Base application theme for API 14+. This theme completely replaces\n\n        AppBaseTheme from BOTH res/values/styles.xml and\n\n        res/values-v11/styles.xml on API 14+ devices.\n\n    -->\n\n    <style name=\"AppBaseTheme\" parent=\"android:Theme.Holo.Light.DarkActionBar\">\n\n        <!-- API 14 theme customizations can go here. -->\n\n    </style>\n\n \n\n</resources>\n  "}},"src":{"com.example.android.common.logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "},"com.example.android.textswitcher":{"MainActivity.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *       http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.textswitcher;\n\n \n\nimport android.app.Activity;\n\nimport android.os.Bundle;\n\nimport android.view.Gravity;\n\nimport android.view.View;\n\nimport android.view.animation.Animation;\n\nimport android.view.animation.AnimationUtils;\n\nimport android.widget.Button;\n\nimport android.widget.TextSwitcher;\n\nimport android.widget.TextView;\n\nimport android.widget.ViewSwitcher.ViewFactory;\n\n \n\n/**\n\n * This sample shows the use of the {@link android.widget.TextSwitcher} View with animations. A\n\n * {@link android.widget.TextSwitcher} is a special type of {@link android.widget.ViewSwitcher} that animates\n\n * the current text out and new text in when\n\n * {@link android.widget.TextSwitcher#setText(CharSequence)} is called.\n\n */\n\npublic class MainActivity extends Activity {\n\n    private TextSwitcher mSwitcher;\n\n    private int mCounter = 0;\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.sample_main);\n\n \n\n        // Get the TextSwitcher view from the layout\n\n        mSwitcher = (TextSwitcher) findViewById(R.id.switcher);\n\n \n\n        // Set the factory used to create TextViews to switch between.\n\n        mSwitcher.setFactory(mFactory);\n\n \n\n        /*\n\n         * Set the in and out animations. Using the fade_in/out animations\n\n         * provided by the framework.\n\n         */\n\n        Animation in = AnimationUtils.loadAnimation(this,\n\n                android.R.anim.fade_in);\n\n        Animation out = AnimationUtils.loadAnimation(this,\n\n                android.R.anim.fade_out);\n\n        mSwitcher.setInAnimation(in);\n\n        mSwitcher.setOutAnimation(out);\n\n \n\n        /*\n\n         * Setup the 'next' button. The counter is incremented when clicked and\n\n         * the new value is displayed in the TextSwitcher. The change of text is\n\n         * automatically animated using the in/out animations set above.\n\n         */\n\n        Button nextButton = (Button) findViewById(R.id.button);\n\n        nextButton.setOnClickListener(new View.OnClickListener() {\n\n \n\n            @Override\n\n            public void onClick(View v) {\n\n                mCounter++;\n\n                mSwitcher.setText(String.valueOf(mCounter));\n\n            }\n\n        });\n\n \n\n        // Set the initial text without an animation\n\n        mSwitcher.setCurrentText(String.valueOf(mCounter));\n\n \n\n    }\n\n \n\n    /**\n\n     * The {@link android.widget.ViewSwitcher.ViewFactory} used to create {@link android.widget.TextView}s that the\n\n     * {@link android.widget.TextSwitcher} will switch between.\n\n     */\n\n    private ViewFactory mFactory = new ViewFactory() {\n\n \n\n        @Override\n\n        public View makeView() {\n\n \n\n            // Create a new TextView\n\n            TextView t = new TextView(MainActivity.this);\n\n            t.setGravity(Gravity.TOP | Gravity.CENTER_HORIZONTAL);\n\n            t.setTextAppearance(MainActivity.this, android.R.style.TextAppearance_Large);\n\n            return t;\n\n        }\n\n    };\n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.textswitcher\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\" >\n\n \n\n    <uses-sdk\n\n        android:minSdkVersion=\"4\"\n\n        android:targetSdkVersion=\"17\" />\n\n \n\n    <application\n\n        android:allowBackup=\"true\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:label=\"@string/app_name\"\n\n        android:theme=\"@style/AppTheme\" >\n\n        <activity\n\n            android:name=\".MainActivity\"\n\n            android:label=\"@string/app_name\" >\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n \n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n</manifest>\n  "}},"Views":{"TextLinkify":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com/samples/TextLinkify/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com/samples/TextLinkify/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com/samples/TextLinkify/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com/samples/TextLinkify/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com/samples/TextLinkify/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleMessageTile\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n            android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n            android:text=\"@string/intro_message\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n  ","sample_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n    <ScrollView\n\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n        xmlns:tools=\"http://schemas.android.com/tools\"\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        tools:context=\".MainActivity\">\n\n \n\n        <LinearLayout\n\n            android:orientation=\"vertical\"\n\n            android:layout_width=\"fill_parent\"\n\n            android:layout_height=\"fill_parent\"\n\n            android:paddingBottom=\"@dimen/activity_vertical_margin\"\n\n            android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n\n            android:paddingRight=\"@dimen/activity_horizontal_margin\"\n\n            android:paddingTop=\"@dimen/activity_vertical_margin\">\n\n \n\n \n\n            <TextView\n\n                android:layout_width=\"wrap_content\"\n\n                android:layout_height=\"wrap_content\"\n\n                android:text=\"@string/intro\" />\n\n \n\n            <!-- text_auto_linkify automatically linkifies things like URLs and phone numbers. -->\n\n            <TextView\n\n                android:id=\"@+id/text_auto_linkify\"\n\n                style=\"@style/LinkText\"\n\n                android:layout_width=\"match_parent\"\n\n                android:layout_height=\"wrap_content\"\n\n                android:autoLink=\"all\"\n\n                android:text=\"@string/link_text_auto\" />\n\n \n\n            <!--\n\n                   text_html_resource uses a string resource containing explicit anchor tags (<a>)\n\n                   to specify links.\n\n            -->\n\n            <TextView\n\n                android:id=\"@+id/text_html_resource\"\n\n                style=\"@style/LinkText\"\n\n                android:layout_width=\"match_parent\"\n\n                android:layout_height=\"wrap_content\"/>\n\n \n\n            <!-- text_html_program builds the text in the Java code using HTML. -->\n\n            <TextView\n\n                android:id=\"@+id/text_html_program\"\n\n                style=\"@style/LinkText\"\n\n                android:layout_width=\"match_parent\"\n\n                android:layout_height=\"wrap_content\" />\n\n \n\n            <!-- text_spannable builds the text in the Java code without using HTML. -->\n\n            <TextView\n\n                android:id=\"@+id/text_spannable\"\n\n                style=\"@style/LinkText\"\n\n                android:layout_width=\"match_parent\"\n\n                android:layout_height=\"wrap_content\" />\n\n        </LinearLayout>\n\n    </ScrollView>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">TextLinkify</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            This sample illustrates how links can be added to a TextView. This can be done either\n\n            automatically by setting the \"autoLink\" property or explicitly.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <!-- Default screen margins, per the Android Design guidelines. -->\n\n    <dimen name=\"activity_horizontal_margin\">16dp</dimen>\n\n    <dimen name=\"activity_vertical_margin\">16dp</dimen>\n\n \n\n</resources>\n  ","strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <string name=\"intro\">This sample illustrates how links can be added to a TextView.\n\n    \\nThis can be done either automatically by setting the <i>autoLink</i> property\n\n    or explicitly.</string>\n\n    <string name=\"link_text_auto\"><b>text_auto_linkify: Various kinds\n\n      of data that will be auto-linked.</b>\n\n      In this text are some things that are actionable.  For instance,\n\n      you can click on http://www.google.com and it will launch the\n\n      web browser.  You can click on google.com too.  If you\n\n      click on (415) 555-1212 it should dial the phone.  Or just write\n\n      foobar@example.com for an e-mail link.  If you have a URI like\n\n      http://www.example.com/lala/foobar@example.com you should get the\n\n      full link not the e-mail address.  Or you can put a location\n\n      like 1600 Amphitheatre Parkway, Mountain View, CA 94043.  To summarize:\n\n      https://www.google.com, or 650-253-0000, somebody@example.com,\n\n      or 9606 North MoPac Expressway, Suite 400, Austin, TX 78759.</string>\n\n    <string name=\"link_text_manual\"><![CDATA[<b>text_html_resource:\n\n      Explicit links using &lt;a&gt; markup.</b>\n\n      This has markup for a <a href=\"http://www.google.com\">link</a> specified\n\n      via an &lt;a&gt; tag.  Use a \\\"tel:\\\" URL\n\n      to <a href=\"tel:4155551212\">dial a phone number</a>.]]></string>\n\n \n\n</resources>\n  ","styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <style name=\"LinkText\">\n\n        <item name=\"android:paddingTop\">9dp</item>\n\n        <item name=\"android:paddingBottom\">9dp</item>\n\n    </style>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw720dp-land":{"dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <!--\n\n         Customize dimensions originally defined in res/values/dimens.xml (such as\n\n         screen margins) for sw720dp devices (e.g. 10\" tablets) in landscape here.\n\n    -->\n\n    <dimen name=\"activity_horizontal_margin\">128dp</dimen>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.common.logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "},"com.example.android.textlinkify":{"MainActivity.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *       http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.textlinkify;\n\n \n\nimport android.app.Activity;\n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.text.Html;\n\nimport android.text.SpannableString;\n\nimport android.text.Spanned;\n\nimport android.text.method.LinkMovementMethod;\n\nimport android.text.style.StyleSpan;\n\nimport android.text.style.URLSpan;\n\nimport android.widget.TextView;\n\n \n\n/**\n\n * This sample demonstrates how clickable links can be added to a\n\n * {@link android.widget.TextView}.\n\n *\n\n * <p>This can be done in three ways:\n\n * <ul>\n\n * <li><b>Automatically:</b> Text added to a TextView can automatically be linkified by enabling\n\n * autoLinking. In XML, use the android:autoLink property, programatically call\n\n * {@link android.widget.TextView#setAutoLinkMask(int)} using an option from\n\n * {@link android.text.util.Linkify}</li>\n\n *\n\n * <li><b>Parsing a String as HTML:</b> See {@link android.text.Html#fromHtml(String)})</li>\n\n *\n\n * <li><b>Manually by constructing a {@link android.text.SpannableString}:</b> Consisting of\n\n * {@link android.text.style.StyleSpan} and {@link android.text.style.URLSpan} objects that\n\n * are contained within a {@link android.text.SpannableString}</li>\n\n * </ul></p>\n\n *\n\n */\n\npublic class MainActivity extends Activity {\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n \n\n        setContentView(R.layout.sample_main);\n\n \n\n        /*\n\n         *  text_auto_linkify shows the android:autoLink property, which\n\n         *  automatically linkifies things like URLs and phone numbers\n\n         *  found in the text. No java code is needed to make this\n\n         *  work.\n\n         *  This can also be enabled programmatically by calling\n\n         *  .setAutoLinkMask(Linkify.ALL) before the text is set on the TextView.\n\n         *\n\n         *  See android.text.util.Linkify for other options, for example only\n\n         *  auto-linking email addresses or phone numbers\n\n         */\n\n \n\n        /*\n\n         * text_html_resource has links specified by putting anchor tags (<a>) in the string\n\n         * resource. By default these links will appear but not\n\n         * respond to user input. To make them active, you need to\n\n         * call setMovementMethod() on the TextView object.\n\n         */\n\n        TextView textViewResource = (TextView) findViewById(R.id.text_html_resource);\n\n        textViewResource.setText(\n\n                Html.fromHtml(getResources().getString(R.string.link_text_manual)));\n\n        textViewResource.setMovementMethod(LinkMovementMethod.getInstance());\n\n \n\n        /*\n\n         * text_html_program shows creating text with links from HTML in the Java\n\n         * code, rather than from a string resource. Note that for a\n\n         * fixed string, using a (localizable) resource as shown above\n\n         * is usually a better way to go; this example is intended to\n\n         * illustrate how you might display text that came from a\n\n         * dynamic source (eg, the network).\n\n         */\n\n        TextView textViewHtml = (TextView) findViewById(R.id.text_html_program);\n\n        textViewHtml.setText(\n\n                Html.fromHtml(\n\n                        \"<b>text_html_program: Constructed from HTML programmatically.</b>\"\n\n                                + \"  Text with a <a href=\\\"http://www.google.com\\\">link</a> \"\n\n                                + \"created in the Java source code using HTML.\"));\n\n        textViewHtml.setMovementMethod(LinkMovementMethod.getInstance());\n\n \n\n        /*\n\n         * text_spannable illustrates constructing a styled string containing a\n\n         * link without using HTML at all. Again, for a fixed string\n\n         * you should probably be using a string resource, not a\n\n         * hardcoded value.\n\n         */\n\n        SpannableString ss = new SpannableString(\n\n                \"text_spannable: Manually created spans. Click here to dial the phone.\");\n\n \n\n        /*\n\n         * Make the first 38 characters bold by applying a StyleSpan with bold typeface.\n\n         *\n\n         * Characters 45 to 49 (the word \"here\") is made clickable by applying a URLSpan\n\n         * pointing to a telephone number. Clicking it opens the \"tel:\" URL that starts the dialer.\n\n         *\n\n         * The SPAN_EXCLUSIVE_EXCLUSIVE flag defines this span as exclusive, which means\n\n         * that it will not expand to include text inserted on either side of this span.\n\n         */\n\n        ss.setSpan(new StyleSpan(Typeface.BOLD), 0, 39,\n\n                Spanned.SPAN_INCLUSIVE_INCLUSIVE);\n\n        ss.setSpan(new URLSpan(\"tel:4155551212\"), 40 + 6, 40 + 10,\n\n                Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n\n \n\n        TextView textViewSpan = (TextView) findViewById(R.id.text_spannable);\n\n        textViewSpan.setText(ss);\n\n \n\n        /*\n\n         * Set the movement method to move between links in this TextView.\n\n         * This means that the user traverses through links in this TextView, automatically\n\n         * handling appropriate scrolling and key commands.\n\n         */\n\n        textViewSpan.setMovementMethod(LinkMovementMethod.getInstance());\n\n    }\n\n \n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.textlinkify\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk\n\n        android:minSdkVersion=\"4\"\n\n        android:targetSdkVersion=\"17\" />\n\n \n\n    <application\n\n        android:allowBackup=\"true\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:label=\"@string/app_name\"\n\n        android:theme=\"@style/AppTheme\" >\n\n        <activity\n\n            android:name=\".MainActivity\"\n\n            android:label=\"@string/app_name\" >\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n</manifest>\n  "}}}