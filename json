{"UI":{"ActionBarCompat-Basic":{"res":{"drawable-hdpi":{"ic_action_location.png":"http://developer.android.com//samples/ActionBarCompat-Basic/res/drawable-hdpi/ic_action_location.png","ic_action_refresh.png":"http://developer.android.com//samples/ActionBarCompat-Basic/res/drawable-hdpi/ic_action_refresh.png","ic_action_settings.png":"http://developer.android.com//samples/ActionBarCompat-Basic/res/drawable-hdpi/ic_action_settings.png","ic_launcher.png":"http://developer.android.com//samples/ActionBarCompat-Basic/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com//samples/ActionBarCompat-Basic/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_action_location.png":"http://developer.android.com//samples/ActionBarCompat-Basic/res/drawable-mdpi/ic_action_location.png","ic_action_refresh.png":"http://developer.android.com//samples/ActionBarCompat-Basic/res/drawable-mdpi/ic_action_refresh.png","ic_action_settings.png":"http://developer.android.com//samples/ActionBarCompat-Basic/res/drawable-mdpi/ic_action_settings.png","ic_launcher.png":"http://developer.android.com//samples/ActionBarCompat-Basic/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_action_location.png":"http://developer.android.com//samples/ActionBarCompat-Basic/res/drawable-xhdpi/ic_action_location.png","ic_action_refresh.png":"http://developer.android.com//samples/ActionBarCompat-Basic/res/drawable-xhdpi/ic_action_refresh.png","ic_action_settings.png":"http://developer.android.com//samples/ActionBarCompat-Basic/res/drawable-xhdpi/ic_action_settings.png","ic_launcher.png":"http://developer.android.com//samples/ActionBarCompat-Basic/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com//samples/ActionBarCompat-Basic/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleMessageTile\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n            android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n            android:text=\"@string/intro_message\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n  ","sample_main.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<TextView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:padding=\"16dp\"\n\n    android:text=\"@string/intro_message\"\n\n    android:gravity=\"center\" />\n  "},"menu":{"main.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<!--\n\n    As we're using ActionBarCompat, any action item attributes come from ActionBarCompat's XML\n\n    namespace instead of the android namespace. Here we've added a new support namespace added to\n\n    the menu element allowing us to use the 'showAsAction' attribute in a backwards compatible way.\n\n    Any other action item attributes used should be referenced from this namespace too\n\n    (actionProviderClass, actionViewClass, actionLayout).\n\n-->\n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:support=\"http://schemas.android.com/apk/res-auto\" >\n\n \n\n    <!--\n\n        Here we create an item, setting support:showAsAction to display the item as an action if\n\n        there's room on the compatible Action Bar.\n\n    -->\n\n    <item\n\n        android:id=\"@+id/menu_refresh\"\n\n        android:icon=\"@drawable/ic_action_refresh\"\n\n        android:title=\"@string/menu_refresh\"\n\n        support:showAsAction=\"ifRoom\"/>\n\n \n\n    <!-- Location item is added in onCreateOptionsMenu() -->\n\n \n\n    <!--\n\n        Here we set the settings item to always be in the overflow menu, by setting\n\n        support:showAsAction to never, so it is never displayed as an action item on the compatible\n\n        Action Bar.\n\n    -->\n\n    <item\n\n        android:id=\"@+id/menu_settings\"\n\n        android:icon=\"@drawable/ic_action_settings\"\n\n        android:title=\"@string/menu_settings\"\n\n        support:showAsAction=\"never\"/>\n\n \n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">ActionBarCompat-Basic</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            This sample shows you how to use ActionBarCompat to create a basic Activity which\n\n            displays action items. It covers inflating items from a menu resource, as well as adding\n\n            an item in code. Items that are not shown as action items on the Action Bar are\n\n            displayed in the action bar overflow.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","ids.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<resources>\n\n \n\n    <!--\n\n        Generate an id which can be used when the location menu item is added in MainActivity\n\n    -->\n\n    <item name=\"menu_location\" type=\"id\"/>\n\n \n\n</resources>\n  ","strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<resources>\n\n    <string name=\"menu_refresh\">Refresh</string>\n\n    <string name=\"menu_location\">Location</string>\n\n    <string name=\"menu_settings\">Settings</string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.actionbarcompat.basic":{"MainActivity.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.actionbarcompat.basic;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.view.MenuItemCompat;\n\nimport android.support.v7.app.ActionBarActivity;\n\nimport android.view.Menu;\n\nimport android.view.MenuItem;\n\n \n\n/**\n\n * This sample shows you how to use ActionBarCompat to create a basic Activity which displays\n\n * action items. It covers inflating items from a menu resource, as well as adding an item in code.\n\n *\n\n * This Activity extends from {@link ActionBarActivity}, which provides all of the function\n\n * necessary to display a compatible Action Bar on devices running Android v2.1+.\n\n */\n\npublic class MainActivity extends ActionBarActivity {\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.sample_main);\n\n    }\n\n \n\n    /**\n\n     * Use this method to instantiate your menu, and add your items to it. You\n\n     * should return true if you have added items to it and want the menu to be displayed.\n\n     */\n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        // Inflate our menu from the resources by using the menu inflater.\n\n        getMenuInflater().inflate(R.menu.main, menu);\n\n \n\n        // It is also possible add items here. Use a generated id from\n\n        // resources (ids.xml) to ensure that all menu ids are distinct.\n\n        MenuItem locationItem = menu.add(0, R.id.menu_location, 0, R.string.menu_location);\n\n        locationItem.setIcon(R.drawable.ic_action_location);\n\n \n\n        // Need to use MenuItemCompat methods to call any action item related methods\n\n        MenuItemCompat.setShowAsAction(locationItem, MenuItem.SHOW_AS_ACTION_IF_ROOM);\n\n \n\n        return true;\n\n    }\n\n \n\n    /**\n\n     * This method is called when one of the menu items to selected. These items\n\n     * can be on the Action Bar, the overflow menu, or the standard options menu. You\n\n     * should return true if you handle the selection.\n\n     */\n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch (item.getItemId()) {\n\n            case R.id.menu_refresh:\n\n                // Here we might start a background refresh task\n\n                return true;\n\n \n\n            case R.id.menu_location:\n\n                // Here we might call LocationManager.requestLocationUpdates()\n\n                return true;\n\n \n\n            case R.id.menu_settings:\n\n                // Here we would open up our settings activity\n\n                return true;\n\n        }\n\n \n\n        return super.onOptionsItemSelected(item);\n\n    }\n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.actionbarcompat.basic\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <!-- ActionBarCompat provides an Action Bar from API v7 onwards -->\n\n    <uses-sdk\n\n        android:minSdkVersion=\"7\"\n\n        android:targetSdkVersion=\"17\" />\n\n \n\n    <application\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:label=\"@string/app_name\"\n\n        android:theme=\"@style/Theme.AppCompat\"\n\n        android:allowBackup=\"true\">\n\n \n\n        <activity android:name=\".MainActivity\">\n\n            <!-- Launcher Intent filter -->\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n</manifest>\n  "},"ActionBarCompat-ListPopupMenu":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com//samples/ActionBarCompat-ListPopupMenu/res/drawable-hdpi/ic_launcher.png","ic_overflow.png":"http://developer.android.com//samples/ActionBarCompat-ListPopupMenu/res/drawable-hdpi/ic_overflow.png","tile.9.png":"http://developer.android.com//samples/ActionBarCompat-ListPopupMenu/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com//samples/ActionBarCompat-ListPopupMenu/res/drawable-mdpi/ic_launcher.png","ic_overflow.png":"http://developer.android.com//samples/ActionBarCompat-ListPopupMenu/res/drawable-mdpi/ic_overflow.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com//samples/ActionBarCompat-ListPopupMenu/res/drawable-xhdpi/ic_launcher.png","ic_overflow.png":"http://developer.android.com//samples/ActionBarCompat-ListPopupMenu/res/drawable-xhdpi/ic_overflow.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com//samples/ActionBarCompat-ListPopupMenu/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleMessageTile\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n            android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n            android:text=\"@string/intro_message\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n  ","list_item.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:orientation=\"horizontal\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"?attr/listPreferredItemHeight\">\n\n \n\n    <TextView\n\n        android:id=\"@android:id/text1\"\n\n        android:layout_height=\"match_parent\"\n\n        android:layout_width=\"0dp\"\n\n        android:layout_weight=\"1\"\n\n        android:gravity=\"center_vertical\"\n\n        android:paddingLeft=\"8dp\"\n\n        android:paddingRight=\"8dp\"\n\n        android:maxLines=\"1\"\n\n        android:ellipsize=\"end\"\n\n        android:textAppearance=\"?android:attr/textAppearanceMedium\" />\n\n \n\n    <ImageView\n\n        android:id=\"@+id/button_popup\"\n\n        android:layout_height=\"match_parent\"\n\n        android:layout_width=\"56dip\"\n\n        android:background=\"?attr/selectableItemBackground\"\n\n        android:src=\"@drawable/ic_overflow\"\n\n        android:contentDescription=\"@string/content_open_popup\"/>\n\n \n\n</LinearLayout>\n  ","sample_main.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<fragment xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:name=\"com.example.android.actionbarcompat.listpopupmenu.PopupListFragment\" />\n  "},"menu":{"popup.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n \n\n    <item\n\n        android:id=\"@+id/menu_remove\"\n\n        android:title=\"@string/menu_remove\" />\n\n \n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">ActionBarCompat-ListPopupMenu</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            This sample shows you how to use {@link android.support.v7.widget.PopupMenu PopupMenu}\n\n            from ActionBarCompat to create a list, with each item having a dropdown menu.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<resources>\n\n \n\n    <string name=\"menu_remove\">Remove</string>\n\n    <string name=\"content_open_popup\">Open Popup Menu</string>\n\n \n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.actionbarcompat.listpopupmenu":{"Cheeses.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.actionbarcompat.listpopupmenu;\n\n \n\n/**\n\n * Dummy data.\n\n */\n\npublic class Cheeses {\n\n    public static final String[] CHEESES = {\n\n            \"Abbaye de Belloc\", \"Abbaye du Mont des Cats\", \"Abertam\", \"Abondance\", \"Ackawi\",\n\n            \"Acorn\", \"Adelost\", \"Affidelice au Chablis\", \"Afuega'l Pitu\", \"Airag\", \"Airedale\",\n\n            \"Aisy Cendre\", \"Allgauer Emmentaler\", \"Alverca\", \"Ambert\", \"American Cheese\",\n\n            \"Ami du Chambertin\", \"Anejo Enchilado\", \"Anneau du Vic-Bilh\", \"Anthoriro\", \"Appenzell\",\n\n            \"Aragon\", \"Ardi Gasna\", \"Ardrahan\", \"Armenian String\", \"Aromes au Gene de Marc\",\n\n            \"Asadero\", \"Asiago\", \"Aubisque Pyrenees\", \"Autun\", \"Avaxtskyr\", \"Baby Swiss\",\n\n            \"Babybel\", \"Baguette Laonnaise\", \"Bakers\", \"Baladi\", \"Balaton\", \"Bandal\", \"Banon\",\n\n            \"Barry's Bay Cheddar\", \"Basing\", \"Basket Cheese\", \"Bath Cheese\", \"Bavarian Bergkase\",\n\n            \"Baylough\", \"Beaufort\", \"Beauvoorde\", \"Beenleigh Blue\", \"Beer Cheese\", \"Bel Paese\",\n\n            \"Bergader\", \"Bergere Bleue\", \"Berkswell\", \"Beyaz Peynir\", \"Bierkase\", \"Bishop Kennedy\",\n\n            \"Blarney\", \"Bleu d'Auvergne\", \"Bleu de Gex\", \"Bleu de Laqueuille\",\n\n            \"Bleu de Septmoncel\", \"Bleu Des Causses\", \"Blue\", \"Blue Castello\", \"Blue Rathgore\",\n\n            \"Blue Vein (Australian)\", \"Blue Vein Cheeses\", \"Bocconcini\", \"Bocconcini (Australian)\",\n\n            \"Boeren Leidenkaas\", \"Bonchester\", \"Bosworth\", \"Bougon\", \"Boule Du Roves\",\n\n            \"Boulette d'Avesnes\", \"Boursault\", \"Boursin\", \"Bouyssou\", \"Bra\", \"Braudostur\",\n\n            \"Breakfast Cheese\", \"Brebis du Lavort\", \"Brebis du Lochois\", \"Brebis du Puyfaucon\",\n\n            \"Bresse Bleu\", \"Brick\", \"Brie\", \"Brie de Meaux\", \"Brie de Melun\", \"Brillat-Savarin\",\n\n            \"Brin\", \"Brin d' Amour\", \"Brin d'Amour\", \"Brinza (Burduf Brinza)\",\n\n            \"Briquette de Brebis\", \"Briquette du Forez\", \"Broccio\", \"Broccio Demi-Affine\",\n\n            \"Brousse du Rove\", \"Bruder Basil\", \"Brusselae Kaas (Fromage de Bruxelles)\", \"Bryndza\",\n\n            \"Buchette d'Anjou\", \"Buffalo\", \"Burgos\", \"Butte\", \"Butterkase\", \"Button (Innes)\",\n\n            \"Buxton Blue\", \"Cabecou\", \"Caboc\", \"Cabrales\", \"Cachaille\", \"Caciocavallo\", \"Caciotta\",\n\n            \"Caerphilly\", \"Cairnsmore\", \"Calenzana\", \"Cambazola\", \"Camembert de Normandie\",\n\n            \"Canadian Cheddar\", \"Canestrato\", \"Cantal\", \"Caprice des Dieux\", \"Capricorn Goat\",\n\n            \"Capriole Banon\", \"Carre de l'Est\", \"Casciotta di Urbino\", \"Cashel Blue\", \"Castellano\",\n\n            \"Castelleno\", \"Castelmagno\", \"Castelo Branco\", \"Castigliano\", \"Cathelain\",\n\n            \"Celtic Promise\", \"Cendre d'Olivet\", \"Cerney\", \"Chabichou\", \"Chabichou du Poitou\",\n\n            \"Chabis de Gatine\", \"Chaource\", \"Charolais\", \"Chaumes\", \"Cheddar\",\n\n            \"Cheddar Clothbound\", \"Cheshire\", \"Chevres\", \"Chevrotin des Aravis\", \"Chontaleno\",\n\n            \"Civray\", \"Coeur de Camembert au Calvados\", \"Coeur de Chevre\", \"Colby\", \"Cold Pack\",\n\n            \"Comte\", \"Coolea\", \"Cooleney\", \"Coquetdale\", \"Corleggy\", \"Cornish Pepper\",\n\n            \"Cotherstone\", \"Cotija\", \"Cottage Cheese\", \"Cottage Cheese (Australian)\",\n\n            \"Cougar Gold\", \"Coulommiers\", \"Coverdale\", \"Crayeux de Roncq\", \"Cream Cheese\",\n\n            \"Cream Havarti\", \"Crema Agria\", \"Crema Mexicana\", \"Creme Fraiche\", \"Crescenza\",\n\n            \"Croghan\", \"Crottin de Chavignol\", \"Crottin du Chavignol\", \"Crowdie\", \"Crowley\",\n\n            \"Cuajada\", \"Curd\", \"Cure Nantais\", \"Curworthy\", \"Cwmtawe Pecorino\",\n\n            \"Cypress Grove Chevre\", \"Danablu (Danish Blue)\", \"Danbo\", \"Danish Fontina\",\n\n            \"Daralagjazsky\", \"Dauphin\", \"Delice des Fiouves\", \"Denhany Dorset Drum\", \"Derby\",\n\n            \"Dessertnyj Belyj\", \"Devon Blue\", \"Devon Garland\", \"Dolcelatte\", \"Doolin\",\n\n            \"Doppelrhamstufel\", \"Dorset Blue Vinney\", \"Double Gloucester\", \"Double Worcester\",\n\n            \"Dreux a la Feuille\", \"Dry Jack\", \"Duddleswell\", \"Dunbarra\", \"Dunlop\", \"Dunsyre Blue\",\n\n            \"Duroblando\", \"Durrus\", \"Dutch Mimolette (Commissiekaas)\", \"Edam\", \"Edelpilz\",\n\n            \"Emental Grand Cru\", \"Emlett\", \"Emmental\", \"Epoisses de Bourgogne\", \"Esbareich\",\n\n            \"Esrom\", \"Etorki\", \"Evansdale Farmhouse Brie\", \"Evora De L'Alentejo\", \"Exmoor Blue\",\n\n            \"Explorateur\", \"Feta\", \"Feta (Australian)\", \"Figue\", \"Filetta\", \"Fin-de-Siecle\",\n\n            \"Finlandia Swiss\", \"Finn\", \"Fiore Sardo\", \"Fleur du Maquis\", \"Flor de Guia\",\n\n            \"Flower Marie\", \"Folded\", \"Folded cheese with mint\", \"Fondant de Brebis\",\n\n            \"Fontainebleau\", \"Fontal\", \"Fontina Val d'Aosta\", \"Formaggio di capra\", \"Fougerus\",\n\n            \"Four Herb Gouda\", \"Fourme d' Ambert\", \"Fourme de Haute Loire\", \"Fourme de Montbrison\",\n\n            \"Fresh Jack\", \"Fresh Mozzarella\", \"Fresh Ricotta\", \"Fresh Truffles\", \"Fribourgeois\",\n\n            \"Friesekaas\", \"Friesian\", \"Friesla\", \"Frinault\", \"Fromage a Raclette\", \"Fromage Corse\",\n\n            \"Fromage de Montagne de Savoie\", \"Fromage Frais\", \"Fruit Cream Cheese\",\n\n            \"Frying Cheese\", \"Fynbo\", \"Gabriel\", \"Galette du Paludier\", \"Galette Lyonnaise\",\n\n            \"Galloway Goat's Milk Gems\", \"Gammelost\", \"Gaperon a l'Ail\", \"Garrotxa\", \"Gastanberra\",\n\n            \"Geitost\", \"Gippsland Blue\", \"Gjetost\", \"Gloucester\", \"Golden Cross\", \"Gorgonzola\",\n\n            \"Gornyaltajski\", \"Gospel Green\", \"Gouda\", \"Goutu\", \"Gowrie\", \"Grabetto\", \"Graddost\",\n\n            \"Grafton Village Cheddar\", \"Grana\", \"Grana Padano\", \"Grand Vatel\",\n\n            \"Grataron d' Areches\", \"Gratte-Paille\", \"Graviera\", \"Greuilh\", \"Greve\",\n\n            \"Gris de Lille\", \"Gruyere\", \"Gubbeen\", \"Guerbigny\", \"Halloumi\",\n\n            \"Halloumy (Australian)\", \"Haloumi-Style Cheese\", \"Harbourne Blue\", \"Havarti\",\n\n            \"Heidi Gruyere\", \"Hereford Hop\", \"Herrgardsost\", \"Herriot Farmhouse\", \"Herve\",\n\n            \"Hipi Iti\", \"Hubbardston Blue Cow\", \"Hushallsost\", \"Iberico\", \"Idaho Goatster\",\n\n            \"Idiazabal\", \"Il Boschetto al Tartufo\", \"Ile d'Yeu\", \"Isle of Mull\", \"Jarlsberg\",\n\n            \"Jermi Tortes\", \"Jibneh Arabieh\", \"Jindi Brie\", \"Jubilee Blue\", \"Juustoleipa\",\n\n            \"Kadchgall\", \"Kaseri\", \"Kashta\", \"Kefalotyri\", \"Kenafa\", \"Kernhem\", \"Kervella Affine\",\n\n            \"Kikorangi\", \"King Island Cape Wickham Brie\", \"King River Gold\", \"Klosterkaese\",\n\n            \"Knockalara\", \"Kugelkase\", \"L'Aveyronnais\", \"L'Ecir de l'Aubrac\", \"La Taupiniere\",\n\n            \"La Vache Qui Rit\", \"Laguiole\", \"Lairobell\", \"Lajta\", \"Lanark Blue\", \"Lancashire\",\n\n            \"Langres\", \"Lappi\", \"Laruns\", \"Lavistown\", \"Le Brin\", \"Le Fium Orbo\", \"Le Lacandou\",\n\n            \"Le Roule\", \"Leafield\", \"Lebbene\", \"Leerdammer\", \"Leicester\", \"Leyden\", \"Limburger\",\n\n            \"Lincolnshire Poacher\", \"Lingot Saint Bousquet d'Orb\", \"Liptauer\", \"Little Rydings\",\n\n            \"Livarot\", \"Llanboidy\", \"Llanglofan Farmhouse\", \"Loch Arthur Farmhouse\",\n\n            \"Loddiswell Avondale\", \"Longhorn\", \"Lou Palou\", \"Lou Pevre\", \"Lyonnais\", \"Maasdam\",\n\n            \"Macconais\", \"Mahoe Aged Gouda\", \"Mahon\", \"Malvern\", \"Mamirolle\", \"Manchego\",\n\n            \"Manouri\", \"Manur\", \"Marble Cheddar\", \"Marbled Cheeses\", \"Maredsous\", \"Margotin\",\n\n            \"Maribo\", \"Maroilles\", \"Mascares\", \"Mascarpone\", \"Mascarpone (Australian)\",\n\n            \"Mascarpone Torta\", \"Matocq\", \"Maytag Blue\", \"Meira\", \"Menallack Farmhouse\",\n\n            \"Menonita\", \"Meredith Blue\", \"Mesost\", \"Metton (Cancoillotte)\", \"Meyer Vintage Gouda\",\n\n            \"Mihalic Peynir\", \"Milleens\", \"Mimolette\", \"Mine-Gabhar\", \"Mini Baby Bells\", \"Mixte\",\n\n            \"Molbo\", \"Monastery Cheeses\", \"Mondseer\", \"Mont D'or Lyonnais\", \"Montasio\",\n\n            \"Monterey Jack\", \"Monterey Jack Dry\", \"Morbier\", \"Morbier Cru de Montagne\",\n\n            \"Mothais a la Feuille\", \"Mozzarella\", \"Mozzarella (Australian)\",\n\n            \"Mozzarella di Bufala\", \"Mozzarella Fresh, in water\", \"Mozzarella Rolls\", \"Munster\",\n\n            \"Murol\", \"Mycella\", \"Myzithra\", \"Naboulsi\", \"Nantais\", \"Neufchatel\",\n\n            \"Neufchatel (Australian)\", \"Niolo\", \"Nokkelost\", \"Northumberland\", \"Oaxaca\",\n\n            \"Olde York\", \"Olivet au Foin\", \"Olivet Bleu\", \"Olivet Cendre\",\n\n            \"Orkney Extra Mature Cheddar\", \"Orla\", \"Oschtjepka\", \"Ossau Fermier\", \"Ossau-Iraty\",\n\n            \"Oszczypek\", \"Oxford Blue\", \"P'tit Berrichon\", \"Palet de Babligny\", \"Paneer\", \"Panela\",\n\n            \"Pannerone\", \"Pant ys Gawn\", \"Parmesan (Parmigiano)\", \"Parmigiano Reggiano\",\n\n            \"Pas de l'Escalette\", \"Passendale\", \"Pasteurized Processed\", \"Pate de Fromage\",\n\n            \"Patefine Fort\", \"Pave d'Affinois\", \"Pave d'Auge\", \"Pave de Chirac\", \"Pave du Berry\",\n\n            \"Pecorino\", \"Pecorino in Walnut Leaves\", \"Pecorino Romano\", \"Peekskill Pyramid\",\n\n            \"Pelardon des Cevennes\", \"Pelardon des Corbieres\", \"Penamellera\", \"Penbryn\",\n\n            \"Pencarreg\", \"Perail de Brebis\", \"Petit Morin\", \"Petit Pardou\", \"Petit-Suisse\",\n\n            \"Picodon de Chevre\", \"Picos de Europa\", \"Piora\", \"Pithtviers au Foin\",\n\n            \"Plateau de Herve\", \"Plymouth Cheese\", \"Podhalanski\", \"Poivre d'Ane\", \"Polkolbin\",\n\n            \"Pont l'Eveque\", \"Port Nicholson\", \"Port-Salut\", \"Postel\", \"Pouligny-Saint-Pierre\",\n\n            \"Pourly\", \"Prastost\", \"Pressato\", \"Prince-Jean\", \"Processed Cheddar\", \"Provolone\",\n\n            \"Provolone (Australian)\", \"Pyengana Cheddar\", \"Pyramide\", \"Quark\",\n\n            \"Quark (Australian)\", \"Quartirolo Lombardo\", \"Quatre-Vents\", \"Quercy Petit\",\n\n            \"Queso Blanco\", \"Queso Blanco con Frutas --Pina y Mango\", \"Queso de Murcia\",\n\n            \"Queso del Montsec\", \"Queso del Tietar\", \"Queso Fresco\", \"Queso Fresco (Adobera)\",\n\n            \"Queso Iberico\", \"Queso Jalapeno\", \"Queso Majorero\", \"Queso Media Luna\",\n\n            \"Queso Para Frier\", \"Queso Quesadilla\", \"Rabacal\", \"Raclette\", \"Ragusano\", \"Raschera\",\n\n            \"Reblochon\", \"Red Leicester\", \"Regal de la Dombes\", \"Reggianito\", \"Remedou\",\n\n            \"Requeson\", \"Richelieu\", \"Ricotta\", \"Ricotta (Australian)\", \"Ricotta Salata\", \"Ridder\",\n\n            \"Rigotte\", \"Rocamadour\", \"Rollot\", \"Romano\", \"Romans Part Dieu\", \"Roncal\", \"Roquefort\",\n\n            \"Roule\", \"Rouleau De Beaulieu\", \"Royalp Tilsit\", \"Rubens\", \"Rustinu\", \"Saaland Pfarr\",\n\n            \"Saanenkaese\", \"Saga\", \"Sage Derby\", \"Sainte Maure\", \"Saint-Marcellin\",\n\n            \"Saint-Nectaire\", \"Saint-Paulin\", \"Salers\", \"Samso\", \"San Simon\", \"Sancerre\",\n\n            \"Sap Sago\", \"Sardo\", \"Sardo Egyptian\", \"Sbrinz\", \"Scamorza\", \"Schabzieger\", \"Schloss\",\n\n            \"Selles sur Cher\", \"Selva\", \"Serat\", \"Seriously Strong Cheddar\", \"Serra da Estrela\",\n\n            \"Sharpam\", \"Shelburne Cheddar\", \"Shropshire Blue\", \"Siraz\", \"Sirene\", \"Smoked Gouda\",\n\n            \"Somerset Brie\", \"Sonoma Jack\", \"Sottocenare al Tartufo\", \"Soumaintrain\",\n\n            \"Sourire Lozerien\", \"Spenwood\", \"Sraffordshire Organic\", \"St. Agur Blue Cheese\",\n\n            \"Stilton\", \"Stinking Bishop\", \"String\", \"Sussex Slipcote\", \"Sveciaost\", \"Swaledale\",\n\n            \"Sweet Style Swiss\", \"Swiss\", \"Syrian (Armenian String)\", \"Tala\", \"Taleggio\", \"Tamie\",\n\n            \"Tasmania Highland Chevre Log\", \"Taupiniere\", \"Teifi\", \"Telemea\", \"Testouri\",\n\n            \"Tete de Moine\", \"Tetilla\", \"Texas Goat Cheese\", \"Tibet\", \"Tillamook Cheddar\",\n\n            \"Tilsit\", \"Timboon Brie\", \"Toma\", \"Tomme Brulee\", \"Tomme d'Abondance\",\n\n            \"Tomme de Chevre\", \"Tomme de Romans\", \"Tomme de Savoie\", \"Tomme des Chouans\", \"Tommes\",\n\n            \"Torta del Casar\", \"Toscanello\", \"Touree de L'Aubier\", \"Tourmalet\",\n\n            \"Trappe (Veritable)\", \"Trois Cornes De Vendee\", \"Tronchon\", \"Trou du Cru\", \"Truffe\",\n\n            \"Tupi\", \"Turunmaa\", \"Tymsboro\", \"Tyn Grug\", \"Tyning\", \"Ubriaco\", \"Ulloa\",\n\n            \"Vacherin-Fribourgeois\", \"Valencay\", \"Vasterbottenost\", \"Venaco\", \"Vendomois\",\n\n            \"Vieux Corse\", \"Vignotte\", \"Vulscombe\", \"Waimata Farmhouse Blue\",\n\n            \"Washed Rind Cheese (Australian)\", \"Waterloo\", \"Weichkaese\", \"Wellington\",\n\n            \"Wensleydale\", \"White Stilton\", \"Whitestone Farmhouse\", \"Wigmore\", \"Woodside Cabecou\",\n\n            \"Xanadu\", \"Xynotyro\", \"Yarg Cornish\", \"Yarra Valley Pyramid\", \"Yorkshire Blue\",\n\n            \"Zamorano\", \"Zanetti Grana Padano\", \"Zanetti Parmigiano Reggiano\"\n\n    };\n\n}\n  ","MainActivity.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.actionbarcompat.listpopupmenu;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v7.app.ActionBarActivity;\n\n \n\n/**\n\n * This sample shows you how to use {@link android.support.v7.widget.PopupMenu PopupMenu} from\n\n * ActionBarCompat to create a list, with each item having a dropdown menu.\n\n * <p>\n\n * The interesting part of this sample is in {@link PopupListFragment}.\n\n *\n\n * This Activity extends from {@link ActionBarActivity}, which provides all of the function\n\n * necessary to display a compatible Action Bar on devices running Android v2.1+.\n\n */\n\npublic class MainActivity extends ActionBarActivity {\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n \n\n        // Set content view (which contains a PopupListFragment)\n\n        setContentView(R.layout.sample_main);\n\n    }\n\n \n\n}\n  ","PopupListFragment.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.actionbarcompat.listpopupmenu;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.ListFragment;\n\nimport android.support.v7.widget.PopupMenu;\n\nimport android.view.MenuItem;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ArrayAdapter;\n\nimport android.widget.ListView;\n\nimport android.widget.Toast;\n\n \n\nimport java.util.ArrayList;\n\n \n\n/**\n\n * This ListFragment displays a list of cheeses, with a clickable view on each item whichs displays\n\n * a {@link android.support.v7.widget.PopupMenu PopupMenu} when clicked, allowing the user to\n\n * remove the item from the list.\n\n */\n\npublic class PopupListFragment extends ListFragment implements View.OnClickListener {\n\n \n\n    @Override\n\n    public void onActivityCreated(Bundle savedInstanceState) {\n\n        super.onActivityCreated(savedInstanceState);\n\n \n\n        // We want to allow modifications to the list so copy the dummy data array into an ArrayList\n\n        ArrayList<String> items = new ArrayList<String>();\n\n        for (int i = 0, z = Cheeses.CHEESES.length ; i < z ; i++) {\n\n            items.add(Cheeses.CHEESES[i]);\n\n        }\n\n \n\n        // Set the ListAdapter\n\n        setListAdapter(new PopupAdapter(items));\n\n    }\n\n \n\n    @Override\n\n    public void onListItemClick(ListView listView, View v, int position, long id) {\n\n        String item = (String) listView.getItemAtPosition(position);\n\n \n\n        // Show a toast if the user clicks on an item\n\n        Toast.makeText(getActivity(), \"Item Clicked: \" + item, Toast.LENGTH_SHORT).show();\n\n    }\n\n \n\n    @Override\n\n    public void onClick(final View view) {\n\n        // We need to post a Runnable to show the popup to make sure that the PopupMenu is\n\n        // correctly positioned. The reason being that the view may change position before the\n\n        // PopupMenu is shown.\n\n        view.post(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                showPopupMenu(view);\n\n            }\n\n        });\n\n    }\n\n \n\n    private void showPopupMenu(View view) {\n\n        final PopupAdapter adapter = (PopupAdapter) getListAdapter();\n\n \n\n        // Retrieve the clicked item from view's tag\n\n        final String item = (String) view.getTag();\n\n \n\n        // Create a PopupMenu, giving it the clicked view for an anchor\n\n        PopupMenu popup = new PopupMenu(getActivity(), view);\n\n \n\n        // Inflate our menu resource into the PopupMenu's Menu\n\n        popup.getMenuInflater().inflate(R.menu.popup, popup.getMenu());\n\n \n\n        // Set a listener so we are notified if a menu item is clicked\n\n        popup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {\n\n            @Override\n\n            public boolean onMenuItemClick(MenuItem menuItem) {\n\n                switch (menuItem.getItemId()) {\n\n                    case R.id.menu_remove:\n\n                        // Remove the item from the adapter\n\n                        adapter.remove(item);\n\n                        return true;\n\n                }\n\n                return false;\n\n            }\n\n        });\n\n \n\n        // Finally show the PopupMenu\n\n        popup.show();\n\n    }\n\n \n\n    /**\n\n     * A simple array adapter that creates a list of cheeses.\n\n     */\n\n    class PopupAdapter extends ArrayAdapter<String> {\n\n \n\n        PopupAdapter(ArrayList<String> items) {\n\n            super(getActivity(), R.layout.list_item, android.R.id.text1, items);\n\n        }\n\n \n\n        @Override\n\n        public View getView(int position, View convertView, ViewGroup container) {\n\n            // Let ArrayAdapter inflate the layout and set the text\n\n            View view = super.getView(position, convertView, container);\n\n \n\n            // Retrieve the popup button from the inflated view\n\n            View popupButton = view.findViewById(R.id.button_popup);\n\n \n\n            // Set the item as the button's tag so it can be retrieved later\n\n            popupButton.setTag(getItem(position));\n\n \n\n            // Set the fragment instance as the OnClickListener\n\n            popupButton.setOnClickListener(PopupListFragment.this);\n\n \n\n            // Finally return the view to be displayed\n\n            return view;\n\n        }\n\n    }\n\n \n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.actionbarcompat.listpopupmenu\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <!-- ActionBarCompat provides an implementation of Popup Menu from API v7 onwards -->\n\n    <uses-sdk\n\n        android:minSdkVersion=\"7\"\n\n        android:targetSdkVersion=\"17\" />\n\n \n\n    <application\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:label=\"@string/app_name\"\n\n        android:theme=\"@style/Theme.AppCompat\"\n\n        android:allowBackup=\"true\">\n\n \n\n        <activity android:name=\".MainActivity\">\n\n            <!-- Launcher Intent filter -->\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n</manifest>\n  "},"ActionBarCompat-ShareActionProvider":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com//samples/ActionBarCompat-ShareActionProvider/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com//samples/ActionBarCompat-ShareActionProvider/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com//samples/ActionBarCompat-ShareActionProvider/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com//samples/ActionBarCompat-ShareActionProvider/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com//samples/ActionBarCompat-ShareActionProvider/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleMessageTile\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n            android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n            android:text=\"@string/intro_message\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n  ","item_image.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<ImageView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:scaleType=\"fitCenter\" />\n  ","item_text.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<TextView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:padding=\"16dp\"\n\n    android:textAppearance=\"?android:textAppearanceLarge\"\n\n    android:lineSpacingMultiplier=\"1.1\"\n\n    android:gravity=\"center\"/>\n  ","sample_main.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <android.support.v4.view.ViewPager\n\n        android:id=\"@+id/viewpager\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"0dp\"\n\n        android:layout_weight=\"1\" />\n\n \n\n    <TextView\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:text=\"@string/intro_message\"\n\n        android:padding=\"16dp\"\n\n        android:textAppearance=\"?android:textAppearanceMedium\"\n\n        android:lineSpacingMultiplier=\"1.1\"\n\n        android:background=\"#fb3\"/>\n\n \n\n</LinearLayout>\n  "},"menu":{"main_menu.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<!--\n\n  As we're using ActionBarCompat, any action item attributes come from ActionBarCompat's XML\n\n  namespace instead of the android namespace. Here we've added a new support namespace added to\n\n  the menu element allowing us to use the 'showAsAction' attribute in a backwards compatible way.\n\n  Any other action item attributes used should be referenced from this namespace too\n\n  (actionProviderClass, actionViewClass, actionLayout).\n\n-->\n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:support=\"http://schemas.android.com/apk/res-auto\">\n\n \n\n    <!--\n\n      To use ShareActionProvider provided by ActionBarCompat, we reference the class by set the\n\n      support:actionProviderClass attribute with the full class name of ShareActionProvider.\n\n    -->\n\n    <item\n\n        android:id=\"@+id/menu_share\"\n\n        android:title=\"@string/menu_share\"\n\n        support:actionProviderClass=\"android.support.v7.widget.ShareActionProvider\"\n\n        support:showAsAction=\"always\" />\n\n \n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">ActionBarCompat-ShareActionProvider</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            This sample shows you how a provide a context-sensitive ShareActionProvider with\n\n            ActionBarCompat, backwards compatible to API v7.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<resources>\n\n    <string name=\"menu_share\">Share</string>\n\n    <string name=\"quote_1\">Expectation is the root of all heartache - William Shakespeare</string>\n\n    <string name=\"quote_2\">The true sign of intelligence is not knowledge but imagination - Albert\n\n        Einstein</string>\n\n    <string name=\"quote_3\">As for me, all I know is that I know nothing - Socrates</string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.actionbarcompat.shareactionprovider":{"content":{"AssetProvider.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.actionbarcompat.shareactionprovider.content;\n\n \n\nimport android.content.ContentProvider;\n\nimport android.content.ContentValues;\n\nimport android.content.res.AssetFileDescriptor;\n\nimport android.content.res.AssetManager;\n\nimport android.database.Cursor;\n\nimport android.net.Uri;\n\nimport android.text.TextUtils;\n\n \n\nimport java.io.FileNotFoundException;\n\nimport java.io.IOException;\n\n \n\n/**\n\n * A simple ContentProvider which can serve files from this application's assets. The majority of\n\n * functionality is in {@link #openAssetFile(android.net.Uri, String)}.\n\n */\n\npublic class AssetProvider extends ContentProvider {\n\n \n\n    public static String CONTENT_URI = \"com.example.android.actionbarcompat.shareactionprovider\";\n\n \n\n    @Override\n\n    public boolean onCreate() {\n\n        return true;\n\n    }\n\n \n\n    @Override\n\n    public int delete(Uri uri, String selection, String[] selectionArgs) {\n\n        // Do not support delete requests.\n\n        return 0;\n\n    }\n\n \n\n    @Override\n\n    public String getType(Uri uri) {\n\n        // Do not support returning the data type\n\n        return null;\n\n    }\n\n \n\n    @Override\n\n    public Uri insert(Uri uri, ContentValues values) {\n\n        // Do not support insert requests.\n\n        return null;\n\n    }\n\n \n\n    @Override\n\n    public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs,\n\n            String sortOrder) {\n\n        // Do not support query requests.\n\n        return null;\n\n    }\n\n \n\n    @Override\n\n    public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {\n\n        // Do not support update requests.\n\n        return 0;\n\n    }\n\n \n\n    @Override\n\n    public AssetFileDescriptor openAssetFile(Uri uri, String mode) throws FileNotFoundException {\n\n        // The asset file name should be the last path segment\n\n        final String assetName = uri.getLastPathSegment();\n\n \n\n        // If the given asset name is empty, throw an exception\n\n        if (TextUtils.isEmpty(assetName)) {\n\n            throw new FileNotFoundException();\n\n        }\n\n \n\n        try {\n\n            // Try and return a file descriptor for the given asset name\n\n            AssetManager am = getContext().getAssets();\n\n            return am.openFd(assetName);\n\n        } catch (IOException e) {\n\n            e.printStackTrace();\n\n            return super.openAssetFile(uri, mode);\n\n        }\n\n    }\n\n}\n  ","ContentItem.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.actionbarcompat.shareactionprovider.content;\n\n \n\nimport android.content.Context;\n\nimport android.content.Intent;\n\nimport android.net.Uri;\n\nimport android.text.TextUtils;\n\n \n\n/**\n\n * This class encapsulates a content item. Referencing the content's type, and the differing way\n\n * to reference the content (asset URI or resource id).\n\n */\n\npublic class ContentItem {\n\n    // Used to signify an image content type\n\n    public static final int CONTENT_TYPE_IMAGE = 0;\n\n    // Used to signify a text/string content type\n\n    public static final int CONTENT_TYPE_TEXT = 1;\n\n \n\n    public final int contentType;\n\n    public final int contentResourceId;\n\n    public final String contentAssetFilePath;\n\n \n\n    /**\n\n     * Creates a ContentItem with the specified type, referencing a resource id.\n\n     *\n\n     * @param type - One of {@link #CONTENT_TYPE_IMAGE} or {@link #CONTENT_TYPE_TEXT}\n\n     * @param resourceId - Resource ID to use for this item's content\n\n     */\n\n    public ContentItem(int type, int resourceId) {\n\n        contentType = type;\n\n        contentResourceId = resourceId;\n\n        contentAssetFilePath = null;\n\n    }\n\n \n\n    /**\n\n     * Creates a ContentItem with the specified type, referencing an asset file path.\n\n     *\n\n     * @param type - One of {@link #CONTENT_TYPE_IMAGE} or {@link #CONTENT_TYPE_TEXT}\n\n     * @param assetFilePath - File path from the application's asset for this item's content\n\n     */\n\n    public ContentItem(int type, String assetFilePath) {\n\n        contentType = type;\n\n        contentAssetFilePath = assetFilePath;\n\n        contentResourceId = 0;\n\n    }\n\n \n\n    /**\n\n     * @return Uri to the content\n\n     */\n\n    public Uri getContentUri() {\n\n        if (!TextUtils.isEmpty(contentAssetFilePath)) {\n\n            // If this content has an asset, then return a AssetProvider Uri\n\n            return Uri.parse(\"content://\" + AssetProvider.CONTENT_URI + \"/\" + contentAssetFilePath);\n\n        } else {\n\n            return null;\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns an {@link android.content.Intent} which can be used to share this item's content with other\n\n     * applications.\n\n     *\n\n     * @param context - Context to be used for fetching resources if needed\n\n     * @return Intent to be given to a ShareActionProvider.\n\n     */\n\n    public Intent getShareIntent(Context context) {\n\n        Intent intent = new Intent(Intent.ACTION_SEND);\n\n \n\n        switch (contentType) {\n\n            case CONTENT_TYPE_IMAGE:\n\n                intent.setType(\"image/jpg\");\n\n                // Bundle the asset content uri as the EXTRA_STREAM uri\n\n                intent.putExtra(Intent.EXTRA_STREAM, getContentUri());\n\n                break;\n\n \n\n            case CONTENT_TYPE_TEXT:\n\n                intent.setType(\"text/plain\");\n\n                // Get the string resource and bundle it as an intent extra\n\n                intent.putExtra(Intent.EXTRA_TEXT, context.getString(contentResourceId));\n\n                break;\n\n        }\n\n \n\n        return intent;\n\n    }\n\n \n\n}\n  "},"MainActivity.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.actionbarcompat.shareactionprovider;\n\n \n\nimport android.content.Intent;\n\nimport android.os.Bundle;\n\nimport android.support.v4.view.MenuItemCompat;\n\nimport android.support.v4.view.PagerAdapter;\n\nimport android.support.v4.view.ViewPager;\n\nimport android.support.v7.app.ActionBarActivity;\n\nimport android.support.v7.widget.ShareActionProvider;\n\nimport android.view.LayoutInflater;\n\nimport android.view.Menu;\n\nimport android.view.MenuItem;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ImageView;\n\nimport android.widget.TextView;\n\n \n\nimport com.example.android.actionbarcompat.shareactionprovider.content.ContentItem;\n\n \n\nimport java.util.ArrayList;\n\n \n\n/**\n\n * This sample shows you how a provide a {@link ShareActionProvider} with ActionBarCompat,\n\n * backwards compatible to API v7.\n\n * <p>\n\n * The sample contains a {@link ViewPager} which displays content of differing types: image and\n\n * text. When a new item is selected in the ViewPager, the ShareActionProvider is updated with\n\n * a share intent specific to that content.\n\n * <p>\n\n * This Activity extends from {@link ActionBarActivity}, which provides all of the function\n\n * necessary to display a compatible Action Bar on devices running Android v2.1+.\n\n */\n\npublic class MainActivity extends ActionBarActivity {\n\n \n\n    // The items to be displayed in the ViewPager\n\n    private final ArrayList<ContentItem> mItems = getSampleContent();\n\n \n\n    // Keep reference to the ShareActionProvider from the menu\n\n    private ShareActionProvider mShareActionProvider;\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n \n\n        // Set content view (which contains a CheeseListFragment)\n\n        setContentView(R.layout.sample_main);\n\n \n\n        // Retrieve the ViewPager from the content view\n\n        ViewPager vp = (ViewPager) findViewById(R.id.viewpager);\n\n \n\n        // Set an OnPageChangeListener so we are notified when a new item is selected\n\n        vp.setOnPageChangeListener(mOnPageChangeListener);\n\n \n\n        // Finally set the adapter so the ViewPager can display items\n\n        vp.setAdapter(mPagerAdapter);\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        // Inflate the menu resource\n\n        getMenuInflater().inflate(R.menu.main_menu, menu);\n\n \n\n        // Retrieve the share menu item\n\n        MenuItem shareItem = menu.findItem(R.id.menu_share);\n\n \n\n        // Now get the ShareActionProvider from the item\n\n        mShareActionProvider = (ShareActionProvider) MenuItemCompat.getActionProvider(shareItem);\n\n \n\n        return super.onCreateOptionsMenu(menu);\n\n    }\n\n \n\n    /**\n\n     * A PagerAdapter which instantiates views based on the ContentItem's content type.\n\n     */\n\n    private final PagerAdapter mPagerAdapter = new PagerAdapter() {\n\n        LayoutInflater mInflater;\n\n \n\n        @Override\n\n        public int getCount() {\n\n            return mItems.size();\n\n        }\n\n \n\n        @Override\n\n        public boolean isViewFromObject(View view, Object o) {\n\n            return view == o;\n\n        }\n\n \n\n        @Override\n\n        public void destroyItem(ViewGroup container, int position, Object object) {\n\n            // Just remove the view from the ViewPager\n\n            container.removeView((View) object);\n\n        }\n\n \n\n        @Override\n\n        public Object instantiateItem(ViewGroup container, int position) {\n\n            // Ensure that the LayoutInflater is instantiated\n\n            if (mInflater == null) {\n\n                mInflater = LayoutInflater.from(MainActivity.this);\n\n            }\n\n \n\n            // Get the item for the requested position\n\n            final ContentItem item = mItems.get(position);\n\n \n\n            // The view we need to inflate changes based on the type of content\n\n            switch (item.contentType) {\n\n                case ContentItem.CONTENT_TYPE_TEXT: {\n\n                    // Inflate item layout for text\n\n                    TextView tv = (TextView) mInflater\n\n                            .inflate(R.layout.item_text, container, false);\n\n \n\n                    // Set text content using it's resource id\n\n                    tv.setText(item.contentResourceId);\n\n \n\n                    // Add the view to the ViewPager\n\n                    container.addView(tv);\n\n                    return tv;\n\n                }\n\n                case ContentItem.CONTENT_TYPE_IMAGE: {\n\n                    // Inflate item layout for images\n\n                    ImageView iv = (ImageView) mInflater\n\n                            .inflate(R.layout.item_image, container, false);\n\n \n\n                    // Load the image from it's content URI\n\n                    iv.setImageURI(item.getContentUri());\n\n \n\n                    // Add the view to the ViewPager\n\n                    container.addView(iv);\n\n                    return iv;\n\n                }\n\n            }\n\n \n\n            return null;\n\n        }\n\n    };\n\n \n\n    /**\n\n     * A OnPageChangeListener used to update the ShareActionProvider's share intent when a new item\n\n     * is selected in the ViewPager.\n\n     */\n\n    private final ViewPager.OnPageChangeListener mOnPageChangeListener\n\n            = new ViewPager.OnPageChangeListener() {\n\n \n\n        @Override\n\n        public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\n\n            // NO-OP\n\n        }\n\n \n\n        @Override\n\n        public void onPageSelected(int position) {\n\n            if (mShareActionProvider != null) {\n\n                // Get the currently selected item, and retrieve it's share intent\n\n                ContentItem item = mItems.get(position);\n\n                Intent shareIntent = item.getShareIntent(MainActivity.this);\n\n \n\n                // Now update the ShareActionProvider with the new share intent\n\n                mShareActionProvider.setShareIntent(shareIntent);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void onPageScrollStateChanged(int state) {\n\n            // NO-OP\n\n        }\n\n    };\n\n \n\n    /**\n\n     * @return An ArrayList of ContentItem's to be displayed in this sample\n\n     */\n\n    static ArrayList<ContentItem> getSampleContent() {\n\n        ArrayList<ContentItem> items = new ArrayList<ContentItem>();\n\n \n\n        items.add(new ContentItem(ContentItem.CONTENT_TYPE_IMAGE, \"photo_1.jpg\"));\n\n        items.add(new ContentItem(ContentItem.CONTENT_TYPE_TEXT, R.string.quote_1));\n\n        items.add(new ContentItem(ContentItem.CONTENT_TYPE_TEXT, R.string.quote_2));\n\n        items.add(new ContentItem(ContentItem.CONTENT_TYPE_IMAGE, \"photo_2.jpg\"));\n\n        items.add(new ContentItem(ContentItem.CONTENT_TYPE_TEXT, R.string.quote_3));\n\n        items.add(new ContentItem(ContentItem.CONTENT_TYPE_IMAGE, \"photo_3.jpg\"));\n\n \n\n        return items;\n\n    }\n\n \n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.actionbarcompat.shareactionprovider\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <!--\n\n        ActionBarCompat provides an Action Bar from API v7 onwards\n\n    -->\n\n    <uses-sdk\n\n        android:minSdkVersion=\"7\"\n\n        android:targetSdkVersion=\"17\" />\n\n \n\n    <application\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:label=\"@string/app_name\"\n\n        android:theme=\"@style/Theme.AppCompat\"\n\n        android:allowBackup=\"true\">\n\n \n\n        <activity\n\n            android:name=\".MainActivity\">\n\n            <!-- Launcher Intent filter -->\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n \n\n        <!-- ContentProvider which serves files from this application's asset folder -->\n\n        <provider\n\n            android:name=\".content.AssetProvider\"\n\n            android:authorities=\"com.example.android.actionbarcompat.shareactionprovider\"\n\n            android:grantUriPermissions=\"true\"\n\n            android:exported=\"true\" />\n\n \n\n    </application>\n\n \n\n</manifest>\n  "},"ActionBarCompat-Styled":{"res":{"drawable":{"pressed_background.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<!--\n\n  This drawable is used in our custom selected item background drawable: selectable_background.xml.\n\n  It is required as selector items need to be drawables, and not a raw color value as we are using.\n\n-->\n\n<shape xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n       android:shape=\"rectangle\">\n\n \n\n    <solid android:color=\"@color/pressed_styled\"/>\n\n \n\n</shape>\n  ","progress_horizontal.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<!--\n\n  This drawable is used in our custom horizontal Progress Bar style:\n\n  Widget.Styled.ProgressBar.Horizontal\n\n-->\n\n<layer-list xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n \n\n    <item\n\n        android:id=\"@android:id/background\"\n\n        android:drawable=\"@drawable/progress_bg_styled\" />\n\n \n\n    <item android:id=\"@android:id/secondaryProgress\">\n\n        <scale\n\n            android:drawable=\"@drawable/progress_secondary_styled\"\n\n            android:scaleWidth=\"100%\" />\n\n    </item>\n\n \n\n    <item android:id=\"@android:id/progress\">\n\n        <scale\n\n            android:drawable=\"@drawable/progress_primary_styled\"\n\n            android:scaleWidth=\"100%\" />\n\n    </item>\n\n \n\n</layer-list>\n  ","selectable_background.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<!--\n\n  This drawable is used as the main touch feedback drawable for the Action Bar. By default it is\n\n  used as the action item button background, amongst other things.\n\n \n\n  The different items in this drawable are displayed when their selector state matches the view's\n\n  state.\n\n-->\n\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n \n\n    <item android:drawable=\"@drawable/list_focused_styled\" android:state_focused=\"true\"\n\n          android:state_pressed=\"false\"/>\n\n    <item android:drawable=\"@drawable/pressed_background\" android:state_pressed=\"true\"/>\n\n    <item android:drawable=\"@android:color/transparent\"/>\n\n \n\n</selector>\n  ","spinner_background_ab.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<!--\n\n  This drawable is used to style the list navigation spinner in our custom Action Bar theme.\n\n \n\n  The different items in this drawable are displayed when their selector state matches the view's\n\n  state.\n\n-->\n\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n \n\n    <item android:drawable=\"@drawable/spinner_ab_disabled_styled\" android:state_enabled=\"false\" />\n\n    <item android:drawable=\"@drawable/spinner_ab_pressed_styled\" android:state_pressed=\"true\" />\n\n    <item android:drawable=\"@drawable/spinner_ab_focused_styled\" android:state_focused=\"true\"\n\n        android:state_pressed=\"false\" />\n\n    <item android:drawable=\"@drawable/spinner_ab_default_styled\" />\n\n \n\n</selector>\n  ","tab_indicator_ab.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<!--\n\n  This drawable is used as the background drawable for each tab displayed on the Action Bar.\n\n \n\n  The different items in this drawable are displayed when their selector state matches the view's\n\n  state.\n\n-->\n\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n \n\n    <!-- Non focused states -->\n\n    <item android:drawable=\"@android:color/transparent\" android:state_focused=\"false\"\n\n        android:state_pressed=\"false\" android:state_selected=\"false\" />\n\n    <item android:drawable=\"@drawable/tab_selected_styled\" android:state_focused=\"false\"\n\n        android:state_pressed=\"false\" android:state_selected=\"true\" />\n\n \n\n    <!-- Focused states -->\n\n    <item android:drawable=\"@drawable/tab_unselected_focused_styled\" android:state_focused=\"true\"\n\n        android:state_pressed=\"false\" android:state_selected=\"false\" />\n\n    <item android:drawable=\"@drawable/tab_selected_focused_styled\" android:state_focused=\"true\"\n\n        android:state_pressed=\"false\" android:state_selected=\"true\" />\n\n \n\n    <!-- Pressed & Non-focused -->\n\n    <item android:drawable=\"@drawable/tab_unselected_pressed_styled\" android:state_focused=\"false\"\n\n        android:state_pressed=\"true\" android:state_selected=\"false\" />\n\n    <item android:drawable=\"@drawable/tab_selected_pressed_styled\" android:state_focused=\"false\"\n\n        android:state_pressed=\"true\" android:state_selected=\"true\" />\n\n \n\n    <!-- Pressed & focused states -->\n\n    <item android:drawable=\"@drawable/tab_unselected_pressed_styled\" android:state_focused=\"true\"\n\n        android:state_pressed=\"true\" android:state_selected=\"false\" />\n\n    <item android:drawable=\"@drawable/tab_selected_pressed_styled\" android:state_focused=\"true\"\n\n        android:state_pressed=\"true\" android:state_selected=\"true\" />\n\n \n\n</selector>\n  "},"drawable-hdpi":{"ab_bottom_solid_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-hdpi/ab_bottom_solid_styled.9.png","ab_solid_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-hdpi/ab_solid_styled.9.png","ab_stacked_solid_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-hdpi/ab_stacked_solid_styled.9.png","ic_action_location.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-hdpi/ic_action_location.png","ic_action_refresh.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-hdpi/ic_action_refresh.png","ic_action_settings.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-hdpi/ic_action_settings.png","ic_launcher.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-hdpi/ic_launcher.png","list_focused_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-hdpi/list_focused_styled.9.png","menu_dropdown_panel_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-hdpi/menu_dropdown_panel_styled.9.png","progress_bg_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-hdpi/progress_bg_styled.9.png","progress_primary_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-hdpi/progress_primary_styled.9.png","progress_secondary_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-hdpi/progress_secondary_styled.9.png","spinner_ab_default_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-hdpi/spinner_ab_default_styled.9.png","spinner_ab_disabled_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-hdpi/spinner_ab_disabled_styled.9.png","spinner_ab_focused_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-hdpi/spinner_ab_focused_styled.9.png","spinner_ab_pressed_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-hdpi/spinner_ab_pressed_styled.9.png","tab_selected_focused_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-hdpi/tab_selected_focused_styled.9.png","tab_selected_pressed_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-hdpi/tab_selected_pressed_styled.9.png","tab_selected_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-hdpi/tab_selected_styled.9.png","tab_unselected_focused_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-hdpi/tab_unselected_focused_styled.9.png","tab_unselected_pressed_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-hdpi/tab_unselected_pressed_styled.9.png","tile.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ab_bottom_solid_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-mdpi/ab_bottom_solid_styled.9.png","ab_solid_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-mdpi/ab_solid_styled.9.png","ab_stacked_solid_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-mdpi/ab_stacked_solid_styled.9.png","ic_action_location.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-mdpi/ic_action_location.png","ic_action_refresh.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-mdpi/ic_action_refresh.png","ic_action_settings.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-mdpi/ic_action_settings.png","ic_launcher.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-mdpi/ic_launcher.png","list_focused_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-mdpi/list_focused_styled.9.png","menu_dropdown_panel_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-mdpi/menu_dropdown_panel_styled.9.png","progress_bg_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-mdpi/progress_bg_styled.9.png","progress_primary_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-mdpi/progress_primary_styled.9.png","progress_secondary_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-mdpi/progress_secondary_styled.9.png","spinner_ab_default_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-mdpi/spinner_ab_default_styled.9.png","spinner_ab_disabled_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-mdpi/spinner_ab_disabled_styled.9.png","spinner_ab_focused_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-mdpi/spinner_ab_focused_styled.9.png","spinner_ab_pressed_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-mdpi/spinner_ab_pressed_styled.9.png","tab_selected_focused_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-mdpi/tab_selected_focused_styled.9.png","tab_selected_pressed_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-mdpi/tab_selected_pressed_styled.9.png","tab_selected_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-mdpi/tab_selected_styled.9.png","tab_unselected_focused_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-mdpi/tab_unselected_focused_styled.9.png","tab_unselected_pressed_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-mdpi/tab_unselected_pressed_styled.9.png"},"drawable-xhdpi":{"ab_bottom_solid_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-xhdpi/ab_bottom_solid_styled.9.png","ab_solid_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-xhdpi/ab_solid_styled.9.png","ab_stacked_solid_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-xhdpi/ab_stacked_solid_styled.9.png","ic_action_location.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-xhdpi/ic_action_location.png","ic_action_refresh.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-xhdpi/ic_action_refresh.png","ic_action_settings.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-xhdpi/ic_action_settings.png","ic_launcher.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-xhdpi/ic_launcher.png","list_focused_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-xhdpi/list_focused_styled.9.png","menu_dropdown_panel_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-xhdpi/menu_dropdown_panel_styled.9.png","progress_bg_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-xhdpi/progress_bg_styled.9.png","progress_primary_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-xhdpi/progress_primary_styled.9.png","progress_secondary_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-xhdpi/progress_secondary_styled.9.png","spinner_ab_default_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-xhdpi/spinner_ab_default_styled.9.png","spinner_ab_disabled_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-xhdpi/spinner_ab_disabled_styled.9.png","spinner_ab_focused_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-xhdpi/spinner_ab_focused_styled.9.png","spinner_ab_pressed_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-xhdpi/spinner_ab_pressed_styled.9.png","tab_selected_focused_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-xhdpi/tab_selected_focused_styled.9.png","tab_selected_pressed_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-xhdpi/tab_selected_pressed_styled.9.png","tab_selected_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-xhdpi/tab_selected_styled.9.png","tab_unselected_focused_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-xhdpi/tab_unselected_focused_styled.9.png","tab_unselected_pressed_styled.9.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-xhdpi/tab_unselected_pressed_styled.9.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com//samples/ActionBarCompat-Styled/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleMessageTile\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n            android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n            android:text=\"@string/intro_message\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n  ","sample_main.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<TextView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:text=\"@string/main_description\"\n\n    android:padding=\"16dp\"\n\n    android:gravity=\"center\"/>\n\n \n  "},"menu":{"main.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<!--\n\n  As we're using ActionBarCompat, any action item attributes come from ActionBarCompat's XML\n\n  namespace instead of the android namespace. Here we've added a new support namespace added to\n\n  the menu element allowing us to use the 'showAsAction' attribute in a backwards compatible way.\n\n  Any other action item attributes used should be referenced from this namespace too\n\n  (actionProviderClass, actionViewClass, actionLayout).\n\n-->\n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:support=\"http://schemas.android.com/apk/res-auto\" >\n\n \n\n    <!--\n\n       Here we create all of the items to be displayed in the menu, setting support:showAsAction to\n\n       define how the item should be displayed on the compatible Action Bar.\n\n    -->\n\n    <item\n\n        android:id=\"@+id/menu_refresh\"\n\n        android:icon=\"@drawable/ic_action_refresh\"\n\n        android:title=\"@string/menu_refresh\"\n\n        support:showAsAction=\"ifRoom\"/>\n\n \n\n    <item\n\n        android:id=\"@+id/menu_location\"\n\n        android:icon=\"@drawable/ic_action_location\"\n\n        android:title=\"@string/menu_location\"\n\n        support:showAsAction=\"ifRoom\"/>\n\n \n\n    <item\n\n        android:id=\"@+id/menu_settings\"\n\n        android:icon=\"@drawable/ic_action_settings\"\n\n        android:title=\"@string/menu_settings\"\n\n        support:showAsAction=\"never\"/>\n\n \n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">ActionBarCompat-Styled</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            This sample shows you how to use ActionBarCompat with a customized theme. It utilizes a\n\n            split action bar when running on a device with a narrow display, and show three tabs.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","colors.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <color name=\"pressed_styled\">#CC669900</color>\n\n \n\n</resources>\n  ","strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<resources>\n\n \n\n    <string name=\"menu_refresh\">Refresh</string>\n\n    <string name=\"menu_location\">Location</string>\n\n    <string name=\"menu_settings\">Settings</string>\n\n    <string name=\"main_description\">This is a basic Activity showing an Action Bar which has been\n\n        styled.\n\n    </string>\n\n \n\n</resources>\n  ","styles.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <!--\n\n        This is the styled theme.\n\n \n\n        It extends from Theme.AppCompat.Light, but it could extend from any of\n\n        the Theme.AppCompat themes depending on your color scheme. This theme can be applied to\n\n        your application or individual activities in the AndroidManifest.xml. In this sample it is\n\n        set on the application.\n\n \n\n        This differs from the version of this theme in 'res/values-v14', as not all of the\n\n        necessary attributes are available in the android: namespace on older versions of Android.\n\n        This means that for certain attributes we must set the attributes provided in\n\n        ActionBarCompat's namespace instead.\n\n    -->\n\n \n\n    <style name=\"Theme.Styled\" parent=\"@style/Theme.AppCompat.Light\">\n\n        <item name=\"actionBarItemBackground\">@drawable/selectable_background</item>\n\n        <item name=\"actionBarTabStyle\">@style/Widget.Styled.ActionBar.TabView</item>\n\n        <item name=\"actionBarStyle\">@style/Widget.Styled.ActionBar</item>\n\n        <item name=\"actionDropDownStyle\">@style/Widget.Styled.Spinner.DropDown.ActionBar</item>\n\n        <item name=\"dropDownListViewStyle\">@style/Widget.Styled.ListView.DropDown</item>\n\n        <item name=\"popupMenuStyle\">@style/Widget.Styled.PopupMenu</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.Styled.ActionBar\" parent=\"@style/Widget.AppCompat.Light.ActionBar.Solid\">\n\n        <item name=\"background\">@drawable/ab_solid_styled</item>\n\n        <item name=\"backgroundStacked\">@drawable/ab_stacked_solid_styled</item>\n\n        <item name=\"backgroundSplit\">@drawable/ab_bottom_solid_styled</item>\n\n        <item name=\"progressBarStyle\">@style/Widget.Styled.ProgressBar.Horizontal</item>\n\n    </style>\n\n \n\n \n\n    <!--\n\n        For the following styles, the attributes are available in the android namespace which\n\n        means that we can set them here for all platforms (v7 through to the latest).\n\n    -->\n\n \n\n    <style name=\"Widget.Styled.ActionBar.TabView\"\n\n           parent=\"@style/Widget.AppCompat.Light.ActionBar.TabView\">\n\n        <item name=\"android:background\">@drawable/tab_indicator_ab</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.Styled.Spinner.DropDown.ActionBar\"\n\n           parent=\"@style/Widget.AppCompat.Light.Spinner.DropDown.ActionBar\">\n\n        <item name=\"android:background\">@drawable/spinner_background_ab</item>\n\n        <item name=\"android:popupBackground\">@drawable/menu_dropdown_panel_styled</item>\n\n        <item name=\"android:dropDownSelector\">@drawable/selectable_background</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.Styled.ProgressBar.Horizontal\"\n\n           parent=\"@style/Widget.AppCompat.ProgressBar.Horizontal\">\n\n        <item name=\"android:progressDrawable\">@drawable/progress_horizontal</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.Styled.PopupMenu\" parent=\"@style/Widget.AppCompat.Light.PopupMenu\">\n\n        <item name=\"android:popupBackground\">@drawable/menu_dropdown_panel_styled</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.Styled.ListView.DropDown\"\n\n           parent=\"@style/Widget.AppCompat.Light.ListView.DropDown\">\n\n        <item name=\"android:listSelector\">@drawable/selectable_background</item>\n\n    </style>\n\n \n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "},"values-v14":{"styles.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <!--\n\n        This is the styled theme.\n\n \n\n        It extends from Theme.AppCompat.Light, but it could extend from any of\n\n        the Theme.AppCompat themes depending on your color scheme. This theme can be applied to\n\n        your application or individual activities in the AndroidManifest.xml. In this sample it is\n\n        set on the application.\n\n \n\n        This differs from the version of this theme in 'res/values', as we revert back to\n\n        setting the attributes from the android namespace in ICS+.\n\n    -->\n\n \n\n    <style name=\"Theme.Styled\" parent=\"@style/Theme.AppCompat.Light\">\n\n        <item name=\"android:actionBarItemBackground\">@drawable/selectable_background</item>\n\n        <item name=\"android:actionBarTabStyle\">@style/Widget.Styled.ActionBar.TabView</item>\n\n        <item name=\"android:actionBarStyle\">@style/Widget.Styled.ActionBar</item>\n\n        <item name=\"android:actionDropDownStyle\">\n\n            @style/Widget.Styled.Spinner.DropDown.ActionBar\n\n        </item>\n\n        <item name=\"android:dropDownListViewStyle\">@style/Widget.Styled.ListView.DropDown</item>\n\n        <item name=\"android:popupMenuStyle\">@style/Widget.Styled.PopupMenu</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.Styled.ActionBar\" parent=\"@style/Widget.AppCompat.Light.ActionBar.Solid\">\n\n        <item name=\"android:background\">@drawable/ab_solid_styled</item>\n\n        <item name=\"android:backgroundStacked\">@drawable/ab_stacked_solid_styled</item>\n\n        <item name=\"android:backgroundSplit\">@drawable/ab_bottom_solid_styled</item>\n\n        <item name=\"android:progressBarStyle\">@style/Widget.Styled.ProgressBar.Horizontal</item>\n\n    </style>\n\n \n\n</resources>\n  "}},"src":{"com.example.android.actionbarcompat.styled":{"MainActivity.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.actionbarcompat.styled;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentTransaction;\n\nimport android.support.v7.app.ActionBar;\n\nimport android.support.v7.app.ActionBarActivity;\n\nimport android.view.Menu;\n\n \n\n/**\n\n * This sample shows you how to use ActionBarCompat with a customized theme. It utilizes a split\n\n * action bar when running on a device with a narrow display, and show three tabs.\n\n *\n\n * This Activity extends from {@link ActionBarActivity}, which provides all of the function\n\n * necessary to display a compatible Action Bar on devices running Android v2.1+.\n\n *\n\n * The interesting bits of this sample start in the theme files\n\n * ('res/values/styles.xml' and 'res/values-v14</styles.xml').\n\n *\n\n * Many of the drawables used in this sample were generated with the\n\n * 'Android Action Bar Style Generator': http://jgilfelt.github.io/android-actionbarstylegenerator\n\n */\n\npublic class MainActivity extends ActionBarActivity implements ActionBar.TabListener {\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.sample_main);\n\n \n\n        // Set the Action Bar to use tabs for navigation\n\n        ActionBar ab = getSupportActionBar();\n\n        ab.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);\n\n \n\n        // Add three tabs to the Action Bar for display\n\n        ab.addTab(ab.newTab().setText(\"Tab 1\").setTabListener(this));\n\n        ab.addTab(ab.newTab().setText(\"Tab 2\").setTabListener(this));\n\n        ab.addTab(ab.newTab().setText(\"Tab 3\").setTabListener(this));\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        // Inflate menu from menu resource (res/menu/main)\n\n        getMenuInflater().inflate(R.menu.main, menu);\n\n \n\n        return super.onCreateOptionsMenu(menu);\n\n    }\n\n \n\n    // Implemented from ActionBar.TabListener\n\n    @Override\n\n    public void onTabSelected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {\n\n        // This is called when a tab is selected.\n\n    }\n\n \n\n    // Implemented from ActionBar.TabListener\n\n    @Override\n\n    public void onTabUnselected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {\n\n        // This is called when a previously selected tab is unselected.\n\n    }\n\n \n\n    // Implemented from ActionBar.TabListener\n\n    @Override\n\n    public void onTabReselected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {\n\n        // This is called when a previously selected tab is selected again.\n\n    }\n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.actionbarcompat.styled\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\" >\n\n \n\n    <uses-sdk\n\n        android:minSdkVersion=\"7\"\n\n        android:targetSdkVersion=\"17\" />\n\n \n\n    <!--\n\n        Theme is set on the application so that our custom theme is used by\n\n        default by all Activities\n\n    -->\n\n    <application\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:label=\"@string/app_name\"\n\n        android:theme=\"@style/Theme.Styled\" >\n\n \n\n        <activity android:name=\".MainActivity\">\n\n \n\n            <!-- Launcher Intent filter -->\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n \n\n            <!--\n\n                In this example set the Activity to have a split action bar when the device's\n\n                display is narrow. In ActionBarCompat this is done by setting the\n\n                'android.support.UI_OPTIONS' metadata field to 'splitActionBarWhenNarrow'.\n\n            -->\n\n            <meta-data\n\n                android:name=\"android.support.UI_OPTIONS\"\n\n                android:value=\"splitActionBarWhenNarrow\" />\n\n \n\n        </activity>\n\n    </application>\n\n \n\n</manifest>\n  "},"AdapterTransition":{"res":{"drawable-hdpi":{"ic_action_grid.png":"http://developer.android.com//samples/AdapterTransition/res/drawable-hdpi/ic_action_grid.png","ic_action_list.png":"http://developer.android.com//samples/AdapterTransition/res/drawable-hdpi/ic_action_list.png","ic_launcher.png":"http://developer.android.com//samples/AdapterTransition/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com//samples/AdapterTransition/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_action_grid.png":"http://developer.android.com//samples/AdapterTransition/res/drawable-mdpi/ic_action_grid.png","ic_action_list.png":"http://developer.android.com//samples/AdapterTransition/res/drawable-mdpi/ic_action_list.png","ic_launcher.png":"http://developer.android.com//samples/AdapterTransition/res/drawable-mdpi/ic_launcher.png"},"drawable-nodpi":{"p1.jpg":"http://developer.android.com//samples/AdapterTransition/res/drawable-nodpi/p1.jpg","p10.jpg":"http://developer.android.com//samples/AdapterTransition/res/drawable-nodpi/p10.jpg","p11.jpg":"http://developer.android.com//samples/AdapterTransition/res/drawable-nodpi/p11.jpg","p2.jpg":"http://developer.android.com//samples/AdapterTransition/res/drawable-nodpi/p2.jpg","p3.jpg":"http://developer.android.com//samples/AdapterTransition/res/drawable-nodpi/p3.jpg","p4.jpg":"http://developer.android.com//samples/AdapterTransition/res/drawable-nodpi/p4.jpg","p5.jpg":"http://developer.android.com//samples/AdapterTransition/res/drawable-nodpi/p5.jpg","p6.jpg":"http://developer.android.com//samples/AdapterTransition/res/drawable-nodpi/p6.jpg","p7.jpg":"http://developer.android.com//samples/AdapterTransition/res/drawable-nodpi/p7.jpg","p8.jpg":"http://developer.android.com//samples/AdapterTransition/res/drawable-nodpi/p8.jpg","p9.jpg":"http://developer.android.com//samples/AdapterTransition/res/drawable-nodpi/p9.jpg"},"drawable-xhdpi":{"ic_action_grid.png":"http://developer.android.com//samples/AdapterTransition/res/drawable-xhdpi/ic_action_grid.png","ic_action_list.png":"http://developer.android.com//samples/AdapterTransition/res/drawable-xhdpi/ic_action_list.png","ic_launcher.png":"http://developer.android.com//samples/AdapterTransition/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_action_grid.png":"http://developer.android.com//samples/AdapterTransition/res/drawable-xxhdpi/ic_action_grid.png","ic_action_list.png":"http://developer.android.com//samples/AdapterTransition/res/drawable-xxhdpi/ic_action_list.png","ic_launcher.png":"http://developer.android.com//samples/AdapterTransition/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"vertical\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <ViewAnimator\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\"\n\n          android:layout_weight=\"1\">\n\n \n\n        <ScrollView\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingRight=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingTop=\"@dimen/vertical_page_margin\"\n\n                  android:paddingBottom=\"@dimen/vertical_page_margin\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </ScrollView>\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\" />\n\n \n\n    </ViewAnimator>\n\n \n\n    <View\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"1dp\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\" />\n\n \n\n</LinearLayout>\n\n \n  ","fragment_adapter_transition.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\nCopyright 2014 The Android Open Source Project\n\n \n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n \n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n \n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n-->\n\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:tools=\"http://schemas.android.com/tools\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\"\n\n    tools:context=\"com.example.android.adaptertransition.AdapterTransitionFragment\">\n\n \n\n    <FrameLayout\n\n        android:id=\"@+id/content\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"match_parent\"/>\n\n \n\n    <FrameLayout\n\n        android:id=\"@+id/cover\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"match_parent\"\n\n        android:background=\"#f3f3f3\"\n\n        android:visibility=\"invisible\"/>\n\n \n\n</FrameLayout>\n  ","fragment_meat_grid.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\nCopyright 2014 The Android Open Source Project\n\n \n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n \n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n \n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n-->\n\n<GridView\n\n    android:id=\"@+id/abs_list_view\"\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:clipToPadding=\"false\"\n\n    android:columnWidth=\"150dp\"\n\n    android:horizontalSpacing=\"1dp\"\n\n    android:numColumns=\"auto_fit\"\n\n    android:padding=\"1dp\"\n\n    android:scrollbars=\"none\"\n\n    android:stretchMode=\"columnWidth\"\n\n    android:verticalSpacing=\"1dp\"/>\n  ","fragment_meat_list.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\nCopyright 2014 The Android Open Source Project\n\n \n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n \n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n \n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n-->\n\n<ListView\n\n    android:id=\"@+id/abs_list_view\"\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"/>\n  ","item_meat_grid.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\nCopyright 2014 The Android Open Source Project\n\n \n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n \n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n \n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n-->\n\n<RelativeLayout\n\n    android:id=\"@+id/meat_container\"\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:tools=\"http://schemas.android.com/tools\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"150dp\">\n\n \n\n    <ImageView\n\n        android:id=\"@+id/meat_image\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"match_parent\"\n\n        android:scaleType=\"centerCrop\"\n\n        tools:src=\"@drawable/p1\"/>\n\n \n\n    <TextView\n\n        android:id=\"@+id/meat_title\"\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:layout_alignParentBottom=\"true\"\n\n        android:layout_alignParentEnd=\"true\"\n\n        android:layout_gravity=\"bottom|end\"\n\n        android:layout_marginEnd=\"16dp\"\n\n        android:layout_marginStart=\"16dp\"\n\n        android:gravity=\"center_horizontal\"\n\n        android:shadowColor=\"#000000\"\n\n        android:shadowDx=\"0\"\n\n        android:shadowDy=\"0\"\n\n        android:shadowRadius=\"10\"\n\n        android:textColor=\"#ffffff\"\n\n        android:textSize=\"24sp\"\n\n        android:textStyle=\"bold\"\n\n        tools:text=\"Hello\"/>\n\n \n\n</RelativeLayout>\n  ","item_meat_list.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\nCopyright 2014 The Android Open Source Project\n\n \n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n \n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n \n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n-->\n\n<RelativeLayout\n\n    android:id=\"@+id/meat_container\"\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:tools=\"http://schemas.android.com/tools\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"horizontal\"\n\n    android:paddingEnd=\"?android:attr/listPreferredItemPaddingEnd\"\n\n    android:paddingStart=\"?android:attr/listPreferredItemPaddingStart\">\n\n \n\n    <ImageView\n\n        android:id=\"@+id/meat_image\"\n\n        android:layout_width=\"64dp\"\n\n        android:layout_height=\"64dp\"\n\n        android:scaleType=\"centerCrop\"\n\n        tools:src=\"@drawable/p1\"/>\n\n \n\n    <TextView\n\n        android:id=\"@+id/meat_title\"\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:layout_centerVertical=\"true\"\n\n        android:layout_marginStart=\"?android:attr/listPreferredItemPaddingStart\"\n\n        android:layout_toEndOf=\"@id/meat_image\"\n\n        android:layout_centerInParent=\"true\"\n\n        android:gravity=\"center_vertical\"\n\n        android:textSize=\"24sp\"\n\n        tools:text=\"Title\"/>\n\n \n\n</RelativeLayout>\n  "},"layout-w720dp":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"horizontal\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <LinearLayout\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\"\n\n          android:layout_weight=\"1\"\n\n          android:orientation=\"vertical\">\n\n \n\n        <FrameLayout\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"wrap_content\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/margin_medium\"\n\n                  android:paddingRight=\"@dimen/margin_medium\"\n\n                  android:paddingTop=\"@dimen/margin_large\"\n\n                  android:paddingBottom=\"@dimen/margin_large\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </FrameLayout>\n\n \n\n        <View\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"1dp\"\n\n              android:background=\"@android:color/darker_gray\" />\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"0px\"\n\n              android:layout_weight=\"1\" />\n\n \n\n    </LinearLayout>\n\n \n\n    <View\n\n          android:layout_width=\"1dp\"\n\n          android:layout_height=\"match_parent\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\" />\n\n \n\n</LinearLayout>\n\n \n\n \n  "},"menu":{"fragment_adapter_transition.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\nCopyright 2014 The Android Open Source Project\n\n \n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n \n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n \n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n-->\n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item\n\n        android:id=\"@+id/action_toggle\"\n\n        android:icon=\"@drawable/ic_action_grid\"\n\n        android:showAsAction=\"always|withText\"\n\n        android:title=\"@string/show_as_grid\"/>\n\n</menu>\n  ","main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:id=\"@+id/menu_toggle_log\"\n\n          android:showAsAction=\"always\"\n\n          android:title=\"@string/sample_show_log\" />\n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">AdapterTransition</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n\t    Transition cannot be directly applied to AdapterViews. In this sample, we demonstrate how to create an overlay layout and run a Transition on it. Press the action bar button to toggle between ListView and GridView.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","strings.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<resources>\n\n    <string name=\"sample_show_log\">Show Log</string>\n\n    <string name=\"sample_hide_log\">Hide Log</string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.adaptertransition":{"AdapterTransitionFragment.java":"\n    \n\n/*\n\n * Copyright 2014 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.adaptertransition;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.ActivityCompat;\n\nimport android.support.v4.app.Fragment;\n\nimport android.transition.AutoTransition;\n\nimport android.transition.Scene;\n\nimport android.transition.Transition;\n\nimport android.transition.TransitionManager;\n\nimport android.view.LayoutInflater;\n\nimport android.view.Menu;\n\nimport android.view.MenuInflater;\n\nimport android.view.MenuItem;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.AbsListView;\n\nimport android.widget.FrameLayout;\n\nimport android.widget.GridView;\n\nimport android.widget.ListView;\n\nimport android.widget.Toast;\n\n \n\n/**\n\n * Main screen for AdapterTransition sample.\n\n */\n\npublic class AdapterTransitionFragment extends Fragment implements Transition.TransitionListener {\n\n \n\n    /**\n\n     * Since the transition framework requires all relevant views in a view hierarchy to be marked\n\n     * with IDs, we use this ID to mark the root view.\n\n     */\n\n    private static final int ROOT_ID = 1;\n\n \n\n    /**\n\n     * A tag for saving state whether the mAbsListView is ListView or GridView.\n\n     */\n\n    private static final String STATE_IS_LISTVIEW = \"is_listview\";\n\n \n\n    /**\n\n     * This is where we place our AdapterView (ListView / GridView).\n\n     */\n\n    private FrameLayout mContent;\n\n \n\n    /**\n\n     * This is where we carry out the transition.\n\n     */\n\n    private FrameLayout mCover;\n\n \n\n    /**\n\n     * This list shows our contents. It can be ListView or GridView, and we toggle between them\n\n     * using the transition framework.\n\n     */\n\n    private AbsListView mAbsListView;\n\n \n\n    /**\n\n     * This is our contents.\n\n     */\n\n    private MeatAdapter mAdapter;\n\n \n\n    public static AdapterTransitionFragment newInstance() {\n\n        return new AdapterTransitionFragment();\n\n    }\n\n \n\n    public AdapterTransitionFragment() {\n\n    }\n\n \n\n    @Override\n\n    public void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setHasOptionsMenu(true);\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n        // If savedInstanceState is available, we restore the state whether the list is a ListView\n\n        // or a GridView.\n\n        boolean isListView;\n\n        if (null == savedInstanceState) {\n\n            isListView = true;\n\n        } else {\n\n            isListView = savedInstanceState.getBoolean(STATE_IS_LISTVIEW, true);\n\n        }\n\n        inflateAbsList(inflater, container, isListView);\n\n        return inflater.inflate(R.layout.fragment_adapter_transition, container, false);\n\n    }\n\n \n\n    @Override\n\n    public void onSaveInstanceState(Bundle outState) {\n\n        super.onSaveInstanceState(outState);\n\n        outState.putBoolean(STATE_IS_LISTVIEW, mAbsListView instanceof ListView);\n\n    }\n\n \n\n    @Override\n\n    public void onViewCreated(View view, Bundle savedInstanceState) {\n\n        // Retaining references for FrameLayouts that we use later.\n\n        mContent = (FrameLayout) view.findViewById(R.id.content);\n\n        mCover = (FrameLayout) view.findViewById(R.id.cover);\n\n        // We are attaching the list to the screen here.\n\n        mContent.addView(mAbsListView);\n\n    }\n\n \n\n    @Override\n\n    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {\n\n        inflater.inflate(R.menu.fragment_adapter_transition, menu);\n\n    }\n\n \n\n    @Override\n\n    public void onPrepareOptionsMenu(Menu menu) {\n\n        // We change the look of the icon every time the user toggles between list and grid.\n\n        MenuItem item = menu.findItem(R.id.action_toggle);\n\n        if (null != item) {\n\n            if (mAbsListView instanceof ListView) {\n\n                item.setIcon(R.drawable.ic_action_grid);\n\n                item.setTitle(R.string.show_as_grid);\n\n            } else {\n\n                item.setIcon(R.drawable.ic_action_list);\n\n                item.setTitle(R.string.show_as_list);\n\n            }\n\n        }\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch (item.getItemId()) {\n\n            case R.id.action_toggle: {\n\n                toggle();\n\n                return true;\n\n            }\n\n        }\n\n        return false;\n\n    }\n\n \n\n    @Override\n\n    public void onTransitionStart(Transition transition) {\n\n    }\n\n \n\n    @Override\n\n    public void onTransitionEnd(Transition transition) {\n\n        // When the transition ends, we remove all the views from the overlay and hide it.\n\n        mCover.removeAllViews();\n\n        mCover.setVisibility(View.INVISIBLE);\n\n    }\n\n \n\n    @Override\n\n    public void onTransitionCancel(Transition transition) {\n\n    }\n\n \n\n    @Override\n\n    public void onTransitionPause(Transition transition) {\n\n    }\n\n \n\n    @Override\n\n    public void onTransitionResume(Transition transition) {\n\n    }\n\n \n\n    /**\n\n     * Inflate a ListView or a GridView with a corresponding ListAdapter.\n\n     *\n\n     * @param inflater The LayoutInflater.\n\n     * @param container The ViewGroup that contains this AbsListView. The AbsListView won't be\n\n     *                  attached to it.\n\n     * @param inflateListView Pass true to inflate a ListView, or false to inflate a GridView.\n\n     */\n\n    private void inflateAbsList(LayoutInflater inflater, ViewGroup container,\n\n                                boolean inflateListView) {\n\n        if (inflateListView) {\n\n            mAbsListView = (AbsListView) inflater.inflate(R.layout.fragment_meat_list,\n\n                    container, false);\n\n            mAdapter = new MeatAdapter(inflater, R.layout.item_meat_list);\n\n        } else {\n\n            mAbsListView = (AbsListView) inflater.inflate(R.layout.fragment_meat_grid,\n\n                    container, false);\n\n            mAdapter = new MeatAdapter(inflater, R.layout.item_meat_grid);\n\n        }\n\n        mAbsListView.setAdapter(mAdapter);\n\n        mAbsListView.setOnItemClickListener(mAdapter);\n\n    }\n\n \n\n    /**\n\n     * Toggle the UI between ListView and GridView.\n\n     */\n\n    private void toggle() {\n\n        // We use mCover as the overlay on which we carry out the transition.\n\n        mCover.setVisibility(View.VISIBLE);\n\n        // This FrameLayout holds all the visible views in the current list or grid. We use this as\n\n        // the starting Scene of the Transition later.\n\n        FrameLayout before = copyVisibleViews();\n\n        FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(\n\n                FrameLayout.LayoutParams.MATCH_PARENT, FrameLayout.LayoutParams.MATCH_PARENT);\n\n        mCover.addView(before, params);\n\n        // Swap the actual list.\n\n        swapAbsListView();\n\n        // We also swap the icon for the toggle button.\n\n        ActivityCompat.invalidateOptionsMenu(getActivity());\n\n        // It is now ready to start the transition.\n\n        mAbsListView.post(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                Scene scene = new Scene(mCover, copyVisibleViews());\n\n                Transition transition = new AutoTransition();\n\n                transition.addListener(AdapterTransitionFragment.this);\n\n                TransitionManager.go(scene, transition);\n\n            }\n\n        });\n\n    }\n\n \n\n    /**\n\n     * Swap ListView with GridView, or GridView with ListView.\n\n     */\n\n    private void swapAbsListView() {\n\n        // We save the current scrolling position before removing the current list.\n\n        int first = mAbsListView.getFirstVisiblePosition();\n\n        // If the current list is a GridView, we replace it with a ListView. If it is a ListView,\n\n        // a GridView.\n\n        LayoutInflater inflater = LayoutInflater.from(getActivity());\n\n        inflateAbsList(inflater, (ViewGroup) mAbsListView.getParent(),\n\n                mAbsListView instanceof GridView);\n\n        mAbsListView.setAdapter(mAdapter);\n\n        // We restore the scrolling position here.\n\n        mAbsListView.setSelection(first);\n\n        // The new list is ready, and we replace the existing one with it.\n\n        mContent.removeAllViews();\n\n        mContent.addView(mAbsListView);\n\n    }\n\n \n\n    /**\n\n     * Copy all the visible views in the mAbsListView into a new FrameLayout and return it.\n\n     *\n\n     * @return a FrameLayout with all the visible views inside.\n\n     */\n\n    private FrameLayout copyVisibleViews() {\n\n        // This is the FrameLayout we return afterwards.\n\n        FrameLayout layout = new FrameLayout(getActivity());\n\n        // The transition framework requires to set ID for all views to be animated.\n\n        layout.setId(ROOT_ID);\n\n        // We only copy visible views.\n\n        int first = mAbsListView.getFirstVisiblePosition();\n\n        int index = 0;\n\n        while (true) {\n\n            // This is one of the views that we copy. Note that the argument for getChildAt is a\n\n            // zero-oriented index, and it doesn't usually match with its position in the list.\n\n            View source = mAbsListView.getChildAt(index);\n\n            if (null == source) {\n\n                break;\n\n            }\n\n            // This is the copy of the original view.\n\n            View destination = mAdapter.getView(first + index, null, layout);\n\n            assert destination != null;\n\n            destination.setId(ROOT_ID + first + index);\n\n            FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(\n\n                    source.getWidth(), source.getHeight());\n\n            params.leftMargin = (int) source.getX();\n\n            params.topMargin = (int) source.getY();\n\n            layout.addView(destination, params);\n\n            ++index;\n\n        }\n\n        return layout;\n\n    }\n\n \n\n}\n  ","MainActivity.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.adaptertransition;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentTransaction;\n\nimport android.view.Menu;\n\nimport android.view.MenuItem;\n\nimport android.widget.ViewAnimator;\n\n \n\nimport com.example.android.common.activities.SampleActivityBase;\n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogFragment;\n\nimport com.example.android.common.logger.LogWrapper;\n\nimport com.example.android.common.logger.MessageOnlyLogFilter;\n\n \n\n/**\n\n * A simple launcher activity containing a summary sample description, sample log and a custom\n\n * {@link android.support.v4.app.Fragment} which can display a view.\n\n * <p>\n\n * For devices with displays with a width of 720dp or greater, the sample log is always visible,\n\n * on other devices it's visibility is controlled by an item on the Action Bar.\n\n */\n\npublic class MainActivity extends SampleActivityBase {\n\n \n\n    public static final String TAG = \"MainActivity\";\n\n \n\n    // Whether the Log Fragment is currently shown\n\n    private boolean mLogShown;\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_main);\n\n \n\n        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n\n        AdapterTransitionFragment fragment = new AdapterTransitionFragment();\n\n        transaction.replace(R.id.sample_content_fragment, fragment);\n\n        transaction.commit();\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        getMenuInflater().inflate(R.menu.main, menu);\n\n        return true;\n\n    }\n\n \n\n    @Override\n\n    public boolean onPrepareOptionsMenu(Menu menu) {\n\n        MenuItem logToggle = menu.findItem(R.id.menu_toggle_log);\n\n        logToggle.setVisible(findViewById(R.id.sample_output) instanceof ViewAnimator);\n\n        logToggle.setTitle(mLogShown ? R.string.sample_hide_log : R.string.sample_show_log);\n\n \n\n        return super.onPrepareOptionsMenu(menu);\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch(item.getItemId()) {\n\n            case R.id.menu_toggle_log:\n\n                mLogShown = !mLogShown;\n\n                ViewAnimator output = (ViewAnimator) findViewById(R.id.sample_output);\n\n                if (mLogShown) {\n\n                    output.setDisplayedChild(1);\n\n                } else {\n\n                    output.setDisplayedChild(0);\n\n                }\n\n                supportInvalidateOptionsMenu();\n\n                return true;\n\n        }\n\n        return super.onOptionsItemSelected(item);\n\n    }\n\n \n\n    /** Create a chain of targets that will receive log data */\n\n    @Override\n\n    public void initializeLogging() {\n\n        // Wraps Android's native log framework.\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        Log.setLogNode(logWrapper);\n\n \n\n        // Filter strips out everything except the message text.\n\n        MessageOnlyLogFilter msgFilter = new MessageOnlyLogFilter();\n\n        logWrapper.setNext(msgFilter);\n\n \n\n        // On screen logging via a fragment with a TextView.\n\n        LogFragment logFragment = (LogFragment) getSupportFragmentManager()\n\n                .findFragmentById(R.id.log_fragment);\n\n        msgFilter.setNext(logFragment.getLogView());\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  ","Meat.java":"\n    \n\n/*\n\n * Copyright 2014 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.adaptertransition;\n\n \n\n/**\n\n * Sample data.\n\n */\n\npublic class Meat {\n\n \n\n    public int resourceId;\n\n    public String title;\n\n \n\n    public Meat(int resourceId, String title) {\n\n        this.resourceId = resourceId;\n\n        this.title = title;\n\n    }\n\n \n\n    public static final Meat[] MEATS = {\n\n            new Meat(R.drawable.p1, \"First\"),\n\n            new Meat(R.drawable.p2, \"Second\"),\n\n            new Meat(R.drawable.p3, \"Third\"),\n\n            new Meat(R.drawable.p4, \"Fourth\"),\n\n            new Meat(R.drawable.p5, \"Fifth\"),\n\n            new Meat(R.drawable.p6, \"Sixth\"),\n\n            new Meat(R.drawable.p7, \"Seventh\"),\n\n            new Meat(R.drawable.p8, \"Eighth\"),\n\n            new Meat(R.drawable.p9, \"Ninth\"),\n\n            new Meat(R.drawable.p10, \"Tenth\"),\n\n            new Meat(R.drawable.p11, \"Eleventh\"),\n\n    };\n\n \n\n}\n  ","MeatAdapter.java":"\n    \n\n/*\n\n * Copyright 2014 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.adaptertransition;\n\n \n\nimport android.content.Context;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.AbsListView;\n\nimport android.widget.AdapterView;\n\nimport android.widget.BaseAdapter;\n\nimport android.widget.ImageView;\n\nimport android.widget.TextView;\n\nimport android.widget.Toast;\n\n \n\n/**\n\n * This class provides data as Views. It is designed to support both ListView and GridView by\n\n * changing a layout resource file to inflate.\n\n */\n\npublic class MeatAdapter extends BaseAdapter implements AbsListView.OnItemClickListener {\n\n \n\n    private final LayoutInflater mLayoutInflater;\n\n    private final int mResourceId;\n\n \n\n    /**\n\n     * Create a new instance of {@link MeatAdapter}.\n\n     *\n\n     * @param inflater   The layout inflater.\n\n     * @param resourceId The resource ID for the layout to be used. The layout should contain an\n\n     *                   ImageView with ID of \"meat_image\" and a TextView with ID of \"meat_title\".\n\n     */\n\n    public MeatAdapter(LayoutInflater inflater, int resourceId) {\n\n        mLayoutInflater = inflater;\n\n        mResourceId = resourceId;\n\n    }\n\n \n\n    @Override\n\n    public int getCount() {\n\n        return Meat.MEATS.length;\n\n    }\n\n \n\n    @Override\n\n    public Meat getItem(int position) {\n\n        return Meat.MEATS[position];\n\n    }\n\n \n\n    @Override\n\n    public long getItemId(int position) {\n\n        return Meat.MEATS[position].resourceId;\n\n    }\n\n \n\n    @Override\n\n    public View getView(int position, View convertView, ViewGroup parent) {\n\n        final View view;\n\n        final ViewHolder holder;\n\n        if (null == convertView) {\n\n            view = mLayoutInflater.inflate(mResourceId, parent, false);\n\n            holder = new ViewHolder();\n\n            assert view != null;\n\n            holder.image = (ImageView) view.findViewById(R.id.meat_image);\n\n            holder.title = (TextView) view.findViewById(R.id.meat_title);\n\n            view.setTag(holder);\n\n        } else {\n\n            view = convertView;\n\n            holder = (ViewHolder) view.getTag();\n\n        }\n\n        Meat meat = getItem(position);\n\n        holder.image.setImageResource(meat.resourceId);\n\n        holder.title.setText(meat.title);\n\n        return view;\n\n    }\n\n \n\n    @Override\n\n    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n\n        ViewHolder holder = (ViewHolder) view.getTag();\n\n        Context context = view.getContext();\n\n        if (null != holder && null != holder.title && null != context) {\n\n            Toast.makeText(context, context.getString(R.string.item_clicked,\n\n                    holder.title.getText()), Toast.LENGTH_SHORT).show();\n\n        }\n\n    }\n\n \n\n    private static class ViewHolder {\n\n        public ImageView image;\n\n        public TextView title;\n\n    }\n\n \n\n}\n  "},"com.example.android.common":{"activities":{"SampleActivityBase.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\npackage com.example.android.common.activities;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentActivity;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogWrapper;\n\n \n\n/**\n\n * Base launcher activity, to handle most of the common plumbing for samples.\n\n */\n\npublic class SampleActivityBase extends FragmentActivity {\n\n \n\n    public static final String TAG = \"SampleActivityBase\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n    }\n\n \n\n    @Override\n\n    protected  void onStart() {\n\n        super.onStart();\n\n        initializeLogging();\n\n    }\n\n \n\n    /** Set up targets to receive log data */\n\n    public void initializeLogging() {\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        // Wraps Android's native log framework\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        Log.setLogNode(logWrapper);\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "},"logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "},"view":{"SlidingTabLayout.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.view;\n\n \n\nimport android.content.Context;\n\nimport android.graphics.Typeface;\n\nimport android.os.Build;\n\nimport android.support.v4.view.PagerAdapter;\n\nimport android.support.v4.view.ViewPager;\n\nimport android.util.AttributeSet;\n\nimport android.util.TypedValue;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.widget.HorizontalScrollView;\n\nimport android.widget.TextView;\n\n \n\n/**\n\n * To be used with ViewPager to provide a tab indicator component which give constant feedback as to\n\n * the user's scroll progress.\n\n * <p>\n\n * To use the component, simply add it to your view hierarchy. Then in your\n\n * {@link android.app.Activity} or {@link android.support.v4.app.Fragment} call\n\n * {@link #setViewPager(ViewPager)} providing it the ViewPager this layout is being used for.\n\n * <p>\n\n * The colors can be customized in two ways. The first and simplest is to provide an array of colors\n\n * via {@link #setSelectedIndicatorColors(int...)} and {@link #setDividerColors(int...)}. The\n\n * alternative is via the {@link TabColorizer} interface which provides you complete control over\n\n * which color is used for any individual position.\n\n * <p>\n\n * The views used as tabs can be customized by calling {@link #setCustomTabView(int, int)},\n\n * providing the layout ID of your custom layout.\n\n */\n\npublic class SlidingTabLayout extends HorizontalScrollView {\n\n \n\n    /**\n\n     * Allows complete control over the colors drawn in the tab layout. Set with\n\n     * {@link #setCustomTabColorizer(TabColorizer)}.\n\n     */\n\n    public interface TabColorizer {\n\n \n\n        /**\n\n         * @return return the color of the indicator used when {@code position} is selected.\n\n         */\n\n        int getIndicatorColor(int position);\n\n \n\n        /**\n\n         * @return return the color of the divider drawn to the right of {@code position}.\n\n         */\n\n        int getDividerColor(int position);\n\n \n\n    }\n\n \n\n    private static final int TITLE_OFFSET_DIPS = 24;\n\n    private static final int TAB_VIEW_PADDING_DIPS = 16;\n\n    private static final int TAB_VIEW_TEXT_SIZE_SP = 12;\n\n \n\n    private int mTitleOffset;\n\n \n\n    private int mTabViewLayoutId;\n\n    private int mTabViewTextViewId;\n\n \n\n    private ViewPager mViewPager;\n\n    private ViewPager.OnPageChangeListener mViewPagerPageChangeListener;\n\n \n\n    private final SlidingTabStrip mTabStrip;\n\n \n\n    public SlidingTabLayout(Context context) {\n\n        this(context, null);\n\n    }\n\n \n\n    public SlidingTabLayout(Context context, AttributeSet attrs) {\n\n        this(context, attrs, 0);\n\n    }\n\n \n\n    public SlidingTabLayout(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n \n\n        // Disable the Scroll Bar\n\n        setHorizontalScrollBarEnabled(false);\n\n        // Make sure that the Tab Strips fills this View\n\n        setFillViewport(true);\n\n \n\n        mTitleOffset = (int) (TITLE_OFFSET_DIPS * getResources().getDisplayMetrics().density);\n\n \n\n        mTabStrip = new SlidingTabStrip(context);\n\n        addView(mTabStrip, LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);\n\n    }\n\n \n\n    /**\n\n     * Set the custom {@link TabColorizer} to be used.\n\n     *\n\n     * If you only require simple custmisation then you can use\n\n     * {@link #setSelectedIndicatorColors(int...)} and {@link #setDividerColors(int...)} to achieve\n\n     * similar effects.\n\n     */\n\n    public void setCustomTabColorizer(TabColorizer tabColorizer) {\n\n        mTabStrip.setCustomTabColorizer(tabColorizer);\n\n    }\n\n \n\n    /**\n\n     * Sets the colors to be used for indicating the selected tab. These colors are treated as a\n\n     * circular array. Providing one color will mean that all tabs are indicated with the same color.\n\n     */\n\n    public void setSelectedIndicatorColors(int... colors) {\n\n        mTabStrip.setSelectedIndicatorColors(colors);\n\n    }\n\n \n\n    /**\n\n     * Sets the colors to be used for tab dividers. These colors are treated as a circular array.\n\n     * Providing one color will mean that all tabs are indicated with the same color.\n\n     */\n\n    public void setDividerColors(int... colors) {\n\n        mTabStrip.setDividerColors(colors);\n\n    }\n\n \n\n    /**\n\n     * Set the {@link ViewPager.OnPageChangeListener}. When using {@link SlidingTabLayout} you are\n\n     * required to set any {@link ViewPager.OnPageChangeListener} through this method. This is so\n\n     * that the layout can update it's scroll position correctly.\n\n     *\n\n     * @see ViewPager#setOnPageChangeListener(ViewPager.OnPageChangeListener)\n\n     */\n\n    public void setOnPageChangeListener(ViewPager.OnPageChangeListener listener) {\n\n        mViewPagerPageChangeListener = listener;\n\n    }\n\n \n\n    /**\n\n     * Set the custom layout to be inflated for the tab views.\n\n     *\n\n     * @param layoutResId Layout id to be inflated\n\n     * @param textViewId id of the {@link TextView} in the inflated view\n\n     */\n\n    public void setCustomTabView(int layoutResId, int textViewId) {\n\n        mTabViewLayoutId = layoutResId;\n\n        mTabViewTextViewId = textViewId;\n\n    }\n\n \n\n    /**\n\n     * Sets the associated view pager. Note that the assumption here is that the pager content\n\n     * (number of tabs and tab titles) does not change after this call has been made.\n\n     */\n\n    public void setViewPager(ViewPager viewPager) {\n\n        mTabStrip.removeAllViews();\n\n \n\n        mViewPager = viewPager;\n\n        if (viewPager != null) {\n\n            viewPager.setOnPageChangeListener(new InternalViewPagerListener());\n\n            populateTabStrip();\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Create a default view to be used for tabs. This is called if a custom tab view is not set via\n\n     * {@link #setCustomTabView(int, int)}.\n\n     */\n\n    protected TextView createDefaultTabView(Context context) {\n\n        TextView textView = new TextView(context);\n\n        textView.setGravity(Gravity.CENTER);\n\n        textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, TAB_VIEW_TEXT_SIZE_SP);\n\n        textView.setTypeface(Typeface.DEFAULT_BOLD);\n\n \n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {\n\n            // If we're running on Honeycomb or newer, then we can use the Theme's\n\n            // selectableItemBackground to ensure that the View has a pressed state\n\n            TypedValue outValue = new TypedValue();\n\n            getContext().getTheme().resolveAttribute(android.R.attr.selectableItemBackground,\n\n                    outValue, true);\n\n            textView.setBackgroundResource(outValue.resourceId);\n\n        }\n\n \n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {\n\n            // If we're running on ICS or newer, enable all-caps to match the Action Bar tab style\n\n            textView.setAllCaps(true);\n\n        }\n\n \n\n        int padding = (int) (TAB_VIEW_PADDING_DIPS * getResources().getDisplayMetrics().density);\n\n        textView.setPadding(padding, padding, padding, padding);\n\n \n\n        return textView;\n\n    }\n\n \n\n    private void populateTabStrip() {\n\n        final PagerAdapter adapter = mViewPager.getAdapter();\n\n        final View.OnClickListener tabClickListener = new TabClickListener();\n\n \n\n        for (int i = 0; i < adapter.getCount(); i++) {\n\n            View tabView = null;\n\n            TextView tabTitleView = null;\n\n \n\n            if (mTabViewLayoutId != 0) {\n\n                // If there is a custom tab view layout id set, try and inflate it\n\n                tabView = LayoutInflater.from(getContext()).inflate(mTabViewLayoutId, mTabStrip,\n\n                        false);\n\n                tabTitleView = (TextView) tabView.findViewById(mTabViewTextViewId);\n\n            }\n\n \n\n            if (tabView == null) {\n\n                tabView = createDefaultTabView(getContext());\n\n            }\n\n \n\n            if (tabTitleView == null && TextView.class.isInstance(tabView)) {\n\n                tabTitleView = (TextView) tabView;\n\n            }\n\n \n\n            tabTitleView.setText(adapter.getPageTitle(i));\n\n            tabView.setOnClickListener(tabClickListener);\n\n \n\n            mTabStrip.addView(tabView);\n\n        }\n\n    }\n\n \n\n    @Override\n\n    protected void onAttachedToWindow() {\n\n        super.onAttachedToWindow();\n\n \n\n        if (mViewPager != null) {\n\n            scrollToTab(mViewPager.getCurrentItem(), 0);\n\n        }\n\n    }\n\n \n\n    private void scrollToTab(int tabIndex, int positionOffset) {\n\n        final int tabStripChildCount = mTabStrip.getChildCount();\n\n        if (tabStripChildCount == 0 || tabIndex < 0 || tabIndex >= tabStripChildCount) {\n\n            return;\n\n        }\n\n \n\n        View selectedChild = mTabStrip.getChildAt(tabIndex);\n\n        if (selectedChild != null) {\n\n            int targetScrollX = selectedChild.getLeft() + positionOffset;\n\n \n\n            if (tabIndex > 0 || positionOffset > 0) {\n\n                // If we're not at the first child and are mid-scroll, make sure we obey the offset\n\n                targetScrollX -= mTitleOffset;\n\n            }\n\n \n\n            scrollTo(targetScrollX, 0);\n\n        }\n\n    }\n\n \n\n    private class InternalViewPagerListener implements ViewPager.OnPageChangeListener {\n\n        private int mScrollState;\n\n \n\n        @Override\n\n        public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\n\n            int tabStripChildCount = mTabStrip.getChildCount();\n\n            if ((tabStripChildCount == 0) || (position < 0) || (position >= tabStripChildCount)) {\n\n                return;\n\n            }\n\n \n\n            mTabStrip.onViewPagerPageChanged(position, positionOffset);\n\n \n\n            View selectedTitle = mTabStrip.getChildAt(position);\n\n            int extraOffset = (selectedTitle != null)\n\n                    ? (int) (positionOffset * selectedTitle.getWidth())\n\n                    : 0;\n\n            scrollToTab(position, extraOffset);\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageScrolled(position, positionOffset,\n\n                        positionOffsetPixels);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void onPageScrollStateChanged(int state) {\n\n            mScrollState = state;\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageScrollStateChanged(state);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void onPageSelected(int position) {\n\n            if (mScrollState == ViewPager.SCROLL_STATE_IDLE) {\n\n                mTabStrip.onViewPagerPageChanged(position, 0f);\n\n                scrollToTab(position, 0);\n\n            }\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageSelected(position);\n\n            }\n\n        }\n\n \n\n    }\n\n \n\n    private class TabClickListener implements View.OnClickListener {\n\n        @Override\n\n        public void onClick(View v) {\n\n            for (int i = 0; i < mTabStrip.getChildCount(); i++) {\n\n                if (v == mTabStrip.getChildAt(i)) {\n\n                    mViewPager.setCurrentItem(i);\n\n                    return;\n\n                }\n\n            }\n\n        }\n\n    }\n\n \n\n}\n  ","SlidingTabStrip.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.view;\n\n \n\nimport android.R;\n\nimport android.content.Context;\n\nimport android.graphics.Canvas;\n\nimport android.graphics.Color;\n\nimport android.graphics.Paint;\n\nimport android.util.AttributeSet;\n\nimport android.util.TypedValue;\n\nimport android.view.View;\n\nimport android.widget.LinearLayout;\n\n \n\nclass SlidingTabStrip extends LinearLayout {\n\n \n\n    private static final int DEFAULT_BOTTOM_BORDER_THICKNESS_DIPS = 2;\n\n    private static final byte DEFAULT_BOTTOM_BORDER_COLOR_ALPHA = 0x26;\n\n    private static final int SELECTED_INDICATOR_THICKNESS_DIPS = 8;\n\n    private static final int DEFAULT_SELECTED_INDICATOR_COLOR = 0xFF33B5E5;\n\n \n\n    private static final int DEFAULT_DIVIDER_THICKNESS_DIPS = 1;\n\n    private static final byte DEFAULT_DIVIDER_COLOR_ALPHA = 0x20;\n\n    private static final float DEFAULT_DIVIDER_HEIGHT = 0.5f;\n\n \n\n    private final int mBottomBorderThickness;\n\n    private final Paint mBottomBorderPaint;\n\n \n\n    private final int mSelectedIndicatorThickness;\n\n    private final Paint mSelectedIndicatorPaint;\n\n \n\n    private final int mDefaultBottomBorderColor;\n\n \n\n    private final Paint mDividerPaint;\n\n    private final float mDividerHeight;\n\n \n\n    private int mSelectedPosition;\n\n    private float mSelectionOffset;\n\n \n\n    private SlidingTabLayout.TabColorizer mCustomTabColorizer;\n\n    private final SimpleTabColorizer mDefaultTabColorizer;\n\n \n\n    SlidingTabStrip(Context context) {\n\n        this(context, null);\n\n    }\n\n \n\n    SlidingTabStrip(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n        setWillNotDraw(false);\n\n \n\n        final float density = getResources().getDisplayMetrics().density;\n\n \n\n        TypedValue outValue = new TypedValue();\n\n        context.getTheme().resolveAttribute(R.attr.colorForeground, outValue, true);\n\n        final int themeForegroundColor =  outValue.data;\n\n \n\n        mDefaultBottomBorderColor = setColorAlpha(themeForegroundColor,\n\n                DEFAULT_BOTTOM_BORDER_COLOR_ALPHA);\n\n \n\n        mDefaultTabColorizer = new SimpleTabColorizer();\n\n        mDefaultTabColorizer.setIndicatorColors(DEFAULT_SELECTED_INDICATOR_COLOR);\n\n        mDefaultTabColorizer.setDividerColors(setColorAlpha(themeForegroundColor,\n\n                DEFAULT_DIVIDER_COLOR_ALPHA));\n\n \n\n        mBottomBorderThickness = (int) (DEFAULT_BOTTOM_BORDER_THICKNESS_DIPS * density);\n\n        mBottomBorderPaint = new Paint();\n\n        mBottomBorderPaint.setColor(mDefaultBottomBorderColor);\n\n \n\n        mSelectedIndicatorThickness = (int) (SELECTED_INDICATOR_THICKNESS_DIPS * density);\n\n        mSelectedIndicatorPaint = new Paint();\n\n \n\n        mDividerHeight = DEFAULT_DIVIDER_HEIGHT;\n\n        mDividerPaint = new Paint();\n\n        mDividerPaint.setStrokeWidth((int) (DEFAULT_DIVIDER_THICKNESS_DIPS * density));\n\n    }\n\n \n\n    void setCustomTabColorizer(SlidingTabLayout.TabColorizer customTabColorizer) {\n\n        mCustomTabColorizer = customTabColorizer;\n\n        invalidate();\n\n    }\n\n \n\n    void setSelectedIndicatorColors(int... colors) {\n\n        // Make sure that the custom colorizer is removed\n\n        mCustomTabColorizer = null;\n\n        mDefaultTabColorizer.setIndicatorColors(colors);\n\n        invalidate();\n\n    }\n\n \n\n    void setDividerColors(int... colors) {\n\n        // Make sure that the custom colorizer is removed\n\n        mCustomTabColorizer = null;\n\n        mDefaultTabColorizer.setDividerColors(colors);\n\n        invalidate();\n\n    }\n\n \n\n    void onViewPagerPageChanged(int position, float positionOffset) {\n\n        mSelectedPosition = position;\n\n        mSelectionOffset = positionOffset;\n\n        invalidate();\n\n    }\n\n \n\n    @Override\n\n    protected void onDraw(Canvas canvas) {\n\n        final int height = getHeight();\n\n        final int childCount = getChildCount();\n\n        final int dividerHeightPx = (int) (Math.min(Math.max(0f, mDividerHeight), 1f) * height);\n\n        final SlidingTabLayout.TabColorizer tabColorizer = mCustomTabColorizer != null\n\n                ? mCustomTabColorizer\n\n                : mDefaultTabColorizer;\n\n \n\n        // Thick colored underline below the current selection\n\n        if (childCount > 0) {\n\n            View selectedTitle = getChildAt(mSelectedPosition);\n\n            int left = selectedTitle.getLeft();\n\n            int right = selectedTitle.getRight();\n\n            int color = tabColorizer.getIndicatorColor(mSelectedPosition);\n\n \n\n            if (mSelectionOffset > 0f && mSelectedPosition < (getChildCount() - 1)) {\n\n                int nextColor = tabColorizer.getIndicatorColor(mSelectedPosition + 1);\n\n                if (color != nextColor) {\n\n                    color = blendColors(nextColor, color, mSelectionOffset);\n\n                }\n\n \n\n                // Draw the selection partway between the tabs\n\n                View nextTitle = getChildAt(mSelectedPosition + 1);\n\n                left = (int) (mSelectionOffset * nextTitle.getLeft() +\n\n                        (1.0f - mSelectionOffset) * left);\n\n                right = (int) (mSelectionOffset * nextTitle.getRight() +\n\n                        (1.0f - mSelectionOffset) * right);\n\n            }\n\n \n\n            mSelectedIndicatorPaint.setColor(color);\n\n \n\n            canvas.drawRect(left, height - mSelectedIndicatorThickness, right,\n\n                    height, mSelectedIndicatorPaint);\n\n        }\n\n \n\n        // Thin underline along the entire bottom edge\n\n        canvas.drawRect(0, height - mBottomBorderThickness, getWidth(), height, mBottomBorderPaint);\n\n \n\n        // Vertical separators between the titles\n\n        int separatorTop = (height - dividerHeightPx) / 2;\n\n        for (int i = 0; i < childCount - 1; i++) {\n\n            View child = getChildAt(i);\n\n            mDividerPaint.setColor(tabColorizer.getDividerColor(i));\n\n            canvas.drawLine(child.getRight(), separatorTop, child.getRight(),\n\n                    separatorTop + dividerHeightPx, mDividerPaint);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Set the alpha value of the {@code color} to be the given {@code alpha} value.\n\n     */\n\n    private static int setColorAlpha(int color, byte alpha) {\n\n        return Color.argb(alpha, Color.red(color), Color.green(color), Color.blue(color));\n\n    }\n\n \n\n    /**\n\n     * Blend {@code color1} and {@code color2} using the given ratio.\n\n     *\n\n     * @param ratio of which to blend. 1.0 will return {@code color1}, 0.5 will give an even blend,\n\n     *              0.0 will return {@code color2}.\n\n     */\n\n    private static int blendColors(int color1, int color2, float ratio) {\n\n        final float inverseRation = 1f - ratio;\n\n        float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRation);\n\n        float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRation);\n\n        float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRation);\n\n        return Color.rgb((int) r, (int) g, (int) b);\n\n    }\n\n \n\n    private static class SimpleTabColorizer implements SlidingTabLayout.TabColorizer {\n\n        private int[] mIndicatorColors;\n\n        private int[] mDividerColors;\n\n \n\n        @Override\n\n        public final int getIndicatorColor(int position) {\n\n            return mIndicatorColors[position % mIndicatorColors.length];\n\n        }\n\n \n\n        @Override\n\n        public final int getDividerColor(int position) {\n\n            return mDividerColors[position % mDividerColors.length];\n\n        }\n\n \n\n        void setIndicatorColors(int... colors) {\n\n            mIndicatorColors = colors;\n\n        }\n\n \n\n        void setDividerColors(int... colors) {\n\n            mDividerColors = colors;\n\n        }\n\n    }\n\n}\n  "}}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\nCopyright 2014 The Android Open Source Project\n\n \n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n \n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n \n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n-->\n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.adaptertransition\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk\n\n        android:minSdkVersion=\"19\"\n\n        android:targetSdkVersion=\"19\"/>\n\n \n\n    <application\n\n        android:allowBackup=\"true\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:label=\"@string/app_name\"\n\n        android:theme=\"@style/AppTheme\">\n\n        <activity\n\n            android:name=\"com.example.android.adaptertransition.MainActivity\"\n\n            android:label=\"@string/app_name\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\"/>\n\n \n\n                <category android:name=\"android.intent.category.LAUNCHER\"/>\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n</manifest>\n  "},"AdvancedImmersiveMode":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com//samples/AdvancedImmersiveMode/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com//samples/AdvancedImmersiveMode/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com//samples/AdvancedImmersiveMode/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com//samples/AdvancedImmersiveMode/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com//samples/AdvancedImmersiveMode/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"vertical\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <ViewAnimator\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\"\n\n          android:layout_weight=\"1\">\n\n \n\n        <ScrollView\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingRight=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingTop=\"@dimen/vertical_page_margin\"\n\n                  android:paddingBottom=\"@dimen/vertical_page_margin\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </ScrollView>\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\" />\n\n \n\n    </ViewAnimator>\n\n \n\n    <View\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"1dp\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\" />\n\n \n\n</LinearLayout>\n\n \n  ","fragment_flags.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:orientation=\"vertical\" android:layout_width=\"match_parent\"\n\n    android:layout_height=\"wrap_content\">\n\n \n\n    <CheckBox\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:id=\"@+id/flag_enable_lowprof\"\n\n        android:text=\"Enable Low Profile Mode\" />\n\n \n\n    <CheckBox\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:id=\"@+id/flag_hide_navbar\"\n\n        android:text=\"Hide Navigation bar\" />\n\n \n\n    <CheckBox\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:id=\"@+id/flag_hide_statbar\"\n\n        android:text=\"Hide Status Bar\" />\n\n \n\n    <CheckBox\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:id=\"@+id/flag_enable_immersive\"\n\n        android:text=\"Enable Immersive Mode\" />\n\n \n\n    <CheckBox\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:id=\"@+id/flag_enable_immersive_sticky\"\n\n        android:text=\"Enable Immersive Mode (Sticky)\" />\n\n \n\n    <Button\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:text=\"Do things!\"\n\n        android:id=\"@+id/btn_changeFlags\" />\n\n \n\n \n\n    <TextView\n\n        android:layout_marginTop=\"@dimen/margin_large\"\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:text=\"Common flag presets\"/>\n\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n        android:orientation=\"horizontal\" android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\">\n\n \n\n        <Button\n\n            android:layout_width=\"wrap_content\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:text=\"Immersive Mode\"\n\n            android:id=\"@+id/btn_immersive\" />\n\n \n\n        <Button\n\n            android:layout_width=\"wrap_content\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:text=\"Leanback Mode\"\n\n            android:id=\"@+id/btn_leanback\" />\n\n \n\n    </LinearLayout>\n\n \n\n \n\n \n\n</LinearLayout>\n  "},"layout-w720dp":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"horizontal\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <LinearLayout\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\"\n\n          android:layout_weight=\"1\"\n\n          android:orientation=\"vertical\">\n\n \n\n        <FrameLayout\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"wrap_content\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/margin_medium\"\n\n                  android:paddingRight=\"@dimen/margin_medium\"\n\n                  android:paddingTop=\"@dimen/margin_large\"\n\n                  android:paddingBottom=\"@dimen/margin_large\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </FrameLayout>\n\n \n\n        <View\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"1dp\"\n\n              android:background=\"@android:color/darker_gray\" />\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"0px\"\n\n              android:layout_weight=\"1\" />\n\n \n\n    </LinearLayout>\n\n \n\n    <View\n\n          android:layout_width=\"1dp\"\n\n          android:layout_height=\"match_parent\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\" />\n\n \n\n</LinearLayout>\n\n \n\n \n  "},"menu":{"main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:id=\"@+id/menu_toggle_log\"\n\n          android:showAsAction=\"always\"\n\n          android:title=\"@string/sample_show_log\" />\n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">AdvancedImmersiveMode</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            \\n\\n\\n\\\"Immersive Mode\\\", added in Android 4.4, improves the \\\"hide full screen\\\" and\n\n            \\\"hide nav bar\\\" modes, by letting users swipe the bars in and out.  This sample\n\n            lets the user experiment with immersive mode by seeing how it interacts\n\n            with some of the other UI flags related to full-screen apps.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","strings.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<resources>\n\n    <string name=\"sample_show_log\">Show Log</string>\n\n    <string name=\"sample_hide_log\">Hide Log</string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.advancedimmersivemode":{"AdvancedImmersiveModeFragment.java":"\n    \n\n/*\n\n* Copyright (C) 2012 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*      http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\npackage com.example.android.advancedimmersivemode;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.Button;\n\nimport android.widget.CheckBox;\n\n \n\nimport com.example.android.common.logger.Log;\n\n \n\n/**\n\n * Demonstrates how to update the app's UI by toggling immersive mode.\n\n * Checkboxes are also made available for toggling other UI flags which can\n\n * alter the behavior of immersive mode.\n\n */\n\npublic class AdvancedImmersiveModeFragment extends Fragment {\n\n \n\n    public static final String TAG = \"AdvancedImmersiveModeFragment\";\n\n    public CheckBox mHideNavCheckbox;\n\n    public CheckBox mHideStatusBarCheckBox;\n\n    public CheckBox mImmersiveModeCheckBox;\n\n    public CheckBox mImmersiveModeStickyCheckBox;\n\n    public CheckBox mLowProfileCheckBox;\n\n \n\n \n\n    @Override\n\n    public void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setHasOptionsMenu(true);\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle state) {\n\n        final View flagsView = inflater.inflate(R.layout.fragment_flags, container, false);\n\n        mLowProfileCheckBox = (CheckBox) flagsView.findViewById(R.id.flag_enable_lowprof);\n\n        mHideNavCheckbox = (CheckBox) flagsView.findViewById(R.id.flag_hide_navbar);\n\n        mHideStatusBarCheckBox = (CheckBox) flagsView.findViewById(R.id.flag_hide_statbar);\n\n        mImmersiveModeCheckBox = (CheckBox) flagsView.findViewById(R.id.flag_enable_immersive);\n\n        mImmersiveModeStickyCheckBox =\n\n                (CheckBox) flagsView.findViewById(R.id.flag_enable_immersive_sticky);\n\n \n\n        Button toggleFlagsButton = (Button) flagsView.findViewById(R.id.btn_changeFlags);\n\n        toggleFlagsButton.setOnClickListener(new View.OnClickListener() {\n\n            @Override\n\n            public void onClick(View view) {\n\n                toggleUiFlags();\n\n            }\n\n        });\n\n \n\n        Button presetsImmersiveModeButton = (Button) flagsView.findViewById(R.id.btn_immersive);\n\n        presetsImmersiveModeButton.setOnClickListener(new View.OnClickListener() {\n\n            @Override\n\n            public void onClick(View view) {\n\n \n\n                // For immersive mode, the FULLSCREEN, HIDE_HAVIGATION and IMMERSIVE\n\n                // flags should be set (you can use IMMERSIVE_STICKY instead of IMMERSIVE\n\n                // as appropriate for your app).  The LOW_PROFILE flag should be cleared.\n\n \n\n                // Immersive mode is primarily for situations where the user will be\n\n                // interacting with the screen, like games or reading books.\n\n                int uiOptions = flagsView.getSystemUiVisibility();\n\n                uiOptions &= ~View.SYSTEM_UI_FLAG_LOW_PROFILE;\n\n                uiOptions |= View.SYSTEM_UI_FLAG_FULLSCREEN;\n\n                uiOptions |= View.SYSTEM_UI_FLAG_HIDE_NAVIGATION;\n\n                uiOptions |= View.SYSTEM_UI_FLAG_IMMERSIVE;\n\n                uiOptions &= ~View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;\n\n                flagsView.setSystemUiVisibility(uiOptions);\n\n \n\n                dumpFlagStateToLog(uiOptions);\n\n \n\n                // The below code just updates the checkboxes to reflect which flags have been set.\n\n                mLowProfileCheckBox.setChecked(false);\n\n                mHideNavCheckbox.setChecked(true);\n\n                mHideStatusBarCheckBox.setChecked(true);\n\n                mImmersiveModeCheckBox.setChecked(true);\n\n                mImmersiveModeStickyCheckBox.setChecked(false);\n\n            }\n\n        });\n\n \n\n \n\n        Button presetsLeanbackModeButton = (Button) flagsView.findViewById(R.id.btn_leanback);\n\n        presetsLeanbackModeButton.setOnClickListener(new View.OnClickListener() {\n\n            @Override\n\n            public void onClick(View view) {\n\n                // For leanback mode, only the HIDE_NAVE and HIDE_STATUSBAR flags\n\n                // should be checked.  In this case IMMERSIVE should *not* be set,\n\n                // since this mode is left as soon as the user touches the screen.\n\n                int uiOptions = flagsView.getSystemUiVisibility();\n\n                uiOptions &= ~View.SYSTEM_UI_FLAG_LOW_PROFILE;\n\n                uiOptions |= View.SYSTEM_UI_FLAG_FULLSCREEN;\n\n                uiOptions |= View.SYSTEM_UI_FLAG_HIDE_NAVIGATION;\n\n                uiOptions &= ~View.SYSTEM_UI_FLAG_IMMERSIVE;\n\n                uiOptions &= ~View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;\n\n                flagsView.setSystemUiVisibility(uiOptions);\n\n \n\n                dumpFlagStateToLog(uiOptions);\n\n \n\n                // The below code just updates the checkboxes to reflect which flags have been set.\n\n                mLowProfileCheckBox.setChecked(false);\n\n                mHideNavCheckbox.setChecked(true);\n\n                mHideStatusBarCheckBox.setChecked(true);\n\n                mImmersiveModeCheckBox.setChecked(false);\n\n                mImmersiveModeStickyCheckBox.setChecked(false);\n\n            }\n\n        });\n\n \n\n        // Setting these flags makes the content appear under the navigation\n\n        // bars, so that showing/hiding the nav bars doesn't resize the content\n\n        // window, which can be jarring.\n\n        int uiOptions = flagsView.getSystemUiVisibility();\n\n        uiOptions |= View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION;\n\n        uiOptions |= View.SYSTEM_UI_FLAG_LAYOUT_STABLE;\n\n        uiOptions |= View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN;\n\n        flagsView.setSystemUiVisibility(uiOptions);\n\n \n\n        return flagsView;\n\n    }\n\n \n\n    /**\n\n     * Helper method to dump flag state to the log.\n\n     * @param uiFlags Set of UI flags to inspect\n\n     */\n\n    public void dumpFlagStateToLog(int uiFlags) {\n\n        if ((uiFlags & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0) {\n\n            Log.i(TAG, \"SYSTEM_UI_FLAG_LOW_PROFILE is set\");\n\n        } else {\n\n            Log.i(TAG, \"SYSTEM_UI_FLAG_LOW_PROFILE is unset\");\n\n        }\n\n \n\n        if ((uiFlags & View.SYSTEM_UI_FLAG_FULLSCREEN) != 0) {\n\n            Log.i(TAG, \"SYSTEM_UI_FLAG_FULLSCREEN is set\");\n\n        } else {\n\n            Log.i(TAG, \"SYSTEM_UI_FLAG_FULLSCREEN is unset\");\n\n        }\n\n \n\n        if ((uiFlags & View.SYSTEM_UI_FLAG_HIDE_NAVIGATION) != 0) {\n\n            Log.i(TAG, \"SYSTEM_UI_FLAG_HIDE_NAVIGATION is set\");\n\n        } else {\n\n            Log.i(TAG, \"SYSTEM_UI_FLAG_HIDE_NAVIGATION is unset\");\n\n        }\n\n \n\n        if ((uiFlags & View.SYSTEM_UI_FLAG_IMMERSIVE) != 0) {\n\n            Log.i(TAG, \"SYSTEM_UI_FLAG_IMMERSIVE is set\");\n\n        } else {\n\n            Log.i(TAG, \"SYSTEM_UI_FLAG_IMMERSIVE is unset\");\n\n        }\n\n \n\n        if ((uiFlags & View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY) != 0) {\n\n            Log.i(TAG, \"SYSTEM_UI_FLAG_IMMERSIVE_STICKY is set\");\n\n        } else {\n\n            Log.i(TAG, \"SYSTEM_UI_FLAG_IMMERSIVE_STICKY is unset\");\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Detects and toggles immersive mode (also known as \"hidey bar\" mode).\n\n     */\n\n    public void toggleUiFlags() {\n\n \n\n        // The \"Decor View\" is the parent view of the Activity.  It's also conveniently the easiest\n\n        // one to find from within a fragment, since there's a handy helper method to pull it, and\n\n        // we don't have to bother with picking a view somewhere deeper in the hierarchy and calling\n\n        // \"findViewById\" on it.\n\n        View decorView = getActivity().getWindow().getDecorView();\n\n        int uiOptions = decorView.getSystemUiVisibility();\n\n        int newUiOptions = uiOptions;\n\n \n\n        // Low profile mode doesn't resize the screen at all, but it covers the nav & status bar\n\n        // icons with black so they're less distracting.  Unlike \"full screen\" and \"hide nav bar,\"\n\n        // this mode doesn't interact with immersive mode at all, but it's instructive when running\n\n        // this sample to observe the differences in behavior.\n\n        if (mLowProfileCheckBox.isChecked()) {\n\n            newUiOptions |= View.SYSTEM_UI_FLAG_LOW_PROFILE;\n\n        } else {\n\n            newUiOptions &= ~View.SYSTEM_UI_FLAG_LOW_PROFILE;\n\n        }\n\n \n\n        // When enabled, this flag hides non-critical UI, such as the status bar,\n\n        // which usually shows notification icons, battery life, etc\n\n        // on phone-sized devices.  The bar reappears when the user swipes it down.  When immersive\n\n        // mode is also enabled, the app-drawable area expands, and when the status bar is swiped\n\n        // down, it appears semi-transparently and slides in over the app, instead of pushing it\n\n        // down.\n\n        if (mHideStatusBarCheckBox.isChecked()) {\n\n            newUiOptions |= View.SYSTEM_UI_FLAG_FULLSCREEN;\n\n        } else {\n\n            newUiOptions &= ~View.SYSTEM_UI_FLAG_FULLSCREEN;\n\n        }\n\n \n\n        // When enabled, this flag hides the black nav bar along the bottom,\n\n        // where the home/back buttons are.  The nav bar normally instantly reappears\n\n        // when the user touches the screen.  When immersive mode is also enabled, the nav bar\n\n        // stays hidden until the user swipes it back.\n\n        if (mHideNavCheckbox.isChecked()) {\n\n            newUiOptions |= View.SYSTEM_UI_FLAG_HIDE_NAVIGATION;\n\n        } else {\n\n            newUiOptions &= ~View.SYSTEM_UI_FLAG_HIDE_NAVIGATION;\n\n        }\n\n \n\n        // Immersive mode doesn't do anything without at least one of the previous flags\n\n        // enabled.  When enabled, it allows the user to swipe the status and/or nav bars\n\n        // off-screen.  When the user swipes the bars back onto the screen, the flags are cleared\n\n        // and immersive mode is automatically disabled.\n\n        if (mImmersiveModeCheckBox.isChecked()) {\n\n            newUiOptions |= View.SYSTEM_UI_FLAG_IMMERSIVE;\n\n        } else {\n\n            newUiOptions &= ~View.SYSTEM_UI_FLAG_IMMERSIVE;\n\n        }\n\n \n\n        // There's actually two forms of immersive mode, normal and \"sticky\".  Sticky immersive mode\n\n        // is different in 2 key ways:\n\n        //\n\n        // * Uses semi-transparent bars for the nav and status bars\n\n        // * This UI flag will *not* be cleared when the user interacts with the UI.\n\n        //   When the user swipes, the bars will temporarily appear for a few seconds and then\n\n        //   disappear again.\n\n        if (mImmersiveModeStickyCheckBox.isChecked()) {\n\n            newUiOptions |= View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;\n\n        } else {\n\n            newUiOptions &= ~View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;\n\n        }\n\n \n\n        //Set the new UI flags.\n\n        decorView.setSystemUiVisibility(newUiOptions);\n\n \n\n        dumpFlagStateToLog(uiOptions);\n\n    }\n\n}\n  ","MainActivity.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.advancedimmersivemode;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentTransaction;\n\nimport android.view.Menu;\n\nimport android.view.MenuItem;\n\nimport android.widget.ViewAnimator;\n\n \n\nimport com.example.android.common.activities.SampleActivityBase;\n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogFragment;\n\nimport com.example.android.common.logger.LogWrapper;\n\nimport com.example.android.common.logger.MessageOnlyLogFilter;\n\n \n\n/**\n\n * A simple launcher activity containing a summary sample description, sample log and a custom\n\n * {@link android.support.v4.app.Fragment} which can display a view.\n\n * <p>\n\n * For devices with displays with a width of 720dp or greater, the sample log is always visible,\n\n * on other devices it's visibility is controlled by an item on the Action Bar.\n\n */\n\npublic class MainActivity extends SampleActivityBase {\n\n \n\n    public static final String TAG = \"MainActivity\";\n\n \n\n    // Whether the Log Fragment is currently shown\n\n    private boolean mLogShown;\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_main);\n\n \n\n        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n\n        AdvancedImmersiveModeFragment fragment = new AdvancedImmersiveModeFragment();\n\n        transaction.replace(R.id.sample_content_fragment, fragment);\n\n        transaction.commit();\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        getMenuInflater().inflate(R.menu.main, menu);\n\n        return true;\n\n    }\n\n \n\n    @Override\n\n    public boolean onPrepareOptionsMenu(Menu menu) {\n\n        MenuItem logToggle = menu.findItem(R.id.menu_toggle_log);\n\n        logToggle.setVisible(findViewById(R.id.sample_output) instanceof ViewAnimator);\n\n        logToggle.setTitle(mLogShown ? R.string.sample_hide_log : R.string.sample_show_log);\n\n \n\n        return super.onPrepareOptionsMenu(menu);\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch(item.getItemId()) {\n\n            case R.id.menu_toggle_log:\n\n                mLogShown = !mLogShown;\n\n                ViewAnimator output = (ViewAnimator) findViewById(R.id.sample_output);\n\n                if (mLogShown) {\n\n                    output.setDisplayedChild(1);\n\n                } else {\n\n                    output.setDisplayedChild(0);\n\n                }\n\n                supportInvalidateOptionsMenu();\n\n                return true;\n\n        }\n\n        return super.onOptionsItemSelected(item);\n\n    }\n\n \n\n    /** Create a chain of targets that will receive log data */\n\n    @Override\n\n    public void initializeLogging() {\n\n        // Wraps Android's native log framework.\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        Log.setLogNode(logWrapper);\n\n \n\n        // Filter strips out everything except the message text.\n\n        MessageOnlyLogFilter msgFilter = new MessageOnlyLogFilter();\n\n        logWrapper.setNext(msgFilter);\n\n \n\n        // On screen logging via a fragment with a TextView.\n\n        LogFragment logFragment = (LogFragment) getSupportFragmentManager()\n\n                .findFragmentById(R.id.log_fragment);\n\n        msgFilter.setNext(logFragment.getLogView());\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "},"com.example.android.common":{"activities":{"SampleActivityBase.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\npackage com.example.android.common.activities;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentActivity;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogWrapper;\n\n \n\n/**\n\n * Base launcher activity, to handle most of the common plumbing for samples.\n\n */\n\npublic class SampleActivityBase extends FragmentActivity {\n\n \n\n    public static final String TAG = \"SampleActivityBase\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n    }\n\n \n\n    @Override\n\n    protected  void onStart() {\n\n        super.onStart();\n\n        initializeLogging();\n\n    }\n\n \n\n    /** Set up targets to receive log data */\n\n    public void initializeLogging() {\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        // Wraps Android's native log framework\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        Log.setLogNode(logWrapper);\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "},"logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "}}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n<!-- the versionCode is an integer representation of this version of your application.  New\n\n     versions get higher numbers, so the upgrade system can avoid dealing with the ambiguity\n\n     of \"1.9\" vs \"1.10\".  versionName, on the other hand, can be whatever you want, as the code\n\n     that handles upgrading Android apps between versions on your device just ignores it.-->\n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.advancedimmersivemode\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <!-- This sample is to demonstrate features released in API 19.\n\n         So while it would technically run on an earlier version of Android,\n\n         there wouldn't be much point) -->\n\n    <uses-sdk android:minSdkVersion=\"19\" android:targetSdkVersion=\"19\" />\n\n    <!-- allowBackup declares if the app can be part of device-wide backups such as \"adb backup\" -->\n\n    <!-- theme is a way of applying UI decisions across your entire application.  You can also\n\n         define it on a per-application basis. -->\n\n    <application\n\n        android:allowBackup=\"true\"\n\n        android:label=\"@string/app_name\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:theme=\"@style/AppTheme\">\n\n \n\n        <!-- Every activity needs its own Manifest element.  The intent-filter contained in the\n\n             element declares the intents that can be used to activate this Activity.  For instance,\n\n             the one below flags this Activity as a \"main\" entry point of this app, and suitable\n\n             for creating a shortcut to in the Launcher.  If you wanted your app to have 5\n\n             different Activities available in the launcher, you could just make 5 activities\n\n             with that intent filter.  Please don't do that.  Just because it's a good example\n\n             doesn't mean it's a good idea. -->\n\n        <activity android:name=\".MainActivity\"\n\n                  android:label=\"@string/app_name\"\n\n                  android:uiOptions=\"splitActionBarWhenNarrow\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n</manifest>\n  "},"BasicAccessibility":{"res":{"drawable-hdpi":{"ic_action_discard.png":"http://developer.android.com//samples/BasicAccessibility/res/drawable-hdpi/ic_action_discard.png","ic_action_info.png":"http://developer.android.com//samples/BasicAccessibility/res/drawable-hdpi/ic_action_info.png","ic_launcher.png":"http://developer.android.com//samples/BasicAccessibility/res/drawable-hdpi/ic_launcher.png","partly_cloudy.png":"http://developer.android.com//samples/BasicAccessibility/res/drawable-hdpi/partly_cloudy.png","tile.9.png":"http://developer.android.com//samples/BasicAccessibility/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_action_discard.png":"http://developer.android.com//samples/BasicAccessibility/res/drawable-mdpi/ic_action_discard.png","ic_action_info.png":"http://developer.android.com//samples/BasicAccessibility/res/drawable-mdpi/ic_action_info.png","ic_launcher.png":"http://developer.android.com//samples/BasicAccessibility/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_action_discard.png":"http://developer.android.com//samples/BasicAccessibility/res/drawable-xhdpi/ic_action_discard.png","ic_action_info.png":"http://developer.android.com//samples/BasicAccessibility/res/drawable-xhdpi/ic_action_info.png","ic_launcher.png":"http://developer.android.com//samples/BasicAccessibility/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com//samples/BasicAccessibility/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleMessageTile\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n            android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n            android:text=\"@string/intro_message\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n  ","sample_main.xml":"\n    \n\n<!--\n\nCopyright (C) 2013 The Android Open Source Project\n\n \n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n-->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n              xmlns:tools=\"http://schemas.android.com/tools\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\"\n\n              android:gravity=\"center_horizontal\">\n\n    <ScrollView\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"match_parent\"\n\n            android:fillViewport=\"false\">\n\n        <RelativeLayout\n\n                android:layout_width=\"match_parent\"\n\n                android:layout_height=\"match_parent\"\n\n                android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n\n                android:paddingRight=\"@dimen/activity_horizontal_margin\"\n\n                android:paddingTop=\"@dimen/activity_vertical_margin\"\n\n                android:paddingBottom=\"@dimen/activity_vertical_margin\"\n\n                tools:context=\".MainActivity\"\n\n                >\n\n \n\n            <!-- Notice the presence of nextFocusDown/nextFocusUp on the elements below. You can\n\n            also use nextFocusLeft/nextFocusRight. This tells the system in what order elements\n\n            should be navigated through. If not present, the system will make a guess based on\n\n            element location in the layout. -->\n\n            <TextView\n\n                    android:layout_width=\"wrap_content\"\n\n                    android:layout_height=\"wrap_content\"\n\n                    android:text=\"Buttons\"\n\n                    android:id=\"@+id/buttonsLabel\"\n\n                    android:layout_alignParentTop=\"true\"\n\n                    android:layout_alignParentLeft=\"true\"\n\n                    android:nextFocusDown=\"@+id/composeButton\"/>\n\n \n\n            <!-- This is a regular, text-based button. No contentDescription is needed, since the\n\n                 text field sufficiently describes the action performed. -->\n\n            <Button\n\n                    android:layout_width=\"wrap_content\"\n\n                    android:layout_height=\"wrap_content\"\n\n                    android:text=\"@string/composeButtonLabel\"\n\n                    android:id=\"@+id/composeButton\"\n\n                    android:layout_below=\"@+id/buttonsLabel\"\n\n                    android:layout_alignLeft=\"@+id/buttonsLabel\"\n\n                    android:nextFocusUp=\"@+id/buttonsLabel\"\n\n                    android:nextFocusDown=\"@+id/checkboxesLabel\"\n\n                    />\n\n \n\n            <!-- The next two buttons are different types of image-based buttons. -->\n\n \n\n            <!-- Adding a contentDescription is needed for accessibility, since no text is present.\n\n            Since the contentDescription is read verbatim, you may want to be a bit more\n\n            descriptive than usual, such as adding \"button\" to the end of your description, if\n\n            appropriate. -->\n\n            <ImageButton\n\n                    android:layout_width=\"wrap_content\"\n\n                    android:layout_height=\"wrap_content\"\n\n                    android:id=\"@+id/discardButton\"\n\n                    android:layout_alignTop=\"@+id/composeButton\"\n\n                    android:layout_toRightOf=\"@+id/composeButton\"\n\n                    android:src=\"@drawable/ic_action_discard\"\n\n                    android:layout_alignBottom=\"@+id/composeButton\"\n\n                    android:contentDescription=\"@string/discardButtonDescription\"\n\n                    android:scaleType=\"fitCenter\"\n\n                    android:nextFocusUp=\"@+id/buttonsLabel\"\n\n                    android:nextFocusDown=\"@+id/checkboxesLabel\"\n\n                    />\n\n \n\n            <ImageButton\n\n                    android:layout_width=\"wrap_content\"\n\n                    android:layout_height=\"wrap_content\"\n\n                    android:id=\"@+id/infoButton\"\n\n                    android:layout_alignTop=\"@+id/discardButton\"\n\n                    android:layout_toRightOf=\"@+id/discardButton\"\n\n                    android:src=\"@drawable/ic_action_info\"\n\n                    android:layout_alignBottom=\"@+id/discardButton\"\n\n                    android:layout_alignRight=\"@+id/hyperspaceCheckbox\"\n\n                    android:scaleType=\"fitCenter\"\n\n                    android:background=\"?android:selectableItemBackground\"\n\n                    android:padding=\"5dp\"\n\n                    android:contentDescription=\"@string/infoButtonDescription\"\n\n                    android:nextFocusUp=\"@+id/buttonsLabel\"\n\n                    android:nextFocusDown=\"@+id/checkboxesLabel\"\n\n            />\n\n \n\n            <TextView\n\n                    android:layout_width=\"wrap_content\"\n\n                    android:layout_height=\"wrap_content\"\n\n                    android:text=\"@string/checkboxesLabel\"\n\n                    android:id=\"@+id/checkboxesLabel\"\n\n                    android:layout_below=\"@+id/composeButton\"\n\n                    android:layout_alignLeft=\"@+id/composeButton\"\n\n                    android:nextFocusUp=\"@+id/composeButton\"\n\n                    android:nextFocusDown=\"@+id/jetpackCheckbox\"\n\n                    />\n\n \n\n            <!-- Like a text-based button, checkboxes with text will often work correctly as-is.\n\n                 If your checkboxes do not have a text attribute, you will need to add a\n\n                 contentDescriptoin. -->\n\n            <CheckBox\n\n                    android:layout_width=\"wrap_content\"\n\n                    android:layout_height=\"wrap_content\"\n\n                    android:text=\"@string/jetpackCheckboxLabel\"\n\n                    android:id=\"@+id/jetpackCheckbox\"\n\n                    android:layout_below=\"@+id/checkboxesLabel\"\n\n                    android:layout_alignLeft=\"@+id/checkboxesLabel\"\n\n                    android:checked=\"false\"\n\n                    android:nextFocusUp=\"@+id/checkboxesLabel\"\n\n                    android:nextFocusDown=\"@+id/hyperspaceCheckbox\"\n\n                    />\n\n \n\n            <CheckBox\n\n                    android:layout_width=\"wrap_content\"\n\n                    android:layout_height=\"wrap_content\"\n\n                    android:text=\"@string/hyperspaceCheckboxLabel\"\n\n                    android:id=\"@+id/hyperspaceCheckbox\"\n\n                    android:layout_below=\"@+id/jetpackCheckbox\"\n\n                    android:layout_alignLeft=\"@+id/jetpackCheckbox\"\n\n                    android:checked=\"false\"\n\n                    android:nextFocusUp=\"@+id/jetpackCheckbox\"\n\n                    android:nextFocusDown=\"@+id/imagesAndTextLabel\"\n\n                    />\n\n \n\n            <TextView\n\n                    android:layout_width=\"wrap_content\"\n\n                    android:layout_height=\"wrap_content\"\n\n                    android:text=\"@string/imagesAndTextLabel\"\n\n                    android:id=\"@+id/imagesAndTextLabel\"\n\n                    android:layout_below=\"@+id/hyperspaceCheckbox\"\n\n                    android:layout_alignLeft=\"@+id/hyperspaceCheckbox\"\n\n                    android:nextFocusUp=\"@+id/hyperspaceCheckbox\"\n\n                    android:nextFocusDown=\"@+id/partlyCloudImage\"\n\n                    />\n\n \n\n            <!-- Images should have a contentDescription if they convey any meaningful\n\n                 information. Images that are purely decorative may not need a contentDescription,\n\n                 however. -->\n\n            <ImageView\n\n                    android:layout_width=\"wrap_content\"\n\n                    android:layout_height=\"wrap_content\"\n\n                    android:id=\"@+id/partlyCloudyImage\"\n\n                    android:layout_below=\"@+id/imagesAndTextLabel\"\n\n                    android:layout_alignLeft=\"@+id/imagesAndTextLabel\"\n\n                    android:src=\"@drawable/partly_cloudy\"\n\n                    android:contentDescription=\"@string/partlyCloudyDescription\"\n\n                    android:layout_alignRight=\"@+id/discardButton\"\n\n                    android:nextFocusUp=\"@+id/imagesAndTextLabel\"\n\n                    android:nextFocusDown=\"@+id/customViewLabel\"\n\n                    />\n\n \n\n            <!-- TextViews are typically self describing, so do not need extra modifications. -->\n\n            <TextView\n\n                    android:layout_width=\"wrap_content\"\n\n                    android:layout_height=\"wrap_content\"\n\n                    android:textAppearance=\"?android:attr/textAppearanceLarge\"\n\n                    android:text=\"@string/temperature\"\n\n                    android:textSize=\"60sp\"\n\n                    android:id=\"@+id/temperatureText\"\n\n                    android:layout_alignTop=\"@+id/partlyCloudyImage\"\n\n                    android:layout_toRightOf=\"@+id/partlyCloudyImage\"\n\n                    android:layout_alignBottom=\"@+id/partlyCloudyImage\"\n\n                    android:gravity=\"center_vertical\"\n\n                    android:nextFocusUp=\"@+id/imagesAndTextLabel\"\n\n                    android:nextFocusDown=\"@+id/customViewLabel\"\n\n                    />\n\n \n\n            <TextView\n\n                    android:layout_width=\"wrap_content\"\n\n                    android:layout_height=\"wrap_content\"\n\n                    android:text=\"@string/customViewLabel\"\n\n                    android:id=\"@+id/customViewLabel\"\n\n                    android:layout_below=\"@+id/partlyCloudyImage\"\n\n                    android:layout_alignLeft=\"@+id/partlyCloudyImage\"\n\n                    android:nextFocusUp=\"@+id/partlyCloudImage\"\n\n                    android:nextFocusDown=\"@+id/dialView\"\n\n                    />\n\n \n\n            <!-- Custom views require additonal code changes. See DialView.java for more\n\n                 details. -->\n\n            <com.example.android.basicaccessibility.DialView\n\n                    android:layout_width=\"200dp\"\n\n                    android:layout_height=\"200dp\"\n\n                    android:id=\"@+id/dialView\"\n\n                    android:layout_below=\"@+id/customViewLabel\"\n\n                    android:layout_alignLeft=\"@+id/partlyCloudyImage\"\n\n                    android:nextFocusUp=\"@+id/customViewLabel\"\n\n                    />\n\n \n\n        </RelativeLayout>\n\n    </ScrollView>\n\n</LinearLayout>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">BasicAccessibility</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            This sample demonstrates how to create an accessible application, using a mix of different widgets demonstrating different ways of adding accessibility markup to a UI.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","dimens.xml":"\n    \n\n<!--\n\nCopyright (C) 2013 The Android Open Source Project\n\n \n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n-->\n\n<resources>\n\n    <!-- Default screen margins, per the Android Design guidelines. -->\n\n    <dimen name=\"activity_horizontal_margin\">16dp</dimen>\n\n    <dimen name=\"activity_vertical_margin\">16dp</dimen>\n\n</resources>\n  ","strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\nCopyright (C) 2013 The Android Open Source Project\n\n \n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n-->\n\n \n\n<resources>\n\n    <string name=\"composeButtonPressed\">(Compose button pressed.)</string>\n\n    <string name=\"discardButtonPressed\">(Discard button pressed.)</string>\n\n    <string name=\"infoButtonPressed\">(Info button pressed.)</string>\n\n    <string name=\"composeButtonLabel\">Compose</string>\n\n    <string name=\"discardButtonDescription\">Discard Button</string>\n\n    <string name=\"infoButtonDescription\">Info Button</string>\n\n    <string name=\"partlyCloudyDescription\">Partly Cloudy</string>\n\n    <string name=\"checkboxesLabel\">Checkboxes</string>\n\n    <string name=\"jetpackCheckboxLabel\">Enable Jetpack</string>\n\n    <string name=\"hyperspaceCheckboxLabel\">Enable Hyperspace Engines</string>\n\n    <string name=\"imagesAndTextLabel\">Images &amp; Text</string>\n\n    <string name=\"temperature\">53 °F</string>\n\n    <string name=\"customViewLabel\">Custom View</string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw720dp-land":{"dimens.xml":"\n    \n\n<!--\n\nCopyright (C) 2013 The Android Open Source Project\n\n \n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n-->\n\n \n\n<resources>\n\n    <!-- Customize dimensions originally defined in res/values/dimens.xml (such as\n\n         screen margins) for sw720dp devices (e.g. 10\" tablets) in landscape here. -->\n\n    <dimen name=\"activity_horizontal_margin\">128dp</dimen>\n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.basicaccessibility":{"DialView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.basicaccessibility;\n\n \n\nimport android.annotation.TargetApi;\n\nimport android.content.Context;\n\nimport android.graphics.Canvas;\n\nimport android.graphics.Color;\n\nimport android.graphics.Paint;\n\nimport android.os.Build;\n\nimport android.util.AttributeSet;\n\nimport android.view.View;\n\nimport android.view.accessibility.AccessibilityEvent;\n\n \n\n/**\n\n * Custom view to demonstrate accessibility.\n\n *\n\n * <p>This view does not use any framework widgets, so does not get any accessibility features\n\n * automatically. Instead, we use {@link android.view.accessibility.AccessibilityEvent} to provide accessibility hints to\n\n * the OS.\n\n *\n\n * <p>For example, if TalkBack is enabled, users will be able to receive spoken feedback as they\n\n * interact with this view.\n\n *\n\n * <p>More generally, this view renders a multi-position \"dial\" that can be used to select a value\n\n * between 1 and 4. Each time the dial is clicked, the next position will be selected (modulo\n\n * the maximum number of positions).\n\n */\n\npublic class DialView extends View {\n\n    private static int SELECTION_COUNT = 4;\n\n \n\n    private static float FONT_SIZE = 40f;\n\n    private float mWidth;\n\n    private float mHeight;\n\n    private float mWidthPadded;\n\n    private float mHeightPadded;\n\n    private Paint mTextPaint;\n\n    private Paint mDialPaint;\n\n    private float mRadius;\n\n    private int mActiveSelection;\n\n \n\n    /**\n\n     * Constructor that is called when inflating a view from XML. This is called\n\n     * when a view is being constructed from an XML file, supplying attributes\n\n     * that were specified in the XML file.\n\n     *\n\n     * <p>In our case, this constructor just calls init().\n\n     *\n\n     * @param context The Context the view is running in, through which it can\n\n     *                access the current theme, resources, etc.\n\n     * @param attrs   The attributes of the XML tag that is inflating the view.\n\n     * @see #View(android.content.Context, android.util.AttributeSet, int)\n\n     */\n\n    public DialView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n        init();\n\n    }\n\n \n\n    /**\n\n     * Helper method to initialize instance variables. Called by constructor.\n\n     */\n\n    private void init() {\n\n        // Paint styles used for rendering are created here, rather than at render-time. This\n\n        // is a performance optimization, since onDraw() will get called frequently.\n\n        mTextPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n\n        mTextPaint.setColor(Color.BLACK);\n\n        mTextPaint.setStyle(Paint.Style.FILL_AND_STROKE);\n\n        mTextPaint.setTextAlign(Paint.Align.CENTER);\n\n        mTextPaint.setTextSize(FONT_SIZE);\n\n \n\n        mDialPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n\n        mDialPaint.setColor(Color.GRAY);\n\n \n\n        // Initialize current selection. This will store where the dial's \"indicator\" is pointing.\n\n        mActiveSelection = 0;\n\n \n\n        // Setup onClick listener for this view. Rotates between each of the different selection\n\n        // states on each click.\n\n        //\n\n        // Notice that we call sendAccessibilityEvent here. Some AccessibilityEvents are generated\n\n        // by the system. However, custom views will typically need to send events manually as the\n\n        // user interacts with the view. The type of event sent will vary, depending on the nature\n\n        // of the view and how the user interacts with it.\n\n        //\n\n        // In this case, we are sending TYPE_VIEW_SELECTED rather than TYPE_VIEW_CLICKED, because\n\n        // clicking on this view selects a new value.\n\n        //\n\n        // We will give our AccessibilityEvent further information about the state of the view in\n\n        // onPopulateAccessibilityEvent(), which will be called automatically by the system\n\n        // for each AccessibilityEvent.\n\n        setOnClickListener(new OnClickListener() {\n\n            @Override\n\n            public void onClick(View v) {\n\n                // Rotate selection to the next valid choice.\n\n                mActiveSelection = (mActiveSelection + 1) % SELECTION_COUNT;\n\n                // Send an AccessibilityEvent, since the user has interacted with the view.\n\n                sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_SELECTED);\n\n                // Redraw the entire view. (Inefficient, but this is sufficient for demonstration\n\n                // purposes.)\n\n                invalidate();\n\n            }\n\n        });\n\n    }\n\n \n\n    /**\n\n     * This is where a View should populate outgoing accessibility events with its text content.\n\n     * While this method is free to modify event attributes other than text content, doing so\n\n     * should normally be performed in\n\n     * {@link #onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)}.\n\n     * <p/>\n\n     * <p>Note that the behavior of this method will typically vary, depending on the type of\n\n     * accessibility event is passed into it. The allowed values also very, and are documented\n\n     * in {@link android.view.accessibility.AccessibilityEvent}.\n\n     * <p/>\n\n     * <p>Typically, this is where you'll describe the state of your custom view. You may also\n\n     * want to provide custom directions when the user has focused your view.\n\n     *\n\n     * @param event The accessibility event which to populate.\n\n     */\n\n    @Override\n\n    @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)\n\n    public void onPopulateAccessibilityEvent(AccessibilityEvent event) {\n\n        super.onPopulateAccessibilityEvent(event);\n\n \n\n        // Detect what type of accessibility event is being passed in.\n\n        int eventType = event.getEventType();\n\n \n\n        // Common case: The user has interacted with our view in some way. State may or may not\n\n        // have been changed. Read out the current status of the view.\n\n        //\n\n        // We also set some other metadata which is not used by TalkBack, but could be used by\n\n        // other TTS engines.\n\n        if (eventType == AccessibilityEvent.TYPE_VIEW_SELECTED ||\n\n                eventType == AccessibilityEvent.TYPE_VIEW_ACCESSIBILITY_FOCUSED) {\n\n            event.getText().add(\"Mode selected: \" + Integer.toString(mActiveSelection + 1) + \".\");\n\n            event.setItemCount(SELECTION_COUNT);\n\n            event.setCurrentItemIndex(mActiveSelection);\n\n        }\n\n \n\n        // When a user first focuses on our view, we'll also read out some simple instructions to\n\n        // make it clear that this is an interactive element.\n\n        if (eventType == AccessibilityEvent.TYPE_VIEW_ACCESSIBILITY_FOCUSED) {\n\n            event.getText().add(\"Tap to change.\");\n\n        }\n\n    }\n\n \n\n    /**\n\n     * This is called during layout when the size of this view has changed. If\n\n     * you were just added to the view hierarchy, you're called with the old\n\n     * values of 0.\n\n     *\n\n     * <p>This is where we determine the drawing bounds for our custom view.\n\n     *\n\n     * @param w    Current width of this view.\n\n     * @param h    Current height of this view.\n\n     * @param oldw Old width of this view.\n\n     * @param oldh Old height of this view.\n\n     */\n\n    @Override\n\n    protected void onSizeChanged(int w, int h, int oldw, int oldh) {\n\n        // Account for padding\n\n        float xPadding = (float) (getPaddingLeft() + getPaddingRight());\n\n        float yPadding = (float) (getPaddingTop() + getPaddingBottom());\n\n \n\n        // Compute available width/height\n\n        mWidth = w;\n\n        mHeight = h;\n\n        mWidthPadded = w - xPadding;\n\n        mHeightPadded = h - yPadding;\n\n        mRadius = (float) (Math.min(mWidth, mHeight) / 2 * 0.8);\n\n    }\n\n \n\n    /**\n\n     * Render view content.\n\n     *\n\n     * <p>We render an outer grey circle to serve as our \"dial\", and then render a smaller black\n\n     * circle to server as our indicator. The position for the indicator is determined based\n\n     * on mActiveSelection.\n\n     *\n\n     * @param canvas the canvas on which the background will be drawn\n\n     */\n\n    @Override\n\n    protected void onDraw(Canvas canvas) {\n\n        super.onDraw(canvas);\n\n        // Draw dial\n\n        canvas.drawCircle(mWidth / 2, mHeight / 2, (float) mRadius, mDialPaint);\n\n \n\n        // Draw text labels\n\n        final float labelRadius = mRadius + 10;\n\n        for (int i = 0; i < SELECTION_COUNT; i++) {\n\n            float[] xyData = computeXYForPosition(i, labelRadius);\n\n            float x = xyData[0];\n\n            float y = xyData[1];\n\n            canvas.drawText(Integer.toString(i + 1), x, y, mTextPaint);\n\n        }\n\n \n\n        // Draw indicator mark\n\n        final float markerRadius = mRadius - 35;\n\n        float[] xyData = computeXYForPosition(mActiveSelection, markerRadius);\n\n        float x = xyData[0];\n\n        float y = xyData[1];\n\n        canvas.drawCircle(x, y, 20, mTextPaint);\n\n    }\n\n \n\n    /**\n\n     * Compute the X/Y-coordinates for a label or indicator, given the position number and radius\n\n     * where the label should be drawn.\n\n     *\n\n     * @param pos    Zero based position index\n\n     * @param radius Radius where label/indicator is to be drawn.\n\n     * @return 2-element array. Element 0 is X-coordinate, element 1 is Y-coordinate.\n\n     */\n\n    private float[] computeXYForPosition(final int pos, final float radius) {\n\n        float[] result = new float[2];\n\n        Double startAngle = Math.PI * (9 / 8d);   // Angles are in radiansq\n\n        Double angle = startAngle + (pos * (Math.PI / 4));\n\n        result[0] = (float) (radius * Math.cos(angle)) + (mWidth / 2);\n\n        result[1] = (float) (radius * Math.sin(angle)) + (mHeight / 2);\n\n        return result;\n\n    }\n\n}\n  ","MainActivity.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.basicaccessibility;\n\n \n\nimport android.app.Activity;\n\nimport android.os.Bundle;\n\n \n\n/**\n\n * Basic activity class.\n\n *\n\n * <p>Responsible for rendering layout, and displaying some toasts to give buttons feedback.\n\n * There's nothing terribly interesting in this class. All the interesting stuff is in\n\n * res/layout/activity_main.xml and {@link DialView}.\n\n */\n\npublic class MainActivity extends Activity {\n\n \n\n    /**\n\n     * Standard onCreate() implementation. Sets R.layout.activity_main as the layout.\n\n     */\n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.sample_main);\n\n    }\n\n}\n  "},"com.example.android.common.logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.basicaccessibility\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk\n\n        android:minSdkVersion=\"11\"\n\n        android:targetSdkVersion=\"16\" />\n\n \n\n    <application\n\n        android:allowBackup=\"true\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:label=\"@string/app_name\"\n\n        android:theme=\"@style/AppTheme\" >\n\n        <activity\n\n            android:name=\".MainActivity\"\n\n            android:label=\"@string/app_name\" >\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n</manifest>\n  "},"BasicImmersiveMode":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com//samples/BasicImmersiveMode/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com//samples/BasicImmersiveMode/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com//samples/BasicImmersiveMode/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com//samples/BasicImmersiveMode/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com//samples/BasicImmersiveMode/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n        android:orientation=\"vertical\"\n\n        android:layout_width=\"fill_parent\"\n\n        android:layout_height=\"fill_parent\"\n\n        android:id=\"@+id/sample_main_layout\">\n\n    <TextView android:id=\"@+id/sample_output\"\n\n              style=\"@style/Widget.SampleMessage\"\n\n              android:layout_weight=\"1\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\"\n\n              android:text=\"@string/intro_message\"\n\n              android:padding=\"16dp\" />\n\n    <View\n\n            android:layout_width=\"fill_parent\"\n\n            android:layout_height=\"1dp\"\n\n            android:background=\"@android:color/darker_gray\"/>\n\n    <fragment\n\n            android:name=\"com.example.android.common.logger.LogFragment\"\n\n            android:id=\"@+id/log_fragment\"\n\n            android:layout_weight=\"1\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"match_parent\" />\n\n</LinearLayout>\n  "},"layout-sw600dp":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:orientation=\"vertical\"\n\n    android:layout_width=\"fill_parent\"\n\n    android:layout_height=\"fill_parent\"\n\n    android:id=\"@+id/sample_main_layout\" >\n\n \n\n    <TextView android:id=\"@+id/sample_output\"\n\n        style=\"@style/Widget.SampleMessage\"\n\n        android:background=\"@android:color/white\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:text=\"@string/intro_message\"\n\n        android:padding=\"16dp\"\n\n        android:layout_margin=\"16dp\"/>\n\n    <fragment\n\n        android:name=\"com.example.android.common.logger.LogFragment\"\n\n        android:id=\"@+id/log_fragment\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"match_parent\"\n\n        android:layout_margin=\"16dp\" />\n\n</LinearLayout>\n  "},"layout-sw600dp-land":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n        android:orientation=\"horizontal\"\n\n        android:layout_width=\"fill_parent\"\n\n        android:layout_height=\"fill_parent\"\n\n        android:id=\"@+id/sample_main_layout\">\n\n    <TextView android:id=\"@+id/sample_output\"\n\n              style=\"@style/Widget.SampleMessage\"\n\n              android:background=\"@android:color/white\"\n\n              android:layout_weight=\"1\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\"\n\n              android:text=\"@string/intro_message\"\n\n              android:layout_margin=\"16dp\" />\n\n    <fragment\n\n            android:name=\"com.example.android.common.logger.LogFragment\"\n\n            android:id=\"@+id/log_fragment\"\n\n            android:layout_weight=\"1\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"match_parent\"\n\n            android:layout_margin=\"16dp\" />\n\n</LinearLayout>\n  "},"menu":{"main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:id=\"@+id/sample_action\"\n\n          android:showAsAction=\"ifRoom|withText\"\n\n          android:title=\"@string/sample_action\" />\n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">BasicImmersiveMode</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            \\\"Immersive Mode\\\" is a new UI mode which improves \\\"hide full screen\\\" and\n\n            \\\"hide nav bar\\\" modes, by letting users swipe the bars in and out.  This sample\n\n            demonstrates how to enable and disable immersive mode programmatically.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n        <string name=\"sample_action\">Toggle Immersive Mode!</string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Base\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n \n\n    <style name=\"Widget.SampleOutput\">\n\n        <item name=\"android:padding\">@dimen/margin_medium</item>\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Log\" parent=\"Widget.SampleOutput\">\n\n        <item name=\"android:typeface\">monospace</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:padding\">@dimen/margin_medium</item>\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n \n\n        <item name=\"android:layout_margin\">16dp</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n    <style name=\"Log\" parent=\"Widget.SampleOutput\">\n\n        <item name=\"android:typeface\">monospace</item>\n\n    </style>\n\n \n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.basicimmersivemode":{"BasicImmersiveModeFragment.java":"\n    \n\n/*\n\n* Copyright (C) 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*      http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\npackage com.example.android.basicimmersivemode;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.view.MenuItem;\n\nimport android.view.View;\n\n \n\nimport com.example.android.common.logger.Log;\n\n \n\npublic class BasicImmersiveModeFragment extends Fragment {\n\n \n\n    public static final String TAG = \"BasicImmersiveModeFragment\";\n\n \n\n    @Override\n\n    public void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setHasOptionsMenu(true);\n\n    }\n\n \n\n    @Override\n\n    public void onActivityCreated(Bundle savedInstanceState) {\n\n        super.onActivityCreated(savedInstanceState);\n\n        final View decorView = getActivity().getWindow().getDecorView();\n\n        decorView.setOnSystemUiVisibilityChangeListener(\n\n                new View.OnSystemUiVisibilityChangeListener() {\n\n                    @Override\n\n                    public void onSystemUiVisibilityChange(int i) {\n\n                        int height = decorView.getHeight();\n\n                        Log.i(TAG, \"Current height: \" + height);\n\n                    }\n\n                });\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        if (item.getItemId() == R.id.sample_action) {\n\n            toggleHideyBar();\n\n        }\n\n        return true;\n\n    }\n\n \n\n    /**\n\n     * Detects and toggles immersive mode.\n\n     */\n\n    public void toggleHideyBar() {\n\n        // The UI options currently enabled are represented by a bitfield.\n\n        // getSystemUiVisibility() gives us that bitfield.\n\n        int uiOptions = getActivity().getWindow().getDecorView().getSystemUiVisibility();\n\n        int newUiOptions = uiOptions;\n\n        boolean isImmersiveModeEnabled =\n\n                ((uiOptions | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY) == uiOptions);\n\n        if (isImmersiveModeEnabled) {\n\n            Log.i(TAG, \"Turning immersive mode mode off. \");\n\n        } else {\n\n            Log.i(TAG, \"Turning immersive mode mode on.\");\n\n        }\n\n \n\n        // Immersive mode: Backward compatible to KitKat (API 19).\n\n        // Note that this flag doesn't do anything by itself, it only augments the behavior\n\n        // of HIDE_NAVIGATION and FLAG_FULLSCREEN.  For the purposes of this sample\n\n        // all three flags are being toggled together.\n\n        // This sample uses the \"sticky\" form of immersive mode, which will let the user swipe\n\n        // the bars back in again, but will automatically make them disappear a few seconds later.\n\n        newUiOptions ^= View.SYSTEM_UI_FLAG_HIDE_NAVIGATION;\n\n        newUiOptions ^= View.SYSTEM_UI_FLAG_FULLSCREEN;\n\n        newUiOptions ^= View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;\n\n        getActivity().getWindow().getDecorView().setSystemUiVisibility(newUiOptions);\n\n    }\n\n}\n  ","MainActivity.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.basicimmersivemode;\n\n \n\nimport android.graphics.Color;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentTransaction;\n\nimport android.view.Menu;\n\n \n\nimport com.example.android.common.activities.SampleActivityBase;\n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogFragment;\n\nimport com.example.android.common.logger.LogWrapper;\n\nimport com.example.android.common.logger.MessageOnlyLogFilter;\n\n \n\n/**\n\n * A simple launcher activity containing a summary sample description\n\n * and a few action bar buttons.\n\n */\n\npublic class MainActivity extends SampleActivityBase {\n\n \n\n    public static final String TAG = \"MainActivity\";\n\n \n\n    public static final String FRAGTAG = \"BasicImmersiveModeFragment\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_main);\n\n \n\n        if (getSupportFragmentManager().findFragmentByTag(FRAGTAG) == null ) {\n\n            FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n\n            BasicImmersiveModeFragment fragment = new BasicImmersiveModeFragment();\n\n            transaction.add(fragment, FRAGTAG);\n\n            transaction.commit();\n\n        }\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        getMenuInflater().inflate(R.menu.main, menu);\n\n        return true;\n\n    }\n\n \n\n    /** Create a chain of targets that will receive log data */\n\n    @Override\n\n    public void initializeLogging() {\n\n        // Wraps Android's native log framework.\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        Log.setLogNode(logWrapper);\n\n \n\n        // Filter strips out everything except the message text.\n\n        MessageOnlyLogFilter msgFilter = new MessageOnlyLogFilter();\n\n        logWrapper.setNext(msgFilter);\n\n \n\n        // On screen logging via a fragment with a TextView.\n\n        LogFragment logFragment = (LogFragment) getSupportFragmentManager()\n\n                .findFragmentById(R.id.log_fragment);\n\n        msgFilter.setNext(logFragment.getLogView());\n\n        logFragment.getLogView().setTextAppearance(this, R.style.Log);\n\n        logFragment.getLogView().setBackgroundColor(Color.WHITE);\n\n \n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "},"com.example.android.common":{"activities":{"SampleActivityBase.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\npackage com.example.android.common.activities;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentActivity;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogWrapper;\n\n \n\n/**\n\n * Base launcher activity, to handle most of the common plumbing for samples.\n\n */\n\npublic class SampleActivityBase extends FragmentActivity {\n\n \n\n    public static final String TAG = \"SampleActivityBase\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n    }\n\n \n\n    @Override\n\n    protected  void onStart() {\n\n        super.onStart();\n\n        initializeLogging();\n\n    }\n\n \n\n    /** Set up targets to receive log data */\n\n    public void initializeLogging() {\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        // Wraps Android's native log framework\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        Log.setLogNode(logWrapper);\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "},"logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "}}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.basicimmersivemode\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk android:minSdkVersion=\"19\" android:targetSdkVersion=\"19\" />\n\n \n\n    <application android:allowBackup=\"true\"\n\n        android:label=\"@string/app_name\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:theme=\"@style/AppTheme\">\n\n \n\n        <activity android:name=\".MainActivity\"\n\n                  android:label=\"@string/app_name\"\n\n                  android:uiOptions=\"splitActionBarWhenNarrow\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n</manifest>\n  "},"BasicNotifications":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com//samples/BasicNotifications/res/drawable-hdpi/ic_launcher.png","ic_stat_notification.png":"http://developer.android.com//samples/BasicNotifications/res/drawable-hdpi/ic_stat_notification.png","tile.9.png":"http://developer.android.com//samples/BasicNotifications/res/drawable-hdpi/tile.9.png"},"drawable-hdpi-v11":{"ic_stat_notification.png":"http://developer.android.com//samples/BasicNotifications/res/drawable-hdpi-v11/ic_stat_notification.png"},"drawable-hdpi-v9":{"ic_stat_notification.png":"http://developer.android.com//samples/BasicNotifications/res/drawable-hdpi-v9/ic_stat_notification.png"},"drawable-ldpi-v11":{"ic_stat_notification.png":"http://developer.android.com//samples/BasicNotifications/res/drawable-ldpi-v11/ic_stat_notification.png"},"drawable-ldpi-v9":{"ic_stat_notification.png":"http://developer.android.com//samples/BasicNotifications/res/drawable-ldpi-v9/ic_stat_notification.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com//samples/BasicNotifications/res/drawable-mdpi/ic_launcher.png","ic_stat_notification.png":"http://developer.android.com//samples/BasicNotifications/res/drawable-mdpi/ic_stat_notification.png"},"drawable-mdpi-v11":{"ic_stat_notification.png":"http://developer.android.com//samples/BasicNotifications/res/drawable-mdpi-v11/ic_stat_notification.png"},"drawable-mdpi-v9":{"ic_stat_notification.png":"http://developer.android.com//samples/BasicNotifications/res/drawable-mdpi-v9/ic_stat_notification.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com//samples/BasicNotifications/res/drawable-xhdpi/ic_launcher.png","ic_stat_notification.png":"http://developer.android.com//samples/BasicNotifications/res/drawable-xhdpi/ic_stat_notification.png"},"drawable-xhdpi-v11":{"ic_stat_notification.png":"http://developer.android.com//samples/BasicNotifications/res/drawable-xhdpi-v11/ic_stat_notification.png"},"drawable-xhdpi-v9":{"ic_stat_notification.png":"http://developer.android.com//samples/BasicNotifications/res/drawable-xhdpi-v9/ic_stat_notification.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com//samples/BasicNotifications/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleMessageTile\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n            android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n            android:text=\"@string/intro_message\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n  ","sample_layout.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\nCopyright 2013 The Android Open Source Project\n\n \n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n \n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n \n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n-->\n\n<LinearLayout\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:id=\"@+id/coreLayout\"\n\n    android:orientation=\"vertical\"\n\n    android:layout_width=\"wrap_content\"\n\n    android:layout_height=\"wrap_content\"\n\n    android:layout_gravity=\"center_vertical\">\n\n \n\n    <TextView\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:text=\"@string/description\"\n\n        android:id=\"@+id/description\"\n\n        android:scrollbars=\"vertical\"\n\n        android:layout_gravity=\"fill_vertical\"\n\n        android:layout_weight=\"1\"/>\n\n \n\n    <Button\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:text=\"Do it!\"\n\n        android:id=\"@+id/button\"\n\n        android:layout_gravity=\"center\"\n\n        android:onClick=\"sendNotification\"/>\n\n \n\n</LinearLayout>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">BasicNotifications</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            This sample demonstrates how to display events in the system\\'s notification bar. The\n\n            NotificationCompat API is used for compatibility with older devices, running Android\n\n            2.2 (Froyo) or newer.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\nCopyright 2013 The Android Open Source Project\n\n \n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n \n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n \n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n-->\n\n<resources>\n\n \n\n    <string name=\"description\">\n\n        Tap the button below to send a notification.\\n\\nThe notification\\'s icon will immediately\n\n        appear in the notification bar. Drag the notification bar open to see the full\n\n        notification. Depending on which version of Android you\\'re running, the full\n\n        notification will display an icon and two or three lines of text.\n\n        \\n\\nTap the notification to execute the notification\\'s \\\"action,\\\" which is an intent\n\n        that we associate with the notification when it\\'s created. This sample notification\\'s\n\n        action is to send a browse intent with the url of the Notification docs on\n\n        developer.android.com.\n\n        \\n\\nThis sample uses the NotificationCompat API for maximum compatibility with versions\n\n        of Android from Froyo (Android 2.2) to the present. Try it on devices or AVDs that are\n\n        running different versions of Android. You\\'ll see that while the presentation varies\n\n        slightly, the basic functionality is the same. NotificationCompat automatically takes\n\n        advantage of the expanded notification format in newer versions of Android, and\n\n        falls back gracefully to a reduced set of functionality on earlier versions.\n\n    </string>\n\n \n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.basicnotifications":{"MainActivity.java":"\n    \n\npackage com.example.android.basicnotifications;\n\n \n\nimport android.app.Activity;\n\nimport android.app.NotificationManager;\n\nimport android.app.PendingIntent;\n\nimport android.content.Intent;\n\nimport android.graphics.BitmapFactory;\n\nimport android.net.Uri;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.NotificationCompat;\n\nimport android.view.View;\n\n \n\n/**\n\n * The entry point to the BasicNotification sample.\n\n */\n\npublic class MainActivity extends Activity {\n\n    /**\n\n     * A numeric value that identifies the notification that we'll be sending.\n\n     * This value needs to be unique within this app, but it doesn't need to be\n\n     * unique system-wide.\n\n     */\n\n    public static final int NOTIFICATION_ID = 1;\n\n \n\n    public void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.sample_layout);\n\n \n\n    }\n\n \n\n    /**\n\n     * Send a sample notification using the NotificationCompat API.\n\n     */\n\n    public void sendNotification(View view) {\n\n \n\n        /** Create an intent that will be fired when the user clicks the notification.\n\n         * The intent needs to be packaged into a {@link android.app.PendingIntent} so that the\n\n         * notification service can fire it on our behalf.\n\n         */\n\n        Intent intent = new Intent(Intent.ACTION_VIEW,\n\n                Uri.parse(\"http://developer.android.com/reference/android/app/Notification.html\"));\n\n        PendingIntent pendingIntent = PendingIntent.getActivity(this, 0, intent, 0);\n\n \n\n        /**\n\n         * Use NotificationCompat.Builder to set up our notification.\n\n         */\n\n        NotificationCompat.Builder builder = new NotificationCompat.Builder(this);\n\n \n\n        /** Set the icon that will appear in the notification bar. This icon also appears\n\n         * in the lower right hand corner of the notification itself.\n\n         *\n\n         * Important note: although you can use any drawable as the small icon, Android\n\n         * design guidelines state that the icon should be simple and monochrome. Full-color\n\n         * bitmaps or busy images don't render well on smaller screens and can end up\n\n         * confusing the user.\n\n         */\n\n        builder.setSmallIcon(R.drawable.ic_stat_notification);\n\n \n\n        // Set the intent that will fire when the user taps the notification.\n\n        builder.setContentIntent(pendingIntent);\n\n \n\n        // Set the notification to auto-cancel. This means that the notification will disappear\n\n        // after the user taps it, rather than remaining until it's explicitly dismissed.\n\n        builder.setAutoCancel(true);\n\n \n\n        /**\n\n         *Build the notification's appearance.\n\n         * Set the large icon, which appears on the left of the notification. In this\n\n         * sample we'll set the large icon to be the same as our app icon. The app icon is a\n\n         * reasonable default if you don't have anything more compelling to use as an icon.\n\n         */\n\n        builder.setLargeIcon(BitmapFactory.decodeResource(getResources(), R.drawable.ic_launcher));\n\n \n\n        /**\n\n         * Set the text of the notification. This sample sets the three most commononly used\n\n         * text areas:\n\n         * 1. The content title, which appears in large type at the top of the notification\n\n         * 2. The content text, which appears in smaller text below the title\n\n         * 3. The subtext, which appears under the text on newer devices. Devices running\n\n         *    versions of Android prior to 4.2 will ignore this field, so don't use it for\n\n         *    anything vital!\n\n         */\n\n        builder.setContentTitle(\"BasicNotifications Sample\");\n\n        builder.setContentText(\"Time to learn about notifications!\");\n\n        builder.setSubText(\"Tap to view documentation about notifications.\");\n\n \n\n \n\n        /**\n\n         * Send the notification. This will immediately display the notification icon in the\n\n         * notification bar.\n\n         */\n\n        NotificationManager notificationManager = (NotificationManager) getSystemService(\n\n                NOTIFICATION_SERVICE);\n\n        notificationManager.notify(NOTIFICATION_ID, builder.build());\n\n    }\n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.basicnotifications\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk\n\n        android:minSdkVersion=\"8\"\n\n        android:targetSdkVersion=\"17\"/>\n\n \n\n    <application\n\n        android:allowBackup=\"true\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:label=\"@string/app_name\"\n\n        android:theme=\"@style/AppTheme\">\n\n        <activity\n\n            android:name=\".MainActivity\"\n\n            android:label=\"@string/app_name\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\"/>\n\n                <category android:name=\"android.intent.category.LAUNCHER\"/>\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n</manifest>\n  "},"BasicTransition":{"res":{"drawable":{"oval.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n<shape xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:shape=\"oval\">\n\n    <solid android:color=\"#0000ff\"/>\n\n</shape>\n  "},"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com//samples/BasicTransition/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com//samples/BasicTransition/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com//samples/BasicTransition/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com//samples/BasicTransition/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com//samples/BasicTransition/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_basic_transition.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:tools=\"http://schemas.android.com/tools\"\n\n    android:id=\"@+id/container\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    tools:context=\"com.example.android.basictransition.BasicTransitionActivity\"/>\n  ","activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"vertical\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <ViewAnimator\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\"\n\n          android:layout_weight=\"1\">\n\n \n\n        <ScrollView\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingRight=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingTop=\"@dimen/vertical_page_margin\"\n\n                  android:paddingBottom=\"@dimen/vertical_page_margin\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </ScrollView>\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\" />\n\n \n\n    </ViewAnimator>\n\n \n\n    <View\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"1dp\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\" />\n\n \n\n</LinearLayout>\n\n \n  ","fragment_basic_transition.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:tools=\"http://schemas.android.com/tools\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\"\n\n    android:paddingBottom=\"@dimen/activity_vertical_margin\"\n\n    android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n\n    android:paddingRight=\"@dimen/activity_horizontal_margin\"\n\n    android:paddingTop=\"@dimen/activity_vertical_margin\"\n\n    tools:context=\"com.example.android.basictransition.BasicTransitionFragment\">\n\n \n\n    <RadioGroup\n\n        android:id=\"@+id/select_scene\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:layout_gravity=\"center_horizontal\"\n\n        android:orientation=\"horizontal\">\n\n \n\n        <TextView\n\n            android:layout_width=\"wrap_content\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_weight=\"1\"\n\n            android:text=\"@string/scene\"/>\n\n \n\n        <RadioButton\n\n            android:id=\"@+id/select_scene_1\"\n\n            android:layout_width=\"wrap_content\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_weight=\"1\"\n\n            android:checked=\"true\"\n\n            android:text=\"@string/scene_1\"/>\n\n \n\n        <RadioButton\n\n            android:id=\"@+id/select_scene_2\"\n\n            android:layout_width=\"wrap_content\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_weight=\"1\"\n\n            android:text=\"@string/scene_2\"/>\n\n \n\n        <RadioButton\n\n            android:id=\"@+id/select_scene_3\"\n\n            android:layout_width=\"wrap_content\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_weight=\"1\"\n\n            android:text=\"@string/scene_3\"/>\n\n \n\n        <RadioButton\n\n            android:id=\"@+id/select_scene_4\"\n\n            android:layout_width=\"wrap_content\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_weight=\"1\"\n\n            android:text=\"@string/scene_4\"/>\n\n \n\n    </RadioGroup>\n\n \n\n    <FrameLayout\n\n        android:id=\"@+id/scene_root\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"0dp\"\n\n        android:layout_weight=\"1\">\n\n \n\n        <include layout=\"@layout/scene1\"/>\n\n \n\n    </FrameLayout>\n\n \n\n</LinearLayout>\n  ","scene1.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n<RelativeLayout\n\n    android:id=\"@+id/container\"\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\">\n\n \n\n    <View\n\n        android:id=\"@+id/transition_square\"\n\n        android:layout_width=\"@dimen/square_size_normal\"\n\n        android:layout_height=\"@dimen/square_size_normal\"\n\n        android:background=\"#990000\"\n\n        android:gravity=\"center\"/>\n\n \n\n    <ImageView\n\n        android:id=\"@+id/transition_image\"\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:layout_below=\"@id/transition_square\"\n\n        android:src=\"@drawable/ic_launcher\"/>\n\n \n\n    <ImageView\n\n        android:id=\"@+id/transition_oval\"\n\n        android:layout_width=\"32dp\"\n\n        android:layout_height=\"32dp\"\n\n        android:layout_below=\"@id/transition_image\"\n\n        android:src=\"@drawable/oval\"/>\n\n \n\n</RelativeLayout>\n  ","scene2.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n<RelativeLayout\n\n    android:id=\"@+id/container\"\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\">\n\n \n\n    <View\n\n        android:id=\"@+id/transition_square\"\n\n        android:layout_width=\"@dimen/square_size_normal\"\n\n        android:layout_height=\"@dimen/square_size_normal\"\n\n        android:layout_alignParentBottom=\"true\"\n\n        android:background=\"#990000\"\n\n        android:gravity=\"center\"/>\n\n \n\n    <ImageView\n\n        android:id=\"@+id/transition_image\"\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:layout_alignParentBottom=\"true\"\n\n        android:layout_alignParentRight=\"true\"\n\n        android:src=\"@drawable/ic_launcher\"/>\n\n \n\n    <ImageView\n\n        android:id=\"@+id/transition_oval\"\n\n        android:layout_width=\"32dp\"\n\n        android:layout_height=\"32dp\"\n\n        android:layout_centerHorizontal=\"true\"\n\n        android:src=\"@drawable/oval\"/>\n\n \n\n</RelativeLayout>\n  ","scene3.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n<RelativeLayout\n\n    android:id=\"@+id/container\"\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\">\n\n \n\n    <View\n\n        android:id=\"@+id/transition_square\"\n\n        android:layout_width=\"@dimen/square_size_normal\"\n\n        android:layout_height=\"@dimen/square_size_normal\"\n\n        android:layout_centerHorizontal=\"true\"\n\n        android:background=\"#990000\"\n\n        android:gravity=\"center\"/>\n\n \n\n    <ImageView\n\n        android:id=\"@+id/transition_image\"\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:layout_alignParentBottom=\"true\"\n\n        android:src=\"@drawable/ic_launcher\"/>\n\n \n\n    <ImageView\n\n        android:id=\"@+id/transition_oval\"\n\n        android:layout_width=\"32dp\"\n\n        android:layout_height=\"32dp\"\n\n        android:layout_alignParentBottom=\"true\"\n\n        android:layout_alignParentRight=\"true\"\n\n        android:src=\"@drawable/oval\"/>\n\n \n\n    <TextView\n\n        android:id=\"@+id/transition_title\"\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:layout_centerInParent=\"true\"\n\n        android:text=\"@string/additional_message\"\n\n        android:textAppearance=\"?android:attr/textAppearanceLarge\"/>\n\n \n\n</RelativeLayout>\n  "},"layout-w720dp":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"horizontal\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <LinearLayout\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\"\n\n          android:layout_weight=\"1\"\n\n          android:orientation=\"vertical\">\n\n \n\n        <FrameLayout\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"wrap_content\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/margin_medium\"\n\n                  android:paddingRight=\"@dimen/margin_medium\"\n\n                  android:paddingTop=\"@dimen/margin_large\"\n\n                  android:paddingBottom=\"@dimen/margin_large\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </FrameLayout>\n\n \n\n        <View\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"1dp\"\n\n              android:background=\"@android:color/darker_gray\" />\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"0px\"\n\n              android:layout_weight=\"1\" />\n\n \n\n    </LinearLayout>\n\n \n\n    <View\n\n          android:layout_width=\"1dp\"\n\n          android:layout_height=\"match_parent\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\" />\n\n \n\n</LinearLayout>\n\n \n\n \n  "},"menu":{"main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:id=\"@+id/menu_toggle_log\"\n\n          android:showAsAction=\"always\"\n\n          android:title=\"@string/sample_show_log\" />\n\n</menu>\n  "},"transition":{"changebounds_fadein_together.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n<transitionSet xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <changeBounds/>\n\n    <fade android:fadingMode=\"fade_in\">\n\n        <targets>\n\n            <target android:targetId=\"@id/transition_title\" />\n\n        </targets>\n\n    </fade>\n\n</transitionSet>\n  ","scene3_transition_manager.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n<transitionManager xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <transition\n\n        android:toScene=\"@layout/scene3\"\n\n        android:transition=\"@transition/changebounds_fadein_together\"/>\n\n</transitionManager>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">BasicTransition</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n\t    This sample demonstrates the basic use of the transition framework introduced in KitKat.\n\n\t    Select each of the RadioButtons to switch between the Scenes.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","dimens.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n<resources>\n\n    <dimen name=\"activity_horizontal_margin\">16dp</dimen>\n\n    <dimen name=\"activity_vertical_margin\">16dp</dimen>\n\n    <dimen name=\"square_size_normal\">50dp</dimen>\n\n    <dimen name=\"square_size_expanded\">100dp</dimen>\n\n</resources>\n  ","strings.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<resources>\n\n    <string name=\"sample_show_log\">Show Log</string>\n\n    <string name=\"sample_hide_log\">Hide Log</string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "},"values-w820dp":{"dimens.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n<resources>\n\n    <!-- Example customization of dimensions originally defined in res/values/dimens.xml\n\n         (such as screen margins) for screens with more than 820dp of available width. This\n\n         would include 7\" and 10\" devices in landscape (~960dp and ~1280dp respectively). -->\n\n    <dimen name=\"activity_horizontal_margin\">64dp</dimen>\n\n</resources>\n  "}},"src":{"com.example.android.basictransition":{"BasicTransitionFragment.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.basictransition;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.transition.Scene;\n\nimport android.transition.TransitionInflater;\n\nimport android.transition.TransitionManager;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.RadioGroup;\n\n \n\npublic class BasicTransitionFragment extends Fragment\n\n        implements RadioGroup.OnCheckedChangeListener {\n\n \n\n    // We transition between these Scenes\n\n    private Scene mScene1;\n\n    private Scene mScene2;\n\n    private Scene mScene3;\n\n \n\n    /** A custom TransitionManager */\n\n    private TransitionManager mTransitionManagerForScene3;\n\n \n\n    /** Transitions take place in this ViewGroup. We retain this for the dynamic transition on scene 4. */\n\n    private ViewGroup mSceneRoot;\n\n \n\n    public static BasicTransitionFragment newInstance() {\n\n        return new BasicTransitionFragment();\n\n    }\n\n \n\n    public BasicTransitionFragment() {\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n        View view = inflater.inflate(R.layout.fragment_basic_transition, container, false);\n\n        assert view != null;\n\n        RadioGroup radioGroup = (RadioGroup) view.findViewById(R.id.select_scene);\n\n        radioGroup.setOnCheckedChangeListener(this);\n\n        mSceneRoot = (ViewGroup) view.findViewById(R.id.scene_root);\n\n \n\n        // A Scene can be instantiated from a live view hierarchy.\n\n        mScene1 = new Scene(mSceneRoot, (ViewGroup) mSceneRoot.findViewById(R.id.container));\n\n \n\n        // You can also inflate a generate a Scene from a layout resource file.\n\n        mScene2 = Scene.getSceneForLayout(mSceneRoot, R.layout.scene2, getActivity());\n\n \n\n        // Another scene from a layout resource file.\n\n        mScene3 = Scene.getSceneForLayout(mSceneRoot, R.layout.scene3, getActivity());\n\n \n\n        // We create a custom TransitionManager for Scene 3, in which ChangeBounds and Fade\n\n        // take place at the same time.\n\n        mTransitionManagerForScene3 = TransitionInflater.from(getActivity())\n\n                .inflateTransitionManager(R.transition.scene3_transition_manager, mSceneRoot);\n\n \n\n        return view;\n\n    }\n\n \n\n    @Override\n\n    public void onCheckedChanged(RadioGroup group, int checkedId) {\n\n        switch (checkedId) {\n\n            case R.id.select_scene_1: {\n\n                // You can start an automatic transition with TransitionManager.go().\n\n                TransitionManager.go(mScene1);\n\n                break;\n\n            }\n\n            case R.id.select_scene_2: {\n\n                TransitionManager.go(mScene2);\n\n                break;\n\n            }\n\n            case R.id.select_scene_3: {\n\n                // You can also start a transition with a custom TransitionManager.\n\n                mTransitionManagerForScene3.transitionTo(mScene3);\n\n                break;\n\n            }\n\n            case R.id.select_scene_4: {\n\n                // Alternatively, transition can be invoked dynamically without a Scene.\n\n                // For this, we first call TransitionManager.beginDelayedTransition().\n\n                TransitionManager.beginDelayedTransition(mSceneRoot);\n\n                // Then, we can just change view properties as usual.\n\n                View square = mSceneRoot.findViewById(R.id.transition_square);\n\n                ViewGroup.LayoutParams params = square.getLayoutParams();\n\n                int newSize = getResources().getDimensionPixelSize(R.dimen.square_size_expanded);\n\n                params.width = newSize;\n\n                params.height = newSize;\n\n                square.setLayoutParams(params);\n\n                break;\n\n            }\n\n        }\n\n    }\n\n \n\n}\n  ","MainActivity.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.basictransition;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentTransaction;\n\nimport android.view.Menu;\n\nimport android.view.MenuItem;\n\nimport android.widget.ViewAnimator;\n\n \n\nimport com.example.android.common.activities.SampleActivityBase;\n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogFragment;\n\nimport com.example.android.common.logger.LogWrapper;\n\nimport com.example.android.common.logger.MessageOnlyLogFilter;\n\n \n\n/**\n\n * A simple launcher activity containing a summary sample description, sample log and a custom\n\n * {@link android.support.v4.app.Fragment} which can display a view.\n\n * <p>\n\n * For devices with displays with a width of 720dp or greater, the sample log is always visible,\n\n * on other devices it's visibility is controlled by an item on the Action Bar.\n\n */\n\npublic class MainActivity extends SampleActivityBase {\n\n \n\n    public static final String TAG = \"MainActivity\";\n\n \n\n    // Whether the Log Fragment is currently shown\n\n    private boolean mLogShown;\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_main);\n\n \n\n        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n\n        BasicTransitionFragment fragment = new BasicTransitionFragment();\n\n        transaction.replace(R.id.sample_content_fragment, fragment);\n\n        transaction.commit();\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        getMenuInflater().inflate(R.menu.main, menu);\n\n        return true;\n\n    }\n\n \n\n    @Override\n\n    public boolean onPrepareOptionsMenu(Menu menu) {\n\n        MenuItem logToggle = menu.findItem(R.id.menu_toggle_log);\n\n        logToggle.setVisible(findViewById(R.id.sample_output) instanceof ViewAnimator);\n\n        logToggle.setTitle(mLogShown ? R.string.sample_hide_log : R.string.sample_show_log);\n\n \n\n        return super.onPrepareOptionsMenu(menu);\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch(item.getItemId()) {\n\n            case R.id.menu_toggle_log:\n\n                mLogShown = !mLogShown;\n\n                ViewAnimator output = (ViewAnimator) findViewById(R.id.sample_output);\n\n                if (mLogShown) {\n\n                    output.setDisplayedChild(1);\n\n                } else {\n\n                    output.setDisplayedChild(0);\n\n                }\n\n                supportInvalidateOptionsMenu();\n\n                return true;\n\n        }\n\n        return super.onOptionsItemSelected(item);\n\n    }\n\n \n\n    /** Create a chain of targets that will receive log data */\n\n    @Override\n\n    public void initializeLogging() {\n\n        // Wraps Android's native log framework.\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        Log.setLogNode(logWrapper);\n\n \n\n        // Filter strips out everything except the message text.\n\n        MessageOnlyLogFilter msgFilter = new MessageOnlyLogFilter();\n\n        logWrapper.setNext(msgFilter);\n\n \n\n        // On screen logging via a fragment with a TextView.\n\n        LogFragment logFragment = (LogFragment) getSupportFragmentManager()\n\n                .findFragmentById(R.id.log_fragment);\n\n        msgFilter.setNext(logFragment.getLogView());\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "},"com.example.android.common":{"activities":{"SampleActivityBase.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\npackage com.example.android.common.activities;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentActivity;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogWrapper;\n\n \n\n/**\n\n * Base launcher activity, to handle most of the common plumbing for samples.\n\n */\n\npublic class SampleActivityBase extends FragmentActivity {\n\n \n\n    public static final String TAG = \"SampleActivityBase\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n    }\n\n \n\n    @Override\n\n    protected  void onStart() {\n\n        super.onStart();\n\n        initializeLogging();\n\n    }\n\n \n\n    /** Set up targets to receive log data */\n\n    public void initializeLogging() {\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        // Wraps Android's native log framework\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        Log.setLogNode(logWrapper);\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "},"logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "},"view":{"SlidingTabLayout.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.view;\n\n \n\nimport android.content.Context;\n\nimport android.graphics.Typeface;\n\nimport android.os.Build;\n\nimport android.support.v4.view.PagerAdapter;\n\nimport android.support.v4.view.ViewPager;\n\nimport android.util.AttributeSet;\n\nimport android.util.TypedValue;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.widget.HorizontalScrollView;\n\nimport android.widget.TextView;\n\n \n\n/**\n\n * To be used with ViewPager to provide a tab indicator component which give constant feedback as to\n\n * the user's scroll progress.\n\n * <p>\n\n * To use the component, simply add it to your view hierarchy. Then in your\n\n * {@link android.app.Activity} or {@link android.support.v4.app.Fragment} call\n\n * {@link #setViewPager(ViewPager)} providing it the ViewPager this layout is being used for.\n\n * <p>\n\n * The colors can be customized in two ways. The first and simplest is to provide an array of colors\n\n * via {@link #setSelectedIndicatorColors(int...)} and {@link #setDividerColors(int...)}. The\n\n * alternative is via the {@link TabColorizer} interface which provides you complete control over\n\n * which color is used for any individual position.\n\n * <p>\n\n * The views used as tabs can be customized by calling {@link #setCustomTabView(int, int)},\n\n * providing the layout ID of your custom layout.\n\n */\n\npublic class SlidingTabLayout extends HorizontalScrollView {\n\n \n\n    /**\n\n     * Allows complete control over the colors drawn in the tab layout. Set with\n\n     * {@link #setCustomTabColorizer(TabColorizer)}.\n\n     */\n\n    public interface TabColorizer {\n\n \n\n        /**\n\n         * @return return the color of the indicator used when {@code position} is selected.\n\n         */\n\n        int getIndicatorColor(int position);\n\n \n\n        /**\n\n         * @return return the color of the divider drawn to the right of {@code position}.\n\n         */\n\n        int getDividerColor(int position);\n\n \n\n    }\n\n \n\n    private static final int TITLE_OFFSET_DIPS = 24;\n\n    private static final int TAB_VIEW_PADDING_DIPS = 16;\n\n    private static final int TAB_VIEW_TEXT_SIZE_SP = 12;\n\n \n\n    private int mTitleOffset;\n\n \n\n    private int mTabViewLayoutId;\n\n    private int mTabViewTextViewId;\n\n \n\n    private ViewPager mViewPager;\n\n    private ViewPager.OnPageChangeListener mViewPagerPageChangeListener;\n\n \n\n    private final SlidingTabStrip mTabStrip;\n\n \n\n    public SlidingTabLayout(Context context) {\n\n        this(context, null);\n\n    }\n\n \n\n    public SlidingTabLayout(Context context, AttributeSet attrs) {\n\n        this(context, attrs, 0);\n\n    }\n\n \n\n    public SlidingTabLayout(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n \n\n        // Disable the Scroll Bar\n\n        setHorizontalScrollBarEnabled(false);\n\n        // Make sure that the Tab Strips fills this View\n\n        setFillViewport(true);\n\n \n\n        mTitleOffset = (int) (TITLE_OFFSET_DIPS * getResources().getDisplayMetrics().density);\n\n \n\n        mTabStrip = new SlidingTabStrip(context);\n\n        addView(mTabStrip, LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);\n\n    }\n\n \n\n    /**\n\n     * Set the custom {@link TabColorizer} to be used.\n\n     *\n\n     * If you only require simple custmisation then you can use\n\n     * {@link #setSelectedIndicatorColors(int...)} and {@link #setDividerColors(int...)} to achieve\n\n     * similar effects.\n\n     */\n\n    public void setCustomTabColorizer(TabColorizer tabColorizer) {\n\n        mTabStrip.setCustomTabColorizer(tabColorizer);\n\n    }\n\n \n\n    /**\n\n     * Sets the colors to be used for indicating the selected tab. These colors are treated as a\n\n     * circular array. Providing one color will mean that all tabs are indicated with the same color.\n\n     */\n\n    public void setSelectedIndicatorColors(int... colors) {\n\n        mTabStrip.setSelectedIndicatorColors(colors);\n\n    }\n\n \n\n    /**\n\n     * Sets the colors to be used for tab dividers. These colors are treated as a circular array.\n\n     * Providing one color will mean that all tabs are indicated with the same color.\n\n     */\n\n    public void setDividerColors(int... colors) {\n\n        mTabStrip.setDividerColors(colors);\n\n    }\n\n \n\n    /**\n\n     * Set the {@link ViewPager.OnPageChangeListener}. When using {@link SlidingTabLayout} you are\n\n     * required to set any {@link ViewPager.OnPageChangeListener} through this method. This is so\n\n     * that the layout can update it's scroll position correctly.\n\n     *\n\n     * @see ViewPager#setOnPageChangeListener(ViewPager.OnPageChangeListener)\n\n     */\n\n    public void setOnPageChangeListener(ViewPager.OnPageChangeListener listener) {\n\n        mViewPagerPageChangeListener = listener;\n\n    }\n\n \n\n    /**\n\n     * Set the custom layout to be inflated for the tab views.\n\n     *\n\n     * @param layoutResId Layout id to be inflated\n\n     * @param textViewId id of the {@link TextView} in the inflated view\n\n     */\n\n    public void setCustomTabView(int layoutResId, int textViewId) {\n\n        mTabViewLayoutId = layoutResId;\n\n        mTabViewTextViewId = textViewId;\n\n    }\n\n \n\n    /**\n\n     * Sets the associated view pager. Note that the assumption here is that the pager content\n\n     * (number of tabs and tab titles) does not change after this call has been made.\n\n     */\n\n    public void setViewPager(ViewPager viewPager) {\n\n        mTabStrip.removeAllViews();\n\n \n\n        mViewPager = viewPager;\n\n        if (viewPager != null) {\n\n            viewPager.setOnPageChangeListener(new InternalViewPagerListener());\n\n            populateTabStrip();\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Create a default view to be used for tabs. This is called if a custom tab view is not set via\n\n     * {@link #setCustomTabView(int, int)}.\n\n     */\n\n    protected TextView createDefaultTabView(Context context) {\n\n        TextView textView = new TextView(context);\n\n        textView.setGravity(Gravity.CENTER);\n\n        textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, TAB_VIEW_TEXT_SIZE_SP);\n\n        textView.setTypeface(Typeface.DEFAULT_BOLD);\n\n \n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {\n\n            // If we're running on Honeycomb or newer, then we can use the Theme's\n\n            // selectableItemBackground to ensure that the View has a pressed state\n\n            TypedValue outValue = new TypedValue();\n\n            getContext().getTheme().resolveAttribute(android.R.attr.selectableItemBackground,\n\n                    outValue, true);\n\n            textView.setBackgroundResource(outValue.resourceId);\n\n        }\n\n \n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {\n\n            // If we're running on ICS or newer, enable all-caps to match the Action Bar tab style\n\n            textView.setAllCaps(true);\n\n        }\n\n \n\n        int padding = (int) (TAB_VIEW_PADDING_DIPS * getResources().getDisplayMetrics().density);\n\n        textView.setPadding(padding, padding, padding, padding);\n\n \n\n        return textView;\n\n    }\n\n \n\n    private void populateTabStrip() {\n\n        final PagerAdapter adapter = mViewPager.getAdapter();\n\n        final View.OnClickListener tabClickListener = new TabClickListener();\n\n \n\n        for (int i = 0; i < adapter.getCount(); i++) {\n\n            View tabView = null;\n\n            TextView tabTitleView = null;\n\n \n\n            if (mTabViewLayoutId != 0) {\n\n                // If there is a custom tab view layout id set, try and inflate it\n\n                tabView = LayoutInflater.from(getContext()).inflate(mTabViewLayoutId, mTabStrip,\n\n                        false);\n\n                tabTitleView = (TextView) tabView.findViewById(mTabViewTextViewId);\n\n            }\n\n \n\n            if (tabView == null) {\n\n                tabView = createDefaultTabView(getContext());\n\n            }\n\n \n\n            if (tabTitleView == null && TextView.class.isInstance(tabView)) {\n\n                tabTitleView = (TextView) tabView;\n\n            }\n\n \n\n            tabTitleView.setText(adapter.getPageTitle(i));\n\n            tabView.setOnClickListener(tabClickListener);\n\n \n\n            mTabStrip.addView(tabView);\n\n        }\n\n    }\n\n \n\n    @Override\n\n    protected void onAttachedToWindow() {\n\n        super.onAttachedToWindow();\n\n \n\n        if (mViewPager != null) {\n\n            scrollToTab(mViewPager.getCurrentItem(), 0);\n\n        }\n\n    }\n\n \n\n    private void scrollToTab(int tabIndex, int positionOffset) {\n\n        final int tabStripChildCount = mTabStrip.getChildCount();\n\n        if (tabStripChildCount == 0 || tabIndex < 0 || tabIndex >= tabStripChildCount) {\n\n            return;\n\n        }\n\n \n\n        View selectedChild = mTabStrip.getChildAt(tabIndex);\n\n        if (selectedChild != null) {\n\n            int targetScrollX = selectedChild.getLeft() + positionOffset;\n\n \n\n            if (tabIndex > 0 || positionOffset > 0) {\n\n                // If we're not at the first child and are mid-scroll, make sure we obey the offset\n\n                targetScrollX -= mTitleOffset;\n\n            }\n\n \n\n            scrollTo(targetScrollX, 0);\n\n        }\n\n    }\n\n \n\n    private class InternalViewPagerListener implements ViewPager.OnPageChangeListener {\n\n        private int mScrollState;\n\n \n\n        @Override\n\n        public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\n\n            int tabStripChildCount = mTabStrip.getChildCount();\n\n            if ((tabStripChildCount == 0) || (position < 0) || (position >= tabStripChildCount)) {\n\n                return;\n\n            }\n\n \n\n            mTabStrip.onViewPagerPageChanged(position, positionOffset);\n\n \n\n            View selectedTitle = mTabStrip.getChildAt(position);\n\n            int extraOffset = (selectedTitle != null)\n\n                    ? (int) (positionOffset * selectedTitle.getWidth())\n\n                    : 0;\n\n            scrollToTab(position, extraOffset);\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageScrolled(position, positionOffset,\n\n                        positionOffsetPixels);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void onPageScrollStateChanged(int state) {\n\n            mScrollState = state;\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageScrollStateChanged(state);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void onPageSelected(int position) {\n\n            if (mScrollState == ViewPager.SCROLL_STATE_IDLE) {\n\n                mTabStrip.onViewPagerPageChanged(position, 0f);\n\n                scrollToTab(position, 0);\n\n            }\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageSelected(position);\n\n            }\n\n        }\n\n \n\n    }\n\n \n\n    private class TabClickListener implements View.OnClickListener {\n\n        @Override\n\n        public void onClick(View v) {\n\n            for (int i = 0; i < mTabStrip.getChildCount(); i++) {\n\n                if (v == mTabStrip.getChildAt(i)) {\n\n                    mViewPager.setCurrentItem(i);\n\n                    return;\n\n                }\n\n            }\n\n        }\n\n    }\n\n \n\n}\n  ","SlidingTabStrip.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.view;\n\n \n\nimport android.R;\n\nimport android.content.Context;\n\nimport android.graphics.Canvas;\n\nimport android.graphics.Color;\n\nimport android.graphics.Paint;\n\nimport android.util.AttributeSet;\n\nimport android.util.TypedValue;\n\nimport android.view.View;\n\nimport android.widget.LinearLayout;\n\n \n\nclass SlidingTabStrip extends LinearLayout {\n\n \n\n    private static final int DEFAULT_BOTTOM_BORDER_THICKNESS_DIPS = 2;\n\n    private static final byte DEFAULT_BOTTOM_BORDER_COLOR_ALPHA = 0x26;\n\n    private static final int SELECTED_INDICATOR_THICKNESS_DIPS = 8;\n\n    private static final int DEFAULT_SELECTED_INDICATOR_COLOR = 0xFF33B5E5;\n\n \n\n    private static final int DEFAULT_DIVIDER_THICKNESS_DIPS = 1;\n\n    private static final byte DEFAULT_DIVIDER_COLOR_ALPHA = 0x20;\n\n    private static final float DEFAULT_DIVIDER_HEIGHT = 0.5f;\n\n \n\n    private final int mBottomBorderThickness;\n\n    private final Paint mBottomBorderPaint;\n\n \n\n    private final int mSelectedIndicatorThickness;\n\n    private final Paint mSelectedIndicatorPaint;\n\n \n\n    private final int mDefaultBottomBorderColor;\n\n \n\n    private final Paint mDividerPaint;\n\n    private final float mDividerHeight;\n\n \n\n    private int mSelectedPosition;\n\n    private float mSelectionOffset;\n\n \n\n    private SlidingTabLayout.TabColorizer mCustomTabColorizer;\n\n    private final SimpleTabColorizer mDefaultTabColorizer;\n\n \n\n    SlidingTabStrip(Context context) {\n\n        this(context, null);\n\n    }\n\n \n\n    SlidingTabStrip(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n        setWillNotDraw(false);\n\n \n\n        final float density = getResources().getDisplayMetrics().density;\n\n \n\n        TypedValue outValue = new TypedValue();\n\n        context.getTheme().resolveAttribute(R.attr.colorForeground, outValue, true);\n\n        final int themeForegroundColor =  outValue.data;\n\n \n\n        mDefaultBottomBorderColor = setColorAlpha(themeForegroundColor,\n\n                DEFAULT_BOTTOM_BORDER_COLOR_ALPHA);\n\n \n\n        mDefaultTabColorizer = new SimpleTabColorizer();\n\n        mDefaultTabColorizer.setIndicatorColors(DEFAULT_SELECTED_INDICATOR_COLOR);\n\n        mDefaultTabColorizer.setDividerColors(setColorAlpha(themeForegroundColor,\n\n                DEFAULT_DIVIDER_COLOR_ALPHA));\n\n \n\n        mBottomBorderThickness = (int) (DEFAULT_BOTTOM_BORDER_THICKNESS_DIPS * density);\n\n        mBottomBorderPaint = new Paint();\n\n        mBottomBorderPaint.setColor(mDefaultBottomBorderColor);\n\n \n\n        mSelectedIndicatorThickness = (int) (SELECTED_INDICATOR_THICKNESS_DIPS * density);\n\n        mSelectedIndicatorPaint = new Paint();\n\n \n\n        mDividerHeight = DEFAULT_DIVIDER_HEIGHT;\n\n        mDividerPaint = new Paint();\n\n        mDividerPaint.setStrokeWidth((int) (DEFAULT_DIVIDER_THICKNESS_DIPS * density));\n\n    }\n\n \n\n    void setCustomTabColorizer(SlidingTabLayout.TabColorizer customTabColorizer) {\n\n        mCustomTabColorizer = customTabColorizer;\n\n        invalidate();\n\n    }\n\n \n\n    void setSelectedIndicatorColors(int... colors) {\n\n        // Make sure that the custom colorizer is removed\n\n        mCustomTabColorizer = null;\n\n        mDefaultTabColorizer.setIndicatorColors(colors);\n\n        invalidate();\n\n    }\n\n \n\n    void setDividerColors(int... colors) {\n\n        // Make sure that the custom colorizer is removed\n\n        mCustomTabColorizer = null;\n\n        mDefaultTabColorizer.setDividerColors(colors);\n\n        invalidate();\n\n    }\n\n \n\n    void onViewPagerPageChanged(int position, float positionOffset) {\n\n        mSelectedPosition = position;\n\n        mSelectionOffset = positionOffset;\n\n        invalidate();\n\n    }\n\n \n\n    @Override\n\n    protected void onDraw(Canvas canvas) {\n\n        final int height = getHeight();\n\n        final int childCount = getChildCount();\n\n        final int dividerHeightPx = (int) (Math.min(Math.max(0f, mDividerHeight), 1f) * height);\n\n        final SlidingTabLayout.TabColorizer tabColorizer = mCustomTabColorizer != null\n\n                ? mCustomTabColorizer\n\n                : mDefaultTabColorizer;\n\n \n\n        // Thick colored underline below the current selection\n\n        if (childCount > 0) {\n\n            View selectedTitle = getChildAt(mSelectedPosition);\n\n            int left = selectedTitle.getLeft();\n\n            int right = selectedTitle.getRight();\n\n            int color = tabColorizer.getIndicatorColor(mSelectedPosition);\n\n \n\n            if (mSelectionOffset > 0f && mSelectedPosition < (getChildCount() - 1)) {\n\n                int nextColor = tabColorizer.getIndicatorColor(mSelectedPosition + 1);\n\n                if (color != nextColor) {\n\n                    color = blendColors(nextColor, color, mSelectionOffset);\n\n                }\n\n \n\n                // Draw the selection partway between the tabs\n\n                View nextTitle = getChildAt(mSelectedPosition + 1);\n\n                left = (int) (mSelectionOffset * nextTitle.getLeft() +\n\n                        (1.0f - mSelectionOffset) * left);\n\n                right = (int) (mSelectionOffset * nextTitle.getRight() +\n\n                        (1.0f - mSelectionOffset) * right);\n\n            }\n\n \n\n            mSelectedIndicatorPaint.setColor(color);\n\n \n\n            canvas.drawRect(left, height - mSelectedIndicatorThickness, right,\n\n                    height, mSelectedIndicatorPaint);\n\n        }\n\n \n\n        // Thin underline along the entire bottom edge\n\n        canvas.drawRect(0, height - mBottomBorderThickness, getWidth(), height, mBottomBorderPaint);\n\n \n\n        // Vertical separators between the titles\n\n        int separatorTop = (height - dividerHeightPx) / 2;\n\n        for (int i = 0; i < childCount - 1; i++) {\n\n            View child = getChildAt(i);\n\n            mDividerPaint.setColor(tabColorizer.getDividerColor(i));\n\n            canvas.drawLine(child.getRight(), separatorTop, child.getRight(),\n\n                    separatorTop + dividerHeightPx, mDividerPaint);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Set the alpha value of the {@code color} to be the given {@code alpha} value.\n\n     */\n\n    private static int setColorAlpha(int color, byte alpha) {\n\n        return Color.argb(alpha, Color.red(color), Color.green(color), Color.blue(color));\n\n    }\n\n \n\n    /**\n\n     * Blend {@code color1} and {@code color2} using the given ratio.\n\n     *\n\n     * @param ratio of which to blend. 1.0 will return {@code color1}, 0.5 will give an even blend,\n\n     *              0.0 will return {@code color2}.\n\n     */\n\n    private static int blendColors(int color1, int color2, float ratio) {\n\n        final float inverseRation = 1f - ratio;\n\n        float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRation);\n\n        float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRation);\n\n        float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRation);\n\n        return Color.rgb((int) r, (int) g, (int) b);\n\n    }\n\n \n\n    private static class SimpleTabColorizer implements SlidingTabLayout.TabColorizer {\n\n        private int[] mIndicatorColors;\n\n        private int[] mDividerColors;\n\n \n\n        @Override\n\n        public final int getIndicatorColor(int position) {\n\n            return mIndicatorColors[position % mIndicatorColors.length];\n\n        }\n\n \n\n        @Override\n\n        public final int getDividerColor(int position) {\n\n            return mDividerColors[position % mDividerColors.length];\n\n        }\n\n \n\n        void setIndicatorColors(int... colors) {\n\n            mIndicatorColors = colors;\n\n        }\n\n \n\n        void setDividerColors(int... colors) {\n\n            mDividerColors = colors;\n\n        }\n\n    }\n\n}\n  "}}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.basictransition\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk android:minSdkVersion=\"19\" android:targetSdkVersion=\"19\" />\n\n \n\n    <application\n\n        android:allowBackup=\"true\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:label=\"@string/app_name\"\n\n        android:theme=\"@style/AppTheme\" >\n\n        <activity\n\n            android:name=\".MainActivity\"\n\n            android:label=\"@string/app_name\" >\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n \n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n</manifest>\n  "},"BorderlessButtons":{"res":{"drawable-hdpi":{"ic_action_delete.png":"http://developer.android.com//samples/BorderlessButtons/res/drawable-hdpi/ic_action_delete.png","ic_launcher.png":"http://developer.android.com//samples/BorderlessButtons/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com//samples/BorderlessButtons/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_action_delete.png":"http://developer.android.com//samples/BorderlessButtons/res/drawable-mdpi/ic_action_delete.png","ic_launcher.png":"http://developer.android.com//samples/BorderlessButtons/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_action_delete.png":"http://developer.android.com//samples/BorderlessButtons/res/drawable-xhdpi/ic_action_delete.png","ic_launcher.png":"http://developer.android.com//samples/BorderlessButtons/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com//samples/BorderlessButtons/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleMessageTile\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n            android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n            android:text=\"@string/intro_message\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n  ","list_item.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<!--\n\n    For list items that contain secondary actions (in this case, 'delete'),\n\n    it's important to use dividers to distinguish the primary touch target from\n\n    the secondary action. This is done using android:showDividers and its\n\n    related attributes.\n\n \n\n    The android:dividerPadding attribute insets the divider line by the given\n\n    amount on each side (in this case, top and bottom). Divider padding helps\n\n    establish visual hierarchy when several dividers are used in a screen. In\n\n    this case, the padding helps separate this vertical divider from horizontal\n\n    list item separators in the main ListView, and establishes a stronger\n\n    relationship between the delete action and the primary target to its left.\n\n-->\n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:orientation=\"horizontal\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"wrap_content\"\n\n    android:minHeight=\"?android:listPreferredItemHeight\"\n\n    android:divider=\"?android:dividerVertical\"\n\n    android:dividerPadding=\"8dp\"\n\n    android:showDividers=\"middle\">\n\n \n\n    <!--\n\n        Any view or view group can become interactive by simply setting the\n\n        android:clickable and android:focusable attributes to true.\n\n \n\n        When doing this, make sure to provide adequate touch feedback by also\n\n        setting the view background to ?android:selectableItemBackground. When\n\n        using the Holo theme, this drawable is transparent by default, but\n\n        changes to a translucent color overlay when the view is pressed or\n\n        focused.\n\n    -->\n\n    <LinearLayout android:id=\"@+id/primary_target\"\n\n        android:layout_width=\"0dp\"\n\n        android:layout_height=\"match_parent\"\n\n        android:layout_weight=\"1\"\n\n        android:orientation=\"vertical\"\n\n        android:paddingLeft=\"?android:listPreferredItemPaddingLeft\"\n\n        android:paddingRight=\"?android:listPreferredItemPaddingRight\"\n\n        android:clickable=\"true\"\n\n        android:focusable=\"true\"\n\n        android:gravity=\"center_vertical\"\n\n        android:background=\"?android:selectableItemBackground\">\n\n \n\n        <TextView style=\"?android:textAppearanceListItemSmall\"\n\n            android:id=\"@android:id/text1\"\n\n            android:layout_width=\"wrap_content\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:text=\"@string/dummy_title\" />\n\n \n\n        <TextView style=\"?android:textAppearanceSmall\"\n\n            android:id=\"@android:id/text2\"\n\n            android:layout_width=\"wrap_content\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:text=\"@string/dummy_subtitle\" />\n\n \n\n    </LinearLayout>\n\n \n\n    <!--\n\n        When using the Holo theme, setting a Button or ImageButton to\n\n        ?android:borderlessButtonStyle removes its border and sets the\n\n        background to ?android:selectableItemBackground, as described above.\n\n    -->\n\n    <ImageButton android:id=\"@+id/secondary_action\"\n\n        style=\"?android:borderlessButtonStyle\"\n\n        android:layout_width=\"@dimen/standard_touch_target_size\"\n\n        android:layout_height=\"match_parent\"\n\n        android:src=\"@drawable/ic_action_delete\"\n\n        android:contentDescription=\"@string/delete_content_description\" />\n\n \n\n</LinearLayout>\n  ","sample_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<!--\n\n    The top-level LinearLayout uses a horizontal divider to visually\n\n    distinguish the top description box, list, and bottom button bar.\n\n \n\n    android:showDividers=\"middle\" draws dividers between each child view and\n\n    android:divider=\"?android:dividerHorizontal\" indicates that the standard\n\n    horizontal system divider (set in the activity's theme) should be used to\n\n    draw the divider.\n\n-->\n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:orientation=\"vertical\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:divider=\"?android:dividerHorizontal\"\n\n    android:showDividers=\"middle\">\n\n \n\n    <TextView style=\"@style/Widget.DescriptionBar\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:text=\"@string/intro_message\" />\n\n \n\n    <!--\n\n        Remember to use padding on your ListViews to adhere to the standard\n\n        metrics described in the Android Design guidelines. When doing so,\n\n        you should set the android:scrollbarStyle such that the scrollbar\n\n        doesn'isn't inset.\n\n    -->\n\n    <ListView android:id=\"@android:id/list\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"0dp\"\n\n        android:layout_weight=\"1\"\n\n        android:paddingLeft=\"@dimen/page_margin\"\n\n        android:paddingRight=\"@dimen/page_margin\"\n\n        android:scrollbarStyle=\"outsideOverlay\" />\n\n \n\n    <!--\n\n        When using the Holo theme (setting your activity or app theme to\n\n        Theme.Holo or one of its descendants), a LinearLayout with the\n\n        ?android:buttonBarStyle will draw dividers (with padding) between\n\n        buttons.\n\n    -->\n\n    <LinearLayout style=\"?android:buttonBarStyle\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:orientation=\"horizontal\">\n\n \n\n        <!--\n\n            Make sure to apply the ?android:buttonBarStyle to each button\n\n            in the button bar.\n\n \n\n            In the Holo theme, this style is very similar to\n\n            ?android:borderlessButtonStyle, but designed for use specifically\n\n            in horizontal button bars.\n\n        -->\n\n        <Button style=\"?android:buttonBarButtonStyle\"\n\n            android:id=\"@+id/cancel_button\"\n\n            android:layout_width=\"0dp\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_weight=\"1\"\n\n            android:text=\"@string/cancel\" />\n\n \n\n        <Button style=\"?android:buttonBarButtonStyle\"\n\n            android:id=\"@+id/ok_button\"\n\n            android:layout_width=\"0dp\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_weight=\"1\"\n\n            android:text=\"@string/ok\" />\n\n \n\n    </LinearLayout>\n\n \n\n</LinearLayout>\n  "},"menu":{"main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item\n\n        android:id=\"@+id/docs_link\"\n\n        android:title=\"@string/docs_link_title\"\n\n        android:showAsAction=\"never\" />\n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">BorderlessButtons</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n                This sample demonstrates the use of borderless buttons, bottom button bars\n\n                (OK and Cancel) and dividers to establish visual structure.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <dimen name=\"standard_touch_target_size\">48dp</dimen>\n\n \n\n    <!-- Meta-dimension that switches on screen size -->\n\n \n\n    <dimen name=\"page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","strings.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n    <string name=\"cancel\">Cancel</string>\n\n    <string name=\"ok\">OK</string>\n\n \n\n    <string name=\"dummy_title\">Dummy title</string>\n\n    <string name=\"dummy_subtitle\">Dummy subtitle</string>\n\n \n\n    <string name=\"delete_content_description\">Delete</string>\n\n \n\n    <string name=\"touched_primary_message\">Touched primary list item target.</string>\n\n    <string name=\"touched_secondary_message\">Touched secondary list item target (delete).</string>\n\n \n\n    <string name=\"docs_link_title\">Design docs: borderless buttons</string>\n\n</resources>\n  ","styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget.DescriptionBar\">\n\n        <item name=\"android:background\">#fb3</item>\n\n        <item name=\"android:paddingTop\">@dimen/margin_medium</item>\n\n        <item name=\"android:paddingBottom\">@dimen/margin_medium</item>\n\n        <item name=\"android:paddingLeft\">@dimen/page_margin</item>\n\n        <item name=\"android:paddingRight\">@dimen/page_margin</item>\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.borderlessbuttons":{"MainActivity.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.borderlessbuttons;\n\n \n\nimport android.app.ListActivity;\n\nimport android.content.ActivityNotFoundException;\n\nimport android.content.Intent;\n\nimport android.net.Uri;\n\nimport android.os.Bundle;\n\nimport android.view.Menu;\n\nimport android.view.MenuItem;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.BaseAdapter;\n\nimport android.widget.Toast;\n\n \n\n/**\n\n * This activity demonstrates the <b>borderless button</b> styling from the Holo visual language.\n\n * The most interesting bits in this sample are in the layout files (res/layout/).\n\n * <p>\n\n * See <a href=\"http://developer.android.com/design/building-blocks/buttons.html#borderless\">\n\n * borderless buttons</a> at the Android Design guide for a discussion of this visual style.\n\n */\n\npublic class MainActivity extends ListActivity {\n\n    private static final Uri DOCS_URI = Uri.parse(\n\n            \"http://developer.android.com/design/building-blocks/buttons.html#borderless\");\n\n \n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.sample_main);\n\n \n\n        setListAdapter(mListAdapter);\n\n \n\n        findViewById(R.id.cancel_button).setOnClickListener(new View.OnClickListener() {\n\n            @Override\n\n            public void onClick(View view) {\n\n                finish();\n\n            }\n\n        });\n\n \n\n        findViewById(R.id.ok_button).setOnClickListener(new View.OnClickListener() {\n\n            @Override\n\n            public void onClick(View view) {\n\n                finish();\n\n            }\n\n        });\n\n    }\n\n \n\n    private BaseAdapter mListAdapter = new BaseAdapter() {\n\n        @Override\n\n        public int getCount() {\n\n            return 10;\n\n        }\n\n \n\n        @Override\n\n        public Object getItem(int position) {\n\n            return null;\n\n        }\n\n \n\n        @Override\n\n        public long getItemId(int position) {\n\n            return position + 1;\n\n        }\n\n \n\n        @Override\n\n        public View getView(int position, View convertView, ViewGroup container) {\n\n            if (convertView == null) {\n\n                convertView = getLayoutInflater().inflate(R.layout.list_item, container, false);\n\n            }\n\n \n\n            // Because the list item contains multiple touch targets, you should not override\n\n            // onListItemClick. Instead, set a click listener for each target individually.\n\n \n\n            convertView.findViewById(R.id.primary_target).setOnClickListener(\n\n                    new View.OnClickListener() {\n\n                        @Override\n\n                        public void onClick(View view) {\n\n                            Toast.makeText(MainActivity.this,\n\n                                    R.string.touched_primary_message,\n\n                                    Toast.LENGTH_SHORT).show();\n\n                        }\n\n                    });\n\n \n\n            convertView.findViewById(R.id.secondary_action).setOnClickListener(\n\n                    new View.OnClickListener() {\n\n                        @Override\n\n                        public void onClick(View view) {\n\n                            Toast.makeText(MainActivity.this,\n\n                                    R.string.touched_secondary_message,\n\n                                    Toast.LENGTH_SHORT).show();\n\n                        }\n\n                    });\n\n            return convertView;\n\n        }\n\n    };\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        super.onCreateOptionsMenu(menu);\n\n        getMenuInflater().inflate(R.menu.main, menu);\n\n        return true;\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch (item.getItemId()) {\n\n            case R.id.docs_link:\n\n                try {\n\n                    startActivity(new Intent(Intent.ACTION_VIEW, DOCS_URI));\n\n                } catch (ActivityNotFoundException ignored) {\n\n                }\n\n                return true;\n\n        }\n\n        return super.onOptionsItemSelected(item);\n\n    }\n\n}\n  "},"com.example.android.common.logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.borderlessbuttons\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <!--\n\n      This sample requires API 11 for use of theme attributes such as ?android:buttonBarStyle\n\n      and ?android:borderlessButtonStyle, as well as LinearLayout's android:showDividers attribute.\n\n      A similar effect can be achieved by setting a clickable view's background to\n\n      ?android:selectableItemBackground.\n\n \n\n      This sample requires API 14 for use of theme attributes such as\n\n      ?android:listPreferredItemPaddingLeft.\n\n    -->\n\n    <uses-sdk android:minSdkVersion=\"14\" android:targetSdkVersion=\"17\" />\n\n \n\n    <application android:label=\"@string/app_name\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:theme=\"@style/Theme.Sample\"\n\n        android:allowBackup=\"true\">\n\n \n\n        <activity android:name=\".MainActivity\"\n\n            android:label=\"@string/app_name\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n \n\n    </application>\n\n \n\n</manifest>\n  "},"CustomChoiceList":{"res":{"color":{"hideable_text_color.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<!--\n\n    This color state list changes from gray to blue depending on its state (checked or not checked).\n\n-->\n\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:state_checked=\"false\" android:color=\"#6000\" />\n\n    <item android:color=\"#09c\" />\n\n</selector>\n  "},"drawable":{"ic_hideable_item.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n   \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n   \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n   \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<!--\n\n    This state list drawable changes from an outline of an eye (ic_hideable_item_unchecked) to a\n\n    blue eye with iris (ic_hideable_item_checked) depending on its state (checked or not checked).\n\n-->\n\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:state_checked=\"false\" android:drawable=\"@drawable/ic_hideable_item_unchecked\" />\n\n    <item android:drawable=\"@drawable/ic_hideable_item_checked\" />\n\n</selector>\n  "},"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com//samples/CustomChoiceList/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com//samples/CustomChoiceList/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com//samples/CustomChoiceList/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_hideable_item_checked.png":"http://developer.android.com//samples/CustomChoiceList/res/drawable-xhdpi/ic_hideable_item_checked.png","ic_hideable_item_unchecked.png":"http://developer.android.com//samples/CustomChoiceList/res/drawable-xhdpi/ic_hideable_item_unchecked.png","ic_launcher.png":"http://developer.android.com//samples/CustomChoiceList/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com//samples/CustomChoiceList/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleMessageTile\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n            android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n            android:text=\"@string/intro_message\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n  ","list_item.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<!--\n\n    The ListView from sample_main.xml has a choiceMode set, meaning that when a user\n\n    selects a list item, the ListView will set the state for that item's root view\n\n    (this CheckableLinearLayout) to \"checked\". Note that this requires that the root view\n\n    implements the Checkable interface. Once the root view is checked, any children that\n\n    have the duplicateParentState attribute set will inherit this \"checked\" state.\n\n-->\n\n<com.example.android.customchoicelist.CheckableLinearLayout\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:orientation=\"horizontal\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:paddingLeft=\"8dp\"\n\n    android:paddingRight=\"8dp\"\n\n    android:minHeight=\"?android:listPreferredItemHeight\"\n\n    android:gravity=\"center_vertical\">\n\n \n\n    <!--\n\n        The duplicateParentState attribute on this TextView, along with the color state list\n\n        used in the textColor attribute causes its text color to change when its parent\n\n        is checked or unchecked.\n\n    -->\n\n    <TextView android:id=\"@android:id/text1\"\n\n        android:duplicateParentState=\"true\"\n\n        android:layout_width=\"0dp\"\n\n        android:layout_weight=\"1\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:textAppearance=\"?android:textAppearanceMedium\"\n\n        android:textColor=\"@color/hideable_text_color\" />\n\n \n\n    <!--\n\n        The duplicateParentState attribute on this ImageView, along with the state list\n\n        drawable in the src attribute causes its image to change when its parent\n\n        is checked or unchecked.\n\n \n\n        To use the standard radio or checkmark image, set the src to\n\n        ?android:listChoiceIndicatorMultiple or ?android:listChoiceIndicatorSingle. These\n\n        are system theme attributes that reference a state list drawable.\n\n    -->\n\n    <ImageView android:src=\"@drawable/ic_hideable_item\"\n\n        android:duplicateParentState=\"true\"\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:layout_marginLeft=\"16dp\" />\n\n \n\n</com.example.android.customchoicelist.CheckableLinearLayout>\n  ","sample_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\"\n\n    android:showDividers=\"middle\"\n\n    android:divider=\"?android:dividerHorizontal\">\n\n \n\n    <TextView style=\"@style/Widget.DescriptionBar\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:text=\"@string/intro_message\" />\n\n \n\n    <!--\n\n        When a ListView has a choiceMode set, it will allow users to \"choose\"\n\n        one or more items. The framework provides default list item layouts\n\n        that show standard radio buttons or check boxes next to a\n\n        single line of text:\n\n \n\n        android.R.layout.simple_list_item_single_choice and\n\n        android.R.layout.simple_list_item_multiple_choice.\n\n \n\n        In some cases, you may want to customize this layout. When doing so,\n\n        the root view must implement the Checkable interface.\n\n \n\n        Lastly, remember to use padding on your ListViews to adhere to the standard\n\n        metrics described in the Android Design guidelines. When doing so,\n\n        you should set the android:scrollbarStyle such that the scrollbar\n\n        doesn'isn't inset.\n\n    -->\n\n    <ListView android:id=\"@android:id/list\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"0dp\"\n\n        android:layout_weight=\"1\"\n\n        android:paddingLeft=\"@dimen/page_margin\"\n\n        android:paddingRight=\"@dimen/page_margin\"\n\n        android:scrollbarStyle=\"outsideOverlay\"\n\n        android:choiceMode=\"multipleChoice\" />\n\n</LinearLayout>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">CustomChoiceList</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n                This sample demonstrates how to create custom checkable layouts, for use with ListView\\'s choiceMode\n\n                attribute.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Meta-dimension that switches on screen size -->\n\n \n\n    <dimen name=\"page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n    <style name=\"Widget.DescriptionBar\">\n\n        <item name=\"android:background\">#fb3</item>\n\n        <item name=\"android:paddingTop\">@dimen/margin_medium</item>\n\n        <item name=\"android:paddingBottom\">@dimen/margin_medium</item>\n\n        <item name=\"android:paddingLeft\">@dimen/page_margin</item>\n\n        <item name=\"android:paddingRight\">@dimen/page_margin</item>\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.common.logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "},"com.example.android.customchoicelist":{"CheckableLinearLayout.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.customchoicelist;\n\n \n\nimport android.content.Context;\n\nimport android.util.AttributeSet;\n\nimport android.util.Log;\n\nimport android.view.View;\n\nimport android.widget.Checkable;\n\nimport android.widget.LinearLayout;\n\n \n\n/**\n\n * This is a simple wrapper for {@link android.widget.LinearLayout} that implements the {@link android.widget.Checkable}\n\n * interface by keeping an internal 'checked' state flag.\n\n * <p>\n\n * This can be used as the root view for a custom list item layout for\n\n * {@link android.widget.AbsListView} elements with a\n\n * {@link android.widget.AbsListView#setChoiceMode(int) choiceMode} set.\n\n */\n\npublic class CheckableLinearLayout extends LinearLayout implements Checkable {\n\n    private static final int[] CHECKED_STATE_SET = {android.R.attr.state_checked};\n\n \n\n    private boolean mChecked = false;\n\n \n\n    public CheckableLinearLayout(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public boolean isChecked() {\n\n        return mChecked;\n\n    }\n\n \n\n    public void setChecked(boolean b) {\n\n        if (b != mChecked) {\n\n            mChecked = b;\n\n            refreshDrawableState();\n\n        }\n\n    }\n\n \n\n    public void toggle() {\n\n        setChecked(!mChecked);\n\n    }\n\n \n\n    @Override\n\n    public int[] onCreateDrawableState(int extraSpace) {\n\n        final int[] drawableState = super.onCreateDrawableState(extraSpace + 1);\n\n        if (isChecked()) {\n\n            mergeDrawableStates(drawableState, CHECKED_STATE_SET);\n\n        }\n\n        return drawableState;\n\n    }\n\n}\n  ","Cheeses.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.customchoicelist;\n\n \n\n/**\n\n * Dummy data.\n\n */\n\npublic class Cheeses {\n\n    public static final String[] CHEESES = {\n\n            \"Abbaye de Belloc\", \"Abbaye du Mont des Cats\", \"Abertam\", \"Abondance\", \"Ackawi\",\n\n            \"Acorn\", \"Adelost\", \"Affidelice au Chablis\", \"Afuega'l Pitu\", \"Airag\", \"Airedale\",\n\n            \"Aisy Cendre\", \"Allgauer Emmentaler\", \"Alverca\", \"Ambert\", \"American Cheese\",\n\n            \"Ami du Chambertin\", \"Anejo Enchilado\", \"Anneau du Vic-Bilh\", \"Anthoriro\", \"Appenzell\",\n\n            \"Aragon\", \"Ardi Gasna\", \"Ardrahan\", \"Armenian String\", \"Aromes au Gene de Marc\",\n\n            \"Asadero\", \"Asiago\", \"Aubisque Pyrenees\", \"Autun\", \"Avaxtskyr\", \"Baby Swiss\",\n\n            \"Babybel\", \"Baguette Laonnaise\", \"Bakers\", \"Baladi\", \"Balaton\", \"Bandal\", \"Banon\",\n\n            \"Barry's Bay Cheddar\", \"Basing\", \"Basket Cheese\", \"Bath Cheese\", \"Bavarian Bergkase\",\n\n            \"Baylough\", \"Beaufort\", \"Beauvoorde\", \"Beenleigh Blue\", \"Beer Cheese\", \"Bel Paese\",\n\n            \"Bergader\", \"Bergere Bleue\", \"Berkswell\", \"Beyaz Peynir\", \"Bierkase\", \"Bishop Kennedy\",\n\n            \"Blarney\", \"Bleu d'Auvergne\", \"Bleu de Gex\", \"Bleu de Laqueuille\",\n\n            \"Bleu de Septmoncel\", \"Bleu Des Causses\", \"Blue\", \"Blue Castello\", \"Blue Rathgore\",\n\n            \"Blue Vein (Australian)\", \"Blue Vein Cheeses\", \"Bocconcini\", \"Bocconcini (Australian)\",\n\n            \"Boeren Leidenkaas\", \"Bonchester\", \"Bosworth\", \"Bougon\", \"Boule Du Roves\",\n\n            \"Boulette d'Avesnes\", \"Boursault\", \"Boursin\", \"Bouyssou\", \"Bra\", \"Braudostur\",\n\n            \"Breakfast Cheese\", \"Brebis du Lavort\", \"Brebis du Lochois\", \"Brebis du Puyfaucon\",\n\n            \"Bresse Bleu\", \"Brick\", \"Brie\", \"Brie de Meaux\", \"Brie de Melun\", \"Brillat-Savarin\",\n\n            \"Brin\", \"Brin d' Amour\", \"Brin d'Amour\", \"Brinza (Burduf Brinza)\",\n\n            \"Briquette de Brebis\", \"Briquette du Forez\", \"Broccio\", \"Broccio Demi-Affine\",\n\n            \"Brousse du Rove\", \"Bruder Basil\", \"Brusselae Kaas (Fromage de Bruxelles)\", \"Bryndza\",\n\n            \"Buchette d'Anjou\", \"Buffalo\", \"Burgos\", \"Butte\", \"Butterkase\", \"Button (Innes)\",\n\n            \"Buxton Blue\", \"Cabecou\", \"Caboc\", \"Cabrales\", \"Cachaille\", \"Caciocavallo\", \"Caciotta\",\n\n            \"Caerphilly\", \"Cairnsmore\", \"Calenzana\", \"Cambazola\", \"Camembert de Normandie\",\n\n            \"Canadian Cheddar\", \"Canestrato\", \"Cantal\", \"Caprice des Dieux\", \"Capricorn Goat\",\n\n            \"Capriole Banon\", \"Carre de l'Est\", \"Casciotta di Urbino\", \"Cashel Blue\", \"Castellano\",\n\n            \"Castelleno\", \"Castelmagno\", \"Castelo Branco\", \"Castigliano\", \"Cathelain\",\n\n            \"Celtic Promise\", \"Cendre d'Olivet\", \"Cerney\", \"Chabichou\", \"Chabichou du Poitou\",\n\n            \"Chabis de Gatine\", \"Chaource\", \"Charolais\", \"Chaumes\", \"Cheddar\",\n\n            \"Cheddar Clothbound\", \"Cheshire\", \"Chevres\", \"Chevrotin des Aravis\", \"Chontaleno\",\n\n            \"Civray\", \"Coeur de Camembert au Calvados\", \"Coeur de Chevre\", \"Colby\", \"Cold Pack\",\n\n            \"Comte\", \"Coolea\", \"Cooleney\", \"Coquetdale\", \"Corleggy\", \"Cornish Pepper\",\n\n            \"Cotherstone\", \"Cotija\", \"Cottage Cheese\", \"Cottage Cheese (Australian)\",\n\n            \"Cougar Gold\", \"Coulommiers\", \"Coverdale\", \"Crayeux de Roncq\", \"Cream Cheese\",\n\n            \"Cream Havarti\", \"Crema Agria\", \"Crema Mexicana\", \"Creme Fraiche\", \"Crescenza\",\n\n            \"Croghan\", \"Crottin de Chavignol\", \"Crottin du Chavignol\", \"Crowdie\", \"Crowley\",\n\n            \"Cuajada\", \"Curd\", \"Cure Nantais\", \"Curworthy\", \"Cwmtawe Pecorino\",\n\n            \"Cypress Grove Chevre\", \"Danablu (Danish Blue)\", \"Danbo\", \"Danish Fontina\",\n\n            \"Daralagjazsky\", \"Dauphin\", \"Delice des Fiouves\", \"Denhany Dorset Drum\", \"Derby\",\n\n            \"Dessertnyj Belyj\", \"Devon Blue\", \"Devon Garland\", \"Dolcelatte\", \"Doolin\",\n\n            \"Doppelrhamstufel\", \"Dorset Blue Vinney\", \"Double Gloucester\", \"Double Worcester\",\n\n            \"Dreux a la Feuille\", \"Dry Jack\", \"Duddleswell\", \"Dunbarra\", \"Dunlop\", \"Dunsyre Blue\",\n\n            \"Duroblando\", \"Durrus\", \"Dutch Mimolette (Commissiekaas)\", \"Edam\", \"Edelpilz\",\n\n            \"Emental Grand Cru\", \"Emlett\", \"Emmental\", \"Epoisses de Bourgogne\", \"Esbareich\",\n\n            \"Esrom\", \"Etorki\", \"Evansdale Farmhouse Brie\", \"Evora De L'Alentejo\", \"Exmoor Blue\",\n\n            \"Explorateur\", \"Feta\", \"Feta (Australian)\", \"Figue\", \"Filetta\", \"Fin-de-Siecle\",\n\n            \"Finlandia Swiss\", \"Finn\", \"Fiore Sardo\", \"Fleur du Maquis\", \"Flor de Guia\",\n\n            \"Flower Marie\", \"Folded\", \"Folded cheese with mint\", \"Fondant de Brebis\",\n\n            \"Fontainebleau\", \"Fontal\", \"Fontina Val d'Aosta\", \"Formaggio di capra\", \"Fougerus\",\n\n            \"Four Herb Gouda\", \"Fourme d' Ambert\", \"Fourme de Haute Loire\", \"Fourme de Montbrison\",\n\n            \"Fresh Jack\", \"Fresh Mozzarella\", \"Fresh Ricotta\", \"Fresh Truffles\", \"Fribourgeois\",\n\n            \"Friesekaas\", \"Friesian\", \"Friesla\", \"Frinault\", \"Fromage a Raclette\", \"Fromage Corse\",\n\n            \"Fromage de Montagne de Savoie\", \"Fromage Frais\", \"Fruit Cream Cheese\",\n\n            \"Frying Cheese\", \"Fynbo\", \"Gabriel\", \"Galette du Paludier\", \"Galette Lyonnaise\",\n\n            \"Galloway Goat's Milk Gems\", \"Gammelost\", \"Gaperon a l'Ail\", \"Garrotxa\", \"Gastanberra\",\n\n            \"Geitost\", \"Gippsland Blue\", \"Gjetost\", \"Gloucester\", \"Golden Cross\", \"Gorgonzola\",\n\n            \"Gornyaltajski\", \"Gospel Green\", \"Gouda\", \"Goutu\", \"Gowrie\", \"Grabetto\", \"Graddost\",\n\n            \"Grafton Village Cheddar\", \"Grana\", \"Grana Padano\", \"Grand Vatel\",\n\n            \"Grataron d' Areches\", \"Gratte-Paille\", \"Graviera\", \"Greuilh\", \"Greve\",\n\n            \"Gris de Lille\", \"Gruyere\", \"Gubbeen\", \"Guerbigny\", \"Halloumi\",\n\n            \"Halloumy (Australian)\", \"Haloumi-Style Cheese\", \"Harbourne Blue\", \"Havarti\",\n\n            \"Heidi Gruyere\", \"Hereford Hop\", \"Herrgardsost\", \"Herriot Farmhouse\", \"Herve\",\n\n            \"Hipi Iti\", \"Hubbardston Blue Cow\", \"Hushallsost\", \"Iberico\", \"Idaho Goatster\",\n\n            \"Idiazabal\", \"Il Boschetto al Tartufo\", \"Ile d'Yeu\", \"Isle of Mull\", \"Jarlsberg\",\n\n            \"Jermi Tortes\", \"Jibneh Arabieh\", \"Jindi Brie\", \"Jubilee Blue\", \"Juustoleipa\",\n\n            \"Kadchgall\", \"Kaseri\", \"Kashta\", \"Kefalotyri\", \"Kenafa\", \"Kernhem\", \"Kervella Affine\",\n\n            \"Kikorangi\", \"King Island Cape Wickham Brie\", \"King River Gold\", \"Klosterkaese\",\n\n            \"Knockalara\", \"Kugelkase\", \"L'Aveyronnais\", \"L'Ecir de l'Aubrac\", \"La Taupiniere\",\n\n            \"La Vache Qui Rit\", \"Laguiole\", \"Lairobell\", \"Lajta\", \"Lanark Blue\", \"Lancashire\",\n\n            \"Langres\", \"Lappi\", \"Laruns\", \"Lavistown\", \"Le Brin\", \"Le Fium Orbo\", \"Le Lacandou\",\n\n            \"Le Roule\", \"Leafield\", \"Lebbene\", \"Leerdammer\", \"Leicester\", \"Leyden\", \"Limburger\",\n\n            \"Lincolnshire Poacher\", \"Lingot Saint Bousquet d'Orb\", \"Liptauer\", \"Little Rydings\",\n\n            \"Livarot\", \"Llanboidy\", \"Llanglofan Farmhouse\", \"Loch Arthur Farmhouse\",\n\n            \"Loddiswell Avondale\", \"Longhorn\", \"Lou Palou\", \"Lou Pevre\", \"Lyonnais\", \"Maasdam\",\n\n            \"Macconais\", \"Mahoe Aged Gouda\", \"Mahon\", \"Malvern\", \"Mamirolle\", \"Manchego\",\n\n            \"Manouri\", \"Manur\", \"Marble Cheddar\", \"Marbled Cheeses\", \"Maredsous\", \"Margotin\",\n\n            \"Maribo\", \"Maroilles\", \"Mascares\", \"Mascarpone\", \"Mascarpone (Australian)\",\n\n            \"Mascarpone Torta\", \"Matocq\", \"Maytag Blue\", \"Meira\", \"Menallack Farmhouse\",\n\n            \"Menonita\", \"Meredith Blue\", \"Mesost\", \"Metton (Cancoillotte)\", \"Meyer Vintage Gouda\",\n\n            \"Mihalic Peynir\", \"Milleens\", \"Mimolette\", \"Mine-Gabhar\", \"Mini Baby Bells\", \"Mixte\",\n\n            \"Molbo\", \"Monastery Cheeses\", \"Mondseer\", \"Mont D'or Lyonnais\", \"Montasio\",\n\n            \"Monterey Jack\", \"Monterey Jack Dry\", \"Morbier\", \"Morbier Cru de Montagne\",\n\n            \"Mothais a la Feuille\", \"Mozzarella\", \"Mozzarella (Australian)\",\n\n            \"Mozzarella di Bufala\", \"Mozzarella Fresh, in water\", \"Mozzarella Rolls\", \"Munster\",\n\n            \"Murol\", \"Mycella\", \"Myzithra\", \"Naboulsi\", \"Nantais\", \"Neufchatel\",\n\n            \"Neufchatel (Australian)\", \"Niolo\", \"Nokkelost\", \"Northumberland\", \"Oaxaca\",\n\n            \"Olde York\", \"Olivet au Foin\", \"Olivet Bleu\", \"Olivet Cendre\",\n\n            \"Orkney Extra Mature Cheddar\", \"Orla\", \"Oschtjepka\", \"Ossau Fermier\", \"Ossau-Iraty\",\n\n            \"Oszczypek\", \"Oxford Blue\", \"P'tit Berrichon\", \"Palet de Babligny\", \"Paneer\", \"Panela\",\n\n            \"Pannerone\", \"Pant ys Gawn\", \"Parmesan (Parmigiano)\", \"Parmigiano Reggiano\",\n\n            \"Pas de l'Escalette\", \"Passendale\", \"Pasteurized Processed\", \"Pate de Fromage\",\n\n            \"Patefine Fort\", \"Pave d'Affinois\", \"Pave d'Auge\", \"Pave de Chirac\", \"Pave du Berry\",\n\n            \"Pecorino\", \"Pecorino in Walnut Leaves\", \"Pecorino Romano\", \"Peekskill Pyramid\",\n\n            \"Pelardon des Cevennes\", \"Pelardon des Corbieres\", \"Penamellera\", \"Penbryn\",\n\n            \"Pencarreg\", \"Perail de Brebis\", \"Petit Morin\", \"Petit Pardou\", \"Petit-Suisse\",\n\n            \"Picodon de Chevre\", \"Picos de Europa\", \"Piora\", \"Pithtviers au Foin\",\n\n            \"Plateau de Herve\", \"Plymouth Cheese\", \"Podhalanski\", \"Poivre d'Ane\", \"Polkolbin\",\n\n            \"Pont l'Eveque\", \"Port Nicholson\", \"Port-Salut\", \"Postel\", \"Pouligny-Saint-Pierre\",\n\n            \"Pourly\", \"Prastost\", \"Pressato\", \"Prince-Jean\", \"Processed Cheddar\", \"Provolone\",\n\n            \"Provolone (Australian)\", \"Pyengana Cheddar\", \"Pyramide\", \"Quark\",\n\n            \"Quark (Australian)\", \"Quartirolo Lombardo\", \"Quatre-Vents\", \"Quercy Petit\",\n\n            \"Queso Blanco\", \"Queso Blanco con Frutas --Pina y Mango\", \"Queso de Murcia\",\n\n            \"Queso del Montsec\", \"Queso del Tietar\", \"Queso Fresco\", \"Queso Fresco (Adobera)\",\n\n            \"Queso Iberico\", \"Queso Jalapeno\", \"Queso Majorero\", \"Queso Media Luna\",\n\n            \"Queso Para Frier\", \"Queso Quesadilla\", \"Rabacal\", \"Raclette\", \"Ragusano\", \"Raschera\",\n\n            \"Reblochon\", \"Red Leicester\", \"Regal de la Dombes\", \"Reggianito\", \"Remedou\",\n\n            \"Requeson\", \"Richelieu\", \"Ricotta\", \"Ricotta (Australian)\", \"Ricotta Salata\", \"Ridder\",\n\n            \"Rigotte\", \"Rocamadour\", \"Rollot\", \"Romano\", \"Romans Part Dieu\", \"Roncal\", \"Roquefort\",\n\n            \"Roule\", \"Rouleau De Beaulieu\", \"Royalp Tilsit\", \"Rubens\", \"Rustinu\", \"Saaland Pfarr\",\n\n            \"Saanenkaese\", \"Saga\", \"Sage Derby\", \"Sainte Maure\", \"Saint-Marcellin\",\n\n            \"Saint-Nectaire\", \"Saint-Paulin\", \"Salers\", \"Samso\", \"San Simon\", \"Sancerre\",\n\n            \"Sap Sago\", \"Sardo\", \"Sardo Egyptian\", \"Sbrinz\", \"Scamorza\", \"Schabzieger\", \"Schloss\",\n\n            \"Selles sur Cher\", \"Selva\", \"Serat\", \"Seriously Strong Cheddar\", \"Serra da Estrela\",\n\n            \"Sharpam\", \"Shelburne Cheddar\", \"Shropshire Blue\", \"Siraz\", \"Sirene\", \"Smoked Gouda\",\n\n            \"Somerset Brie\", \"Sonoma Jack\", \"Sottocenare al Tartufo\", \"Soumaintrain\",\n\n            \"Sourire Lozerien\", \"Spenwood\", \"Sraffordshire Organic\", \"St. Agur Blue Cheese\",\n\n            \"Stilton\", \"Stinking Bishop\", \"String\", \"Sussex Slipcote\", \"Sveciaost\", \"Swaledale\",\n\n            \"Sweet Style Swiss\", \"Swiss\", \"Syrian (Armenian String)\", \"Tala\", \"Taleggio\", \"Tamie\",\n\n            \"Tasmania Highland Chevre Log\", \"Taupiniere\", \"Teifi\", \"Telemea\", \"Testouri\",\n\n            \"Tete de Moine\", \"Tetilla\", \"Texas Goat Cheese\", \"Tibet\", \"Tillamook Cheddar\",\n\n            \"Tilsit\", \"Timboon Brie\", \"Toma\", \"Tomme Brulee\", \"Tomme d'Abondance\",\n\n            \"Tomme de Chevre\", \"Tomme de Romans\", \"Tomme de Savoie\", \"Tomme des Chouans\", \"Tommes\",\n\n            \"Torta del Casar\", \"Toscanello\", \"Touree de L'Aubier\", \"Tourmalet\",\n\n            \"Trappe (Veritable)\", \"Trois Cornes De Vendee\", \"Tronchon\", \"Trou du Cru\", \"Truffe\",\n\n            \"Tupi\", \"Turunmaa\", \"Tymsboro\", \"Tyn Grug\", \"Tyning\", \"Ubriaco\", \"Ulloa\",\n\n            \"Vacherin-Fribourgeois\", \"Valencay\", \"Vasterbottenost\", \"Venaco\", \"Vendomois\",\n\n            \"Vieux Corse\", \"Vignotte\", \"Vulscombe\", \"Waimata Farmhouse Blue\",\n\n            \"Washed Rind Cheese (Australian)\", \"Waterloo\", \"Weichkaese\", \"Wellington\",\n\n            \"Wensleydale\", \"White Stilton\", \"Whitestone Farmhouse\", \"Wigmore\", \"Woodside Cabecou\",\n\n            \"Xanadu\", \"Xynotyro\", \"Yarg Cornish\", \"Yarra Valley Pyramid\", \"Yorkshire Blue\",\n\n            \"Zamorano\", \"Zanetti Grana Padano\", \"Zanetti Parmigiano Reggiano\"\n\n    };\n\n}\n  ","MainActivity.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.customchoicelist;\n\n \n\nimport android.app.ListActivity;\n\nimport android.os.Bundle;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.BaseAdapter;\n\nimport android.widget.TextView;\n\n \n\n/**\n\n * This sample demonstrates how to create custom single- or multi-choice\n\n * {@link android.widget.ListView} UIs. The most interesting bits are in\n\n * the <code>res/layout/</code> directory of this sample.\n\n */\n\npublic class MainActivity extends ListActivity {\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.sample_main);\n\n        setListAdapter(new MyAdapter());\n\n    }\n\n \n\n    /**\n\n     * A simple array adapter that creates a list of cheeses.\n\n     */\n\n    private class MyAdapter extends BaseAdapter {\n\n        @Override\n\n        public int getCount() {\n\n            return Cheeses.CHEESES.length;\n\n        }\n\n \n\n        @Override\n\n        public String getItem(int position) {\n\n            return Cheeses.CHEESES[position];\n\n        }\n\n \n\n        @Override\n\n        public long getItemId(int position) {\n\n            return Cheeses.CHEESES[position].hashCode();\n\n        }\n\n \n\n        @Override\n\n        public View getView(int position, View convertView, ViewGroup container) {\n\n            if (convertView == null) {\n\n                convertView = getLayoutInflater().inflate(R.layout.list_item, container, false);\n\n            }\n\n \n\n            ((TextView) convertView.findViewById(android.R.id.text1))\n\n                    .setText(getItem(position));\n\n            return convertView;\n\n        }\n\n    }\n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.customchoicelist\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk android:minSdkVersion=\"3\" android:targetSdkVersion=\"17\" />\n\n \n\n    <application android:label=\"@string/app_name\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:theme=\"@style/Theme.Sample\"\n\n        android:allowBackup=\"true\">\n\n \n\n        <activity android:name=\".MainActivity\"\n\n            android:label=\"@string/app_name\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n \n\n    </application>\n\n \n\n</manifest>\n  "},"CustomNotifications":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com//samples/CustomNotifications/res/drawable-hdpi/ic_launcher.png","ic_stat_custom.png":"http://developer.android.com//samples/CustomNotifications/res/drawable-hdpi/ic_stat_custom.png","tile.9.png":"http://developer.android.com//samples/CustomNotifications/res/drawable-hdpi/tile.9.png"},"drawable-hdpi-v11":{"ic_stat_custom.png":"http://developer.android.com//samples/CustomNotifications/res/drawable-hdpi-v11/ic_stat_custom.png"},"drawable-hdpi-v9":{"ic_stat_custom.png":"http://developer.android.com//samples/CustomNotifications/res/drawable-hdpi-v9/ic_stat_custom.png"},"drawable-ldpi-v11":{"ic_stat_custom.png":"http://developer.android.com//samples/CustomNotifications/res/drawable-ldpi-v11/ic_stat_custom.png"},"drawable-ldpi-v9":{"ic_stat_custom.png":"http://developer.android.com//samples/CustomNotifications/res/drawable-ldpi-v9/ic_stat_custom.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com//samples/CustomNotifications/res/drawable-mdpi/ic_launcher.png","ic_stat_custom.png":"http://developer.android.com//samples/CustomNotifications/res/drawable-mdpi/ic_stat_custom.png"},"drawable-mdpi-v11":{"ic_stat_custom.png":"http://developer.android.com//samples/CustomNotifications/res/drawable-mdpi-v11/ic_stat_custom.png"},"drawable-mdpi-v9":{"ic_stat_custom.png":"http://developer.android.com//samples/CustomNotifications/res/drawable-mdpi-v9/ic_stat_custom.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com//samples/CustomNotifications/res/drawable-xhdpi/ic_launcher.png","ic_stat_custom.png":"http://developer.android.com//samples/CustomNotifications/res/drawable-xhdpi/ic_stat_custom.png","robot.png":"http://developer.android.com//samples/CustomNotifications/res/drawable-xhdpi/robot.png","robot_expanded.png":"http://developer.android.com//samples/CustomNotifications/res/drawable-xhdpi/robot_expanded.png"},"drawable-xhdpi-v11":{"ic_stat_custom.png":"http://developer.android.com//samples/CustomNotifications/res/drawable-xhdpi-v11/ic_stat_custom.png"},"drawable-xhdpi-v9":{"ic_stat_custom.png":"http://developer.android.com//samples/CustomNotifications/res/drawable-xhdpi-v9/ic_stat_custom.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com//samples/CustomNotifications/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleMessageTile\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n            android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n            android:text=\"@string/intro_message\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n  ","notification.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n \n\n<!--\n\n* Copyright (C) 2013 The Android Open Source Project\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*       http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n-->\n\n \n\n<!-- Layout for the collapsed notification. -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:orientation=\"vertical\"\n\n    android:layout_width=\"fill_parent\"\n\n    android:layout_height=\"fill_parent\"\n\n    android:gravity=\"center_horizontal\">\n\n \n\n    <TextView\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:textAppearance=\"@style/NotificationContent\"\n\n        android:id=\"@+id/textView\"\n\n        android:gravity=\"center\" />\n\n \n\n    <ImageView\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:id=\"@+id/imageView\"\n\n        android:src=\"@drawable/robot\"\n\n        android:contentDescription=\"@string/collapsed_image\" />\n\n \n\n \n\n</LinearLayout>\n  ","notification_expanded.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n \n\n<!--\n\n* Copyright (C) 2013 The Android Open Source Project\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*       http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n-->\n\n \n\n<!-- Layout for the expanded notification. -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:orientation=\"horizontal\"\n\n    android:layout_width=\"fill_parent\"\n\n    android:layout_height=\"fill_parent\"\n\n    android:gravity=\"right|top\">\n\n \n\n \n\n    <RelativeLayout\n\n        android:layout_width=\"fill_parent\"\n\n        android:layout_height=\"fill_parent\">\n\n \n\n        <TextView\n\n            android:layout_width=\"wrap_content\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:textAppearance=\"@style/NotificationContent\"\n\n            android:text=\"@string/expanded\"\n\n            android:layout_gravity=\"center_vertical\"\n\n            android:layout_alignParentTop=\"false\"\n\n            android:layout_alignParentLeft=\"true\"\n\n            android:layout_toLeftOf=\"@+id/imageView\"\n\n            android:gravity=\"center\"\n\n            android:layout_centerVertical=\"true\" />\n\n \n\n        <ImageView\n\n            android:layout_width=\"wrap_content\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:src=\"@drawable/robot_expanded\"\n\n            android:layout_gravity=\"right|top\"\n\n            android:layout_alignParentTop=\"true\"\n\n            android:layout_alignParentRight=\"true\"\n\n            android:id=\"@+id/imageView\"\n\n            android:contentDescription=\"@string/expanded_image\" />\n\n    </RelativeLayout>\n\n \n\n \n\n</LinearLayout>\n  ","sample_main.xml":"\n    \n\n<!--\n\n  * Copyright (C) 2013 The Android Open Source Project\n\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  * you may not use this file except in compliance with the License.\n\n  * You may obtain a copy of the License at\n\n  *\n\n  *       http://www.apache.org/licenses/LICENSE-2.0\n\n  *\n\n  * Unless required by applicable law or agreed to in writing, software\n\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  * See the License for the specific language governing permissions and\n\n  * limitations under the License.\n\n  -->\n\n \n\n<!-- Layout for MainActivity.\n\n Includes an introductory text and a button to show the notification. -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:tools=\"http://schemas.android.com/tools\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n\n    android:paddingRight=\"@dimen/activity_horizontal_margin\"\n\n    android:paddingTop=\"@dimen/activity_vertical_margin\"\n\n    android:paddingBottom=\"@dimen/activity_vertical_margin\"\n\n    android:orientation=\"vertical\"\n\n    tools:context=\".MainActivity\"\n\n    android:gravity=\"center_horizontal\">\n\n \n\n    <TextView\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:text=\"@string/intro_text\" />\n\n \n\n    <Button\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:text=\"@string/show_notification\"\n\n        android:id=\"@+id/button\"\n\n        android:onClick=\"showNotificationClicked\" />\n\n \n\n</LinearLayout>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">CustomNotifications</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            This sample demonstrates notifications with custom content views.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","dimens.xml":"\n    \n\n<!--\n\n  * Copyright (C) 2013 The Android Open Source Project\n\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  * you may not use this file except in compliance with the License.\n\n  * You may obtain a copy of the License at\n\n  *\n\n  *       http://www.apache.org/licenses/LICENSE-2.0\n\n  *\n\n  * Unless required by applicable law or agreed to in writing, software\n\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  * See the License for the specific language governing permissions and\n\n  * limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n    <!-- Default screen margins, per the Android Design guidelines. -->\n\n    <dimen name=\"activity_horizontal_margin\">16dp</dimen>\n\n    <dimen name=\"activity_vertical_margin\">16dp</dimen>\n\n</resources>\n  ","strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  * Copyright (C) 2013 The Android Open Source Project\n\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  * you may not use this file except in compliance with the License.\n\n  * You may obtain a copy of the License at\n\n  *\n\n  *       http://www.apache.org/licenses/LICENSE-2.0\n\n  *\n\n  * Unless required by applicable law or agreed to in writing, software\n\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  * See the License for the specific language governing permissions and\n\n  * limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <string name=\"expanded\">I\\'m the expanded notification.\\nCollapse me!</string>\n\n    <string name=\"collapsed\">I\\'m the collapsed notification.\\nCreated at: %s</string>\n\n    <string name=\"show_notification\">Show Notification</string>\n\n    <string name=\"custom_notification\">I\\'m a custom notification.</string>\n\n \n\n    <string name=\"intro_text\">This sample demonstrates how a notification is created using the\n\n        <b>NotificationCompatBuilder</b>\n\n        with a custom content view. The layout of the notification is defined as a\n\n        layout resource and inflated as a <b>RemoteViews</b> object.\n\n        \\n\\nOn API level 16 and above, a different layout is inflated and set as\n\n        the <i>big content view</i>, which is used when the notification is expanded.\n\n        \\n\\n<b>Use the button below to create the notification.\n\n        \\n\\nIf your device is running Jelly Bean or above, try expanding or collapsing\n\n        the notification to see the different layouts.</b>\n\n    </string>\n\n    <string name=\"collapsed_image\">A single Android robot waving. Symbolises a collapsed\n\n        notification.\n\n    </string>\n\n    <string name=\"expanded_image\">Two Androids on top of each other. Symbolises an expanded\n\n        notification.\n\n    </string>\n\n \n\n</resources>\n  ","styles.xml":"\n    \n\n<!--\n\n  * Copyright (C) 2013 The Android Open Source Project\n\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  * you may not use this file except in compliance with the License.\n\n  * You may obtain a copy of the License at\n\n  *\n\n  *       http://www.apache.org/licenses/LICENSE-2.0\n\n  *\n\n  * Unless required by applicable law or agreed to in writing, software\n\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  * See the License for the specific language governing permissions and\n\n  * limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"NotificationContent\" parent=\"@android:style/TextAppearance.Small\">\n\n        <item name=\"android:textColor\">?android:attr/textColorPrimaryInverse</item>\n\n    </style>\n\n \n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw720dp-land":{"dimens.xml":"\n    \n\n<!--\n\n  * Copyright (C) 2013 The Android Open Source Project\n\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  * you may not use this file except in compliance with the License.\n\n  * You may obtain a copy of the License at\n\n  *\n\n  *       http://www.apache.org/licenses/LICENSE-2.0\n\n  *\n\n  * Unless required by applicable law or agreed to in writing, software\n\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  * See the License for the specific language governing permissions and\n\n  * limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n    <!-- Customize dimensions originally defined in res/values/dimens.xml (such as\n\n         screen margins) for sw720dp devices (e.g. 10\" tablets) in landscape here. -->\n\n    <dimen name=\"activity_horizontal_margin\">128dp</dimen>\n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "},"values-v9":{"styles.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<resources>\n\n \n\n    <style name=\"NotificationContent\" parent=\"@android:style/TextAppearance.StatusBar.EventContent\">\n\n    </style>\n\n \n\n</resources>\n  "}},"src":{"com.example.android.customnotifications":{"MainActivity.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *       http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.customnotifications;\n\n \n\nimport android.app.Activity;\n\nimport android.app.Notification;\n\nimport android.app.NotificationManager;\n\nimport android.app.PendingIntent;\n\nimport android.content.Intent;\n\nimport android.os.Build;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.NotificationCompat;\n\nimport android.view.View;\n\nimport android.widget.RemoteViews;\n\n \n\nimport java.text.DateFormat;\n\nimport java.util.Date;\n\n \n\npublic class MainActivity extends Activity {\n\n    /**\n\n     * This sample demonstrates notifications with custom content views.\n\n     *\n\n     * <p>On API level 16 and above a big content view is also defined that is used for the\n\n     * 'expanded' notification. The notification is created by the NotificationCompat.Builder.\n\n     * The expanded content view is set directly on the {@link android.app.Notification} once it has been build.\n\n     * (See {@link android.app.Notification#bigContentView}.) </p>\n\n     *\n\n     * <p>The content views are inflated as {@link android.widget.RemoteViews} directly from their XML layout\n\n     * definitions using {@link android.widget.RemoteViews#RemoteViews(String, int)}.</p>\n\n     */\n\n    private void createNotification() {\n\n        NotificationCompat.Builder builder = new NotificationCompat.Builder(this);\n\n \n\n        //Create Intent to launch this Activity again if the notification is clicked.\n\n        Intent i = new Intent(this, MainActivity.class);\n\n        i.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);\n\n        PendingIntent intent = PendingIntent.getActivity(this, 0, i,\n\n                PendingIntent.FLAG_UPDATE_CURRENT);\n\n        builder.setContentIntent(intent);\n\n \n\n        // Sets the ticker text\n\n        builder.setTicker(getResources().getString(R.string.custom_notification));\n\n \n\n        // Sets the small icon for the ticker\n\n        builder.setSmallIcon(R.drawable.ic_stat_custom);\n\n \n\n        // Cancel the notification when clicked\n\n        builder.setAutoCancel(true);\n\n \n\n        // Build the notification\n\n        Notification notification = builder.build();\n\n \n\n        // Inflate the notification layout as RemoteViews\n\n        RemoteViews contentView = new RemoteViews(getPackageName(), R.layout.notification);\n\n \n\n        // Set text on a TextView in the RemoteViews programmatically.\n\n        final String time = DateFormat.getTimeInstance().format(new Date()).toString();\n\n        final String text = getResources().getString(R.string.collapsed, time);\n\n        contentView.setTextViewText(R.id.textView, text);\n\n \n\n        /* Workaround: Need to set the content view here directly on the notification.\n\n         * NotificationCompatBuilder contains a bug that prevents this from working on platform\n\n         * versions HoneyComb.\n\n         * See https://code.google.com/p/android/issues/detail?id=30495\n\n         */\n\n        notification.contentView = contentView;\n\n \n\n        // Add a big content view to the notification if supported.\n\n        // Support for expanded notifications was added in API level 16.\n\n        // (The normal contentView is shown when the notification is collapsed, when expanded the\n\n        // big content view set here is displayed.)\n\n        if (Build.VERSION.SDK_INT >= 16) {\n\n            // Inflate and set the layout for the expanded notification view\n\n            RemoteViews expandedView =\n\n                    new RemoteViews(getPackageName(), R.layout.notification_expanded);\n\n            notification.bigContentView = expandedView;\n\n        }\n\n \n\n        // START_INCLUDE(notify)\n\n        // Use the NotificationManager to show the notification\n\n        NotificationManager nm = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);\n\n        nm.notify(0, notification);\n\n    }\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.sample_main);\n\n    }\n\n \n\n    /**\n\n     * Create and show a notification with a custom layout.\n\n     * This callback is defined through the 'onClick' attribute of the\n\n     * 'Show Notification' button in the XML layout.\n\n     *\n\n     * @param v\n\n     */\n\n    public void showNotificationClicked(View v) {\n\n        createNotification();\n\n    }\n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.customnotifications\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk\n\n        android:minSdkVersion=\"4\"\n\n        android:targetSdkVersion=\"18\" />\n\n \n\n    <application\n\n        android:allowBackup=\"true\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:label=\"@string/app_name\"\n\n        android:theme=\"@style/AppTheme\" >\n\n        <activity\n\n            android:name=\"com.example.android.customnotifications.MainActivity\"\n\n            android:label=\"@string/app_name\" >\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n \n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n</manifest>\n  "},"CustomTransition":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com//samples/CustomTransition/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com//samples/CustomTransition/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com//samples/CustomTransition/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com//samples/CustomTransition/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com//samples/CustomTransition/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"vertical\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <ViewAnimator\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\"\n\n          android:layout_weight=\"1\">\n\n \n\n        <ScrollView\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingRight=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingTop=\"@dimen/vertical_page_margin\"\n\n                  android:paddingBottom=\"@dimen/vertical_page_margin\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </ScrollView>\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\" />\n\n \n\n    </ViewAnimator>\n\n \n\n    <View\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"1dp\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\" />\n\n \n\n</LinearLayout>\n\n \n  ","fragment_custom_transition.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:tools=\"http://schemas.android.com/tools\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\"\n\n    tools:context=\"com.example.android.customtransition.CustomTransitionFragment\">\n\n \n\n    <Button\n\n        android:id=\"@+id/show_next_scene\"\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:text=\"Show next scene\"/>\n\n \n\n    <FrameLayout\n\n        android:id=\"@+id/container\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"0dp\"\n\n        android:layout_weight=\"1\"/>\n\n \n\n</LinearLayout>\n  ","scene1.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n<LinearLayout\n\n    android:id=\"@+id/container\"\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:tools=\"http://schemas.android.com/tools\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"horizontal\"\n\n    tools:context=\"com.example.android.customtransition.CustomTransitionFragment\">\n\n \n\n    <View\n\n        android:id=\"@+id/view_1\"\n\n        android:layout_width=\"64dp\"\n\n        android:layout_height=\"64dp\"\n\n        android:layout_margin=\"8dp\"\n\n        android:background=\"#f00\"/>\n\n \n\n    <View\n\n        android:id=\"@+id/view_2\"\n\n        android:layout_width=\"64dp\"\n\n        android:layout_height=\"64dp\"\n\n        android:layout_margin=\"8dp\"\n\n        android:background=\"#0f0\"/>\n\n \n\n    <View\n\n        android:id=\"@+id/view_3\"\n\n        android:layout_width=\"64dp\"\n\n        android:layout_height=\"64dp\"\n\n        android:layout_margin=\"8dp\"\n\n        android:background=\"#00f\"/>\n\n \n\n</LinearLayout>\n  ","scene2.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n<LinearLayout\n\n    android:id=\"@+id/container\"\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:tools=\"http://schemas.android.com/tools\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"horizontal\"\n\n    tools:context=\"com.example.android.customtransition.CustomTransitionFragment\">\n\n \n\n    <View\n\n        android:id=\"@+id/view_1\"\n\n        android:layout_width=\"64dp\"\n\n        android:layout_height=\"64dp\"\n\n        android:layout_margin=\"8dp\"\n\n        android:background=\"#0f0\"/>\n\n \n\n    <View\n\n        android:id=\"@+id/view_2\"\n\n        android:layout_width=\"64dp\"\n\n        android:layout_height=\"64dp\"\n\n        android:layout_margin=\"8dp\"\n\n        android:background=\"#00f\"/>\n\n \n\n    <View\n\n        android:id=\"@+id/view_3\"\n\n        android:layout_width=\"64dp\"\n\n        android:layout_height=\"64dp\"\n\n        android:layout_margin=\"8dp\"\n\n        android:background=\"#f00\"/>\n\n \n\n</LinearLayout>\n  ","scene3.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n<LinearLayout\n\n    android:id=\"@+id/container\"\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:tools=\"http://schemas.android.com/tools\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"horizontal\"\n\n    tools:context=\"com.example.android.customtransition.CustomTransitionFragment\">\n\n \n\n    <View\n\n        android:id=\"@+id/view_1\"\n\n        android:layout_width=\"64dp\"\n\n        android:layout_height=\"64dp\"\n\n        android:layout_margin=\"8dp\"\n\n        android:background=\"#00f\"/>\n\n \n\n    <View\n\n        android:id=\"@+id/view_2\"\n\n        android:layout_width=\"64dp\"\n\n        android:layout_height=\"64dp\"\n\n        android:layout_margin=\"8dp\"\n\n        android:background=\"#f00\"/>\n\n \n\n    <View\n\n        android:id=\"@+id/view_3\"\n\n        android:layout_width=\"64dp\"\n\n        android:layout_height=\"64dp\"\n\n        android:layout_margin=\"8dp\"\n\n        android:background=\"#0f0\"/>\n\n \n\n</LinearLayout>\n  "},"layout-w720dp":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"horizontal\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <LinearLayout\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\"\n\n          android:layout_weight=\"1\"\n\n          android:orientation=\"vertical\">\n\n \n\n        <FrameLayout\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"wrap_content\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/margin_medium\"\n\n                  android:paddingRight=\"@dimen/margin_medium\"\n\n                  android:paddingTop=\"@dimen/margin_large\"\n\n                  android:paddingBottom=\"@dimen/margin_large\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </FrameLayout>\n\n \n\n        <View\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"1dp\"\n\n              android:background=\"@android:color/darker_gray\" />\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"0px\"\n\n              android:layout_weight=\"1\" />\n\n \n\n    </LinearLayout>\n\n \n\n    <View\n\n          android:layout_width=\"1dp\"\n\n          android:layout_height=\"match_parent\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\" />\n\n \n\n</LinearLayout>\n\n \n\n \n  "},"menu":{"main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:id=\"@+id/menu_toggle_log\"\n\n          android:showAsAction=\"always\"\n\n          android:title=\"@string/sample_show_log\" />\n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">CustomTransition</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            This sample demonstrates how to create and use a custom Transition.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","strings.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<resources>\n\n    <string name=\"sample_show_log\">Show Log</string>\n\n    <string name=\"sample_hide_log\">Hide Log</string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.common":{"activities":{"SampleActivityBase.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\npackage com.example.android.common.activities;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentActivity;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogWrapper;\n\n \n\n/**\n\n * Base launcher activity, to handle most of the common plumbing for samples.\n\n */\n\npublic class SampleActivityBase extends FragmentActivity {\n\n \n\n    public static final String TAG = \"SampleActivityBase\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n    }\n\n \n\n    @Override\n\n    protected  void onStart() {\n\n        super.onStart();\n\n        initializeLogging();\n\n    }\n\n \n\n    /** Set up targets to receive log data */\n\n    public void initializeLogging() {\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        // Wraps Android's native log framework\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        Log.setLogNode(logWrapper);\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "},"logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "}},"com.example.android.customtransition":{"ChangeColor.java":"\n    \n\n/*\n\n * Copyright (C) 2014 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.customtransition;\n\n \n\nimport android.animation.Animator;\n\nimport android.animation.ArgbEvaluator;\n\nimport android.animation.ObjectAnimator;\n\nimport android.animation.PropertyValuesHolder;\n\nimport android.animation.ValueAnimator;\n\nimport android.graphics.drawable.ColorDrawable;\n\nimport android.graphics.drawable.Drawable;\n\nimport android.graphics.drawable.TransitionDrawable;\n\nimport android.transition.ChangeBounds;\n\nimport android.transition.Transition;\n\nimport android.transition.TransitionValues;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.view.ViewPropertyAnimator;\n\n \n\npublic class ChangeColor extends Transition {\n\n \n\n    /** Key to store a color value in TransitionValues object */\n\n    private static final String PROPNAME_BACKGROUND = \"customtransition:change_color:background\";\n\n \n\n    /**\n\n     * Convenience method: Add the background Drawable property value\n\n     * to the TransitionsValues.value Map for a target.\n\n     */\n\n    private void captureValues(TransitionValues values) {\n\n        // Capture the property values of views for later use\n\n        values.values.put(PROPNAME_BACKGROUND, values.view.getBackground());\n\n    }\n\n \n\n    @Override\n\n    public void captureStartValues(TransitionValues transitionValues) {\n\n        captureValues(transitionValues);\n\n    }\n\n \n\n    // Capture the value of the background drawable property for a target in the ending Scene.\n\n    @Override\n\n    public void captureEndValues(TransitionValues transitionValues) {\n\n        captureValues(transitionValues);\n\n    }\n\n \n\n    // Create an animation for each target that is in both the starting and ending Scene. For each\n\n    // pair of targets, if their background property value is a color (rather than a graphic),\n\n    // create a ValueAnimator based on an ArgbEvaluator that interpolates between the starting and\n\n    // ending color. Also create an update listener that sets the View background color for each\n\n    // animation frame\n\n    @Override\n\n    public Animator createAnimator(ViewGroup sceneRoot,\n\n                                   TransitionValues startValues, TransitionValues endValues) {\n\n        // This transition can only be applied to views that are on both starting and ending scenes.\n\n        if (null == startValues || null == endValues) {\n\n            return null;\n\n        }\n\n        // Store a convenient reference to the target. Both the starting and ending layout have the\n\n        // same target.\n\n        final View view = endValues.view;\n\n        // Store the object containing the background property for both the starting and ending\n\n        // layouts.\n\n        Drawable startBackground = (Drawable) startValues.values.get(PROPNAME_BACKGROUND);\n\n        Drawable endBackground = (Drawable) endValues.values.get(PROPNAME_BACKGROUND);\n\n        // This transition changes background colors for a target. It doesn't animate any other\n\n        // background changes. If the property isn't a ColorDrawable, ignore the target.\n\n        if (startBackground instanceof ColorDrawable && endBackground instanceof ColorDrawable) {\n\n            ColorDrawable startColor = (ColorDrawable) startBackground;\n\n            ColorDrawable endColor = (ColorDrawable) endBackground;\n\n            // If the background color for the target in the starting and ending layouts is\n\n            // different, create an animation.\n\n            if (startColor.getColor() != endColor.getColor()) {\n\n                // Create a new Animator object to apply to the targets as the transitions framework\n\n                // changes from the starting to the ending layout. Use the class ValueAnimator,\n\n                // which provides a timing pulse to change property values provided to it. The\n\n                // animation runs on the UI thread. The Evaluator controls what type of\n\n                // interpolation is done. In this case, an ArgbEvaluator interpolates between two\n\n                // #argb values, which are specified as the 2nd and 3rd input arguments.\n\n                ValueAnimator animator = ValueAnimator.ofObject(new ArgbEvaluator(),\n\n                        startColor.getColor(), endColor.getColor());\n\n                // Add an update listener to the Animator object.\n\n                animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n\n                    @Override\n\n                    public void onAnimationUpdate(ValueAnimator animation) {\n\n                        Object value = animation.getAnimatedValue();\n\n                        // Each time the ValueAnimator produces a new frame in the animation, change\n\n                        // the background color of the target. Ensure that the value isn't null.\n\n                        if (null != value) {\n\n                            view.setBackgroundColor((Integer) value);\n\n                        }\n\n                    }\n\n                });\n\n                // Return the Animator object to the transitions framework. As the framework changes\n\n                // between the starting and ending layouts, it applies the animation you've created.\n\n                return animator;\n\n            }\n\n        }\n\n        // For non-ColorDrawable backgrounds, we just return null, and no animation will take place.\n\n        return null;\n\n    }\n\n \n\n}\n  ","CustomTransitionFragment.java":"\n    \n\n/*\n\n * Copyright (C) 2014 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.customtransition;\n\n \n\nimport com.example.android.common.logger.Log;\n\n \n\nimport android.content.Context;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.transition.Scene;\n\nimport android.transition.Transition;\n\nimport android.transition.TransitionManager;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.FrameLayout;\n\n \n\npublic class CustomTransitionFragment extends Fragment implements View.OnClickListener {\n\n \n\n    private static final String STATE_CURRENT_SCENE = \"current_scene\";\n\n \n\n    /** Tag for the logger */\n\n    private static final String TAG = \"CustomTransitionFragment\";\n\n \n\n    /** These are the Scenes we use. */\n\n    private Scene[] mScenes;\n\n \n\n    /** The current index for mScenes. */\n\n    private int mCurrentScene;\n\n \n\n    /** This is the custom Transition we use in this sample. */\n\n    private Transition mTransition;\n\n \n\n    public CustomTransitionFragment() {\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n\n        return inflater.inflate(R.layout.fragment_custom_transition, container, false);\n\n    }\n\n \n\n    @Override\n\n    public void onViewCreated(View view, Bundle savedInstanceState) {\n\n        Context context = getActivity();\n\n        FrameLayout container = (FrameLayout) view.findViewById(R.id.container);\n\n        view.findViewById(R.id.show_next_scene).setOnClickListener(this);\n\n        if (null != savedInstanceState) {\n\n            mCurrentScene = savedInstanceState.getInt(STATE_CURRENT_SCENE);\n\n        }\n\n        // We set up the Scenes here.\n\n        mScenes = new Scene[] {\n\n                Scene.getSceneForLayout(container, R.layout.scene1, context),\n\n                Scene.getSceneForLayout(container, R.layout.scene2, context),\n\n                Scene.getSceneForLayout(container, R.layout.scene3, context),\n\n        };\n\n        // This is the custom Transition.\n\n        mTransition = new ChangeColor();\n\n        // Show the initial Scene.\n\n        TransitionManager.go(mScenes[mCurrentScene % mScenes.length]);\n\n    }\n\n \n\n    @Override\n\n    public void onSaveInstanceState(Bundle outState) {\n\n        super.onSaveInstanceState(outState);\n\n        outState.putInt(STATE_CURRENT_SCENE, mCurrentScene);\n\n    }\n\n \n\n    @Override\n\n    public void onClick(View v) {\n\n        switch (v.getId()) {\n\n            case R.id.show_next_scene: {\n\n                mCurrentScene = (mCurrentScene + 1) % mScenes.length;\n\n                Log.i(TAG, \"Transitioning to scene #\" + mCurrentScene);\n\n                // Pass the custom Transition as second argument for TransitionManager.go\n\n                TransitionManager.go(mScenes[mCurrentScene], mTransition);\n\n                break;\n\n            }\n\n        }\n\n    }\n\n \n\n}\n  ","MainActivity.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.customtransition;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentTransaction;\n\nimport android.view.Menu;\n\nimport android.view.MenuItem;\n\nimport android.widget.ViewAnimator;\n\n \n\nimport com.example.android.common.activities.SampleActivityBase;\n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogFragment;\n\nimport com.example.android.common.logger.LogWrapper;\n\nimport com.example.android.common.logger.MessageOnlyLogFilter;\n\n \n\n/**\n\n * A simple launcher activity containing a summary sample description, sample log and a custom\n\n * {@link android.support.v4.app.Fragment} which can display a view.\n\n * <p>\n\n * For devices with displays with a width of 720dp or greater, the sample log is always visible,\n\n * on other devices it's visibility is controlled by an item on the Action Bar.\n\n */\n\npublic class MainActivity extends SampleActivityBase {\n\n \n\n    public static final String TAG = \"MainActivity\";\n\n \n\n    // Whether the Log Fragment is currently shown\n\n    private boolean mLogShown;\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_main);\n\n \n\n        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n\n        CustomTransitionFragment fragment = new CustomTransitionFragment();\n\n        transaction.replace(R.id.sample_content_fragment, fragment);\n\n        transaction.commit();\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        getMenuInflater().inflate(R.menu.main, menu);\n\n        return true;\n\n    }\n\n \n\n    @Override\n\n    public boolean onPrepareOptionsMenu(Menu menu) {\n\n        MenuItem logToggle = menu.findItem(R.id.menu_toggle_log);\n\n        logToggle.setVisible(findViewById(R.id.sample_output) instanceof ViewAnimator);\n\n        logToggle.setTitle(mLogShown ? R.string.sample_hide_log : R.string.sample_show_log);\n\n \n\n        return super.onPrepareOptionsMenu(menu);\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch(item.getItemId()) {\n\n            case R.id.menu_toggle_log:\n\n                mLogShown = !mLogShown;\n\n                ViewAnimator output = (ViewAnimator) findViewById(R.id.sample_output);\n\n                if (mLogShown) {\n\n                    output.setDisplayedChild(1);\n\n                } else {\n\n                    output.setDisplayedChild(0);\n\n                }\n\n                supportInvalidateOptionsMenu();\n\n                return true;\n\n        }\n\n        return super.onOptionsItemSelected(item);\n\n    }\n\n \n\n    /** Create a chain of targets that will receive log data */\n\n    @Override\n\n    public void initializeLogging() {\n\n        // Wraps Android's native log framework.\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        Log.setLogNode(logWrapper);\n\n \n\n        // Filter strips out everything except the message text.\n\n        MessageOnlyLogFilter msgFilter = new MessageOnlyLogFilter();\n\n        logWrapper.setNext(msgFilter);\n\n \n\n        // On screen logging via a fragment with a TextView.\n\n        LogFragment logFragment = (LogFragment) getSupportFragmentManager()\n\n                .findFragmentById(R.id.log_fragment);\n\n        msgFilter.setNext(logFragment.getLogView());\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.customtransition\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk android:minSdkVersion=\"19\" android:targetSdkVersion=\"19\" />\n\n \n\n    <application android:allowBackup=\"true\"\n\n        android:label=\"@string/app_name\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:theme=\"@style/AppTheme\">\n\n \n\n        <activity android:name=\".MainActivity\"\n\n                  android:label=\"@string/app_name\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n \n\n</manifest>\n  "},"DisplayingBitmaps":{"res":{"drawable":{"photogrid_list_selector.xml":"\n    \n\n<!--\n\n  Copyright (C) 2012 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n \n\n    <item android:state_pressed=\"true\">\n\n        <shape>\n\n            <solid android:color=\"@color/grid_state_pressed\" />\n\n        </shape>\n\n    </item>\n\n \n\n    <item android:state_focused=\"true\">\n\n        <shape>\n\n            <solid android:color=\"@color/grid_state_focused\" />\n\n        </shape>\n\n    </item>\n\n \n\n    <item android:drawable=\"@android:color/transparent\" />\n\n \n\n</selector>\n  "},"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com//samples/DisplayingBitmaps/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com//samples/DisplayingBitmaps/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com//samples/DisplayingBitmaps/res/drawable-mdpi/ic_launcher.png"},"drawable-nodpi":{"empty_photo.png":"http://developer.android.com//samples/DisplayingBitmaps/res/drawable-nodpi/empty_photo.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com//samples/DisplayingBitmaps/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com//samples/DisplayingBitmaps/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleMessageTile\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n            android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n            android:text=\"@string/intro_message\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n  ","image_detail_fragment.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright (C) 2012 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"fill_parent\"\n\n    android:layout_height=\"fill_parent\" >\n\n \n\n    <ProgressBar\n\n        style=\"?android:attr/progressBarStyleLarge\"\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:layout_gravity=\"center\" />\n\n \n\n    <com.example.android.displayingbitmaps.ui.RecyclingImageView\n\n        android:id=\"@+id/imageView\"\n\n        android:layout_width=\"fill_parent\"\n\n        android:layout_height=\"fill_parent\"\n\n        android:contentDescription=\"@string/imageview_description\" />\n\n \n\n</FrameLayout>\n  ","image_detail_pager.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright (C) 2012 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<android.support.v4.view.ViewPager xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:id=\"@+id/pager\"\n\n    android:layout_width=\"fill_parent\"\n\n    android:layout_height=\"fill_parent\" >\n\n \n\n</android.support.v4.view.ViewPager>\n  ","image_grid_fragment.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright (C) 2012 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<GridView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:id=\"@+id/gridView\"\n\n    style=\"@style/PhotoGridLayout\"\n\n    android:layout_width=\"fill_parent\"\n\n    android:layout_height=\"fill_parent\"\n\n    android:columnWidth=\"@dimen/image_thumbnail_size\"\n\n    android:horizontalSpacing=\"@dimen/image_thumbnail_spacing\"\n\n    android:numColumns=\"auto_fit\"\n\n    android:stretchMode=\"columnWidth\"\n\n    android:verticalSpacing=\"@dimen/image_thumbnail_spacing\" >\n\n \n\n</GridView>\n  "},"menu":{"main_menu.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright (C) 2012 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\" >\n\n \n\n    <item\n\n        android:id=\"@+id/clear_cache\"\n\n        android:icon=\"@android:drawable/ic_menu_delete\"\n\n        android:showAsAction=\"never\"\n\n        android:title=\"@string/clear_cache_menu\"/>\n\n \n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">DisplayingBitmaps</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            This is a sample application for the Android Training class\n\n            &quot;Displaying Bitmaps Efficiently&quot;\n\n            (http://developer.android.com/training/displaying-bitmaps/).\\n\\n\n\n \n\n            It demonstrates how to load large bitmaps efficiently off the main UI thread, caching\n\n            bitmaps (both in memory and on disk), managing bitmap memory and displaying bitmaps\n\n            in UI elements such as ViewPager and ListView/GridView.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","colors.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright (C) 2012 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <color name=\"grid_state_pressed\">#1Affffff</color>\n\n    <color name=\"grid_state_focused\">#80000000</color>\n\n \n\n</resources>\n  ","dimens.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright (C) 2012 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <dimen name=\"image_thumbnail_size\">100dp</dimen>\n\n    <dimen name=\"image_thumbnail_spacing\">1dp</dimen>\n\n \n\n</resources>\n  ","strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright (C) 2012 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <string name=\"clear_cache_menu\">Clear Caches</string>\n\n    <string name=\"clear_cache_complete_toast\">Caches have been cleared</string>\n\n    <string name=\"imageview_description\">Image Thumbnail</string>\n\n    <string name=\"no_network_connection_toast\">No network connection found</string>\n\n \n\n</resources>\n  ","styles.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright (C) 2012 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <style name=\"AppThemeDark\" parent=\"android:Theme\" />\n\n \n\n    <style name=\"AppThemeDark.FullScreen\" parent=\"@android:style/Theme.Black.NoTitleBar.Fullscreen\" />\n\n \n\n    <style name=\"PhotoGridLayout\">\n\n        <item name=\"android:drawSelectorOnTop\">true</item>\n\n        <item name=\"android:listSelector\">@drawable/photogrid_list_selector</item>\n\n    </style>\n\n \n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-large":{"dimens.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright (C) 2012 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <dimen name=\"image_thumbnail_size\">148dp</dimen>\n\n    <dimen name=\"image_thumbnail_spacing\">2dp</dimen>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"styles.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright (C) 2012 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <style name=\"AppThemeDark\" parent=\"@android:style/Theme.Holo\">\n\n        <item name=\"android:windowActionBarOverlay\">true</item>\n\n        <item name=\"android:windowBackground\">@android:color/black</item>\n\n        <item name=\"android:actionBarStyle\">@style/TranslucentDarkActionBar</item>\n\n    </style>\n\n \n\n    <style name=\"AppThemeDark.FullScreen\" />\n\n \n\n    <style name=\"TranslucentDarkActionBar\" parent=\"@android:style/Widget.Holo.ActionBar\">\n\n        <item name=\"android:background\">#99000000</item>\n\n    </style>\n\n \n\n    <!--<style name=\"PhotoGridLayout\">-->\n\n        <!--<item name=\"android:drawSelectorOnTop\">true</item>-->\n\n    <!--</style>-->\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "},"values-xlarge":{"dimens.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright (C) 2012 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <dimen name=\"image_thumbnail_size\">198dp</dimen>\n\n    <dimen name=\"image_thumbnail_spacing\">2dp</dimen>\n\n \n\n</resources>\n  "}},"src":{"com.example.android.common.logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "},"com.example.android.displayingbitmaps":{"provider":{"Images.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.displayingbitmaps.provider;\n\n \n\n/**\n\n * Some simple test data to use for this sample app.\n\n */\n\npublic class Images {\n\n \n\n    /**\n\n     * This are PicasaWeb URLs and could potentially change. Ideally the PicasaWeb API should be\n\n     * used to fetch the URLs.\n\n     *\n\n     * Credit to Romain Guy for the photos:\n\n     * http://www.curious-creature.org/\n\n     * https://plus.google.com/109538161516040592207/about\n\n     * http://www.flickr.com/photos/romainguy\n\n     */\n\n    public final static String[] imageUrls = new String[] {\n\n            \"https://lh6.googleusercontent.com/-55osAWw3x0Q/URquUtcFr5I/AAAAAAAAAbs/rWlj1RUKrYI/s1024/A%252520Photographer.jpg\",\n\n            \"https://lh4.googleusercontent.com/--dq8niRp7W4/URquVgmXvgI/AAAAAAAAAbs/-gnuLQfNnBA/s1024/A%252520Song%252520of%252520Ice%252520and%252520Fire.jpg\",\n\n            \"https://lh5.googleusercontent.com/-7qZeDtRKFKc/URquWZT1gOI/AAAAAAAAAbs/hqWgteyNXsg/s1024/Another%252520Rockaway%252520Sunset.jpg\",\n\n            \"https://lh3.googleusercontent.com/--L0Km39l5J8/URquXHGcdNI/AAAAAAAAAbs/3ZrSJNrSomQ/s1024/Antelope%252520Butte.jpg\",\n\n            \"https://lh6.googleusercontent.com/-8HO-4vIFnlw/URquZnsFgtI/AAAAAAAAAbs/WT8jViTF7vw/s1024/Antelope%252520Hallway.jpg\",\n\n            \"https://lh4.googleusercontent.com/-WIuWgVcU3Qw/URqubRVcj4I/AAAAAAAAAbs/YvbwgGjwdIQ/s1024/Antelope%252520Walls.jpg\",\n\n            \"https://lh6.googleusercontent.com/-UBmLbPELvoQ/URqucCdv0kI/AAAAAAAAAbs/IdNhr2VQoQs/s1024/Apre%2525CC%252580s%252520la%252520Pluie.jpg\",\n\n            \"https://lh3.googleusercontent.com/-s-AFpvgSeew/URquc6dF-JI/AAAAAAAAAbs/Mt3xNGRUd68/s1024/Backlit%252520Cloud.jpg\",\n\n            \"https://lh5.googleusercontent.com/-bvmif9a9YOQ/URquea3heHI/AAAAAAAAAbs/rcr6wyeQtAo/s1024/Bee%252520and%252520Flower.jpg\",\n\n            \"https://lh5.googleusercontent.com/-n7mdm7I7FGs/URqueT_BT-I/AAAAAAAAAbs/9MYmXlmpSAo/s1024/Bonzai%252520Rock%252520Sunset.jpg\",\n\n            \"https://lh6.googleusercontent.com/-4CN4X4t0M1k/URqufPozWzI/AAAAAAAAAbs/8wK41lg1KPs/s1024/Caterpillar.jpg\",\n\n            \"https://lh3.googleusercontent.com/-rrFnVC8xQEg/URqufdrLBaI/AAAAAAAAAbs/s69WYy_fl1E/s1024/Chess.jpg\",\n\n            \"https://lh5.googleusercontent.com/-WVpRptWH8Yw/URqugh-QmDI/AAAAAAAAAbs/E-MgBgtlUWU/s1024/Chihuly.jpg\",\n\n            \"https://lh5.googleusercontent.com/-0BDXkYmckbo/URquhKFW84I/AAAAAAAAAbs/ogQtHCTk2JQ/s1024/Closed%252520Door.jpg\",\n\n            \"https://lh3.googleusercontent.com/-PyggXXZRykM/URquh-kVvoI/AAAAAAAAAbs/hFtDwhtrHHQ/s1024/Colorado%252520River%252520Sunset.jpg\",\n\n            \"https://lh3.googleusercontent.com/-ZAs4dNZtALc/URquikvOCWI/AAAAAAAAAbs/DXz4h3dll1Y/s1024/Colors%252520of%252520Autumn.jpg\",\n\n            \"https://lh4.googleusercontent.com/-GztnWEIiMz8/URqukVCU7bI/AAAAAAAAAbs/jo2Hjv6MZ6M/s1024/Countryside.jpg\",\n\n            \"https://lh4.googleusercontent.com/-bEg9EZ9QoiM/URquklz3FGI/AAAAAAAAAbs/UUuv8Ac2BaE/s1024/Death%252520Valley%252520-%252520Dunes.jpg\",\n\n            \"https://lh6.googleusercontent.com/-ijQJ8W68tEE/URqulGkvFEI/AAAAAAAAAbs/zPXvIwi_rFw/s1024/Delicate%252520Arch.jpg\",\n\n            \"https://lh5.googleusercontent.com/-Oh8mMy2ieng/URqullDwehI/AAAAAAAAAbs/TbdeEfsaIZY/s1024/Despair.jpg\",\n\n            \"https://lh5.googleusercontent.com/-gl0y4UiAOlk/URqumC_KjBI/AAAAAAAAAbs/PM1eT7dn4oo/s1024/Eagle%252520Fall%252520Sunrise.jpg\",\n\n            \"https://lh3.googleusercontent.com/-hYYHd2_vXPQ/URqumtJa9eI/AAAAAAAAAbs/wAalXVkbSh0/s1024/Electric%252520Storm.jpg\",\n\n            \"https://lh5.googleusercontent.com/-PyY_yiyjPTo/URqunUOhHFI/AAAAAAAAAbs/azZoULNuJXc/s1024/False%252520Kiva.jpg\",\n\n            \"https://lh6.googleusercontent.com/-PYvLVdvXywk/URqunwd8hfI/AAAAAAAAAbs/qiMwgkFvf6I/s1024/Fitzgerald%252520Streaks.jpg\",\n\n            \"https://lh4.googleusercontent.com/-KIR_UobIIqY/URquoCZ9SlI/AAAAAAAAAbs/Y4d4q8sXu4c/s1024/Foggy%252520Sunset.jpg\",\n\n            \"https://lh6.googleusercontent.com/-9lzOk_OWZH0/URquoo4xYoI/AAAAAAAAAbs/AwgzHtNVCwU/s1024/Frantic.jpg\",\n\n            \"https://lh3.googleusercontent.com/-0X3JNaKaz48/URqupH78wpI/AAAAAAAAAbs/lHXxu_zbH8s/s1024/Golden%252520Gate%252520Afternoon.jpg\",\n\n            \"https://lh6.googleusercontent.com/-95sb5ag7ABc/URqupl95RDI/AAAAAAAAAbs/g73R20iVTRA/s1024/Golden%252520Gate%252520Fog.jpg\",\n\n            \"https://lh3.googleusercontent.com/-JB9v6rtgHhk/URqup21F-zI/AAAAAAAAAbs/64Fb8qMZWXk/s1024/Golden%252520Grass.jpg\",\n\n            \"https://lh4.googleusercontent.com/-EIBGfnuLtII/URquqVHwaRI/AAAAAAAAAbs/FA4McV2u8VE/s1024/Grand%252520Teton.jpg\",\n\n            \"https://lh4.googleusercontent.com/-WoMxZvmN9nY/URquq1v2AoI/AAAAAAAAAbs/grj5uMhL6NA/s1024/Grass%252520Closeup.jpg\",\n\n            \"https://lh3.googleusercontent.com/-6hZiEHXx64Q/URqurxvNdqI/AAAAAAAAAbs/kWMXM3o5OVI/s1024/Green%252520Grass.jpg\",\n\n            \"https://lh5.googleusercontent.com/-6LVb9OXtQ60/URquteBFuKI/AAAAAAAAAbs/4F4kRgecwFs/s1024/Hanging%252520Leaf.jpg\",\n\n            \"https://lh4.googleusercontent.com/-zAvf__52ONk/URqutT_IuxI/AAAAAAAAAbs/D_bcuc0thoU/s1024/Highway%2525201.jpg\",\n\n            \"https://lh6.googleusercontent.com/-H4SrUg615rA/URquuL27fXI/AAAAAAAAAbs/4aEqJfiMsOU/s1024/Horseshoe%252520Bend%252520Sunset.jpg\",\n\n            \"https://lh4.googleusercontent.com/-JhFi4fb_Pqw/URquuX-QXbI/AAAAAAAAAbs/IXpYUxuweYM/s1024/Horseshoe%252520Bend.jpg\",\n\n            \"https://lh5.googleusercontent.com/-UGgssvFRJ7g/URquueyJzGI/AAAAAAAAAbs/yYIBlLT0toM/s1024/Into%252520the%252520Blue.jpg\",\n\n            \"https://lh3.googleusercontent.com/-CH7KoupI7uI/URquu0FF__I/AAAAAAAAAbs/R7GDmI7v_G0/s1024/Jelly%252520Fish%2525202.jpg\",\n\n            \"https://lh4.googleusercontent.com/-pwuuw6yhg8U/URquvPxR3FI/AAAAAAAAAbs/VNGk6f-tsGE/s1024/Jelly%252520Fish%2525203.jpg\",\n\n            \"https://lh5.googleusercontent.com/-GoUQVw1fnFw/URquv6xbC0I/AAAAAAAAAbs/zEUVTQQ43Zc/s1024/Kauai.jpg\",\n\n            \"https://lh6.googleusercontent.com/-8QdYYQEpYjw/URquwvdh88I/AAAAAAAAAbs/cktDy-ysfHo/s1024/Kyoto%252520Sunset.jpg\",\n\n            \"https://lh4.googleusercontent.com/-vPeekyDjOE0/URquwzJ28qI/AAAAAAAAAbs/qxcyXULsZrg/s1024/Lake%252520Tahoe%252520Colors.jpg\",\n\n            \"https://lh4.googleusercontent.com/-xBPxWpD4yxU/URquxWHk8AI/AAAAAAAAAbs/ARDPeDYPiMY/s1024/Lava%252520from%252520the%252520Sky.jpg\",\n\n            \"https://lh3.googleusercontent.com/-897VXrJB6RE/URquxxxd-5I/AAAAAAAAAbs/j-Cz4T4YvIw/s1024/Leica%25252050mm%252520Summilux.jpg\",\n\n            \"https://lh5.googleusercontent.com/-qSJ4D4iXzGo/URquyDWiJ1I/AAAAAAAAAbs/k2pBXeWehOA/s1024/Leica%25252050mm%252520Summilux.jpg\",\n\n            \"https://lh6.googleusercontent.com/-dwlPg83vzLg/URquylTVuFI/AAAAAAAAAbs/G6SyQ8b4YsI/s1024/Leica%252520M8%252520%252528Front%252529.jpg\",\n\n            \"https://lh3.googleusercontent.com/-R3_EYAyJvfk/URquzQBv8eI/AAAAAAAAAbs/b9xhpUM3pEI/s1024/Light%252520to%252520Sand.jpg\",\n\n            \"https://lh3.googleusercontent.com/-fHY5h67QPi0/URqu0Cp4J1I/AAAAAAAAAbs/0lG6m94Z6vM/s1024/Little%252520Bit%252520of%252520Paradise.jpg\",\n\n            \"https://lh5.googleusercontent.com/-TzF_LwrCnRM/URqu0RddPOI/AAAAAAAAAbs/gaj2dLiuX0s/s1024/Lone%252520Pine%252520Sunset.jpg\",\n\n            \"https://lh3.googleusercontent.com/-4HdpJ4_DXU4/URqu046dJ9I/AAAAAAAAAbs/eBOodtk2_uk/s1024/Lonely%252520Rock.jpg\",\n\n            \"https://lh6.googleusercontent.com/-erbF--z-W4s/URqu1ajSLkI/AAAAAAAAAbs/xjDCDO1INzM/s1024/Longue%252520Vue.jpg\",\n\n            \"https://lh6.googleusercontent.com/-0CXJRdJaqvc/URqu1opNZNI/AAAAAAAAAbs/PFB2oPUU7Lk/s1024/Look%252520Me%252520in%252520the%252520Eye.jpg\",\n\n            \"https://lh3.googleusercontent.com/-D_5lNxnDN6g/URqu2Tk7HVI/AAAAAAAAAbs/p0ddca9W__Y/s1024/Lost%252520in%252520a%252520Field.jpg\",\n\n            \"https://lh6.googleusercontent.com/-flsqwMrIk2Q/URqu24PcmjI/AAAAAAAAAbs/5ocIH85XofM/s1024/Marshall%252520Beach%252520Sunset.jpg\",\n\n            \"https://lh4.googleusercontent.com/-Y4lgryEVTmU/URqu28kG3gI/AAAAAAAAAbs/OjXpekqtbJ4/s1024/Mono%252520Lake%252520Blue.jpg\",\n\n            \"https://lh4.googleusercontent.com/-AaHAJPmcGYA/URqu3PIldHI/AAAAAAAAAbs/lcTqk1SIcRs/s1024/Monument%252520Valley%252520Overlook.jpg\",\n\n            \"https://lh4.googleusercontent.com/-vKxfdQ83dQA/URqu31Yq_BI/AAAAAAAAAbs/OUoGk_2AyfM/s1024/Moving%252520Rock.jpg\",\n\n            \"https://lh5.googleusercontent.com/-CG62QiPpWXg/URqu4ia4vRI/AAAAAAAAAbs/0YOdqLAlcAc/s1024/Napali%252520Coast.jpg\",\n\n            \"https://lh6.googleusercontent.com/-wdGrP5PMmJQ/URqu5PZvn7I/AAAAAAAAAbs/m0abEcdPXe4/s1024/One%252520Wheel.jpg\",\n\n            \"https://lh6.googleusercontent.com/-6WS5DoCGuOA/URqu5qx1UgI/AAAAAAAAAbs/giMw2ixPvrY/s1024/Open%252520Sky.jpg\",\n\n            \"https://lh6.googleusercontent.com/-u8EHKj8G8GQ/URqu55sM6yI/AAAAAAAAAbs/lIXX_GlTdmI/s1024/Orange%252520Sunset.jpg\",\n\n            \"https://lh6.googleusercontent.com/-74Z5qj4bTDE/URqu6LSrJrI/AAAAAAAAAbs/XzmVkw90szQ/s1024/Orchid.jpg\",\n\n            \"https://lh6.googleusercontent.com/-lEQE4h6TePE/URqu6t_lSkI/AAAAAAAAAbs/zvGYKOea_qY/s1024/Over%252520there.jpg\",\n\n            \"https://lh5.googleusercontent.com/-cauH-53JH2M/URqu66v_USI/AAAAAAAAAbs/EucwwqclfKQ/s1024/Plumes.jpg\",\n\n            \"https://lh3.googleusercontent.com/-eDLT2jHDoy4/URqu7axzkAI/AAAAAAAAAbs/iVZE-xJ7lZs/s1024/Rainbokeh.jpg\",\n\n            \"https://lh5.googleusercontent.com/-j1NLqEFIyco/URqu8L1CGcI/AAAAAAAAAbs/aqZkgX66zlI/s1024/Rainbow.jpg\",\n\n            \"https://lh5.googleusercontent.com/-DRnqmK0t4VU/URqu8XYN9yI/AAAAAAAAAbs/LgvF_592WLU/s1024/Rice%252520Fields.jpg\",\n\n            \"https://lh3.googleusercontent.com/-hwh1v3EOGcQ/URqu8qOaKwI/AAAAAAAAAbs/IljRJRnbJGw/s1024/Rockaway%252520Fire%252520Sky.jpg\",\n\n            \"https://lh5.googleusercontent.com/-wjV6FQk7tlk/URqu9jCQ8sI/AAAAAAAAAbs/RyYUpdo-c9o/s1024/Rockaway%252520Flow.jpg\",\n\n            \"https://lh6.googleusercontent.com/-6cAXNfo7D20/URqu-BdzgPI/AAAAAAAAAbs/OmsYllzJqwo/s1024/Rockaway%252520Sunset%252520Sky.jpg\",\n\n            \"https://lh3.googleusercontent.com/-sl8fpGPS-RE/URqu_BOkfgI/AAAAAAAAAbs/Dg2Fv-JxOeg/s1024/Russian%252520Ridge%252520Sunset.jpg\",\n\n            \"https://lh6.googleusercontent.com/-gVtY36mMBIg/URqu_q91lkI/AAAAAAAAAbs/3CiFMBcy5MA/s1024/Rust%252520Knot.jpg\",\n\n            \"https://lh6.googleusercontent.com/-GHeImuHqJBE/URqu_FKfVLI/AAAAAAAAAbs/axuEJeqam7Q/s1024/Sailing%252520Stones.jpg\",\n\n            \"https://lh3.googleusercontent.com/-hBbYZjTOwGc/URqu_ycpIrI/AAAAAAAAAbs/nAdJUXnGJYE/s1024/Seahorse.jpg\",\n\n            \"https://lh3.googleusercontent.com/-Iwi6-i6IexY/URqvAYZHsVI/AAAAAAAAAbs/5ETWl4qXsFE/s1024/Shinjuku%252520Street.jpg\",\n\n            \"https://lh6.googleusercontent.com/-amhnySTM_MY/URqvAlb5KoI/AAAAAAAAAbs/pFCFgzlKsn0/s1024/Sierra%252520Heavens.jpg\",\n\n            \"https://lh5.googleusercontent.com/-dJgjepFrYSo/URqvBVJZrAI/AAAAAAAAAbs/v-F5QWpYO6s/s1024/Sierra%252520Sunset.jpg\",\n\n            \"https://lh4.googleusercontent.com/-Z4zGiC5nWdc/URqvBdEwivI/AAAAAAAAAbs/ZRZR1VJ84QA/s1024/Sin%252520Lights.jpg\",\n\n            \"https://lh4.googleusercontent.com/-_0cYiWW8ccY/URqvBz3iM4I/AAAAAAAAAbs/9N_Wq8MhLTY/s1024/Starry%252520Lake.jpg\",\n\n            \"https://lh3.googleusercontent.com/-A9LMoRyuQUA/URqvCYx_JoI/AAAAAAAAAbs/s7sde1Bz9cI/s1024/Starry%252520Night.jpg\",\n\n            \"https://lh3.googleusercontent.com/-KtLJ3k858eY/URqvC_2h_bI/AAAAAAAAAbs/zzEBImwDA_g/s1024/Stream.jpg\",\n\n            \"https://lh5.googleusercontent.com/-dFB7Lad6RcA/URqvDUftwWI/AAAAAAAAAbs/BrhoUtXTN7o/s1024/Strip%252520Sunset.jpg\",\n\n            \"https://lh5.googleusercontent.com/-at6apgFiN20/URqvDyffUZI/AAAAAAAAAbs/clABCx171bE/s1024/Sunset%252520Hills.jpg\",\n\n            \"https://lh4.googleusercontent.com/-7-EHhtQthII/URqvEYTk4vI/AAAAAAAAAbs/QSJZoB3YjVg/s1024/Tenaya%252520Lake%2525202.jpg\",\n\n            \"https://lh6.googleusercontent.com/-8MrjV_a-Pok/URqvFC5repI/AAAAAAAAAbs/9inKTg9fbCE/s1024/Tenaya%252520Lake.jpg\",\n\n            \"https://lh5.googleusercontent.com/-B1HW-z4zwao/URqvFWYRwUI/AAAAAAAAAbs/8Peli53Bs8I/s1024/The%252520Cave%252520BW.jpg\",\n\n            \"https://lh3.googleusercontent.com/-PO4E-xZKAnQ/URqvGRqjYkI/AAAAAAAAAbs/42nyADFsXag/s1024/The%252520Fisherman.jpg\",\n\n            \"https://lh4.googleusercontent.com/-iLyZlzfdy7s/URqvG0YScdI/AAAAAAAAAbs/1J9eDKmkXtk/s1024/The%252520Night%252520is%252520Coming.jpg\",\n\n            \"https://lh6.googleusercontent.com/-G-k7YkkUco0/URqvHhah6fI/AAAAAAAAAbs/_taQQG7t0vo/s1024/The%252520Road.jpg\",\n\n            \"https://lh6.googleusercontent.com/-h-ALJt7kSus/URqvIThqYfI/AAAAAAAAAbs/ejiv35olWS8/s1024/Tokyo%252520Heights.jpg\",\n\n            \"https://lh5.googleusercontent.com/-Hy9k-TbS7xg/URqvIjQMOxI/AAAAAAAAAbs/RSpmmOATSkg/s1024/Tokyo%252520Highway.jpg\",\n\n            \"https://lh6.googleusercontent.com/-83oOvMb4OZs/URqvJL0T7lI/AAAAAAAAAbs/c5TECZ6RONM/s1024/Tokyo%252520Smog.jpg\",\n\n            \"https://lh3.googleusercontent.com/-FB-jfgREEfI/URqvJI3EXAI/AAAAAAAAAbs/XfyweiRF4v8/s1024/Tufa%252520at%252520Night.jpg\",\n\n            \"https://lh4.googleusercontent.com/-vngKD5Z1U8w/URqvJUCEgPI/AAAAAAAAAbs/ulxCMVcU6EU/s1024/Valley%252520Sunset.jpg\",\n\n            \"https://lh6.googleusercontent.com/-DOz5I2E2oMQ/URqvKMND1kI/AAAAAAAAAbs/Iqf0IsInleo/s1024/Windmill%252520Sunrise.jpg\",\n\n            \"https://lh5.googleusercontent.com/-biyiyWcJ9MU/URqvKculiAI/AAAAAAAAAbs/jyPsCplJOpE/s1024/Windmill.jpg\",\n\n            \"https://lh4.googleusercontent.com/-PDT167_xRdA/URqvK36mLcI/AAAAAAAAAbs/oi2ik9QseMI/s1024/Windmills.jpg\",\n\n            \"https://lh5.googleusercontent.com/-kI_QdYx7VlU/URqvLXCB6gI/AAAAAAAAAbs/N31vlZ6u89o/s1024/Yet%252520Another%252520Rockaway%252520Sunset.jpg\",\n\n            \"https://lh4.googleusercontent.com/-e9NHZ5k5MSs/URqvMIBZjtI/AAAAAAAAAbs/1fV810rDNfQ/s1024/Yosemite%252520Tree.jpg\",\n\n    };\n\n \n\n    /**\n\n     * This are PicasaWeb thumbnail URLs and could potentially change. Ideally the PicasaWeb API\n\n     * should be used to fetch the URLs.\n\n     *\n\n     * Credit to Romain Guy for the photos:\n\n     * http://www.curious-creature.org/\n\n     * https://plus.google.com/109538161516040592207/about\n\n     * http://www.flickr.com/photos/romainguy\n\n     */\n\n    public final static String[] imageThumbUrls = new String[] {\n\n            \"https://lh6.googleusercontent.com/-55osAWw3x0Q/URquUtcFr5I/AAAAAAAAAbs/rWlj1RUKrYI/s240-c/A%252520Photographer.jpg\",\n\n            \"https://lh4.googleusercontent.com/--dq8niRp7W4/URquVgmXvgI/AAAAAAAAAbs/-gnuLQfNnBA/s240-c/A%252520Song%252520of%252520Ice%252520and%252520Fire.jpg\",\n\n            \"https://lh5.googleusercontent.com/-7qZeDtRKFKc/URquWZT1gOI/AAAAAAAAAbs/hqWgteyNXsg/s240-c/Another%252520Rockaway%252520Sunset.jpg\",\n\n            \"https://lh3.googleusercontent.com/--L0Km39l5J8/URquXHGcdNI/AAAAAAAAAbs/3ZrSJNrSomQ/s240-c/Antelope%252520Butte.jpg\",\n\n            \"https://lh6.googleusercontent.com/-8HO-4vIFnlw/URquZnsFgtI/AAAAAAAAAbs/WT8jViTF7vw/s240-c/Antelope%252520Hallway.jpg\",\n\n            \"https://lh4.googleusercontent.com/-WIuWgVcU3Qw/URqubRVcj4I/AAAAAAAAAbs/YvbwgGjwdIQ/s240-c/Antelope%252520Walls.jpg\",\n\n            \"https://lh6.googleusercontent.com/-UBmLbPELvoQ/URqucCdv0kI/AAAAAAAAAbs/IdNhr2VQoQs/s240-c/Apre%2525CC%252580s%252520la%252520Pluie.jpg\",\n\n            \"https://lh3.googleusercontent.com/-s-AFpvgSeew/URquc6dF-JI/AAAAAAAAAbs/Mt3xNGRUd68/s240-c/Backlit%252520Cloud.jpg\",\n\n            \"https://lh5.googleusercontent.com/-bvmif9a9YOQ/URquea3heHI/AAAAAAAAAbs/rcr6wyeQtAo/s240-c/Bee%252520and%252520Flower.jpg\",\n\n            \"https://lh5.googleusercontent.com/-n7mdm7I7FGs/URqueT_BT-I/AAAAAAAAAbs/9MYmXlmpSAo/s240-c/Bonzai%252520Rock%252520Sunset.jpg\",\n\n            \"https://lh6.googleusercontent.com/-4CN4X4t0M1k/URqufPozWzI/AAAAAAAAAbs/8wK41lg1KPs/s240-c/Caterpillar.jpg\",\n\n            \"https://lh3.googleusercontent.com/-rrFnVC8xQEg/URqufdrLBaI/AAAAAAAAAbs/s69WYy_fl1E/s240-c/Chess.jpg\",\n\n            \"https://lh5.googleusercontent.com/-WVpRptWH8Yw/URqugh-QmDI/AAAAAAAAAbs/E-MgBgtlUWU/s240-c/Chihuly.jpg\",\n\n            \"https://lh5.googleusercontent.com/-0BDXkYmckbo/URquhKFW84I/AAAAAAAAAbs/ogQtHCTk2JQ/s240-c/Closed%252520Door.jpg\",\n\n            \"https://lh3.googleusercontent.com/-PyggXXZRykM/URquh-kVvoI/AAAAAAAAAbs/hFtDwhtrHHQ/s240-c/Colorado%252520River%252520Sunset.jpg\",\n\n            \"https://lh3.googleusercontent.com/-ZAs4dNZtALc/URquikvOCWI/AAAAAAAAAbs/DXz4h3dll1Y/s240-c/Colors%252520of%252520Autumn.jpg\",\n\n            \"https://lh4.googleusercontent.com/-GztnWEIiMz8/URqukVCU7bI/AAAAAAAAAbs/jo2Hjv6MZ6M/s240-c/Countryside.jpg\",\n\n            \"https://lh4.googleusercontent.com/-bEg9EZ9QoiM/URquklz3FGI/AAAAAAAAAbs/UUuv8Ac2BaE/s240-c/Death%252520Valley%252520-%252520Dunes.jpg\",\n\n            \"https://lh6.googleusercontent.com/-ijQJ8W68tEE/URqulGkvFEI/AAAAAAAAAbs/zPXvIwi_rFw/s240-c/Delicate%252520Arch.jpg\",\n\n            \"https://lh5.googleusercontent.com/-Oh8mMy2ieng/URqullDwehI/AAAAAAAAAbs/TbdeEfsaIZY/s240-c/Despair.jpg\",\n\n            \"https://lh5.googleusercontent.com/-gl0y4UiAOlk/URqumC_KjBI/AAAAAAAAAbs/PM1eT7dn4oo/s240-c/Eagle%252520Fall%252520Sunrise.jpg\",\n\n            \"https://lh3.googleusercontent.com/-hYYHd2_vXPQ/URqumtJa9eI/AAAAAAAAAbs/wAalXVkbSh0/s240-c/Electric%252520Storm.jpg\",\n\n            \"https://lh5.googleusercontent.com/-PyY_yiyjPTo/URqunUOhHFI/AAAAAAAAAbs/azZoULNuJXc/s240-c/False%252520Kiva.jpg\",\n\n            \"https://lh6.googleusercontent.com/-PYvLVdvXywk/URqunwd8hfI/AAAAAAAAAbs/qiMwgkFvf6I/s240-c/Fitzgerald%252520Streaks.jpg\",\n\n            \"https://lh4.googleusercontent.com/-KIR_UobIIqY/URquoCZ9SlI/AAAAAAAAAbs/Y4d4q8sXu4c/s240-c/Foggy%252520Sunset.jpg\",\n\n            \"https://lh6.googleusercontent.com/-9lzOk_OWZH0/URquoo4xYoI/AAAAAAAAAbs/AwgzHtNVCwU/s240-c/Frantic.jpg\",\n\n            \"https://lh3.googleusercontent.com/-0X3JNaKaz48/URqupH78wpI/AAAAAAAAAbs/lHXxu_zbH8s/s240-c/Golden%252520Gate%252520Afternoon.jpg\",\n\n            \"https://lh6.googleusercontent.com/-95sb5ag7ABc/URqupl95RDI/AAAAAAAAAbs/g73R20iVTRA/s240-c/Golden%252520Gate%252520Fog.jpg\",\n\n            \"https://lh3.googleusercontent.com/-JB9v6rtgHhk/URqup21F-zI/AAAAAAAAAbs/64Fb8qMZWXk/s240-c/Golden%252520Grass.jpg\",\n\n            \"https://lh4.googleusercontent.com/-EIBGfnuLtII/URquqVHwaRI/AAAAAAAAAbs/FA4McV2u8VE/s240-c/Grand%252520Teton.jpg\",\n\n            \"https://lh4.googleusercontent.com/-WoMxZvmN9nY/URquq1v2AoI/AAAAAAAAAbs/grj5uMhL6NA/s240-c/Grass%252520Closeup.jpg\",\n\n            \"https://lh3.googleusercontent.com/-6hZiEHXx64Q/URqurxvNdqI/AAAAAAAAAbs/kWMXM3o5OVI/s240-c/Green%252520Grass.jpg\",\n\n            \"https://lh5.googleusercontent.com/-6LVb9OXtQ60/URquteBFuKI/AAAAAAAAAbs/4F4kRgecwFs/s240-c/Hanging%252520Leaf.jpg\",\n\n            \"https://lh4.googleusercontent.com/-zAvf__52ONk/URqutT_IuxI/AAAAAAAAAbs/D_bcuc0thoU/s240-c/Highway%2525201.jpg\",\n\n            \"https://lh6.googleusercontent.com/-H4SrUg615rA/URquuL27fXI/AAAAAAAAAbs/4aEqJfiMsOU/s240-c/Horseshoe%252520Bend%252520Sunset.jpg\",\n\n            \"https://lh4.googleusercontent.com/-JhFi4fb_Pqw/URquuX-QXbI/AAAAAAAAAbs/IXpYUxuweYM/s240-c/Horseshoe%252520Bend.jpg\",\n\n            \"https://lh5.googleusercontent.com/-UGgssvFRJ7g/URquueyJzGI/AAAAAAAAAbs/yYIBlLT0toM/s240-c/Into%252520the%252520Blue.jpg\",\n\n            \"https://lh3.googleusercontent.com/-CH7KoupI7uI/URquu0FF__I/AAAAAAAAAbs/R7GDmI7v_G0/s240-c/Jelly%252520Fish%2525202.jpg\",\n\n            \"https://lh4.googleusercontent.com/-pwuuw6yhg8U/URquvPxR3FI/AAAAAAAAAbs/VNGk6f-tsGE/s240-c/Jelly%252520Fish%2525203.jpg\",\n\n            \"https://lh5.googleusercontent.com/-GoUQVw1fnFw/URquv6xbC0I/AAAAAAAAAbs/zEUVTQQ43Zc/s240-c/Kauai.jpg\",\n\n            \"https://lh6.googleusercontent.com/-8QdYYQEpYjw/URquwvdh88I/AAAAAAAAAbs/cktDy-ysfHo/s240-c/Kyoto%252520Sunset.jpg\",\n\n            \"https://lh4.googleusercontent.com/-vPeekyDjOE0/URquwzJ28qI/AAAAAAAAAbs/qxcyXULsZrg/s240-c/Lake%252520Tahoe%252520Colors.jpg\",\n\n            \"https://lh4.googleusercontent.com/-xBPxWpD4yxU/URquxWHk8AI/AAAAAAAAAbs/ARDPeDYPiMY/s240-c/Lava%252520from%252520the%252520Sky.jpg\",\n\n            \"https://lh3.googleusercontent.com/-897VXrJB6RE/URquxxxd-5I/AAAAAAAAAbs/j-Cz4T4YvIw/s240-c/Leica%25252050mm%252520Summilux.jpg\",\n\n            \"https://lh5.googleusercontent.com/-qSJ4D4iXzGo/URquyDWiJ1I/AAAAAAAAAbs/k2pBXeWehOA/s240-c/Leica%25252050mm%252520Summilux.jpg\",\n\n            \"https://lh6.googleusercontent.com/-dwlPg83vzLg/URquylTVuFI/AAAAAAAAAbs/G6SyQ8b4YsI/s240-c/Leica%252520M8%252520%252528Front%252529.jpg\",\n\n            \"https://lh3.googleusercontent.com/-R3_EYAyJvfk/URquzQBv8eI/AAAAAAAAAbs/b9xhpUM3pEI/s240-c/Light%252520to%252520Sand.jpg\",\n\n            \"https://lh3.googleusercontent.com/-fHY5h67QPi0/URqu0Cp4J1I/AAAAAAAAAbs/0lG6m94Z6vM/s240-c/Little%252520Bit%252520of%252520Paradise.jpg\",\n\n            \"https://lh5.googleusercontent.com/-TzF_LwrCnRM/URqu0RddPOI/AAAAAAAAAbs/gaj2dLiuX0s/s240-c/Lone%252520Pine%252520Sunset.jpg\",\n\n            \"https://lh3.googleusercontent.com/-4HdpJ4_DXU4/URqu046dJ9I/AAAAAAAAAbs/eBOodtk2_uk/s240-c/Lonely%252520Rock.jpg\",\n\n            \"https://lh6.googleusercontent.com/-erbF--z-W4s/URqu1ajSLkI/AAAAAAAAAbs/xjDCDO1INzM/s240-c/Longue%252520Vue.jpg\",\n\n            \"https://lh6.googleusercontent.com/-0CXJRdJaqvc/URqu1opNZNI/AAAAAAAAAbs/PFB2oPUU7Lk/s240-c/Look%252520Me%252520in%252520the%252520Eye.jpg\",\n\n            \"https://lh3.googleusercontent.com/-D_5lNxnDN6g/URqu2Tk7HVI/AAAAAAAAAbs/p0ddca9W__Y/s240-c/Lost%252520in%252520a%252520Field.jpg\",\n\n            \"https://lh6.googleusercontent.com/-flsqwMrIk2Q/URqu24PcmjI/AAAAAAAAAbs/5ocIH85XofM/s240-c/Marshall%252520Beach%252520Sunset.jpg\",\n\n            \"https://lh4.googleusercontent.com/-Y4lgryEVTmU/URqu28kG3gI/AAAAAAAAAbs/OjXpekqtbJ4/s240-c/Mono%252520Lake%252520Blue.jpg\",\n\n            \"https://lh4.googleusercontent.com/-AaHAJPmcGYA/URqu3PIldHI/AAAAAAAAAbs/lcTqk1SIcRs/s240-c/Monument%252520Valley%252520Overlook.jpg\",\n\n            \"https://lh4.googleusercontent.com/-vKxfdQ83dQA/URqu31Yq_BI/AAAAAAAAAbs/OUoGk_2AyfM/s240-c/Moving%252520Rock.jpg\",\n\n            \"https://lh5.googleusercontent.com/-CG62QiPpWXg/URqu4ia4vRI/AAAAAAAAAbs/0YOdqLAlcAc/s240-c/Napali%252520Coast.jpg\",\n\n            \"https://lh6.googleusercontent.com/-wdGrP5PMmJQ/URqu5PZvn7I/AAAAAAAAAbs/m0abEcdPXe4/s240-c/One%252520Wheel.jpg\",\n\n            \"https://lh6.googleusercontent.com/-6WS5DoCGuOA/URqu5qx1UgI/AAAAAAAAAbs/giMw2ixPvrY/s240-c/Open%252520Sky.jpg\",\n\n            \"https://lh6.googleusercontent.com/-u8EHKj8G8GQ/URqu55sM6yI/AAAAAAAAAbs/lIXX_GlTdmI/s240-c/Orange%252520Sunset.jpg\",\n\n            \"https://lh6.googleusercontent.com/-74Z5qj4bTDE/URqu6LSrJrI/AAAAAAAAAbs/XzmVkw90szQ/s240-c/Orchid.jpg\",\n\n            \"https://lh6.googleusercontent.com/-lEQE4h6TePE/URqu6t_lSkI/AAAAAAAAAbs/zvGYKOea_qY/s240-c/Over%252520there.jpg\",\n\n            \"https://lh5.googleusercontent.com/-cauH-53JH2M/URqu66v_USI/AAAAAAAAAbs/EucwwqclfKQ/s240-c/Plumes.jpg\",\n\n            \"https://lh3.googleusercontent.com/-eDLT2jHDoy4/URqu7axzkAI/AAAAAAAAAbs/iVZE-xJ7lZs/s240-c/Rainbokeh.jpg\",\n\n            \"https://lh5.googleusercontent.com/-j1NLqEFIyco/URqu8L1CGcI/AAAAAAAAAbs/aqZkgX66zlI/s240-c/Rainbow.jpg\",\n\n            \"https://lh5.googleusercontent.com/-DRnqmK0t4VU/URqu8XYN9yI/AAAAAAAAAbs/LgvF_592WLU/s240-c/Rice%252520Fields.jpg\",\n\n            \"https://lh3.googleusercontent.com/-hwh1v3EOGcQ/URqu8qOaKwI/AAAAAAAAAbs/IljRJRnbJGw/s240-c/Rockaway%252520Fire%252520Sky.jpg\",\n\n            \"https://lh5.googleusercontent.com/-wjV6FQk7tlk/URqu9jCQ8sI/AAAAAAAAAbs/RyYUpdo-c9o/s240-c/Rockaway%252520Flow.jpg\",\n\n            \"https://lh6.googleusercontent.com/-6cAXNfo7D20/URqu-BdzgPI/AAAAAAAAAbs/OmsYllzJqwo/s240-c/Rockaway%252520Sunset%252520Sky.jpg\",\n\n            \"https://lh3.googleusercontent.com/-sl8fpGPS-RE/URqu_BOkfgI/AAAAAAAAAbs/Dg2Fv-JxOeg/s240-c/Russian%252520Ridge%252520Sunset.jpg\",\n\n            \"https://lh6.googleusercontent.com/-gVtY36mMBIg/URqu_q91lkI/AAAAAAAAAbs/3CiFMBcy5MA/s240-c/Rust%252520Knot.jpg\",\n\n            \"https://lh6.googleusercontent.com/-GHeImuHqJBE/URqu_FKfVLI/AAAAAAAAAbs/axuEJeqam7Q/s240-c/Sailing%252520Stones.jpg\",\n\n            \"https://lh3.googleusercontent.com/-hBbYZjTOwGc/URqu_ycpIrI/AAAAAAAAAbs/nAdJUXnGJYE/s240-c/Seahorse.jpg\",\n\n            \"https://lh3.googleusercontent.com/-Iwi6-i6IexY/URqvAYZHsVI/AAAAAAAAAbs/5ETWl4qXsFE/s240-c/Shinjuku%252520Street.jpg\",\n\n            \"https://lh6.googleusercontent.com/-amhnySTM_MY/URqvAlb5KoI/AAAAAAAAAbs/pFCFgzlKsn0/s240-c/Sierra%252520Heavens.jpg\",\n\n            \"https://lh5.googleusercontent.com/-dJgjepFrYSo/URqvBVJZrAI/AAAAAAAAAbs/v-F5QWpYO6s/s240-c/Sierra%252520Sunset.jpg\",\n\n            \"https://lh4.googleusercontent.com/-Z4zGiC5nWdc/URqvBdEwivI/AAAAAAAAAbs/ZRZR1VJ84QA/s240-c/Sin%252520Lights.jpg\",\n\n            \"https://lh4.googleusercontent.com/-_0cYiWW8ccY/URqvBz3iM4I/AAAAAAAAAbs/9N_Wq8MhLTY/s240-c/Starry%252520Lake.jpg\",\n\n            \"https://lh3.googleusercontent.com/-A9LMoRyuQUA/URqvCYx_JoI/AAAAAAAAAbs/s7sde1Bz9cI/s240-c/Starry%252520Night.jpg\",\n\n            \"https://lh3.googleusercontent.com/-KtLJ3k858eY/URqvC_2h_bI/AAAAAAAAAbs/zzEBImwDA_g/s240-c/Stream.jpg\",\n\n            \"https://lh5.googleusercontent.com/-dFB7Lad6RcA/URqvDUftwWI/AAAAAAAAAbs/BrhoUtXTN7o/s240-c/Strip%252520Sunset.jpg\",\n\n            \"https://lh5.googleusercontent.com/-at6apgFiN20/URqvDyffUZI/AAAAAAAAAbs/clABCx171bE/s240-c/Sunset%252520Hills.jpg\",\n\n            \"https://lh4.googleusercontent.com/-7-EHhtQthII/URqvEYTk4vI/AAAAAAAAAbs/QSJZoB3YjVg/s240-c/Tenaya%252520Lake%2525202.jpg\",\n\n            \"https://lh6.googleusercontent.com/-8MrjV_a-Pok/URqvFC5repI/AAAAAAAAAbs/9inKTg9fbCE/s240-c/Tenaya%252520Lake.jpg\",\n\n            \"https://lh5.googleusercontent.com/-B1HW-z4zwao/URqvFWYRwUI/AAAAAAAAAbs/8Peli53Bs8I/s240-c/The%252520Cave%252520BW.jpg\",\n\n            \"https://lh3.googleusercontent.com/-PO4E-xZKAnQ/URqvGRqjYkI/AAAAAAAAAbs/42nyADFsXag/s240-c/The%252520Fisherman.jpg\",\n\n            \"https://lh4.googleusercontent.com/-iLyZlzfdy7s/URqvG0YScdI/AAAAAAAAAbs/1J9eDKmkXtk/s240-c/The%252520Night%252520is%252520Coming.jpg\",\n\n            \"https://lh6.googleusercontent.com/-G-k7YkkUco0/URqvHhah6fI/AAAAAAAAAbs/_taQQG7t0vo/s240-c/The%252520Road.jpg\",\n\n            \"https://lh6.googleusercontent.com/-h-ALJt7kSus/URqvIThqYfI/AAAAAAAAAbs/ejiv35olWS8/s240-c/Tokyo%252520Heights.jpg\",\n\n            \"https://lh5.googleusercontent.com/-Hy9k-TbS7xg/URqvIjQMOxI/AAAAAAAAAbs/RSpmmOATSkg/s240-c/Tokyo%252520Highway.jpg\",\n\n            \"https://lh6.googleusercontent.com/-83oOvMb4OZs/URqvJL0T7lI/AAAAAAAAAbs/c5TECZ6RONM/s240-c/Tokyo%252520Smog.jpg\",\n\n            \"https://lh3.googleusercontent.com/-FB-jfgREEfI/URqvJI3EXAI/AAAAAAAAAbs/XfyweiRF4v8/s240-c/Tufa%252520at%252520Night.jpg\",\n\n            \"https://lh4.googleusercontent.com/-vngKD5Z1U8w/URqvJUCEgPI/AAAAAAAAAbs/ulxCMVcU6EU/s240-c/Valley%252520Sunset.jpg\",\n\n            \"https://lh6.googleusercontent.com/-DOz5I2E2oMQ/URqvKMND1kI/AAAAAAAAAbs/Iqf0IsInleo/s240-c/Windmill%252520Sunrise.jpg\",\n\n            \"https://lh5.googleusercontent.com/-biyiyWcJ9MU/URqvKculiAI/AAAAAAAAAbs/jyPsCplJOpE/s240-c/Windmill.jpg\",\n\n            \"https://lh4.googleusercontent.com/-PDT167_xRdA/URqvK36mLcI/AAAAAAAAAbs/oi2ik9QseMI/s240-c/Windmills.jpg\",\n\n            \"https://lh5.googleusercontent.com/-kI_QdYx7VlU/URqvLXCB6gI/AAAAAAAAAbs/N31vlZ6u89o/s240-c/Yet%252520Another%252520Rockaway%252520Sunset.jpg\",\n\n            \"https://lh4.googleusercontent.com/-e9NHZ5k5MSs/URqvMIBZjtI/AAAAAAAAAbs/1fV810rDNfQ/s240-c/Yosemite%252520Tree.jpg\",\n\n    };\n\n}\n  "},"ui":{"ImageDetailActivity.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.displayingbitmaps.ui;\n\n \n\nimport android.annotation.TargetApi;\n\nimport android.app.ActionBar;\n\nimport android.os.Build.VERSION_CODES;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.support.v4.app.FragmentActivity;\n\nimport android.support.v4.app.FragmentManager;\n\nimport android.support.v4.app.FragmentStatePagerAdapter;\n\nimport android.support.v4.app.NavUtils;\n\nimport android.support.v4.view.ViewPager;\n\nimport android.util.DisplayMetrics;\n\nimport android.view.Menu;\n\nimport android.view.MenuItem;\n\nimport android.view.View;\n\nimport android.view.View.OnClickListener;\n\nimport android.view.WindowManager.LayoutParams;\n\nimport android.widget.Toast;\n\n \n\nimport com.example.android.displayingbitmaps.BuildConfig;\n\nimport com.example.android.displayingbitmaps.R;\n\nimport com.example.android.displayingbitmaps.provider.Images;\n\nimport com.example.android.displayingbitmaps.util.ImageCache;\n\nimport com.example.android.displayingbitmaps.util.ImageFetcher;\n\nimport com.example.android.displayingbitmaps.util.Utils;\n\n \n\npublic class ImageDetailActivity extends FragmentActivity implements OnClickListener {\n\n    private static final String IMAGE_CACHE_DIR = \"images\";\n\n    public static final String EXTRA_IMAGE = \"extra_image\";\n\n \n\n    private ImagePagerAdapter mAdapter;\n\n    private ImageFetcher mImageFetcher;\n\n    private ViewPager mPager;\n\n \n\n    @TargetApi(VERSION_CODES.HONEYCOMB)\n\n    @Override\n\n    public void onCreate(Bundle savedInstanceState) {\n\n        if (BuildConfig.DEBUG) {\n\n            Utils.enableStrictMode();\n\n        }\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.image_detail_pager);\n\n \n\n        // Fetch screen height and width, to use as our max size when loading images as this\n\n        // activity runs full screen\n\n        final DisplayMetrics displayMetrics = new DisplayMetrics();\n\n        getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);\n\n        final int height = displayMetrics.heightPixels;\n\n        final int width = displayMetrics.widthPixels;\n\n \n\n        // For this sample we'll use half of the longest width to resize our images. As the\n\n        // image scaling ensures the image is larger than this, we should be left with a\n\n        // resolution that is appropriate for both portrait and landscape. For best image quality\n\n        // we shouldn't divide by 2, but this will use more memory and require a larger memory\n\n        // cache.\n\n        final int longest = (height > width ? height : width) / 2;\n\n \n\n        ImageCache.ImageCacheParams cacheParams =\n\n                new ImageCache.ImageCacheParams(this, IMAGE_CACHE_DIR);\n\n        cacheParams.setMemCacheSizePercent(0.25f); // Set memory cache to 25% of app memory\n\n \n\n        // The ImageFetcher takes care of loading images into our ImageView children asynchronously\n\n        mImageFetcher = new ImageFetcher(this, longest);\n\n        mImageFetcher.addImageCache(getSupportFragmentManager(), cacheParams);\n\n        mImageFetcher.setImageFadeIn(false);\n\n \n\n        // Set up ViewPager and backing adapter\n\n        mAdapter = new ImagePagerAdapter(getSupportFragmentManager(), Images.imageUrls.length);\n\n        mPager = (ViewPager) findViewById(R.id.pager);\n\n        mPager.setAdapter(mAdapter);\n\n        mPager.setPageMargin((int) getResources().getDimension(R.dimen.horizontal_page_margin));\n\n        mPager.setOffscreenPageLimit(2);\n\n \n\n        // Set up activity to go full screen\n\n        getWindow().addFlags(LayoutParams.FLAG_FULLSCREEN);\n\n \n\n        // Enable some additional newer visibility and ActionBar features to create a more\n\n        // immersive photo viewing experience\n\n        if (Utils.hasHoneycomb()) {\n\n            final ActionBar actionBar = getActionBar();\n\n \n\n            // Hide title text and set home as up\n\n            actionBar.setDisplayShowTitleEnabled(false);\n\n            actionBar.setDisplayHomeAsUpEnabled(true);\n\n \n\n            // Hide and show the ActionBar as the visibility changes\n\n            mPager.setOnSystemUiVisibilityChangeListener(\n\n                    new View.OnSystemUiVisibilityChangeListener() {\n\n                        @Override\n\n                        public void onSystemUiVisibilityChange(int vis) {\n\n                            if ((vis & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0) {\n\n                                actionBar.hide();\n\n                            } else {\n\n                                actionBar.show();\n\n                            }\n\n                        }\n\n                    });\n\n \n\n            // Start low profile mode and hide ActionBar\n\n            mPager.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LOW_PROFILE);\n\n            actionBar.hide();\n\n        }\n\n \n\n        // Set the current item based on the extra passed in to this activity\n\n        final int extraCurrentItem = getIntent().getIntExtra(EXTRA_IMAGE, -1);\n\n        if (extraCurrentItem != -1) {\n\n            mPager.setCurrentItem(extraCurrentItem);\n\n        }\n\n    }\n\n \n\n    @Override\n\n    public void onResume() {\n\n        super.onResume();\n\n        mImageFetcher.setExitTasksEarly(false);\n\n    }\n\n \n\n    @Override\n\n    protected void onPause() {\n\n        super.onPause();\n\n        mImageFetcher.setExitTasksEarly(true);\n\n        mImageFetcher.flushCache();\n\n    }\n\n \n\n    @Override\n\n    protected void onDestroy() {\n\n        super.onDestroy();\n\n        mImageFetcher.closeCache();\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch (item.getItemId()) {\n\n            case android.R.id.home:\n\n                NavUtils.navigateUpFromSameTask(this);\n\n                return true;\n\n            case R.id.clear_cache:\n\n                mImageFetcher.clearCache();\n\n                Toast.makeText(\n\n                        this, R.string.clear_cache_complete_toast,Toast.LENGTH_SHORT).show();\n\n                return true;\n\n        }\n\n        return super.onOptionsItemSelected(item);\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        getMenuInflater().inflate(R.menu.main_menu, menu);\n\n        return true;\n\n    }\n\n \n\n    /**\n\n     * Called by the ViewPager child fragments to load images via the one ImageFetcher\n\n     */\n\n    public ImageFetcher getImageFetcher() {\n\n        return mImageFetcher;\n\n    }\n\n \n\n    /**\n\n     * The main adapter that backs the ViewPager. A subclass of FragmentStatePagerAdapter as there\n\n     * could be a large number of items in the ViewPager and we don't want to retain them all in\n\n     * memory at once but create/destroy them on the fly.\n\n     */\n\n    private class ImagePagerAdapter extends FragmentStatePagerAdapter {\n\n        private final int mSize;\n\n \n\n        public ImagePagerAdapter(FragmentManager fm, int size) {\n\n            super(fm);\n\n            mSize = size;\n\n        }\n\n \n\n        @Override\n\n        public int getCount() {\n\n            return mSize;\n\n        }\n\n \n\n        @Override\n\n        public Fragment getItem(int position) {\n\n            return ImageDetailFragment.newInstance(Images.imageUrls[position]);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Set on the ImageView in the ViewPager children fragments, to enable/disable low profile mode\n\n     * when the ImageView is touched.\n\n     */\n\n    @TargetApi(VERSION_CODES.HONEYCOMB)\n\n    @Override\n\n    public void onClick(View v) {\n\n        final int vis = mPager.getSystemUiVisibility();\n\n        if ((vis & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0) {\n\n            mPager.setSystemUiVisibility(View.SYSTEM_UI_FLAG_VISIBLE);\n\n        } else {\n\n            mPager.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LOW_PROFILE);\n\n        }\n\n    }\n\n}\n  ","ImageDetailFragment.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.displayingbitmaps.ui;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.View.OnClickListener;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ImageView;\n\n \n\nimport com.example.android.displayingbitmaps.R;\n\nimport com.example.android.displayingbitmaps.util.ImageFetcher;\n\nimport com.example.android.displayingbitmaps.util.ImageWorker;\n\nimport com.example.android.displayingbitmaps.util.Utils;\n\n \n\n/**\n\n * This fragment will populate the children of the ViewPager from {@link ImageDetailActivity}.\n\n */\n\npublic class ImageDetailFragment extends Fragment {\n\n    private static final String IMAGE_DATA_EXTRA = \"extra_image_data\";\n\n    private String mImageUrl;\n\n    private ImageView mImageView;\n\n    private ImageFetcher mImageFetcher;\n\n \n\n    /**\n\n     * Factory method to generate a new instance of the fragment given an image number.\n\n     *\n\n     * @param imageUrl The image url to load\n\n     * @return A new instance of ImageDetailFragment with imageNum extras\n\n     */\n\n    public static ImageDetailFragment newInstance(String imageUrl) {\n\n        final ImageDetailFragment f = new ImageDetailFragment();\n\n \n\n        final Bundle args = new Bundle();\n\n        args.putString(IMAGE_DATA_EXTRA, imageUrl);\n\n        f.setArguments(args);\n\n \n\n        return f;\n\n    }\n\n \n\n    /**\n\n     * Empty constructor as per the Fragment documentation\n\n     */\n\n    public ImageDetailFragment() {}\n\n \n\n    /**\n\n     * Populate image using a url from extras, use the convenience factory method\n\n     * {@link ImageDetailFragment#newInstance(String)} to create this fragment.\n\n     */\n\n    @Override\n\n    public void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        mImageUrl = getArguments() != null ? getArguments().getString(IMAGE_DATA_EXTRA) : null;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n            Bundle savedInstanceState) {\n\n        // Inflate and locate the main ImageView\n\n        final View v = inflater.inflate(R.layout.image_detail_fragment, container, false);\n\n        mImageView = (ImageView) v.findViewById(R.id.imageView);\n\n        return v;\n\n    }\n\n \n\n    @Override\n\n    public void onActivityCreated(Bundle savedInstanceState) {\n\n        super.onActivityCreated(savedInstanceState);\n\n \n\n        // Use the parent activity to load the image asynchronously into the ImageView (so a single\n\n        // cache can be used over all pages in the ViewPager\n\n        if (ImageDetailActivity.class.isInstance(getActivity())) {\n\n            mImageFetcher = ((ImageDetailActivity) getActivity()).getImageFetcher();\n\n            mImageFetcher.loadImage(mImageUrl, mImageView);\n\n        }\n\n \n\n        // Pass clicks on the ImageView to the parent activity to handle\n\n        if (OnClickListener.class.isInstance(getActivity()) && Utils.hasHoneycomb()) {\n\n            mImageView.setOnClickListener((OnClickListener) getActivity());\n\n        }\n\n    }\n\n \n\n    @Override\n\n    public void onDestroy() {\n\n        super.onDestroy();\n\n        if (mImageView != null) {\n\n            // Cancel any pending image work\n\n            ImageWorker.cancelWork(mImageView);\n\n            mImageView.setImageDrawable(null);\n\n        }\n\n    }\n\n}\n  ","ImageGridActivity.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.displayingbitmaps.ui;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentActivity;\n\nimport android.support.v4.app.FragmentTransaction;\n\n \n\nimport com.example.android.displayingbitmaps.BuildConfig;\n\nimport com.example.android.displayingbitmaps.util.Utils;\n\n \n\n/**\n\n * Simple FragmentActivity to hold the main {@link ImageGridFragment} and not much else.\n\n */\n\npublic class ImageGridActivity extends FragmentActivity {\n\n    private static final String TAG = \"ImageGridActivity\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        if (BuildConfig.DEBUG) {\n\n            Utils.enableStrictMode();\n\n        }\n\n        super.onCreate(savedInstanceState);\n\n \n\n        if (getSupportFragmentManager().findFragmentByTag(TAG) == null) {\n\n            final FragmentTransaction ft = getSupportFragmentManager().beginTransaction();\n\n            ft.add(android.R.id.content, new ImageGridFragment(), TAG);\n\n            ft.commit();\n\n        }\n\n    }\n\n}\n  ","ImageGridFragment.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.displayingbitmaps.ui;\n\n \n\nimport android.annotation.TargetApi;\n\nimport android.app.ActivityOptions;\n\nimport android.content.Context;\n\nimport android.content.Intent;\n\nimport android.os.Build.VERSION_CODES;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.util.TypedValue;\n\nimport android.view.LayoutInflater;\n\nimport android.view.Menu;\n\nimport android.view.MenuInflater;\n\nimport android.view.MenuItem;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.view.ViewGroup.LayoutParams;\n\nimport android.view.ViewTreeObserver;\n\nimport android.widget.AbsListView;\n\nimport android.widget.AdapterView;\n\nimport android.widget.BaseAdapter;\n\nimport android.widget.GridView;\n\nimport android.widget.ImageView;\n\nimport android.widget.Toast;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.displayingbitmaps.BuildConfig;\n\nimport com.example.android.displayingbitmaps.R;\n\nimport com.example.android.displayingbitmaps.provider.Images;\n\nimport com.example.android.displayingbitmaps.util.ImageCache;\n\nimport com.example.android.displayingbitmaps.util.ImageFetcher;\n\nimport com.example.android.displayingbitmaps.util.Utils;\n\n \n\n/**\n\n * The main fragment that powers the ImageGridActivity screen. Fairly straight forward GridView\n\n * implementation with the key addition being the ImageWorker class w/ImageCache to load children\n\n * asynchronously, keeping the UI nice and smooth and caching thumbnails for quick retrieval. The\n\n * cache is retained over configuration changes like orientation change so the images are populated\n\n * quickly if, for example, the user rotates the device.\n\n */\n\npublic class ImageGridFragment extends Fragment implements AdapterView.OnItemClickListener {\n\n    private static final String TAG = \"ImageGridFragment\";\n\n    private static final String IMAGE_CACHE_DIR = \"thumbs\";\n\n \n\n    private int mImageThumbSize;\n\n    private int mImageThumbSpacing;\n\n    private ImageAdapter mAdapter;\n\n    private ImageFetcher mImageFetcher;\n\n \n\n    /**\n\n     * Empty constructor as per the Fragment documentation\n\n     */\n\n    public ImageGridFragment() {}\n\n \n\n    @Override\n\n    public void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setHasOptionsMenu(true);\n\n \n\n        mImageThumbSize = getResources().getDimensionPixelSize(R.dimen.image_thumbnail_size);\n\n        mImageThumbSpacing = getResources().getDimensionPixelSize(R.dimen.image_thumbnail_spacing);\n\n \n\n        mAdapter = new ImageAdapter(getActivity());\n\n \n\n        ImageCache.ImageCacheParams cacheParams =\n\n                new ImageCache.ImageCacheParams(getActivity(), IMAGE_CACHE_DIR);\n\n \n\n        cacheParams.setMemCacheSizePercent(0.25f); // Set memory cache to 25% of app memory\n\n \n\n        // The ImageFetcher takes care of loading images into our ImageView children asynchronously\n\n        mImageFetcher = new ImageFetcher(getActivity(), mImageThumbSize);\n\n        mImageFetcher.setLoadingImage(R.drawable.empty_photo);\n\n        mImageFetcher.addImageCache(getActivity().getSupportFragmentManager(), cacheParams);\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(\n\n            LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n\n \n\n        final View v = inflater.inflate(R.layout.image_grid_fragment, container, false);\n\n        final GridView mGridView = (GridView) v.findViewById(R.id.gridView);\n\n        mGridView.setAdapter(mAdapter);\n\n        mGridView.setOnItemClickListener(this);\n\n        mGridView.setOnScrollListener(new AbsListView.OnScrollListener() {\n\n            @Override\n\n            public void onScrollStateChanged(AbsListView absListView, int scrollState) {\n\n                // Pause fetcher to ensure smoother scrolling when flinging\n\n                if (scrollState == AbsListView.OnScrollListener.SCROLL_STATE_FLING) {\n\n                    // Before Honeycomb pause image loading on scroll to help with performance\n\n                    if (!Utils.hasHoneycomb()) {\n\n                        mImageFetcher.setPauseWork(true);\n\n                    }\n\n                } else {\n\n                    mImageFetcher.setPauseWork(false);\n\n                }\n\n            }\n\n \n\n            @Override\n\n            public void onScroll(AbsListView absListView, int firstVisibleItem,\n\n                    int visibleItemCount, int totalItemCount) {\n\n            }\n\n        });\n\n \n\n        // This listener is used to get the final width of the GridView and then calculate the\n\n        // number of columns and the width of each column. The width of each column is variable\n\n        // as the GridView has stretchMode=columnWidth. The column width is used to set the height\n\n        // of each view so we get nice square thumbnails.\n\n        mGridView.getViewTreeObserver().addOnGlobalLayoutListener(\n\n                new ViewTreeObserver.OnGlobalLayoutListener() {\n\n                    @TargetApi(VERSION_CODES.JELLY_BEAN)\n\n                    @Override\n\n                    public void onGlobalLayout() {\n\n                        if (mAdapter.getNumColumns() == 0) {\n\n                            final int numColumns = (int) Math.floor(\n\n                                    mGridView.getWidth() / (mImageThumbSize + mImageThumbSpacing));\n\n                            if (numColumns > 0) {\n\n                                final int columnWidth =\n\n                                        (mGridView.getWidth() / numColumns) - mImageThumbSpacing;\n\n                                mAdapter.setNumColumns(numColumns);\n\n                                mAdapter.setItemHeight(columnWidth);\n\n                                if (BuildConfig.DEBUG) {\n\n                                    Log.d(TAG, \"onCreateView - numColumns set to \" + numColumns);\n\n                                }\n\n                                if (Utils.hasJellyBean()) {\n\n                                    mGridView.getViewTreeObserver()\n\n                                            .removeOnGlobalLayoutListener(this);\n\n                                } else {\n\n                                    mGridView.getViewTreeObserver()\n\n                                            .removeGlobalOnLayoutListener(this);\n\n                                }\n\n                            }\n\n                        }\n\n                    }\n\n                });\n\n \n\n        return v;\n\n    }\n\n \n\n    @Override\n\n    public void onResume() {\n\n        super.onResume();\n\n        mImageFetcher.setExitTasksEarly(false);\n\n        mAdapter.notifyDataSetChanged();\n\n    }\n\n \n\n    @Override\n\n    public void onPause() {\n\n        super.onPause();\n\n        mImageFetcher.setPauseWork(false);\n\n        mImageFetcher.setExitTasksEarly(true);\n\n        mImageFetcher.flushCache();\n\n    }\n\n \n\n    @Override\n\n    public void onDestroy() {\n\n        super.onDestroy();\n\n        mImageFetcher.closeCache();\n\n    }\n\n \n\n    @TargetApi(VERSION_CODES.JELLY_BEAN)\n\n    @Override\n\n    public void onItemClick(AdapterView<?> parent, View v, int position, long id) {\n\n        final Intent i = new Intent(getActivity(), ImageDetailActivity.class);\n\n        i.putExtra(ImageDetailActivity.EXTRA_IMAGE, (int) id);\n\n        if (Utils.hasJellyBean()) {\n\n            // makeThumbnailScaleUpAnimation() looks kind of ugly here as the loading spinner may\n\n            // show plus the thumbnail image in GridView is cropped. so using\n\n            // makeScaleUpAnimation() instead.\n\n            ActivityOptions options =\n\n                    ActivityOptions.makeScaleUpAnimation(v, 0, 0, v.getWidth(), v.getHeight());\n\n            getActivity().startActivity(i, options.toBundle());\n\n        } else {\n\n            startActivity(i);\n\n        }\n\n    }\n\n \n\n    @Override\n\n    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {\n\n        inflater.inflate(R.menu.main_menu, menu);\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch (item.getItemId()) {\n\n            case R.id.clear_cache:\n\n                mImageFetcher.clearCache();\n\n                Toast.makeText(getActivity(), R.string.clear_cache_complete_toast,\n\n                        Toast.LENGTH_SHORT).show();\n\n                return true;\n\n        }\n\n        return super.onOptionsItemSelected(item);\n\n    }\n\n \n\n    /**\n\n     * The main adapter that backs the GridView. This is fairly standard except the number of\n\n     * columns in the GridView is used to create a fake top row of empty views as we use a\n\n     * transparent ActionBar and don't want the real top row of images to start off covered by it.\n\n     */\n\n    private class ImageAdapter extends BaseAdapter {\n\n \n\n        private final Context mContext;\n\n        private int mItemHeight = 0;\n\n        private int mNumColumns = 0;\n\n        private int mActionBarHeight = 0;\n\n        private GridView.LayoutParams mImageViewLayoutParams;\n\n \n\n        public ImageAdapter(Context context) {\n\n            super();\n\n            mContext = context;\n\n            mImageViewLayoutParams = new GridView.LayoutParams(\n\n                    LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);\n\n            // Calculate ActionBar height\n\n            TypedValue tv = new TypedValue();\n\n            if (context.getTheme().resolveAttribute(\n\n                    android.R.attr.actionBarSize, tv, true)) {\n\n                mActionBarHeight = TypedValue.complexToDimensionPixelSize(\n\n                        tv.data, context.getResources().getDisplayMetrics());\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public int getCount() {\n\n            // If columns have yet to be determined, return no items\n\n            if (getNumColumns() == 0) {\n\n                return 0;\n\n            }\n\n \n\n            // Size + number of columns for top empty row\n\n            return Images.imageThumbUrls.length + mNumColumns;\n\n        }\n\n \n\n        @Override\n\n        public Object getItem(int position) {\n\n            return position < mNumColumns ?\n\n                    null : Images.imageThumbUrls[position - mNumColumns];\n\n        }\n\n \n\n        @Override\n\n        public long getItemId(int position) {\n\n            return position < mNumColumns ? 0 : position - mNumColumns;\n\n        }\n\n \n\n        @Override\n\n        public int getViewTypeCount() {\n\n            // Two types of views, the normal ImageView and the top row of empty views\n\n            return 2;\n\n        }\n\n \n\n        @Override\n\n        public int getItemViewType(int position) {\n\n            return (position < mNumColumns) ? 1 : 0;\n\n        }\n\n \n\n        @Override\n\n        public boolean hasStableIds() {\n\n            return true;\n\n        }\n\n \n\n        @Override\n\n        public View getView(int position, View convertView, ViewGroup container) {\n\n            // First check if this is the top row\n\n            if (position < mNumColumns) {\n\n                if (convertView == null) {\n\n                    convertView = new View(mContext);\n\n                }\n\n                // Set empty view with height of ActionBar\n\n                convertView.setLayoutParams(new AbsListView.LayoutParams(\n\n                        LayoutParams.MATCH_PARENT, mActionBarHeight));\n\n                return convertView;\n\n            }\n\n \n\n            // Now handle the main ImageView thumbnails\n\n            ImageView imageView;\n\n            if (convertView == null) { // if it's not recycled, instantiate and initialize\n\n                imageView = new RecyclingImageView(mContext);\n\n                imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);\n\n                imageView.setLayoutParams(mImageViewLayoutParams);\n\n            } else { // Otherwise re-use the converted view\n\n                imageView = (ImageView) convertView;\n\n            }\n\n \n\n            // Check the height matches our calculated column width\n\n            if (imageView.getLayoutParams().height != mItemHeight) {\n\n                imageView.setLayoutParams(mImageViewLayoutParams);\n\n            }\n\n \n\n            // Finally load the image asynchronously into the ImageView, this also takes care of\n\n            // setting a placeholder image while the background thread runs\n\n            mImageFetcher.loadImage(Images.imageThumbUrls[position - mNumColumns], imageView);\n\n            return imageView;\n\n        }\n\n \n\n        /**\n\n         * Sets the item height. Useful for when we know the column width so the height can be set\n\n         * to match.\n\n         *\n\n         * @param height\n\n         */\n\n        public void setItemHeight(int height) {\n\n            if (height == mItemHeight) {\n\n                return;\n\n            }\n\n            mItemHeight = height;\n\n            mImageViewLayoutParams =\n\n                    new GridView.LayoutParams(LayoutParams.MATCH_PARENT, mItemHeight);\n\n            mImageFetcher.setImageSize(height);\n\n            notifyDataSetChanged();\n\n        }\n\n \n\n        public void setNumColumns(int numColumns) {\n\n            mNumColumns = numColumns;\n\n        }\n\n \n\n        public int getNumColumns() {\n\n            return mNumColumns;\n\n        }\n\n    }\n\n}\n  ","RecyclingImageView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.displayingbitmaps.ui;\n\n \n\nimport android.content.Context;\n\nimport android.graphics.drawable.Drawable;\n\nimport android.graphics.drawable.LayerDrawable;\n\nimport android.util.AttributeSet;\n\nimport android.widget.ImageView;\n\n \n\nimport com.example.android.displayingbitmaps.util.RecyclingBitmapDrawable;\n\n \n\n/**\n\n * Sub-class of ImageView which automatically notifies the drawable when it is\n\n * being displayed.\n\n */\n\npublic class RecyclingImageView extends ImageView {\n\n \n\n    public RecyclingImageView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public RecyclingImageView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    /**\n\n     * @see android.widget.ImageView#onDetachedFromWindow()\n\n     */\n\n    @Override\n\n    protected void onDetachedFromWindow() {\n\n        // This has been detached from Window, so clear the drawable\n\n        setImageDrawable(null);\n\n \n\n        super.onDetachedFromWindow();\n\n    }\n\n \n\n    /**\n\n     * @see android.widget.ImageView#setImageDrawable(android.graphics.drawable.Drawable)\n\n     */\n\n    @Override\n\n    public void setImageDrawable(Drawable drawable) {\n\n        // Keep hold of previous Drawable\n\n        final Drawable previousDrawable = getDrawable();\n\n \n\n        // Call super to set new Drawable\n\n        super.setImageDrawable(drawable);\n\n \n\n        // Notify new Drawable that it is being displayed\n\n        notifyDrawable(drawable, true);\n\n \n\n        // Notify old Drawable so it is no longer being displayed\n\n        notifyDrawable(previousDrawable, false);\n\n    }\n\n \n\n    /**\n\n     * Notifies the drawable that it's displayed state has changed.\n\n     *\n\n     * @param drawable\n\n     * @param isDisplayed\n\n     */\n\n    private static void notifyDrawable(Drawable drawable, final boolean isDisplayed) {\n\n        if (drawable instanceof RecyclingBitmapDrawable) {\n\n            // The drawable is a CountingBitmapDrawable, so notify it\n\n            ((RecyclingBitmapDrawable) drawable).setIsDisplayed(isDisplayed);\n\n        } else if (drawable instanceof LayerDrawable) {\n\n            // The drawable is a LayerDrawable, so recurse on each layer\n\n            LayerDrawable layerDrawable = (LayerDrawable) drawable;\n\n            for (int i = 0, z = layerDrawable.getNumberOfLayers(); i < z; i++) {\n\n                notifyDrawable(layerDrawable.getDrawable(i), isDisplayed);\n\n            }\n\n        }\n\n    }\n\n \n\n}\n  "},"util":{"AsyncTask.java":"\n    \n\n/*\n\n * Copyright (C) 2008 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.displayingbitmaps.util;\n\n \n\nimport android.annotation.TargetApi;\n\nimport android.os.Handler;\n\nimport android.os.Message;\n\nimport android.os.Process;\n\n \n\nimport java.util.ArrayDeque;\n\nimport java.util.concurrent.BlockingQueue;\n\nimport java.util.concurrent.Callable;\n\nimport java.util.concurrent.CancellationException;\n\nimport java.util.concurrent.ExecutionException;\n\nimport java.util.concurrent.Executor;\n\nimport java.util.concurrent.Executors;\n\nimport java.util.concurrent.FutureTask;\n\nimport java.util.concurrent.LinkedBlockingQueue;\n\nimport java.util.concurrent.ThreadFactory;\n\nimport java.util.concurrent.ThreadPoolExecutor;\n\nimport java.util.concurrent.TimeUnit;\n\nimport java.util.concurrent.TimeoutException;\n\nimport java.util.concurrent.atomic.AtomicBoolean;\n\nimport java.util.concurrent.atomic.AtomicInteger;\n\n \n\n/**\n\n * *************************************\n\n * Copied from JB release framework:\n\n * https://android.googlesource.com/platform/frameworks/base/+/jb-release/core/java/android/os/AsyncTask.java\n\n *\n\n * so that threading behavior on all OS versions is the same and we can tweak behavior by using\n\n * executeOnExecutor() if needed.\n\n *\n\n * There are 3 changes in this copy of AsyncTask:\n\n *    -pre-HC a single thread executor is used for serial operation\n\n *    (Executors.newSingleThreadExecutor) and is the default\n\n *    -the default THREAD_POOL_EXECUTOR was changed to use DiscardOldestPolicy\n\n *    -a new fixed thread pool called DUAL_THREAD_EXECUTOR was added\n\n * *************************************\n\n *\n\n * <p>AsyncTask enables proper and easy use of the UI thread. This class allows to\n\n * perform background operations and publish results on the UI thread without\n\n * having to manipulate threads and/or handlers.</p>\n\n *\n\n * <p>AsyncTask is designed to be a helper class around {@link Thread} and {@link android.os.Handler}\n\n * and does not constitute a generic threading framework. AsyncTasks should ideally be\n\n * used for short operations (a few seconds at the most.) If you need to keep threads\n\n * running for long periods of time, it is highly recommended you use the various APIs\n\n * provided by the <code>java.util.concurrent</code> pacakge such as {@link java.util.concurrent.Executor},\n\n * {@link java.util.concurrent.ThreadPoolExecutor} and {@link java.util.concurrent.FutureTask}.</p>\n\n *\n\n * <p>An asynchronous task is defined by a computation that runs on a background thread and\n\n * whose result is published on the UI thread. An asynchronous task is defined by 3 generic\n\n * types, called <code>Params</code>, <code>Progress</code> and <code>Result</code>,\n\n * and 4 steps, called <code>onPreExecute</code>, <code>doInBackground</code>,\n\n * <code>onProgressUpdate</code> and <code>onPostExecute</code>.</p>\n\n *\n\n * <div class=\"special reference\">\n\n * <h3>Developer Guides</h3>\n\n * <p>For more information about using tasks and threads, read the\n\n * <a href=\"{@docRoot}guide/topics/fundamentals/processes-and-threads.html\">Processes and\n\n * Threads</a> developer guide.</p>\n\n * </div>\n\n *\n\n * <h2>Usage</h2>\n\n * <p>AsyncTask must be subclassed to be used. The subclass will override at least\n\n * one method ({@link #doInBackground}), and most often will override a\n\n * second one ({@link #onPostExecute}.)</p>\n\n *\n\n * <p>Here is an example of subclassing:</p>\n\n * <pre class=\"prettyprint\">\n\n * private class DownloadFilesTask extends AsyncTask&lt;URL, Integer, Long&gt; {\n\n *     protected Long doInBackground(URL... urls) {\n\n *         int count = urls.length;\n\n *         long totalSize = 0;\n\n *         for (int i = 0; i < count; i++) {\n\n *             totalSize += Downloader.downloadFile(urls[i]);\n\n *             publishProgress((int) ((i / (float) count) * 100));\n\n *             // Escape early if cancel() is called\n\n *             if (isCancelled()) break;\n\n *         }\n\n *         return totalSize;\n\n *     }\n\n *\n\n *     protected void onProgressUpdate(Integer... progress) {\n\n *         setProgressPercent(progress[0]);\n\n *     }\n\n *\n\n *     protected void onPostExecute(Long result) {\n\n *         showDialog(\"Downloaded \" + result + \" bytes\");\n\n *     }\n\n * }\n\n * </pre>\n\n *\n\n * <p>Once created, a task is executed very simply:</p>\n\n * <pre class=\"prettyprint\">\n\n * new DownloadFilesTask().execute(url1, url2, url3);\n\n * </pre>\n\n *\n\n * <h2>AsyncTask's generic types</h2>\n\n * <p>The three types used by an asynchronous task are the following:</p>\n\n * <ol>\n\n *     <li><code>Params</code>, the type of the parameters sent to the task upon\n\n *     execution.</li>\n\n *     <li><code>Progress</code>, the type of the progress units published during\n\n *     the background computation.</li>\n\n *     <li><code>Result</code>, the type of the result of the background\n\n *     computation.</li>\n\n * </ol>\n\n * <p>Not all types are always used by an asynchronous task. To mark a type as unused,\n\n * simply use the type {@link Void}:</p>\n\n * <pre>\n\n * private class MyTask extends AsyncTask&lt;Void, Void, Void&gt; { ... }\n\n * </pre>\n\n *\n\n * <h2>The 4 steps</h2>\n\n * <p>When an asynchronous task is executed, the task goes through 4 steps:</p>\n\n * <ol>\n\n *     <li>{@link #onPreExecute()}, invoked on the UI thread immediately after the task\n\n *     is executed. This step is normally used to setup the task, for instance by\n\n *     showing a progress bar in the user interface.</li>\n\n *     <li>{@link #doInBackground}, invoked on the background thread\n\n *     immediately after {@link #onPreExecute()} finishes executing. This step is used\n\n *     to perform background computation that can take a long time. The parameters\n\n *     of the asynchronous task are passed to this step. The result of the computation must\n\n *     be returned by this step and will be passed back to the last step. This step\n\n *     can also use {@link #publishProgress} to publish one or more units\n\n *     of progress. These values are published on the UI thread, in the\n\n *     {@link #onProgressUpdate} step.</li>\n\n *     <li>{@link #onProgressUpdate}, invoked on the UI thread after a\n\n *     call to {@link #publishProgress}. The timing of the execution is\n\n *     undefined. This method is used to display any form of progress in the user\n\n *     interface while the background computation is still executing. For instance,\n\n *     it can be used to animate a progress bar or show logs in a text field.</li>\n\n *     <li>{@link #onPostExecute}, invoked on the UI thread after the background\n\n *     computation finishes. The result of the background computation is passed to\n\n *     this step as a parameter.</li>\n\n * </ol>\n\n *\n\n * <h2>Cancelling a task</h2>\n\n * <p>A task can be cancelled at any time by invoking {@link #cancel(boolean)}. Invoking\n\n * this method will cause subsequent calls to {@link #isCancelled()} to return true.\n\n * After invoking this method, {@link #onCancelled(Object)}, instead of\n\n * {@link #onPostExecute(Object)} will be invoked after {@link #doInBackground(Object[])}\n\n * returns. To ensure that a task is cancelled as quickly as possible, you should always\n\n * check the return value of {@link #isCancelled()} periodically from\n\n * {@link #doInBackground(Object[])}, if possible (inside a loop for instance.)</p>\n\n *\n\n * <h2>Threading rules</h2>\n\n * <p>There are a few threading rules that must be followed for this class to\n\n * work properly:</p>\n\n * <ul>\n\n *     <li>The AsyncTask class must be loaded on the UI thread. This is done\n\n *     automatically as of {@link android.os.Build.VERSION_CODES#JELLY_BEAN}.</li>\n\n *     <li>The task instance must be created on the UI thread.</li>\n\n *     <li>{@link #execute} must be invoked on the UI thread.</li>\n\n *     <li>Do not call {@link #onPreExecute()}, {@link #onPostExecute},\n\n *     {@link #doInBackground}, {@link #onProgressUpdate} manually.</li>\n\n *     <li>The task can be executed only once (an exception will be thrown if\n\n *     a second execution is attempted.)</li>\n\n * </ul>\n\n *\n\n * <h2>Memory observability</h2>\n\n * <p>AsyncTask guarantees that all callback calls are synchronized in such a way that the following\n\n * operations are safe without explicit synchronizations.</p>\n\n * <ul>\n\n *     <li>Set member fields in the constructor or {@link #onPreExecute}, and refer to them\n\n *     in {@link #doInBackground}.\n\n *     <li>Set member fields in {@link #doInBackground}, and refer to them in\n\n *     {@link #onProgressUpdate} and {@link #onPostExecute}.\n\n * </ul>\n\n *\n\n * <h2>Order of execution</h2>\n\n * <p>When first introduced, AsyncTasks were executed serially on a single background\n\n * thread. Starting with {@link android.os.Build.VERSION_CODES#DONUT}, this was changed\n\n * to a pool of threads allowing multiple tasks to operate in parallel. Starting with\n\n * {@link android.os.Build.VERSION_CODES#HONEYCOMB}, tasks are executed on a single\n\n * thread to avoid common application errors caused by parallel execution.</p>\n\n * <p>If you truly want parallel execution, you can invoke\n\n * {@link #executeOnExecutor(java.util.concurrent.Executor, Object[])} with\n\n * {@link #THREAD_POOL_EXECUTOR}.</p>\n\n */\n\npublic abstract class AsyncTask<Params, Progress, Result> {\n\n    private static final String LOG_TAG = \"AsyncTask\";\n\n \n\n    private static final int CORE_POOL_SIZE = 5;\n\n    private static final int MAXIMUM_POOL_SIZE = 128;\n\n    private static final int KEEP_ALIVE = 1;\n\n \n\n    private static final ThreadFactory  sThreadFactory = new ThreadFactory() {\n\n        private final AtomicInteger mCount = new AtomicInteger(1);\n\n \n\n        public Thread newThread(Runnable r) {\n\n            return new Thread(r, \"AsyncTask #\" + mCount.getAndIncrement());\n\n        }\n\n    };\n\n \n\n    private static final BlockingQueue<Runnable> sPoolWorkQueue =\n\n            new LinkedBlockingQueue<Runnable>(10);\n\n \n\n    /**\n\n     * An {@link java.util.concurrent.Executor} that can be used to execute tasks in parallel.\n\n     */\n\n    public static final Executor THREAD_POOL_EXECUTOR\n\n            = new ThreadPoolExecutor(CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE,\n\n            TimeUnit.SECONDS, sPoolWorkQueue, sThreadFactory,\n\n            new ThreadPoolExecutor.DiscardOldestPolicy());\n\n \n\n    /**\n\n     * An {@link java.util.concurrent.Executor} that executes tasks one at a time in serial\n\n     * order.  This serialization is global to a particular process.\n\n     */\n\n    public static final Executor SERIAL_EXECUTOR = Utils.hasHoneycomb() ? new SerialExecutor() :\n\n            Executors.newSingleThreadExecutor(sThreadFactory);\n\n \n\n    public static final Executor DUAL_THREAD_EXECUTOR =\n\n            Executors.newFixedThreadPool(2, sThreadFactory);\n\n \n\n    private static final int MESSAGE_POST_RESULT = 0x1;\n\n    private static final int MESSAGE_POST_PROGRESS = 0x2;\n\n \n\n    private static final InternalHandler sHandler = new InternalHandler();\n\n \n\n    private static volatile Executor sDefaultExecutor = SERIAL_EXECUTOR;\n\n    private final WorkerRunnable<Params, Result> mWorker;\n\n    private final FutureTask<Result> mFuture;\n\n \n\n    private volatile Status mStatus = Status.PENDING;\n\n \n\n    private final AtomicBoolean mCancelled = new AtomicBoolean();\n\n    private final AtomicBoolean mTaskInvoked = new AtomicBoolean();\n\n \n\n    @TargetApi(11)\n\n    private static class SerialExecutor implements Executor {\n\n        final ArrayDeque<Runnable> mTasks = new ArrayDeque<Runnable>();\n\n        Runnable mActive;\n\n \n\n        public synchronized void execute(final Runnable r) {\n\n            mTasks.offer(new Runnable() {\n\n                public void run() {\n\n                    try {\n\n                        r.run();\n\n                    } finally {\n\n                        scheduleNext();\n\n                    }\n\n                }\n\n            });\n\n            if (mActive == null) {\n\n                scheduleNext();\n\n            }\n\n        }\n\n \n\n        protected synchronized void scheduleNext() {\n\n            if ((mActive = mTasks.poll()) != null) {\n\n                THREAD_POOL_EXECUTOR.execute(mActive);\n\n            }\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Indicates the current status of the task. Each status will be set only once\n\n     * during the lifetime of a task.\n\n     */\n\n    public enum Status {\n\n        /**\n\n         * Indicates that the task has not been executed yet.\n\n         */\n\n        PENDING,\n\n        /**\n\n         * Indicates that the task is running.\n\n         */\n\n        RUNNING,\n\n        /**\n\n         * Indicates that {@link AsyncTask#onPostExecute} has finished.\n\n         */\n\n        FINISHED,\n\n    }\n\n \n\n    /** @hide Used to force static handler to be created. */\n\n    public static void init() {\n\n        sHandler.getLooper();\n\n    }\n\n \n\n    /** @hide */\n\n    public static void setDefaultExecutor(Executor exec) {\n\n        sDefaultExecutor = exec;\n\n    }\n\n \n\n    /**\n\n     * Creates a new asynchronous task. This constructor must be invoked on the UI thread.\n\n     */\n\n    public AsyncTask() {\n\n        mWorker = new WorkerRunnable<Params, Result>() {\n\n            public Result call() throws Exception {\n\n                mTaskInvoked.set(true);\n\n \n\n                Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);\n\n                //noinspection unchecked\n\n                return postResult(doInBackground(mParams));\n\n            }\n\n        };\n\n \n\n        mFuture = new FutureTask<Result>(mWorker) {\n\n            @Override\n\n            protected void done() {\n\n                try {\n\n                    postResultIfNotInvoked(get());\n\n                } catch (InterruptedException e) {\n\n                    android.util.Log.w(LOG_TAG, e);\n\n                } catch (ExecutionException e) {\n\n                    throw new RuntimeException(\"An error occured while executing doInBackground()\",\n\n                            e.getCause());\n\n                } catch (CancellationException e) {\n\n                    postResultIfNotInvoked(null);\n\n                }\n\n            }\n\n        };\n\n    }\n\n \n\n    private void postResultIfNotInvoked(Result result) {\n\n        final boolean wasTaskInvoked = mTaskInvoked.get();\n\n        if (!wasTaskInvoked) {\n\n            postResult(result);\n\n        }\n\n    }\n\n \n\n    private Result postResult(Result result) {\n\n        @SuppressWarnings(\"unchecked\")\n\n        Message message = sHandler.obtainMessage(MESSAGE_POST_RESULT,\n\n                new AsyncTaskResult<Result>(this, result));\n\n        message.sendToTarget();\n\n        return result;\n\n    }\n\n \n\n    /**\n\n     * Returns the current status of this task.\n\n     *\n\n     * @return The current status.\n\n     */\n\n    public final Status getStatus() {\n\n        return mStatus;\n\n    }\n\n \n\n    /**\n\n     * Override this method to perform a computation on a background thread. The\n\n     * specified parameters are the parameters passed to {@link #execute}\n\n     * by the caller of this task.\n\n     *\n\n     * This method can call {@link #publishProgress} to publish updates\n\n     * on the UI thread.\n\n     *\n\n     * @param params The parameters of the task.\n\n     *\n\n     * @return A result, defined by the subclass of this task.\n\n     *\n\n     * @see #onPreExecute()\n\n     * @see #onPostExecute\n\n     * @see #publishProgress\n\n     */\n\n    protected abstract Result doInBackground(Params... params);\n\n \n\n    /**\n\n     * Runs on the UI thread before {@link #doInBackground}.\n\n     *\n\n     * @see #onPostExecute\n\n     * @see #doInBackground\n\n     */\n\n    protected void onPreExecute() {\n\n    }\n\n \n\n    /**\n\n     * <p>Runs on the UI thread after {@link #doInBackground}. The\n\n     * specified result is the value returned by {@link #doInBackground}.</p>\n\n     *\n\n     * <p>This method won't be invoked if the task was cancelled.</p>\n\n     *\n\n     * @param result The result of the operation computed by {@link #doInBackground}.\n\n     *\n\n     * @see #onPreExecute\n\n     * @see #doInBackground\n\n     * @see #onCancelled(Object)\n\n     */\n\n    @SuppressWarnings({\"UnusedDeclaration\"})\n\n    protected void onPostExecute(Result result) {\n\n    }\n\n \n\n    /**\n\n     * Runs on the UI thread after {@link #publishProgress} is invoked.\n\n     * The specified values are the values passed to {@link #publishProgress}.\n\n     *\n\n     * @param values The values indicating progress.\n\n     *\n\n     * @see #publishProgress\n\n     * @see #doInBackground\n\n     */\n\n    @SuppressWarnings({\"UnusedDeclaration\"})\n\n    protected void onProgressUpdate(Progress... values) {\n\n    }\n\n \n\n    /**\n\n     * <p>Runs on the UI thread after {@link #cancel(boolean)} is invoked and\n\n     * {@link #doInBackground(Object[])} has finished.</p>\n\n     *\n\n     * <p>The default implementation simply invokes {@link #onCancelled()} and\n\n     * ignores the result. If you write your own implementation, do not call\n\n     * <code>super.onCancelled(result)</code>.</p>\n\n     *\n\n     * @param result The result, if any, computed in\n\n     *               {@link #doInBackground(Object[])}, can be null\n\n     *\n\n     * @see #cancel(boolean)\n\n     * @see #isCancelled()\n\n     */\n\n    @SuppressWarnings({\"UnusedParameters\"})\n\n    protected void onCancelled(Result result) {\n\n        onCancelled();\n\n    }\n\n \n\n    /**\n\n     * <p>Applications should preferably override {@link #onCancelled(Object)}.\n\n     * This method is invoked by the default implementation of\n\n     * {@link #onCancelled(Object)}.</p>\n\n     *\n\n     * <p>Runs on the UI thread after {@link #cancel(boolean)} is invoked and\n\n     * {@link #doInBackground(Object[])} has finished.</p>\n\n     *\n\n     * @see #onCancelled(Object)\n\n     * @see #cancel(boolean)\n\n     * @see #isCancelled()\n\n     */\n\n    protected void onCancelled() {\n\n    }\n\n \n\n    /**\n\n     * Returns <tt>true</tt> if this task was cancelled before it completed\n\n     * normally. If you are calling {@link #cancel(boolean)} on the task,\n\n     * the value returned by this method should be checked periodically from\n\n     * {@link #doInBackground(Object[])} to end the task as soon as possible.\n\n     *\n\n     * @return <tt>true</tt> if task was cancelled before it completed\n\n     *\n\n     * @see #cancel(boolean)\n\n     */\n\n    public final boolean isCancelled() {\n\n        return mCancelled.get();\n\n    }\n\n \n\n    /**\n\n     * <p>Attempts to cancel execution of this task.  This attempt will\n\n     * fail if the task has already completed, already been cancelled,\n\n     * or could not be cancelled for some other reason. If successful,\n\n     * and this task has not started when <tt>cancel</tt> is called,\n\n     * this task should never run. If the task has already started,\n\n     * then the <tt>mayInterruptIfRunning</tt> parameter determines\n\n     * whether the thread executing this task should be interrupted in\n\n     * an attempt to stop the task.</p>\n\n     *\n\n     * <p>Calling this method will result in {@link #onCancelled(Object)} being\n\n     * invoked on the UI thread after {@link #doInBackground(Object[])}\n\n     * returns. Calling this method guarantees that {@link #onPostExecute(Object)}\n\n     * is never invoked. After invoking this method, you should check the\n\n     * value returned by {@link #isCancelled()} periodically from\n\n     * {@link #doInBackground(Object[])} to finish the task as early as\n\n     * possible.</p>\n\n     *\n\n     * @param mayInterruptIfRunning <tt>true</tt> if the thread executing this\n\n     *        task should be interrupted; otherwise, in-progress tasks are allowed\n\n     *        to complete.\n\n     *\n\n     * @return <tt>false</tt> if the task could not be cancelled,\n\n     *         typically because it has already completed normally;\n\n     *         <tt>true</tt> otherwise\n\n     *\n\n     * @see #isCancelled()\n\n     * @see #onCancelled(Object)\n\n     */\n\n    public final boolean cancel(boolean mayInterruptIfRunning) {\n\n        mCancelled.set(true);\n\n        return mFuture.cancel(mayInterruptIfRunning);\n\n    }\n\n \n\n    /**\n\n     * Waits if necessary for the computation to complete, and then\n\n     * retrieves its result.\n\n     *\n\n     * @return The computed result.\n\n     *\n\n     * @throws java.util.concurrent.CancellationException If the computation was cancelled.\n\n     * @throws java.util.concurrent.ExecutionException If the computation threw an exception.\n\n     * @throws InterruptedException If the current thread was interrupted\n\n     *         while waiting.\n\n     */\n\n    public final Result get() throws InterruptedException, ExecutionException {\n\n        return mFuture.get();\n\n    }\n\n \n\n    /**\n\n     * Waits if necessary for at most the given time for the computation\n\n     * to complete, and then retrieves its result.\n\n     *\n\n     * @param timeout Time to wait before cancelling the operation.\n\n     * @param unit The time unit for the timeout.\n\n     *\n\n     * @return The computed result.\n\n     *\n\n     * @throws java.util.concurrent.CancellationException If the computation was cancelled.\n\n     * @throws java.util.concurrent.ExecutionException If the computation threw an exception.\n\n     * @throws InterruptedException If the current thread was interrupted\n\n     *         while waiting.\n\n     * @throws java.util.concurrent.TimeoutException If the wait timed out.\n\n     */\n\n    public final Result get(long timeout, TimeUnit unit) throws InterruptedException,\n\n            ExecutionException, TimeoutException {\n\n        return mFuture.get(timeout, unit);\n\n    }\n\n \n\n    /**\n\n     * Executes the task with the specified parameters. The task returns\n\n     * itself (this) so that the caller can keep a reference to it.\n\n     *\n\n     * <p>Note: this function schedules the task on a queue for a single background\n\n     * thread or pool of threads depending on the platform version.  When first\n\n     * introduced, AsyncTasks were executed serially on a single background thread.\n\n     * Starting with {@link android.os.Build.VERSION_CODES#DONUT}, this was changed\n\n     * to a pool of threads allowing multiple tasks to operate in parallel. Starting\n\n     * {@link android.os.Build.VERSION_CODES#HONEYCOMB}, tasks are back to being\n\n     * executed on a single thread to avoid common application errors caused\n\n     * by parallel execution.  If you truly want parallel execution, you can use\n\n     * the {@link #executeOnExecutor} version of this method\n\n     * with {@link #THREAD_POOL_EXECUTOR}; however, see commentary there for warnings\n\n     * on its use.\n\n     *\n\n     * <p>This method must be invoked on the UI thread.\n\n     *\n\n     * @param params The parameters of the task.\n\n     *\n\n     * @return This instance of AsyncTask.\n\n     *\n\n     * @throws IllegalStateException If {@link #getStatus()} returns either\n\n     *         {@link AsyncTask.Status#RUNNING} or {@link AsyncTask.Status#FINISHED}.\n\n     *\n\n     * @see #executeOnExecutor(java.util.concurrent.Executor, Object[])\n\n     * @see #execute(Runnable)\n\n     */\n\n    public final AsyncTask<Params, Progress, Result> execute(Params... params) {\n\n        return executeOnExecutor(sDefaultExecutor, params);\n\n    }\n\n \n\n    /**\n\n     * Executes the task with the specified parameters. The task returns\n\n     * itself (this) so that the caller can keep a reference to it.\n\n     *\n\n     * <p>This method is typically used with {@link #THREAD_POOL_EXECUTOR} to\n\n     * allow multiple tasks to run in parallel on a pool of threads managed by\n\n     * AsyncTask, however you can also use your own {@link java.util.concurrent.Executor} for custom\n\n     * behavior.\n\n     *\n\n     * <p><em>Warning:</em> Allowing multiple tasks to run in parallel from\n\n     * a thread pool is generally <em>not</em> what one wants, because the order\n\n     * of their operation is not defined.  For example, if these tasks are used\n\n     * to modify any state in common (such as writing a file due to a button click),\n\n     * there are no guarantees on the order of the modifications.\n\n     * Without careful work it is possible in rare cases for the newer version\n\n     * of the data to be over-written by an older one, leading to obscure data\n\n     * loss and stability issues.  Such changes are best\n\n     * executed in serial; to guarantee such work is serialized regardless of\n\n     * platform version you can use this function with {@link #SERIAL_EXECUTOR}.\n\n     *\n\n     * <p>This method must be invoked on the UI thread.\n\n     *\n\n     * @param exec The executor to use.  {@link #THREAD_POOL_EXECUTOR} is available as a\n\n     *              convenient process-wide thread pool for tasks that are loosely coupled.\n\n     * @param params The parameters of the task.\n\n     *\n\n     * @return This instance of AsyncTask.\n\n     *\n\n     * @throws IllegalStateException If {@link #getStatus()} returns either\n\n     *         {@link AsyncTask.Status#RUNNING} or {@link AsyncTask.Status#FINISHED}.\n\n     *\n\n     * @see #execute(Object[])\n\n     */\n\n    public final AsyncTask<Params, Progress, Result> executeOnExecutor(Executor exec,\n\n            Params... params) {\n\n        if (mStatus != Status.PENDING) {\n\n            switch (mStatus) {\n\n                case RUNNING:\n\n                    throw new IllegalStateException(\"Cannot execute task:\"\n\n                            + \" the task is already running.\");\n\n                case FINISHED:\n\n                    throw new IllegalStateException(\"Cannot execute task:\"\n\n                            + \" the task has already been executed \"\n\n                            + \"(a task can be executed only once)\");\n\n            }\n\n        }\n\n \n\n        mStatus = Status.RUNNING;\n\n \n\n        onPreExecute();\n\n \n\n        mWorker.mParams = params;\n\n        exec.execute(mFuture);\n\n \n\n        return this;\n\n    }\n\n \n\n    /**\n\n     * Convenience version of {@link #execute(Object...)} for use with\n\n     * a simple Runnable object. See {@link #execute(Object[])} for more\n\n     * information on the order of execution.\n\n     *\n\n     * @see #execute(Object[])\n\n     * @see #executeOnExecutor(java.util.concurrent.Executor, Object[])\n\n     */\n\n    public static void execute(Runnable runnable) {\n\n        sDefaultExecutor.execute(runnable);\n\n    }\n\n \n\n    /**\n\n     * This method can be invoked from {@link #doInBackground} to\n\n     * publish updates on the UI thread while the background computation is\n\n     * still running. Each call to this method will trigger the execution of\n\n     * {@link #onProgressUpdate} on the UI thread.\n\n     *\n\n     * {@link #onProgressUpdate} will note be called if the task has been\n\n     * canceled.\n\n     *\n\n     * @param values The progress values to update the UI with.\n\n     *\n\n     * @see #onProgressUpdate\n\n     * @see #doInBackground\n\n     */\n\n    protected final void publishProgress(Progress... values) {\n\n        if (!isCancelled()) {\n\n            sHandler.obtainMessage(MESSAGE_POST_PROGRESS,\n\n                    new AsyncTaskResult<Progress>(this, values)).sendToTarget();\n\n        }\n\n    }\n\n \n\n    private void finish(Result result) {\n\n        if (isCancelled()) {\n\n            onCancelled(result);\n\n        } else {\n\n            onPostExecute(result);\n\n        }\n\n        mStatus = Status.FINISHED;\n\n    }\n\n \n\n    private static class InternalHandler extends Handler {\n\n        @SuppressWarnings({\"unchecked\", \"RawUseOfParameterizedType\"})\n\n        @Override\n\n        public void handleMessage(Message msg) {\n\n            AsyncTaskResult result = (AsyncTaskResult) msg.obj;\n\n            switch (msg.what) {\n\n                case MESSAGE_POST_RESULT:\n\n                    // There is only one result\n\n                    result.mTask.finish(result.mData[0]);\n\n                    break;\n\n                case MESSAGE_POST_PROGRESS:\n\n                    result.mTask.onProgressUpdate(result.mData);\n\n                    break;\n\n            }\n\n        }\n\n    }\n\n \n\n    private static abstract class WorkerRunnable<Params, Result> implements Callable<Result> {\n\n        Params[] mParams;\n\n    }\n\n \n\n    @SuppressWarnings({\"RawUseOfParameterizedType\"})\n\n    private static class AsyncTaskResult<Data> {\n\n        final AsyncTask mTask;\n\n        final Data[] mData;\n\n \n\n        AsyncTaskResult(AsyncTask task, Data... data) {\n\n            mTask = task;\n\n            mData = data;\n\n        }\n\n    }\n\n}\n  ","DiskLruCache.java":"\n    \n\n/*\n\n * Copyright (C) 2011 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.displayingbitmaps.util;\n\n \n\nimport java.io.BufferedInputStream;\n\nimport java.io.BufferedWriter;\n\nimport java.io.Closeable;\n\nimport java.io.EOFException;\n\nimport java.io.File;\n\nimport java.io.FileInputStream;\n\nimport java.io.FileNotFoundException;\n\nimport java.io.FileOutputStream;\n\nimport java.io.FileWriter;\n\nimport java.io.FilterOutputStream;\n\nimport java.io.IOException;\n\nimport java.io.InputStream;\n\nimport java.io.InputStreamReader;\n\nimport java.io.OutputStream;\n\nimport java.io.OutputStreamWriter;\n\nimport java.io.Reader;\n\nimport java.io.StringWriter;\n\nimport java.io.Writer;\n\nimport java.lang.reflect.Array;\n\nimport java.nio.charset.Charset;\n\nimport java.util.ArrayList;\n\nimport java.util.Arrays;\n\nimport java.util.Iterator;\n\nimport java.util.LinkedHashMap;\n\nimport java.util.Map;\n\nimport java.util.concurrent.Callable;\n\nimport java.util.concurrent.ExecutorService;\n\nimport java.util.concurrent.LinkedBlockingQueue;\n\nimport java.util.concurrent.ThreadPoolExecutor;\n\nimport java.util.concurrent.TimeUnit;\n\n \n\n/**\n\n ******************************************************************************\n\n * Taken from the JB source code, can be found in:\n\n * libcore/luni/src/main/java/libcore/io/DiskLruCache.java\n\n * or direct link:\n\n * https://android.googlesource.com/platform/libcore/+/android-4.1.1_r1/luni/src/main/java/libcore/io/DiskLruCache.java\n\n ******************************************************************************\n\n *\n\n * A cache that uses a bounded amount of space on a filesystem. Each cache\n\n * entry has a string key and a fixed number of values. Values are byte\n\n * sequences, accessible as streams or files. Each value must be between {@code\n\n * 0} and {@code Integer.MAX_VALUE} bytes in length.\n\n *\n\n * <p>The cache stores its data in a directory on the filesystem. This\n\n * directory must be exclusive to the cache; the cache may delete or overwrite\n\n * files from its directory. It is an error for multiple processes to use the\n\n * same cache directory at the same time.\n\n *\n\n * <p>This cache limits the number of bytes that it will store on the\n\n * filesystem. When the number of stored bytes exceeds the limit, the cache will\n\n * remove entries in the background until the limit is satisfied. The limit is\n\n * not strict: the cache may temporarily exceed it while waiting for files to be\n\n * deleted. The limit does not include filesystem overhead or the cache\n\n * journal so space-sensitive applications should set a conservative limit.\n\n *\n\n * <p>Clients call {@link #edit} to create or update the values of an entry. An\n\n * entry may have only one editor at one time; if a value is not available to be\n\n * edited then {@link #edit} will return null.\n\n * <ul>\n\n *     <li>When an entry is being <strong>created</strong> it is necessary to\n\n *         supply a full set of values; the empty value should be used as a\n\n *         placeholder if necessary.\n\n *     <li>When an entry is being <strong>edited</strong>, it is not necessary\n\n *         to supply data for every value; values default to their previous\n\n *         value.\n\n * </ul>\n\n * Every {@link #edit} call must be matched by a call to {@link Editor#commit}\n\n * or {@link Editor#abort}. Committing is atomic: a read observes the full set\n\n * of values as they were before or after the commit, but never a mix of values.\n\n *\n\n * <p>Clients call {@link #get} to read a snapshot of an entry. The read will\n\n * observe the value at the time that {@link #get} was called. Updates and\n\n * removals after the call do not impact ongoing reads.\n\n *\n\n * <p>This class is tolerant of some I/O errors. If files are missing from the\n\n * filesystem, the corresponding entries will be dropped from the cache. If\n\n * an error occurs while writing a cache value, the edit will fail silently.\n\n * Callers should handle other problems by catching {@code IOException} and\n\n * responding appropriately.\n\n */\n\npublic final class DiskLruCache implements Closeable {\n\n    static final String JOURNAL_FILE = \"journal\";\n\n    static final String JOURNAL_FILE_TMP = \"journal.tmp\";\n\n    static final String MAGIC = \"libcore.io.DiskLruCache\";\n\n    static final String VERSION_1 = \"1\";\n\n    static final long ANY_SEQUENCE_NUMBER = -1;\n\n    private static final String CLEAN = \"CLEAN\";\n\n    private static final String DIRTY = \"DIRTY\";\n\n    private static final String REMOVE = \"REMOVE\";\n\n    private static final String READ = \"READ\";\n\n \n\n    private static final Charset UTF_8 = Charset.forName(\"UTF-8\");\n\n    private static final int IO_BUFFER_SIZE = 8 * 1024;\n\n \n\n    /*\n\n     * This cache uses a journal file named \"journal\". A typical journal file\n\n     * looks like this:\n\n     *     libcore.io.DiskLruCache\n\n     *     1\n\n     *     100\n\n     *     2\n\n     *\n\n     *     CLEAN 3400330d1dfc7f3f7f4b8d4d803dfcf6 832 21054\n\n     *     DIRTY 335c4c6028171cfddfbaae1a9c313c52\n\n     *     CLEAN 335c4c6028171cfddfbaae1a9c313c52 3934 2342\n\n     *     REMOVE 335c4c6028171cfddfbaae1a9c313c52\n\n     *     DIRTY 1ab96a171faeeee38496d8b330771a7a\n\n     *     CLEAN 1ab96a171faeeee38496d8b330771a7a 1600 234\n\n     *     READ 335c4c6028171cfddfbaae1a9c313c52\n\n     *     READ 3400330d1dfc7f3f7f4b8d4d803dfcf6\n\n     *\n\n     * The first five lines of the journal form its header. They are the\n\n     * constant string \"libcore.io.DiskLruCache\", the disk cache's version,\n\n     * the application's version, the value count, and a blank line.\n\n     *\n\n     * Each of the subsequent lines in the file is a record of the state of a\n\n     * cache entry. Each line contains space-separated values: a state, a key,\n\n     * and optional state-specific values.\n\n     *   o DIRTY lines track that an entry is actively being created or updated.\n\n     *     Every successful DIRTY action should be followed by a CLEAN or REMOVE\n\n     *     action. DIRTY lines without a matching CLEAN or REMOVE indicate that\n\n     *     temporary files may need to be deleted.\n\n     *   o CLEAN lines track a cache entry that has been successfully published\n\n     *     and may be read. A publish line is followed by the lengths of each of\n\n     *     its values.\n\n     *   o READ lines track accesses for LRU.\n\n     *   o REMOVE lines track entries that have been deleted.\n\n     *\n\n     * The journal file is appended to as cache operations occur. The journal may\n\n     * occasionally be compacted by dropping redundant lines. A temporary file named\n\n     * \"journal.tmp\" will be used during compaction; that file should be deleted if\n\n     * it exists when the cache is opened.\n\n     */\n\n \n\n    private final File directory;\n\n    private final File journalFile;\n\n    private final File journalFileTmp;\n\n    private final int appVersion;\n\n    private final long maxSize;\n\n    private final int valueCount;\n\n    private long size = 0;\n\n    private Writer journalWriter;\n\n    private final LinkedHashMap<String, Entry> lruEntries\n\n            = new LinkedHashMap<String, Entry>(0, 0.75f, true);\n\n    private int redundantOpCount;\n\n \n\n    /**\n\n     * To differentiate between old and current snapshots, each entry is given\n\n     * a sequence number each time an edit is committed. A snapshot is stale if\n\n     * its sequence number is not equal to its entry's sequence number.\n\n     */\n\n    private long nextSequenceNumber = 0;\n\n \n\n    /* From java.util.Arrays */\n\n    @SuppressWarnings(\"unchecked\")\n\n    private static <T> T[] copyOfRange(T[] original, int start, int end) {\n\n        final int originalLength = original.length; // For exception priority compatibility.\n\n        if (start > end) {\n\n            throw new IllegalArgumentException();\n\n        }\n\n        if (start < 0 || start > originalLength) {\n\n            throw new ArrayIndexOutOfBoundsException();\n\n        }\n\n        final int resultLength = end - start;\n\n        final int copyLength = Math.min(resultLength, originalLength - start);\n\n        final T[] result = (T[]) Array\n\n                .newInstance(original.getClass().getComponentType(), resultLength);\n\n        System.arraycopy(original, start, result, 0, copyLength);\n\n        return result;\n\n    }\n\n \n\n    /**\n\n     * Returns the remainder of 'reader' as a string, closing it when done.\n\n     */\n\n    public static String readFully(Reader reader) throws IOException {\n\n        try {\n\n            StringWriter writer = new StringWriter();\n\n            char[] buffer = new char[1024];\n\n            int count;\n\n            while ((count = reader.read(buffer)) != -1) {\n\n                writer.write(buffer, 0, count);\n\n            }\n\n            return writer.toString();\n\n        } finally {\n\n            reader.close();\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the ASCII characters up to but not including the next \"\\r\\n\", or\n\n     * \"\\n\".\n\n     *\n\n     * @throws java.io.EOFException if the stream is exhausted before the next newline\n\n     *     character.\n\n     */\n\n    public static String readAsciiLine(InputStream in) throws IOException {\n\n        // TODO: support UTF-8 here instead\n\n \n\n        StringBuilder result = new StringBuilder(80);\n\n        while (true) {\n\n            int c = in.read();\n\n            if (c == -1) {\n\n                throw new EOFException();\n\n            } else if (c == '\\n') {\n\n                break;\n\n            }\n\n \n\n            result.append((char) c);\n\n        }\n\n        int length = result.length();\n\n        if (length > 0 && result.charAt(length - 1) == '\\r') {\n\n            result.setLength(length - 1);\n\n        }\n\n        return result.toString();\n\n    }\n\n \n\n    /**\n\n     * Closes 'closeable', ignoring any checked exceptions. Does nothing if 'closeable' is null.\n\n     */\n\n    public static void closeQuietly(Closeable closeable) {\n\n        if (closeable != null) {\n\n            try {\n\n                closeable.close();\n\n            } catch (RuntimeException rethrown) {\n\n                throw rethrown;\n\n            } catch (Exception ignored) {\n\n            }\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Recursively delete everything in {@code dir}.\n\n     */\n\n    // TODO: this should specify paths as Strings rather than as Files\n\n    public static void deleteContents(File dir) throws IOException {\n\n        File[] files = dir.listFiles();\n\n        if (files == null) {\n\n            throw new IllegalArgumentException(\"not a directory: \" + dir);\n\n        }\n\n        for (File file : files) {\n\n            if (file.isDirectory()) {\n\n                deleteContents(file);\n\n            }\n\n            if (!file.delete()) {\n\n                throw new IOException(\"failed to delete file: \" + file);\n\n            }\n\n        }\n\n    }\n\n \n\n    /** This cache uses a single background thread to evict entries. */\n\n    private final ExecutorService executorService = new ThreadPoolExecutor(0, 1,\n\n            60L, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());\n\n    private final Callable<Void> cleanupCallable = new Callable<Void>() {\n\n        @Override public Void call() throws Exception {\n\n            synchronized (DiskLruCache.this) {\n\n                if (journalWriter == null) {\n\n                    return null; // closed\n\n                }\n\n                trimToSize();\n\n                if (journalRebuildRequired()) {\n\n                    rebuildJournal();\n\n                    redundantOpCount = 0;\n\n                }\n\n            }\n\n            return null;\n\n        }\n\n    };\n\n \n\n    private DiskLruCache(File directory, int appVersion, int valueCount, long maxSize) {\n\n        this.directory = directory;\n\n        this.appVersion = appVersion;\n\n        this.journalFile = new File(directory, JOURNAL_FILE);\n\n        this.journalFileTmp = new File(directory, JOURNAL_FILE_TMP);\n\n        this.valueCount = valueCount;\n\n        this.maxSize = maxSize;\n\n    }\n\n \n\n    /**\n\n     * Opens the cache in {@code directory}, creating a cache if none exists\n\n     * there.\n\n     *\n\n     * @param directory a writable directory\n\n     * @param appVersion\n\n     * @param valueCount the number of values per cache entry. Must be positive.\n\n     * @param maxSize the maximum number of bytes this cache should use to store\n\n     * @throws java.io.IOException if reading or writing the cache directory fails\n\n     */\n\n    public static DiskLruCache open(File directory, int appVersion, int valueCount, long maxSize)\n\n            throws IOException {\n\n        if (maxSize <= 0) {\n\n            throw new IllegalArgumentException(\"maxSize <= 0\");\n\n        }\n\n        if (valueCount <= 0) {\n\n            throw new IllegalArgumentException(\"valueCount <= 0\");\n\n        }\n\n \n\n        // prefer to pick up where we left off\n\n        DiskLruCache cache = new DiskLruCache(directory, appVersion, valueCount, maxSize);\n\n        if (cache.journalFile.exists()) {\n\n            try {\n\n                cache.readJournal();\n\n                cache.processJournal();\n\n                cache.journalWriter = new BufferedWriter(new FileWriter(cache.journalFile, true),\n\n                        IO_BUFFER_SIZE);\n\n                return cache;\n\n            } catch (IOException journalIsCorrupt) {\n\n//                System.logW(\"DiskLruCache \" + directory + \" is corrupt: \"\n\n//                        + journalIsCorrupt.getMessage() + \", removing\");\n\n                cache.delete();\n\n            }\n\n        }\n\n \n\n        // create a new empty cache\n\n        directory.mkdirs();\n\n        cache = new DiskLruCache(directory, appVersion, valueCount, maxSize);\n\n        cache.rebuildJournal();\n\n        return cache;\n\n    }\n\n \n\n    private void readJournal() throws IOException {\n\n        InputStream in = new BufferedInputStream(new FileInputStream(journalFile), IO_BUFFER_SIZE);\n\n        try {\n\n            String magic = readAsciiLine(in);\n\n            String version = readAsciiLine(in);\n\n            String appVersionString = readAsciiLine(in);\n\n            String valueCountString = readAsciiLine(in);\n\n            String blank = readAsciiLine(in);\n\n            if (!MAGIC.equals(magic)\n\n                    || !VERSION_1.equals(version)\n\n                    || !Integer.toString(appVersion).equals(appVersionString)\n\n                    || !Integer.toString(valueCount).equals(valueCountString)\n\n                    || !\"\".equals(blank)) {\n\n                throw new IOException(\"unexpected journal header: [\"\n\n                        + magic + \", \" + version + \", \" + valueCountString + \", \" + blank + \"]\");\n\n            }\n\n \n\n            while (true) {\n\n                try {\n\n                    readJournalLine(readAsciiLine(in));\n\n                } catch (EOFException endOfJournal) {\n\n                    break;\n\n                }\n\n            }\n\n        } finally {\n\n            closeQuietly(in);\n\n        }\n\n    }\n\n \n\n    private void readJournalLine(String line) throws IOException {\n\n        String[] parts = line.split(\" \");\n\n        if (parts.length < 2) {\n\n            throw new IOException(\"unexpected journal line: \" + line);\n\n        }\n\n \n\n        String key = parts[1];\n\n        if (parts[0].equals(REMOVE) && parts.length == 2) {\n\n            lruEntries.remove(key);\n\n            return;\n\n        }\n\n \n\n        Entry entry = lruEntries.get(key);\n\n        if (entry == null) {\n\n            entry = new Entry(key);\n\n            lruEntries.put(key, entry);\n\n        }\n\n \n\n        if (parts[0].equals(CLEAN) && parts.length == 2 + valueCount) {\n\n            entry.readable = true;\n\n            entry.currentEditor = null;\n\n            entry.setLengths(copyOfRange(parts, 2, parts.length));\n\n        } else if (parts[0].equals(DIRTY) && parts.length == 2) {\n\n            entry.currentEditor = new Editor(entry);\n\n        } else if (parts[0].equals(READ) && parts.length == 2) {\n\n            // this work was already done by calling lruEntries.get()\n\n        } else {\n\n            throw new IOException(\"unexpected journal line: \" + line);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Computes the initial size and collects garbage as a part of opening the\n\n     * cache. Dirty entries are assumed to be inconsistent and will be deleted.\n\n     */\n\n    private void processJournal() throws IOException {\n\n        deleteIfExists(journalFileTmp);\n\n        for (Iterator<Entry> i = lruEntries.values().iterator(); i.hasNext(); ) {\n\n            Entry entry = i.next();\n\n            if (entry.currentEditor == null) {\n\n                for (int t = 0; t < valueCount; t++) {\n\n                    size += entry.lengths[t];\n\n                }\n\n            } else {\n\n                entry.currentEditor = null;\n\n                for (int t = 0; t < valueCount; t++) {\n\n                    deleteIfExists(entry.getCleanFile(t));\n\n                    deleteIfExists(entry.getDirtyFile(t));\n\n                }\n\n                i.remove();\n\n            }\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Creates a new journal that omits redundant information. This replaces the\n\n     * current journal if it exists.\n\n     */\n\n    private synchronized void rebuildJournal() throws IOException {\n\n        if (journalWriter != null) {\n\n            journalWriter.close();\n\n        }\n\n \n\n        Writer writer = new BufferedWriter(new FileWriter(journalFileTmp), IO_BUFFER_SIZE);\n\n        writer.write(MAGIC);\n\n        writer.write(\"\\n\");\n\n        writer.write(VERSION_1);\n\n        writer.write(\"\\n\");\n\n        writer.write(Integer.toString(appVersion));\n\n        writer.write(\"\\n\");\n\n        writer.write(Integer.toString(valueCount));\n\n        writer.write(\"\\n\");\n\n        writer.write(\"\\n\");\n\n \n\n        for (Entry entry : lruEntries.values()) {\n\n            if (entry.currentEditor != null) {\n\n                writer.write(DIRTY + ' ' + entry.key + '\\n');\n\n            } else {\n\n                writer.write(CLEAN + ' ' + entry.key + entry.getLengths() + '\\n');\n\n            }\n\n        }\n\n \n\n        writer.close();\n\n        journalFileTmp.renameTo(journalFile);\n\n        journalWriter = new BufferedWriter(new FileWriter(journalFile, true), IO_BUFFER_SIZE);\n\n    }\n\n \n\n    private static void deleteIfExists(File file) throws IOException {\n\n//        try {\n\n//            Libcore.os.remove(file.getPath());\n\n//        } catch (ErrnoException errnoException) {\n\n//            if (errnoException.errno != OsConstants.ENOENT) {\n\n//                throw errnoException.rethrowAsIOException();\n\n//            }\n\n//        }\n\n        if (file.exists() && !file.delete()) {\n\n            throw new IOException();\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns a snapshot of the entry named {@code key}, or null if it doesn't\n\n     * exist is not currently readable. If a value is returned, it is moved to\n\n     * the head of the LRU queue.\n\n     */\n\n    public synchronized Snapshot get(String key) throws IOException {\n\n        checkNotClosed();\n\n        validateKey(key);\n\n        Entry entry = lruEntries.get(key);\n\n        if (entry == null) {\n\n            return null;\n\n        }\n\n \n\n        if (!entry.readable) {\n\n            return null;\n\n        }\n\n \n\n        /*\n\n         * Open all streams eagerly to guarantee that we see a single published\n\n         * snapshot. If we opened streams lazily then the streams could come\n\n         * from different edits.\n\n         */\n\n        InputStream[] ins = new InputStream[valueCount];\n\n        try {\n\n            for (int i = 0; i < valueCount; i++) {\n\n                ins[i] = new FileInputStream(entry.getCleanFile(i));\n\n            }\n\n        } catch (FileNotFoundException e) {\n\n            // a file must have been deleted manually!\n\n            return null;\n\n        }\n\n \n\n        redundantOpCount++;\n\n        journalWriter.append(READ + ' ' + key + '\\n');\n\n        if (journalRebuildRequired()) {\n\n            executorService.submit(cleanupCallable);\n\n        }\n\n \n\n        return new Snapshot(key, entry.sequenceNumber, ins);\n\n    }\n\n \n\n    /**\n\n     * Returns an editor for the entry named {@code key}, or null if another\n\n     * edit is in progress.\n\n     */\n\n    public Editor edit(String key) throws IOException {\n\n        return edit(key, ANY_SEQUENCE_NUMBER);\n\n    }\n\n \n\n    private synchronized Editor edit(String key, long expectedSequenceNumber) throws IOException {\n\n        checkNotClosed();\n\n        validateKey(key);\n\n        Entry entry = lruEntries.get(key);\n\n        if (expectedSequenceNumber != ANY_SEQUENCE_NUMBER\n\n                && (entry == null || entry.sequenceNumber != expectedSequenceNumber)) {\n\n            return null; // snapshot is stale\n\n        }\n\n        if (entry == null) {\n\n            entry = new Entry(key);\n\n            lruEntries.put(key, entry);\n\n        } else if (entry.currentEditor != null) {\n\n            return null; // another edit is in progress\n\n        }\n\n \n\n        Editor editor = new Editor(entry);\n\n        entry.currentEditor = editor;\n\n \n\n        // flush the journal before creating files to prevent file leaks\n\n        journalWriter.write(DIRTY + ' ' + key + '\\n');\n\n        journalWriter.flush();\n\n        return editor;\n\n    }\n\n \n\n    /**\n\n     * Returns the directory where this cache stores its data.\n\n     */\n\n    public File getDirectory() {\n\n        return directory;\n\n    }\n\n \n\n    /**\n\n     * Returns the maximum number of bytes that this cache should use to store\n\n     * its data.\n\n     */\n\n    public long maxSize() {\n\n        return maxSize;\n\n    }\n\n \n\n    /**\n\n     * Returns the number of bytes currently being used to store the values in\n\n     * this cache. This may be greater than the max size if a background\n\n     * deletion is pending.\n\n     */\n\n    public synchronized long size() {\n\n        return size;\n\n    }\n\n \n\n    private synchronized void completeEdit(Editor editor, boolean success) throws IOException {\n\n        Entry entry = editor.entry;\n\n        if (entry.currentEditor != editor) {\n\n            throw new IllegalStateException();\n\n        }\n\n \n\n        // if this edit is creating the entry for the first time, every index must have a value\n\n        if (success && !entry.readable) {\n\n            for (int i = 0; i < valueCount; i++) {\n\n                if (!entry.getDirtyFile(i).exists()) {\n\n                    editor.abort();\n\n                    throw new IllegalStateException(\"edit didn't create file \" + i);\n\n                }\n\n            }\n\n        }\n\n \n\n        for (int i = 0; i < valueCount; i++) {\n\n            File dirty = entry.getDirtyFile(i);\n\n            if (success) {\n\n                if (dirty.exists()) {\n\n                    File clean = entry.getCleanFile(i);\n\n                    dirty.renameTo(clean);\n\n                    long oldLength = entry.lengths[i];\n\n                    long newLength = clean.length();\n\n                    entry.lengths[i] = newLength;\n\n                    size = size - oldLength + newLength;\n\n                }\n\n            } else {\n\n                deleteIfExists(dirty);\n\n            }\n\n        }\n\n \n\n        redundantOpCount++;\n\n        entry.currentEditor = null;\n\n        if (entry.readable | success) {\n\n            entry.readable = true;\n\n            journalWriter.write(CLEAN + ' ' + entry.key + entry.getLengths() + '\\n');\n\n            if (success) {\n\n                entry.sequenceNumber = nextSequenceNumber++;\n\n            }\n\n        } else {\n\n            lruEntries.remove(entry.key);\n\n            journalWriter.write(REMOVE + ' ' + entry.key + '\\n');\n\n        }\n\n \n\n        if (size > maxSize || journalRebuildRequired()) {\n\n            executorService.submit(cleanupCallable);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * We only rebuild the journal when it will halve the size of the journal\n\n     * and eliminate at least 2000 ops.\n\n     */\n\n    private boolean journalRebuildRequired() {\n\n        final int REDUNDANT_OP_COMPACT_THRESHOLD = 2000;\n\n        return redundantOpCount >= REDUNDANT_OP_COMPACT_THRESHOLD\n\n                && redundantOpCount >= lruEntries.size();\n\n    }\n\n \n\n    /**\n\n     * Drops the entry for {@code key} if it exists and can be removed. Entries\n\n     * actively being edited cannot be removed.\n\n     *\n\n     * @return true if an entry was removed.\n\n     */\n\n    public synchronized boolean remove(String key) throws IOException {\n\n        checkNotClosed();\n\n        validateKey(key);\n\n        Entry entry = lruEntries.get(key);\n\n        if (entry == null || entry.currentEditor != null) {\n\n            return false;\n\n        }\n\n \n\n        for (int i = 0; i < valueCount; i++) {\n\n            File file = entry.getCleanFile(i);\n\n            if (!file.delete()) {\n\n                throw new IOException(\"failed to delete \" + file);\n\n            }\n\n            size -= entry.lengths[i];\n\n            entry.lengths[i] = 0;\n\n        }\n\n \n\n        redundantOpCount++;\n\n        journalWriter.append(REMOVE + ' ' + key + '\\n');\n\n        lruEntries.remove(key);\n\n \n\n        if (journalRebuildRequired()) {\n\n            executorService.submit(cleanupCallable);\n\n        }\n\n \n\n        return true;\n\n    }\n\n \n\n    /**\n\n     * Returns true if this cache has been closed.\n\n     */\n\n    public boolean isClosed() {\n\n        return journalWriter == null;\n\n    }\n\n \n\n    private void checkNotClosed() {\n\n        if (journalWriter == null) {\n\n            throw new IllegalStateException(\"cache is closed\");\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Force buffered operations to the filesystem.\n\n     */\n\n    public synchronized void flush() throws IOException {\n\n        checkNotClosed();\n\n        trimToSize();\n\n        journalWriter.flush();\n\n    }\n\n \n\n    /**\n\n     * Closes this cache. Stored values will remain on the filesystem.\n\n     */\n\n    public synchronized void close() throws IOException {\n\n        if (journalWriter == null) {\n\n            return; // already closed\n\n        }\n\n        for (Entry entry : new ArrayList<Entry>(lruEntries.values())) {\n\n            if (entry.currentEditor != null) {\n\n                entry.currentEditor.abort();\n\n            }\n\n        }\n\n        trimToSize();\n\n        journalWriter.close();\n\n        journalWriter = null;\n\n    }\n\n \n\n    private void trimToSize() throws IOException {\n\n        while (size > maxSize) {\n\n//            Map.Entry<String, Entry> toEvict = lruEntries.eldest();\n\n            final Map.Entry<String, Entry> toEvict = lruEntries.entrySet().iterator().next();\n\n            remove(toEvict.getKey());\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Closes the cache and deletes all of its stored values. This will delete\n\n     * all files in the cache directory including files that weren't created by\n\n     * the cache.\n\n     */\n\n    public void delete() throws IOException {\n\n        close();\n\n        deleteContents(directory);\n\n    }\n\n \n\n    private void validateKey(String key) {\n\n        if (key.contains(\" \") || key.contains(\"\\n\") || key.contains(\"\\r\")) {\n\n            throw new IllegalArgumentException(\n\n                    \"keys must not contain spaces or newlines: \\\"\" + key + \"\\\"\");\n\n        }\n\n    }\n\n \n\n    private static String inputStreamToString(InputStream in) throws IOException {\n\n        return readFully(new InputStreamReader(in, UTF_8));\n\n    }\n\n \n\n    /**\n\n     * A snapshot of the values for an entry.\n\n     */\n\n    public final class Snapshot implements Closeable {\n\n        private final String key;\n\n        private final long sequenceNumber;\n\n        private final InputStream[] ins;\n\n \n\n        private Snapshot(String key, long sequenceNumber, InputStream[] ins) {\n\n            this.key = key;\n\n            this.sequenceNumber = sequenceNumber;\n\n            this.ins = ins;\n\n        }\n\n \n\n        /**\n\n         * Returns an editor for this snapshot's entry, or null if either the\n\n         * entry has changed since this snapshot was created or if another edit\n\n         * is in progress.\n\n         */\n\n        public Editor edit() throws IOException {\n\n            return DiskLruCache.this.edit(key, sequenceNumber);\n\n        }\n\n \n\n        /**\n\n         * Returns the unbuffered stream with the value for {@code index}.\n\n         */\n\n        public InputStream getInputStream(int index) {\n\n            return ins[index];\n\n        }\n\n \n\n        /**\n\n         * Returns the string value for {@code index}.\n\n         */\n\n        public String getString(int index) throws IOException {\n\n            return inputStreamToString(getInputStream(index));\n\n        }\n\n \n\n        @Override public void close() {\n\n            for (InputStream in : ins) {\n\n                closeQuietly(in);\n\n            }\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Edits the values for an entry.\n\n     */\n\n    public final class Editor {\n\n        private final Entry entry;\n\n        private boolean hasErrors;\n\n \n\n        private Editor(Entry entry) {\n\n            this.entry = entry;\n\n        }\n\n \n\n        /**\n\n         * Returns an unbuffered input stream to read the last committed value,\n\n         * or null if no value has been committed.\n\n         */\n\n        public InputStream newInputStream(int index) throws IOException {\n\n            synchronized (DiskLruCache.this) {\n\n                if (entry.currentEditor != this) {\n\n                    throw new IllegalStateException();\n\n                }\n\n                if (!entry.readable) {\n\n                    return null;\n\n                }\n\n                return new FileInputStream(entry.getCleanFile(index));\n\n            }\n\n        }\n\n \n\n        /**\n\n         * Returns the last committed value as a string, or null if no value\n\n         * has been committed.\n\n         */\n\n        public String getString(int index) throws IOException {\n\n            InputStream in = newInputStream(index);\n\n            return in != null ? inputStreamToString(in) : null;\n\n        }\n\n \n\n        /**\n\n         * Returns a new unbuffered output stream to write the value at\n\n         * {@code index}. If the underlying output stream encounters errors\n\n         * when writing to the filesystem, this edit will be aborted when\n\n         * {@link #commit} is called. The returned output stream does not throw\n\n         * IOExceptions.\n\n         */\n\n        public OutputStream newOutputStream(int index) throws IOException {\n\n            synchronized (DiskLruCache.this) {\n\n                if (entry.currentEditor != this) {\n\n                    throw new IllegalStateException();\n\n                }\n\n                return new FaultHidingOutputStream(new FileOutputStream(entry.getDirtyFile(index)));\n\n            }\n\n        }\n\n \n\n        /**\n\n         * Sets the value at {@code index} to {@code value}.\n\n         */\n\n        public void set(int index, String value) throws IOException {\n\n            Writer writer = null;\n\n            try {\n\n                writer = new OutputStreamWriter(newOutputStream(index), UTF_8);\n\n                writer.write(value);\n\n            } finally {\n\n                closeQuietly(writer);\n\n            }\n\n        }\n\n \n\n        /**\n\n         * Commits this edit so it is visible to readers.  This releases the\n\n         * edit lock so another edit may be started on the same key.\n\n         */\n\n        public void commit() throws IOException {\n\n            if (hasErrors) {\n\n                completeEdit(this, false);\n\n                remove(entry.key); // the previous entry is stale\n\n            } else {\n\n                completeEdit(this, true);\n\n            }\n\n        }\n\n \n\n        /**\n\n         * Aborts this edit. This releases the edit lock so another edit may be\n\n         * started on the same key.\n\n         */\n\n        public void abort() throws IOException {\n\n            completeEdit(this, false);\n\n        }\n\n \n\n        private class FaultHidingOutputStream extends FilterOutputStream {\n\n            private FaultHidingOutputStream(OutputStream out) {\n\n                super(out);\n\n            }\n\n \n\n            @Override public void write(int oneByte) {\n\n                try {\n\n                    out.write(oneByte);\n\n                } catch (IOException e) {\n\n                    hasErrors = true;\n\n                }\n\n            }\n\n \n\n            @Override public void write(byte[] buffer, int offset, int length) {\n\n                try {\n\n                    out.write(buffer, offset, length);\n\n                } catch (IOException e) {\n\n                    hasErrors = true;\n\n                }\n\n            }\n\n \n\n            @Override public void close() {\n\n                try {\n\n                    out.close();\n\n                } catch (IOException e) {\n\n                    hasErrors = true;\n\n                }\n\n            }\n\n \n\n            @Override public void flush() {\n\n                try {\n\n                    out.flush();\n\n                } catch (IOException e) {\n\n                    hasErrors = true;\n\n                }\n\n            }\n\n        }\n\n    }\n\n \n\n    private final class Entry {\n\n        private final String key;\n\n \n\n        /** Lengths of this entry's files. */\n\n        private final long[] lengths;\n\n \n\n        /** True if this entry has ever been published */\n\n        private boolean readable;\n\n \n\n        /** The ongoing edit or null if this entry is not being edited. */\n\n        private Editor currentEditor;\n\n \n\n        /** The sequence number of the most recently committed edit to this entry. */\n\n        private long sequenceNumber;\n\n \n\n        private Entry(String key) {\n\n            this.key = key;\n\n            this.lengths = new long[valueCount];\n\n        }\n\n \n\n        public String getLengths() throws IOException {\n\n            StringBuilder result = new StringBuilder();\n\n            for (long size : lengths) {\n\n                result.append(' ').append(size);\n\n            }\n\n            return result.toString();\n\n        }\n\n \n\n        /**\n\n         * Set lengths using decimal numbers like \"10123\".\n\n         */\n\n        private void setLengths(String[] strings) throws IOException {\n\n            if (strings.length != valueCount) {\n\n                throw invalidLengths(strings);\n\n            }\n\n \n\n            try {\n\n                for (int i = 0; i < strings.length; i++) {\n\n                    lengths[i] = Long.parseLong(strings[i]);\n\n                }\n\n            } catch (NumberFormatException e) {\n\n                throw invalidLengths(strings);\n\n            }\n\n        }\n\n \n\n        private IOException invalidLengths(String[] strings) throws IOException {\n\n            throw new IOException(\"unexpected journal line: \" + Arrays.toString(strings));\n\n        }\n\n \n\n        public File getCleanFile(int i) {\n\n            return new File(directory, key + \".\" + i);\n\n        }\n\n \n\n        public File getDirtyFile(int i) {\n\n            return new File(directory, key + \".\" + i + \".tmp\");\n\n        }\n\n    }\n\n}\n  ","ImageCache.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.displayingbitmaps.util;\n\n \n\nimport android.annotation.TargetApi;\n\nimport android.content.Context;\n\nimport android.graphics.Bitmap;\n\nimport android.graphics.Bitmap.CompressFormat;\n\nimport android.graphics.Bitmap.Config;\n\nimport android.graphics.BitmapFactory;\n\nimport android.graphics.drawable.BitmapDrawable;\n\nimport android.os.Build.VERSION_CODES;\n\nimport android.os.Bundle;\n\nimport android.os.Environment;\n\nimport android.os.StatFs;\n\nimport android.support.v4.app.Fragment;\n\nimport android.support.v4.app.FragmentManager;\n\nimport android.support.v4.util.LruCache;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.displayingbitmaps.BuildConfig;\n\n \n\nimport java.io.File;\n\nimport java.io.FileDescriptor;\n\nimport java.io.FileInputStream;\n\nimport java.io.IOException;\n\nimport java.io.InputStream;\n\nimport java.io.OutputStream;\n\nimport java.lang.ref.SoftReference;\n\nimport java.security.MessageDigest;\n\nimport java.security.NoSuchAlgorithmException;\n\nimport java.util.Collections;\n\nimport java.util.HashSet;\n\nimport java.util.Iterator;\n\nimport java.util.Set;\n\n \n\n/**\n\n * This class handles disk and memory caching of bitmaps in conjunction with the\n\n * {@link ImageWorker} class and its subclasses. Use\n\n * {@link ImageCache#getInstance(android.support.v4.app.FragmentManager, ImageCacheParams)} to get an instance of this\n\n * class, although usually a cache should be added directly to an {@link ImageWorker} by calling\n\n * {@link ImageWorker#addImageCache(android.support.v4.app.FragmentManager, ImageCacheParams)}.\n\n */\n\npublic class ImageCache {\n\n    private static final String TAG = \"ImageCache\";\n\n \n\n    // Default memory cache size in kilobytes\n\n    private static final int DEFAULT_MEM_CACHE_SIZE = 1024 * 5; // 5MB\n\n \n\n    // Default disk cache size in bytes\n\n    private static final int DEFAULT_DISK_CACHE_SIZE = 1024 * 1024 * 10; // 10MB\n\n \n\n    // Compression settings when writing images to disk cache\n\n    private static final CompressFormat DEFAULT_COMPRESS_FORMAT = CompressFormat.JPEG;\n\n    private static final int DEFAULT_COMPRESS_QUALITY = 70;\n\n    private static final int DISK_CACHE_INDEX = 0;\n\n \n\n    // Constants to easily toggle various caches\n\n    private static final boolean DEFAULT_MEM_CACHE_ENABLED = true;\n\n    private static final boolean DEFAULT_DISK_CACHE_ENABLED = true;\n\n    private static final boolean DEFAULT_INIT_DISK_CACHE_ON_CREATE = false;\n\n \n\n    private DiskLruCache mDiskLruCache;\n\n    private LruCache<String, BitmapDrawable> mMemoryCache;\n\n    private ImageCacheParams mCacheParams;\n\n    private final Object mDiskCacheLock = new Object();\n\n    private boolean mDiskCacheStarting = true;\n\n \n\n    private Set<SoftReference<Bitmap>> mReusableBitmaps;\n\n \n\n    /**\n\n     * Create a new ImageCache object using the specified parameters. This should not be\n\n     * called directly by other classes, instead use\n\n     * {@link ImageCache#getInstance(android.support.v4.app.FragmentManager, ImageCacheParams)} to fetch an ImageCache\n\n     * instance.\n\n     *\n\n     * @param cacheParams The cache parameters to use to initialize the cache\n\n     */\n\n    private ImageCache(ImageCacheParams cacheParams) {\n\n        init(cacheParams);\n\n    }\n\n \n\n    /**\n\n     * Return an {@link ImageCache} instance. A {@link RetainFragment} is used to retain the\n\n     * ImageCache object across configuration changes such as a change in device orientation.\n\n     *\n\n     * @param fragmentManager The fragment manager to use when dealing with the retained fragment.\n\n     * @param cacheParams The cache parameters to use if the ImageCache needs instantiation.\n\n     * @return An existing retained ImageCache object or a new one if one did not exist\n\n     */\n\n    public static ImageCache getInstance(\n\n            FragmentManager fragmentManager, ImageCacheParams cacheParams) {\n\n \n\n        // Search for, or create an instance of the non-UI RetainFragment\n\n        final RetainFragment mRetainFragment = findOrCreateRetainFragment(fragmentManager);\n\n \n\n        // See if we already have an ImageCache stored in RetainFragment\n\n        ImageCache imageCache = (ImageCache) mRetainFragment.getObject();\n\n \n\n        // No existing ImageCache, create one and store it in RetainFragment\n\n        if (imageCache == null) {\n\n            imageCache = new ImageCache(cacheParams);\n\n            mRetainFragment.setObject(imageCache);\n\n        }\n\n \n\n        return imageCache;\n\n    }\n\n \n\n    /**\n\n     * Initialize the cache, providing all parameters.\n\n     *\n\n     * @param cacheParams The cache parameters to initialize the cache\n\n     */\n\n    private void init(ImageCacheParams cacheParams) {\n\n        mCacheParams = cacheParams;\n\n \n\n        // Set up memory cache\n\n        if (mCacheParams.memoryCacheEnabled) {\n\n            if (BuildConfig.DEBUG) {\n\n                Log.d(TAG, \"Memory cache created (size = \" + mCacheParams.memCacheSize + \")\");\n\n            }\n\n \n\n            // If we're running on Honeycomb or newer, create a set of reusable bitmaps that can be\n\n            // populated into the inBitmap field of BitmapFactory.Options. Note that the set is\n\n            // of SoftReferences which will actually not be very effective due to the garbage\n\n            // collector being aggressive clearing Soft/WeakReferences. A better approach\n\n            // would be to use a strongly references bitmaps, however this would require some\n\n            // balancing of memory usage between this set and the bitmap LruCache. It would also\n\n            // require knowledge of the expected size of the bitmaps. From Honeycomb to JellyBean\n\n            // the size would need to be precise, from KitKat onward the size would just need to\n\n            // be the upper bound (due to changes in how inBitmap can re-use bitmaps).\n\n            if (Utils.hasHoneycomb()) {\n\n                mReusableBitmaps =\n\n                        Collections.synchronizedSet(new HashSet<SoftReference<Bitmap>>());\n\n            }\n\n \n\n            mMemoryCache = new LruCache<String, BitmapDrawable>(mCacheParams.memCacheSize) {\n\n \n\n                /**\n\n                 * Notify the removed entry that is no longer being cached\n\n                 */\n\n                @Override\n\n                protected void entryRemoved(boolean evicted, String key,\n\n                        BitmapDrawable oldValue, BitmapDrawable newValue) {\n\n                    if (RecyclingBitmapDrawable.class.isInstance(oldValue)) {\n\n                        // The removed entry is a recycling drawable, so notify it\n\n                        // that it has been removed from the memory cache\n\n                        ((RecyclingBitmapDrawable) oldValue).setIsCached(false);\n\n                    } else {\n\n                        // The removed entry is a standard BitmapDrawable\n\n \n\n                        if (Utils.hasHoneycomb()) {\n\n                            // We're running on Honeycomb or later, so add the bitmap\n\n                            // to a SoftReference set for possible use with inBitmap later\n\n                            mReusableBitmaps.add(new SoftReference<Bitmap>(oldValue.getBitmap()));\n\n                        }\n\n                    }\n\n                }\n\n \n\n                /**\n\n                 * Measure item size in kilobytes rather than units which is more practical\n\n                 * for a bitmap cache\n\n                 */\n\n                @Override\n\n                protected int sizeOf(String key, BitmapDrawable value) {\n\n                    final int bitmapSize = getBitmapSize(value) / 1024;\n\n                    return bitmapSize == 0 ? 1 : bitmapSize;\n\n                }\n\n            };\n\n        }\n\n \n\n        // By default the disk cache is not initialized here as it should be initialized\n\n        // on a separate thread due to disk access.\n\n        if (cacheParams.initDiskCacheOnCreate) {\n\n            // Set up disk cache\n\n            initDiskCache();\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Initializes the disk cache.  Note that this includes disk access so this should not be\n\n     * executed on the main/UI thread. By default an ImageCache does not initialize the disk\n\n     * cache when it is created, instead you should call initDiskCache() to initialize it on a\n\n     * background thread.\n\n     */\n\n    public void initDiskCache() {\n\n        // Set up disk cache\n\n        synchronized (mDiskCacheLock) {\n\n            if (mDiskLruCache == null || mDiskLruCache.isClosed()) {\n\n                File diskCacheDir = mCacheParams.diskCacheDir;\n\n                if (mCacheParams.diskCacheEnabled && diskCacheDir != null) {\n\n                    if (!diskCacheDir.exists()) {\n\n                        diskCacheDir.mkdirs();\n\n                    }\n\n                    if (getUsableSpace(diskCacheDir) > mCacheParams.diskCacheSize) {\n\n                        try {\n\n                            mDiskLruCache = DiskLruCache.open(\n\n                                    diskCacheDir, 1, 1, mCacheParams.diskCacheSize);\n\n                            if (BuildConfig.DEBUG) {\n\n                                Log.d(TAG, \"Disk cache initialized\");\n\n                            }\n\n                        } catch (final IOException e) {\n\n                            mCacheParams.diskCacheDir = null;\n\n                            Log.e(TAG, \"initDiskCache - \" + e);\n\n                        }\n\n                    }\n\n                }\n\n            }\n\n            mDiskCacheStarting = false;\n\n            mDiskCacheLock.notifyAll();\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Adds a bitmap to both memory and disk cache.\n\n     * @param data Unique identifier for the bitmap to store\n\n     * @param value The bitmap drawable to store\n\n     */\n\n    public void addBitmapToCache(String data, BitmapDrawable value) {\n\n        if (data == null || value == null) {\n\n            return;\n\n        }\n\n \n\n        // Add to memory cache\n\n        if (mMemoryCache != null) {\n\n            if (RecyclingBitmapDrawable.class.isInstance(value)) {\n\n                // The removed entry is a recycling drawable, so notify it\n\n                // that it has been added into the memory cache\n\n                ((RecyclingBitmapDrawable) value).setIsCached(true);\n\n            }\n\n            mMemoryCache.put(data, value);\n\n        }\n\n \n\n        synchronized (mDiskCacheLock) {\n\n            // Add to disk cache\n\n            if (mDiskLruCache != null) {\n\n                final String key = hashKeyForDisk(data);\n\n                OutputStream out = null;\n\n                try {\n\n                    DiskLruCache.Snapshot snapshot = mDiskLruCache.get(key);\n\n                    if (snapshot == null) {\n\n                        final DiskLruCache.Editor editor = mDiskLruCache.edit(key);\n\n                        if (editor != null) {\n\n                            out = editor.newOutputStream(DISK_CACHE_INDEX);\n\n                            value.getBitmap().compress(\n\n                                    mCacheParams.compressFormat, mCacheParams.compressQuality, out);\n\n                            editor.commit();\n\n                            out.close();\n\n                        }\n\n                    } else {\n\n                        snapshot.getInputStream(DISK_CACHE_INDEX).close();\n\n                    }\n\n                } catch (final IOException e) {\n\n                    Log.e(TAG, \"addBitmapToCache - \" + e);\n\n                } catch (Exception e) {\n\n                    Log.e(TAG, \"addBitmapToCache - \" + e);\n\n                } finally {\n\n                    try {\n\n                        if (out != null) {\n\n                            out.close();\n\n                        }\n\n                    } catch (IOException e) {}\n\n                }\n\n            }\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Get from memory cache.\n\n     *\n\n     * @param data Unique identifier for which item to get\n\n     * @return The bitmap drawable if found in cache, null otherwise\n\n     */\n\n    public BitmapDrawable getBitmapFromMemCache(String data) {\n\n        BitmapDrawable memValue = null;\n\n \n\n        if (mMemoryCache != null) {\n\n            memValue = mMemoryCache.get(data);\n\n        }\n\n \n\n        if (BuildConfig.DEBUG && memValue != null) {\n\n            Log.d(TAG, \"Memory cache hit\");\n\n        }\n\n \n\n        return memValue;\n\n    }\n\n \n\n    /**\n\n     * Get from disk cache.\n\n     *\n\n     * @param data Unique identifier for which item to get\n\n     * @return The bitmap if found in cache, null otherwise\n\n     */\n\n    public Bitmap getBitmapFromDiskCache(String data) {\n\n        final String key = hashKeyForDisk(data);\n\n        Bitmap bitmap = null;\n\n \n\n        synchronized (mDiskCacheLock) {\n\n            while (mDiskCacheStarting) {\n\n                try {\n\n                    mDiskCacheLock.wait();\n\n                } catch (InterruptedException e) {}\n\n            }\n\n            if (mDiskLruCache != null) {\n\n                InputStream inputStream = null;\n\n                try {\n\n                    final DiskLruCache.Snapshot snapshot = mDiskLruCache.get(key);\n\n                    if (snapshot != null) {\n\n                        if (BuildConfig.DEBUG) {\n\n                            Log.d(TAG, \"Disk cache hit\");\n\n                        }\n\n                        inputStream = snapshot.getInputStream(DISK_CACHE_INDEX);\n\n                        if (inputStream != null) {\n\n                            FileDescriptor fd = ((FileInputStream) inputStream).getFD();\n\n \n\n                            // Decode bitmap, but we don't want to sample so give\n\n                            // MAX_VALUE as the target dimensions\n\n                            bitmap = ImageResizer.decodeSampledBitmapFromDescriptor(\n\n                                    fd, Integer.MAX_VALUE, Integer.MAX_VALUE, this);\n\n                        }\n\n                    }\n\n                } catch (final IOException e) {\n\n                    Log.e(TAG, \"getBitmapFromDiskCache - \" + e);\n\n                } finally {\n\n                    try {\n\n                        if (inputStream != null) {\n\n                            inputStream.close();\n\n                        }\n\n                    } catch (IOException e) {}\n\n                }\n\n            }\n\n            return bitmap;\n\n        }\n\n    }\n\n \n\n    /**\n\n     * @param options - BitmapFactory.Options with out* options populated\n\n     * @return Bitmap that case be used for inBitmap\n\n     */\n\n    protected Bitmap getBitmapFromReusableSet(BitmapFactory.Options options) {\n\n        Bitmap bitmap = null;\n\n \n\n        if (mReusableBitmaps != null && !mReusableBitmaps.isEmpty()) {\n\n            synchronized (mReusableBitmaps) {\n\n                final Iterator<SoftReference<Bitmap>> iterator = mReusableBitmaps.iterator();\n\n                Bitmap item;\n\n \n\n                while (iterator.hasNext()) {\n\n                    item = iterator.next().get();\n\n \n\n                    if (null != item && item.isMutable()) {\n\n                        // Check to see it the item can be used for inBitmap\n\n                        if (canUseForInBitmap(item, options)) {\n\n                            bitmap = item;\n\n \n\n                            // Remove from reusable set so it can't be used again\n\n                            iterator.remove();\n\n                            break;\n\n                        }\n\n                    } else {\n\n                        // Remove from the set if the reference has been cleared.\n\n                        iterator.remove();\n\n                    }\n\n                }\n\n            }\n\n        }\n\n \n\n        return bitmap;\n\n    }\n\n \n\n    /**\n\n     * Clears both the memory and disk cache associated with this ImageCache object. Note that\n\n     * this includes disk access so this should not be executed on the main/UI thread.\n\n     */\n\n    public void clearCache() {\n\n        if (mMemoryCache != null) {\n\n            mMemoryCache.evictAll();\n\n            if (BuildConfig.DEBUG) {\n\n                Log.d(TAG, \"Memory cache cleared\");\n\n            }\n\n        }\n\n \n\n        synchronized (mDiskCacheLock) {\n\n            mDiskCacheStarting = true;\n\n            if (mDiskLruCache != null && !mDiskLruCache.isClosed()) {\n\n                try {\n\n                    mDiskLruCache.delete();\n\n                    if (BuildConfig.DEBUG) {\n\n                        Log.d(TAG, \"Disk cache cleared\");\n\n                    }\n\n                } catch (IOException e) {\n\n                    Log.e(TAG, \"clearCache - \" + e);\n\n                }\n\n                mDiskLruCache = null;\n\n                initDiskCache();\n\n            }\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Flushes the disk cache associated with this ImageCache object. Note that this includes\n\n     * disk access so this should not be executed on the main/UI thread.\n\n     */\n\n    public void flush() {\n\n        synchronized (mDiskCacheLock) {\n\n            if (mDiskLruCache != null) {\n\n                try {\n\n                    mDiskLruCache.flush();\n\n                    if (BuildConfig.DEBUG) {\n\n                        Log.d(TAG, \"Disk cache flushed\");\n\n                    }\n\n                } catch (IOException e) {\n\n                    Log.e(TAG, \"flush - \" + e);\n\n                }\n\n            }\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Closes the disk cache associated with this ImageCache object. Note that this includes\n\n     * disk access so this should not be executed on the main/UI thread.\n\n     */\n\n    public void close() {\n\n        synchronized (mDiskCacheLock) {\n\n            if (mDiskLruCache != null) {\n\n                try {\n\n                    if (!mDiskLruCache.isClosed()) {\n\n                        mDiskLruCache.close();\n\n                        mDiskLruCache = null;\n\n                        if (BuildConfig.DEBUG) {\n\n                            Log.d(TAG, \"Disk cache closed\");\n\n                        }\n\n                    }\n\n                } catch (IOException e) {\n\n                    Log.e(TAG, \"close - \" + e);\n\n                }\n\n            }\n\n        }\n\n    }\n\n \n\n    /**\n\n     * A holder class that contains cache parameters.\n\n     */\n\n    public static class ImageCacheParams {\n\n        public int memCacheSize = DEFAULT_MEM_CACHE_SIZE;\n\n        public int diskCacheSize = DEFAULT_DISK_CACHE_SIZE;\n\n        public File diskCacheDir;\n\n        public CompressFormat compressFormat = DEFAULT_COMPRESS_FORMAT;\n\n        public int compressQuality = DEFAULT_COMPRESS_QUALITY;\n\n        public boolean memoryCacheEnabled = DEFAULT_MEM_CACHE_ENABLED;\n\n        public boolean diskCacheEnabled = DEFAULT_DISK_CACHE_ENABLED;\n\n        public boolean initDiskCacheOnCreate = DEFAULT_INIT_DISK_CACHE_ON_CREATE;\n\n \n\n        /**\n\n         * Create a set of image cache parameters that can be provided to\n\n         * {@link ImageCache#getInstance(android.support.v4.app.FragmentManager, ImageCacheParams)} or\n\n         * {@link ImageWorker#addImageCache(android.support.v4.app.FragmentManager, ImageCacheParams)}.\n\n         * @param context A context to use.\n\n         * @param diskCacheDirectoryName A unique subdirectory name that will be appended to the\n\n         *                               application cache directory. Usually \"cache\" or \"images\"\n\n         *                               is sufficient.\n\n         */\n\n        public ImageCacheParams(Context context, String diskCacheDirectoryName) {\n\n            diskCacheDir = getDiskCacheDir(context, diskCacheDirectoryName);\n\n        }\n\n \n\n        /**\n\n         * Sets the memory cache size based on a percentage of the max available VM memory.\n\n         * Eg. setting percent to 0.2 would set the memory cache to one fifth of the available\n\n         * memory. Throws {@link IllegalArgumentException} if percent is < 0.01 or > .8.\n\n         * memCacheSize is stored in kilobytes instead of bytes as this will eventually be passed\n\n         * to construct a LruCache which takes an int in its constructor.\n\n         *\n\n         * This value should be chosen carefully based on a number of factors\n\n         * Refer to the corresponding Android Training class for more discussion:\n\n         * http://developer.android.com/training/displaying-bitmaps/\n\n         *\n\n         * @param percent Percent of available app memory to use to size memory cache\n\n         */\n\n        public void setMemCacheSizePercent(float percent) {\n\n            if (percent < 0.01f || percent > 0.8f) {\n\n                throw new IllegalArgumentException(\"setMemCacheSizePercent - percent must be \"\n\n                        + \"between 0.01 and 0.8 (inclusive)\");\n\n            }\n\n            memCacheSize = Math.round(percent * Runtime.getRuntime().maxMemory() / 1024);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * @param candidate - Bitmap to check\n\n     * @param targetOptions - Options that have the out* value populated\n\n     * @return true if <code>candidate</code> can be used for inBitmap re-use with\n\n     *      <code>targetOptions</code>\n\n     */\n\n    @TargetApi(VERSION_CODES.KITKAT)\n\n    private static boolean canUseForInBitmap(\n\n            Bitmap candidate, BitmapFactory.Options targetOptions) {\n\n        if (!Utils.hasKitKat()) {\n\n            // On earlier versions, the dimensions must match exactly and the inSampleSize must be 1\n\n            return candidate.getWidth() == targetOptions.outWidth\n\n                    && candidate.getHeight() == targetOptions.outHeight\n\n                    && targetOptions.inSampleSize == 1;\n\n        }\n\n \n\n        // From Android 4.4 (KitKat) onward we can re-use if the byte size of the new bitmap\n\n        // is smaller than the reusable bitmap candidate allocation byte count.\n\n        int width = targetOptions.outWidth / targetOptions.inSampleSize;\n\n        int height = targetOptions.outHeight / targetOptions.inSampleSize;\n\n        int byteCount = width * height * getBytesPerPixel(candidate.getConfig());\n\n        return byteCount <= candidate.getAllocationByteCount();\n\n    }\n\n \n\n    /**\n\n     * Return the byte usage per pixel of a bitmap based on its configuration.\n\n     * @param config The bitmap configuration.\n\n     * @return The byte usage per pixel.\n\n     */\n\n    private static int getBytesPerPixel(Config config) {\n\n        if (config == Config.ARGB_8888) {\n\n            return 4;\n\n        } else if (config == Config.RGB_565) {\n\n            return 2;\n\n        } else if (config == Config.ARGB_4444) {\n\n            return 2;\n\n        } else if (config == Config.ALPHA_8) {\n\n            return 1;\n\n        }\n\n        return 1;\n\n    }\n\n \n\n    /**\n\n     * Get a usable cache directory (external if available, internal otherwise).\n\n     *\n\n     * @param context The context to use\n\n     * @param uniqueName A unique directory name to append to the cache dir\n\n     * @return The cache dir\n\n     */\n\n    public static File getDiskCacheDir(Context context, String uniqueName) {\n\n        // Check if media is mounted or storage is built-in, if so, try and use external cache dir\n\n        // otherwise use internal cache dir\n\n        final String cachePath =\n\n                Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState()) ||\n\n                        !isExternalStorageRemovable() ? getExternalCacheDir(context).getPath() :\n\n                                context.getCacheDir().getPath();\n\n \n\n        return new File(cachePath + File.separator + uniqueName);\n\n    }\n\n \n\n    /**\n\n     * A hashing method that changes a string (like a URL) into a hash suitable for using as a\n\n     * disk filename.\n\n     */\n\n    public static String hashKeyForDisk(String key) {\n\n        String cacheKey;\n\n        try {\n\n            final MessageDigest mDigest = MessageDigest.getInstance(\"MD5\");\n\n            mDigest.update(key.getBytes());\n\n            cacheKey = bytesToHexString(mDigest.digest());\n\n        } catch (NoSuchAlgorithmException e) {\n\n            cacheKey = String.valueOf(key.hashCode());\n\n        }\n\n        return cacheKey;\n\n    }\n\n \n\n    private static String bytesToHexString(byte[] bytes) {\n\n        // http://stackoverflow.com/questions/332079\n\n        StringBuilder sb = new StringBuilder();\n\n        for (int i = 0; i < bytes.length; i++) {\n\n            String hex = Integer.toHexString(0xFF & bytes[i]);\n\n            if (hex.length() == 1) {\n\n                sb.append('0');\n\n            }\n\n            sb.append(hex);\n\n        }\n\n        return sb.toString();\n\n    }\n\n \n\n    /**\n\n     * Get the size in bytes of a bitmap in a BitmapDrawable. Note that from Android 4.4 (KitKat)\n\n     * onward this returns the allocated memory size of the bitmap which can be larger than the\n\n     * actual bitmap data byte count (in the case it was re-used).\n\n     *\n\n     * @param value\n\n     * @return size in bytes\n\n     */\n\n    @TargetApi(VERSION_CODES.KITKAT)\n\n    public static int getBitmapSize(BitmapDrawable value) {\n\n        Bitmap bitmap = value.getBitmap();\n\n \n\n        // From KitKat onward use getAllocationByteCount() as allocated bytes can potentially be\n\n        // larger than bitmap byte count.\n\n        if (Utils.hasKitKat()) {\n\n            return bitmap.getAllocationByteCount();\n\n        }\n\n \n\n        if (Utils.hasHoneycombMR1()) {\n\n            return bitmap.getByteCount();\n\n        }\n\n \n\n        // Pre HC-MR1\n\n        return bitmap.getRowBytes() * bitmap.getHeight();\n\n    }\n\n \n\n    /**\n\n     * Check if external storage is built-in or removable.\n\n     *\n\n     * @return True if external storage is removable (like an SD card), false\n\n     *         otherwise.\n\n     */\n\n    @TargetApi(VERSION_CODES.GINGERBREAD)\n\n    public static boolean isExternalStorageRemovable() {\n\n        if (Utils.hasGingerbread()) {\n\n            return Environment.isExternalStorageRemovable();\n\n        }\n\n        return true;\n\n    }\n\n \n\n    /**\n\n     * Get the external app cache directory.\n\n     *\n\n     * @param context The context to use\n\n     * @return The external cache dir\n\n     */\n\n    @TargetApi(VERSION_CODES.FROYO)\n\n    public static File getExternalCacheDir(Context context) {\n\n        if (Utils.hasFroyo()) {\n\n            return context.getExternalCacheDir();\n\n        }\n\n \n\n        // Before Froyo we need to construct the external cache dir ourselves\n\n        final String cacheDir = \"/Android/data/\" + context.getPackageName() + \"/cache/\";\n\n        return new File(Environment.getExternalStorageDirectory().getPath() + cacheDir);\n\n    }\n\n \n\n    /**\n\n     * Check how much usable space is available at a given path.\n\n     *\n\n     * @param path The path to check\n\n     * @return The space available in bytes\n\n     */\n\n    @TargetApi(VERSION_CODES.GINGERBREAD)\n\n    public static long getUsableSpace(File path) {\n\n        if (Utils.hasGingerbread()) {\n\n            return path.getUsableSpace();\n\n        }\n\n        final StatFs stats = new StatFs(path.getPath());\n\n        return (long) stats.getBlockSize() * (long) stats.getAvailableBlocks();\n\n    }\n\n \n\n    /**\n\n     * Locate an existing instance of this Fragment or if not found, create and\n\n     * add it using FragmentManager.\n\n     *\n\n     * @param fm The FragmentManager manager to use.\n\n     * @return The existing instance of the Fragment or the new instance if just\n\n     *         created.\n\n     */\n\n    private static RetainFragment findOrCreateRetainFragment(FragmentManager fm) {\n\n        // Check to see if we have retained the worker fragment.\n\n        RetainFragment mRetainFragment = (RetainFragment) fm.findFragmentByTag(TAG);\n\n \n\n        // If not retained (or first time running), we need to create and add it.\n\n        if (mRetainFragment == null) {\n\n            mRetainFragment = new RetainFragment();\n\n            fm.beginTransaction().add(mRetainFragment, TAG).commitAllowingStateLoss();\n\n        }\n\n \n\n        return mRetainFragment;\n\n    }\n\n \n\n    /**\n\n     * A simple non-UI Fragment that stores a single Object and is retained over configuration\n\n     * changes. It will be used to retain the ImageCache object.\n\n     */\n\n    public static class RetainFragment extends Fragment {\n\n        private Object mObject;\n\n \n\n        /**\n\n         * Empty constructor as per the Fragment documentation\n\n         */\n\n        public RetainFragment() {}\n\n \n\n        @Override\n\n        public void onCreate(Bundle savedInstanceState) {\n\n            super.onCreate(savedInstanceState);\n\n \n\n            // Make sure this Fragment is retained over a configuration change\n\n            setRetainInstance(true);\n\n        }\n\n \n\n        /**\n\n         * Store a single object in this Fragment.\n\n         *\n\n         * @param object The object to store\n\n         */\n\n        public void setObject(Object object) {\n\n            mObject = object;\n\n        }\n\n \n\n        /**\n\n         * Get the stored object.\n\n         *\n\n         * @return The stored object\n\n         */\n\n        public Object getObject() {\n\n            return mObject;\n\n        }\n\n    }\n\n \n\n}\n  ","ImageFetcher.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.displayingbitmaps.util;\n\n \n\nimport android.content.Context;\n\nimport android.graphics.Bitmap;\n\nimport android.net.ConnectivityManager;\n\nimport android.net.NetworkInfo;\n\nimport android.os.Build;\n\nimport android.widget.Toast;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.displayingbitmaps.BuildConfig;\n\nimport com.example.android.displayingbitmaps.R;\n\n \n\nimport java.io.BufferedInputStream;\n\nimport java.io.BufferedOutputStream;\n\nimport java.io.File;\n\nimport java.io.FileDescriptor;\n\nimport java.io.FileInputStream;\n\nimport java.io.IOException;\n\nimport java.io.OutputStream;\n\nimport java.net.HttpURLConnection;\n\nimport java.net.URL;\n\n \n\n/**\n\n * A simple subclass of {@link ImageResizer} that fetches and resizes images fetched from a URL.\n\n */\n\npublic class ImageFetcher extends ImageResizer {\n\n    private static final String TAG = \"ImageFetcher\";\n\n    private static final int HTTP_CACHE_SIZE = 10 * 1024 * 1024; // 10MB\n\n    private static final String HTTP_CACHE_DIR = \"http\";\n\n    private static final int IO_BUFFER_SIZE = 8 * 1024;\n\n \n\n    private DiskLruCache mHttpDiskCache;\n\n    private File mHttpCacheDir;\n\n    private boolean mHttpDiskCacheStarting = true;\n\n    private final Object mHttpDiskCacheLock = new Object();\n\n    private static final int DISK_CACHE_INDEX = 0;\n\n \n\n    /**\n\n     * Initialize providing a target image width and height for the processing images.\n\n     *\n\n     * @param context\n\n     * @param imageWidth\n\n     * @param imageHeight\n\n     */\n\n    public ImageFetcher(Context context, int imageWidth, int imageHeight) {\n\n        super(context, imageWidth, imageHeight);\n\n        init(context);\n\n    }\n\n \n\n    /**\n\n     * Initialize providing a single target image size (used for both width and height);\n\n     *\n\n     * @param context\n\n     * @param imageSize\n\n     */\n\n    public ImageFetcher(Context context, int imageSize) {\n\n        super(context, imageSize);\n\n        init(context);\n\n    }\n\n \n\n    private void init(Context context) {\n\n        checkConnection(context);\n\n        mHttpCacheDir = ImageCache.getDiskCacheDir(context, HTTP_CACHE_DIR);\n\n    }\n\n \n\n    @Override\n\n    protected void initDiskCacheInternal() {\n\n        super.initDiskCacheInternal();\n\n        initHttpDiskCache();\n\n    }\n\n \n\n    private void initHttpDiskCache() {\n\n        if (!mHttpCacheDir.exists()) {\n\n            mHttpCacheDir.mkdirs();\n\n        }\n\n        synchronized (mHttpDiskCacheLock) {\n\n            if (ImageCache.getUsableSpace(mHttpCacheDir) > HTTP_CACHE_SIZE) {\n\n                try {\n\n                    mHttpDiskCache = DiskLruCache.open(mHttpCacheDir, 1, 1, HTTP_CACHE_SIZE);\n\n                    if (BuildConfig.DEBUG) {\n\n                        Log.d(TAG, \"HTTP cache initialized\");\n\n                    }\n\n                } catch (IOException e) {\n\n                    mHttpDiskCache = null;\n\n                }\n\n            }\n\n            mHttpDiskCacheStarting = false;\n\n            mHttpDiskCacheLock.notifyAll();\n\n        }\n\n    }\n\n \n\n    @Override\n\n    protected void clearCacheInternal() {\n\n        super.clearCacheInternal();\n\n        synchronized (mHttpDiskCacheLock) {\n\n            if (mHttpDiskCache != null && !mHttpDiskCache.isClosed()) {\n\n                try {\n\n                    mHttpDiskCache.delete();\n\n                    if (BuildConfig.DEBUG) {\n\n                        Log.d(TAG, \"HTTP cache cleared\");\n\n                    }\n\n                } catch (IOException e) {\n\n                    Log.e(TAG, \"clearCacheInternal - \" + e);\n\n                }\n\n                mHttpDiskCache = null;\n\n                mHttpDiskCacheStarting = true;\n\n                initHttpDiskCache();\n\n            }\n\n        }\n\n    }\n\n \n\n    @Override\n\n    protected void flushCacheInternal() {\n\n        super.flushCacheInternal();\n\n        synchronized (mHttpDiskCacheLock) {\n\n            if (mHttpDiskCache != null) {\n\n                try {\n\n                    mHttpDiskCache.flush();\n\n                    if (BuildConfig.DEBUG) {\n\n                        Log.d(TAG, \"HTTP cache flushed\");\n\n                    }\n\n                } catch (IOException e) {\n\n                    Log.e(TAG, \"flush - \" + e);\n\n                }\n\n            }\n\n        }\n\n    }\n\n \n\n    @Override\n\n    protected void closeCacheInternal() {\n\n        super.closeCacheInternal();\n\n        synchronized (mHttpDiskCacheLock) {\n\n            if (mHttpDiskCache != null) {\n\n                try {\n\n                    if (!mHttpDiskCache.isClosed()) {\n\n                        mHttpDiskCache.close();\n\n                        mHttpDiskCache = null;\n\n                        if (BuildConfig.DEBUG) {\n\n                            Log.d(TAG, \"HTTP cache closed\");\n\n                        }\n\n                    }\n\n                } catch (IOException e) {\n\n                    Log.e(TAG, \"closeCacheInternal - \" + e);\n\n                }\n\n            }\n\n        }\n\n    }\n\n \n\n    /**\n\n    * Simple network connection check.\n\n    *\n\n    * @param context\n\n    */\n\n    private void checkConnection(Context context) {\n\n        final ConnectivityManager cm =\n\n                (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\n\n        final NetworkInfo networkInfo = cm.getActiveNetworkInfo();\n\n        if (networkInfo == null || !networkInfo.isConnectedOrConnecting()) {\n\n            Toast.makeText(context, R.string.no_network_connection_toast, Toast.LENGTH_LONG).show();\n\n            Log.e(TAG, \"checkConnection - no connection found\");\n\n        }\n\n    }\n\n \n\n    /**\n\n     * The main process method, which will be called by the ImageWorker in the AsyncTask background\n\n     * thread.\n\n     *\n\n     * @param data The data to load the bitmap, in this case, a regular http URL\n\n     * @return The downloaded and resized bitmap\n\n     */\n\n    private Bitmap processBitmap(String data) {\n\n        if (BuildConfig.DEBUG) {\n\n            Log.d(TAG, \"processBitmap - \" + data);\n\n        }\n\n \n\n        final String key = ImageCache.hashKeyForDisk(data);\n\n        FileDescriptor fileDescriptor = null;\n\n        FileInputStream fileInputStream = null;\n\n        DiskLruCache.Snapshot snapshot;\n\n        synchronized (mHttpDiskCacheLock) {\n\n            // Wait for disk cache to initialize\n\n            while (mHttpDiskCacheStarting) {\n\n                try {\n\n                    mHttpDiskCacheLock.wait();\n\n                } catch (InterruptedException e) {}\n\n            }\n\n \n\n            if (mHttpDiskCache != null) {\n\n                try {\n\n                    snapshot = mHttpDiskCache.get(key);\n\n                    if (snapshot == null) {\n\n                        if (BuildConfig.DEBUG) {\n\n                            Log.d(TAG, \"processBitmap, not found in http cache, downloading...\");\n\n                        }\n\n                        DiskLruCache.Editor editor = mHttpDiskCache.edit(key);\n\n                        if (editor != null) {\n\n                            if (downloadUrlToStream(data,\n\n                                    editor.newOutputStream(DISK_CACHE_INDEX))) {\n\n                                editor.commit();\n\n                            } else {\n\n                                editor.abort();\n\n                            }\n\n                        }\n\n                        snapshot = mHttpDiskCache.get(key);\n\n                    }\n\n                    if (snapshot != null) {\n\n                        fileInputStream =\n\n                                (FileInputStream) snapshot.getInputStream(DISK_CACHE_INDEX);\n\n                        fileDescriptor = fileInputStream.getFD();\n\n                    }\n\n                } catch (IOException e) {\n\n                    Log.e(TAG, \"processBitmap - \" + e);\n\n                } catch (IllegalStateException e) {\n\n                    Log.e(TAG, \"processBitmap - \" + e);\n\n                } finally {\n\n                    if (fileDescriptor == null && fileInputStream != null) {\n\n                        try {\n\n                            fileInputStream.close();\n\n                        } catch (IOException e) {}\n\n                    }\n\n                }\n\n            }\n\n        }\n\n \n\n        Bitmap bitmap = null;\n\n        if (fileDescriptor != null) {\n\n            bitmap = decodeSampledBitmapFromDescriptor(fileDescriptor, mImageWidth,\n\n                    mImageHeight, getImageCache());\n\n        }\n\n        if (fileInputStream != null) {\n\n            try {\n\n                fileInputStream.close();\n\n            } catch (IOException e) {}\n\n        }\n\n        return bitmap;\n\n    }\n\n \n\n    @Override\n\n    protected Bitmap processBitmap(Object data) {\n\n        return processBitmap(String.valueOf(data));\n\n    }\n\n \n\n    /**\n\n     * Download a bitmap from a URL and write the content to an output stream.\n\n     *\n\n     * @param urlString The URL to fetch\n\n     * @return true if successful, false otherwise\n\n     */\n\n    public boolean downloadUrlToStream(String urlString, OutputStream outputStream) {\n\n        disableConnectionReuseIfNecessary();\n\n        HttpURLConnection urlConnection = null;\n\n        BufferedOutputStream out = null;\n\n        BufferedInputStream in = null;\n\n \n\n        try {\n\n            final URL url = new URL(urlString);\n\n            urlConnection = (HttpURLConnection) url.openConnection();\n\n            in = new BufferedInputStream(urlConnection.getInputStream(), IO_BUFFER_SIZE);\n\n            out = new BufferedOutputStream(outputStream, IO_BUFFER_SIZE);\n\n \n\n            int b;\n\n            while ((b = in.read()) != -1) {\n\n                out.write(b);\n\n            }\n\n            return true;\n\n        } catch (final IOException e) {\n\n            Log.e(TAG, \"Error in downloadBitmap - \" + e);\n\n        } finally {\n\n            if (urlConnection != null) {\n\n                urlConnection.disconnect();\n\n            }\n\n            try {\n\n                if (out != null) {\n\n                    out.close();\n\n                }\n\n                if (in != null) {\n\n                    in.close();\n\n                }\n\n            } catch (final IOException e) {}\n\n        }\n\n        return false;\n\n    }\n\n \n\n    /**\n\n     * Workaround for bug pre-Froyo, see here for more info:\n\n     * http://android-developers.blogspot.com/2011/09/androids-http-clients.html\n\n     */\n\n    public static void disableConnectionReuseIfNecessary() {\n\n        // HTTP connection reuse which was buggy pre-froyo\n\n        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.FROYO) {\n\n            System.setProperty(\"http.keepAlive\", \"false\");\n\n        }\n\n    }\n\n}\n  ","ImageResizer.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.displayingbitmaps.util;\n\n \n\nimport android.annotation.TargetApi;\n\nimport android.content.Context;\n\nimport android.content.res.Resources;\n\nimport android.graphics.Bitmap;\n\nimport android.graphics.BitmapFactory;\n\nimport android.os.Build;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.displayingbitmaps.BuildConfig;\n\n \n\nimport java.io.FileDescriptor;\n\n \n\n/**\n\n * A simple subclass of {@link ImageWorker} that resizes images from resources given a target width\n\n * and height. Useful for when the input images might be too large to simply load directly into\n\n * memory.\n\n */\n\npublic class ImageResizer extends ImageWorker {\n\n    private static final String TAG = \"ImageResizer\";\n\n    protected int mImageWidth;\n\n    protected int mImageHeight;\n\n \n\n    /**\n\n     * Initialize providing a single target image size (used for both width and height);\n\n     *\n\n     * @param context\n\n     * @param imageWidth\n\n     * @param imageHeight\n\n     */\n\n    public ImageResizer(Context context, int imageWidth, int imageHeight) {\n\n        super(context);\n\n        setImageSize(imageWidth, imageHeight);\n\n    }\n\n \n\n    /**\n\n     * Initialize providing a single target image size (used for both width and height);\n\n     *\n\n     * @param context\n\n     * @param imageSize\n\n     */\n\n    public ImageResizer(Context context, int imageSize) {\n\n        super(context);\n\n        setImageSize(imageSize);\n\n    }\n\n \n\n    /**\n\n     * Set the target image width and height.\n\n     *\n\n     * @param width\n\n     * @param height\n\n     */\n\n    public void setImageSize(int width, int height) {\n\n        mImageWidth = width;\n\n        mImageHeight = height;\n\n    }\n\n \n\n    /**\n\n     * Set the target image size (width and height will be the same).\n\n     *\n\n     * @param size\n\n     */\n\n    public void setImageSize(int size) {\n\n        setImageSize(size, size);\n\n    }\n\n \n\n    /**\n\n     * The main processing method. This happens in a background task. In this case we are just\n\n     * sampling down the bitmap and returning it from a resource.\n\n     *\n\n     * @param resId\n\n     * @return\n\n     */\n\n    private Bitmap processBitmap(int resId) {\n\n        if (BuildConfig.DEBUG) {\n\n            Log.d(TAG, \"processBitmap - \" + resId);\n\n        }\n\n        return decodeSampledBitmapFromResource(mResources, resId, mImageWidth,\n\n                mImageHeight, getImageCache());\n\n    }\n\n \n\n    @Override\n\n    protected Bitmap processBitmap(Object data) {\n\n        return processBitmap(Integer.parseInt(String.valueOf(data)));\n\n    }\n\n \n\n    /**\n\n     * Decode and sample down a bitmap from resources to the requested width and height.\n\n     *\n\n     * @param res The resources object containing the image data\n\n     * @param resId The resource id of the image data\n\n     * @param reqWidth The requested width of the resulting bitmap\n\n     * @param reqHeight The requested height of the resulting bitmap\n\n     * @param cache The ImageCache used to find candidate bitmaps for use with inBitmap\n\n     * @return A bitmap sampled down from the original with the same aspect ratio and dimensions\n\n     *         that are equal to or greater than the requested width and height\n\n     */\n\n    public static Bitmap decodeSampledBitmapFromResource(Resources res, int resId,\n\n            int reqWidth, int reqHeight, ImageCache cache) {\n\n \n\n        // First decode with inJustDecodeBounds=true to check dimensions\n\n        final BitmapFactory.Options options = new BitmapFactory.Options();\n\n        options.inJustDecodeBounds = true;\n\n        BitmapFactory.decodeResource(res, resId, options);\n\n \n\n        // Calculate inSampleSize\n\n        options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);\n\n \n\n        // If we're running on Honeycomb or newer, try to use inBitmap\n\n        if (Utils.hasHoneycomb()) {\n\n            addInBitmapOptions(options, cache);\n\n        }\n\n \n\n        // Decode bitmap with inSampleSize set\n\n        options.inJustDecodeBounds = false;\n\n        return BitmapFactory.decodeResource(res, resId, options);\n\n    }\n\n \n\n    /**\n\n     * Decode and sample down a bitmap from a file to the requested width and height.\n\n     *\n\n     * @param filename The full path of the file to decode\n\n     * @param reqWidth The requested width of the resulting bitmap\n\n     * @param reqHeight The requested height of the resulting bitmap\n\n     * @param cache The ImageCache used to find candidate bitmaps for use with inBitmap\n\n     * @return A bitmap sampled down from the original with the same aspect ratio and dimensions\n\n     *         that are equal to or greater than the requested width and height\n\n     */\n\n    public static Bitmap decodeSampledBitmapFromFile(String filename,\n\n            int reqWidth, int reqHeight, ImageCache cache) {\n\n \n\n        // First decode with inJustDecodeBounds=true to check dimensions\n\n        final BitmapFactory.Options options = new BitmapFactory.Options();\n\n        options.inJustDecodeBounds = true;\n\n        BitmapFactory.decodeFile(filename, options);\n\n \n\n        // Calculate inSampleSize\n\n        options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);\n\n \n\n        // If we're running on Honeycomb or newer, try to use inBitmap\n\n        if (Utils.hasHoneycomb()) {\n\n            addInBitmapOptions(options, cache);\n\n        }\n\n \n\n        // Decode bitmap with inSampleSize set\n\n        options.inJustDecodeBounds = false;\n\n        return BitmapFactory.decodeFile(filename, options);\n\n    }\n\n \n\n    /**\n\n     * Decode and sample down a bitmap from a file input stream to the requested width and height.\n\n     *\n\n     * @param fileDescriptor The file descriptor to read from\n\n     * @param reqWidth The requested width of the resulting bitmap\n\n     * @param reqHeight The requested height of the resulting bitmap\n\n     * @param cache The ImageCache used to find candidate bitmaps for use with inBitmap\n\n     * @return A bitmap sampled down from the original with the same aspect ratio and dimensions\n\n     *         that are equal to or greater than the requested width and height\n\n     */\n\n    public static Bitmap decodeSampledBitmapFromDescriptor(\n\n            FileDescriptor fileDescriptor, int reqWidth, int reqHeight, ImageCache cache) {\n\n \n\n        // First decode with inJustDecodeBounds=true to check dimensions\n\n        final BitmapFactory.Options options = new BitmapFactory.Options();\n\n        options.inJustDecodeBounds = true;\n\n        BitmapFactory.decodeFileDescriptor(fileDescriptor, null, options);\n\n \n\n        // Calculate inSampleSize\n\n        options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);\n\n \n\n        // Decode bitmap with inSampleSize set\n\n        options.inJustDecodeBounds = false;\n\n \n\n        // If we're running on Honeycomb or newer, try to use inBitmap\n\n        if (Utils.hasHoneycomb()) {\n\n            addInBitmapOptions(options, cache);\n\n        }\n\n \n\n        return BitmapFactory.decodeFileDescriptor(fileDescriptor, null, options);\n\n    }\n\n \n\n    @TargetApi(Build.VERSION_CODES.HONEYCOMB)\n\n    private static void addInBitmapOptions(BitmapFactory.Options options, ImageCache cache) {\n\n        // inBitmap only works with mutable bitmaps so force the decoder to\n\n        // return mutable bitmaps.\n\n        options.inMutable = true;\n\n \n\n        if (cache != null) {\n\n            // Try and find a bitmap to use for inBitmap\n\n            Bitmap inBitmap = cache.getBitmapFromReusableSet(options);\n\n \n\n            if (inBitmap != null) {\n\n                options.inBitmap = inBitmap;\n\n            }\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Calculate an inSampleSize for use in a {@link android.graphics.BitmapFactory.Options} object when decoding\n\n     * bitmaps using the decode* methods from {@link android.graphics.BitmapFactory}. This implementation calculates\n\n     * the closest inSampleSize that is a power of 2 and will result in the final decoded bitmap\n\n     * having a width and height equal to or larger than the requested width and height.\n\n     *\n\n     * @param options An options object with out* params already populated (run through a decode*\n\n     *            method with inJustDecodeBounds==true\n\n     * @param reqWidth The requested width of the resulting bitmap\n\n     * @param reqHeight The requested height of the resulting bitmap\n\n     * @return The value to be used for inSampleSize\n\n     */\n\n    public static int calculateInSampleSize(BitmapFactory.Options options,\n\n            int reqWidth, int reqHeight) {\n\n        // Raw height and width of image\n\n        final int height = options.outHeight;\n\n        final int width = options.outWidth;\n\n        int inSampleSize = 1;\n\n \n\n        if (height > reqHeight || width > reqWidth) {\n\n \n\n            final int halfHeight = height / 2;\n\n            final int halfWidth = width / 2;\n\n \n\n            // Calculate the largest inSampleSize value that is a power of 2 and keeps both\n\n            // height and width larger than the requested height and width.\n\n            while ((halfHeight / inSampleSize) > reqHeight\n\n                    && (halfWidth / inSampleSize) > reqWidth) {\n\n                inSampleSize *= 2;\n\n            }\n\n \n\n            // This offers some additional logic in case the image has a strange\n\n            // aspect ratio. For example, a panorama may have a much larger\n\n            // width than height. In these cases the total pixels might still\n\n            // end up being too large to fit comfortably in memory, so we should\n\n            // be more aggressive with sample down the image (=larger inSampleSize).\n\n \n\n            long totalPixels = width * height / inSampleSize;\n\n \n\n            // Anything more than 2x the requested pixels we'll sample down further\n\n            final long totalReqPixelsCap = reqWidth * reqHeight * 2;\n\n \n\n            while (totalPixels > totalReqPixelsCap) {\n\n                inSampleSize *= 2;\n\n                totalPixels /= 2;\n\n            }\n\n        }\n\n        return inSampleSize;\n\n    }\n\n}\n  ","ImageWorker.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.displayingbitmaps.util;\n\n \n\nimport android.content.Context;\n\nimport android.content.res.Resources;\n\nimport android.graphics.Bitmap;\n\nimport android.graphics.BitmapFactory;\n\nimport android.graphics.drawable.BitmapDrawable;\n\nimport android.graphics.drawable.ColorDrawable;\n\nimport android.graphics.drawable.Drawable;\n\nimport android.graphics.drawable.TransitionDrawable;\n\nimport android.support.v4.app.FragmentActivity;\n\nimport android.support.v4.app.FragmentManager;\n\nimport android.widget.ImageView;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.displayingbitmaps.BuildConfig;\n\n \n\nimport java.lang.ref.WeakReference;\n\n \n\n/**\n\n * This class wraps up completing some arbitrary long running work when loading a bitmap to an\n\n * ImageView. It handles things like using a memory and disk cache, running the work in a background\n\n * thread and setting a placeholder image.\n\n */\n\npublic abstract class ImageWorker {\n\n    private static final String TAG = \"ImageWorker\";\n\n    private static final int FADE_IN_TIME = 200;\n\n \n\n    private ImageCache mImageCache;\n\n    private ImageCache.ImageCacheParams mImageCacheParams;\n\n    private Bitmap mLoadingBitmap;\n\n    private boolean mFadeInBitmap = true;\n\n    private boolean mExitTasksEarly = false;\n\n    protected boolean mPauseWork = false;\n\n    private final Object mPauseWorkLock = new Object();\n\n \n\n    protected Resources mResources;\n\n \n\n    private static final int MESSAGE_CLEAR = 0;\n\n    private static final int MESSAGE_INIT_DISK_CACHE = 1;\n\n    private static final int MESSAGE_FLUSH = 2;\n\n    private static final int MESSAGE_CLOSE = 3;\n\n \n\n    protected ImageWorker(Context context) {\n\n        mResources = context.getResources();\n\n    }\n\n \n\n    /**\n\n     * Load an image specified by the data parameter into an ImageView (override\n\n     * {@link ImageWorker#processBitmap(Object)} to define the processing logic). A memory and\n\n     * disk cache will be used if an {@link ImageCache} has been added using\n\n     * {@link ImageWorker#addImageCache(android.support.v4.app.FragmentManager, ImageCache.ImageCacheParams)}. If the\n\n     * image is found in the memory cache, it is set immediately, otherwise an {@link AsyncTask}\n\n     * will be created to asynchronously load the bitmap.\n\n     *\n\n     * @param data The URL of the image to download.\n\n     * @param imageView The ImageView to bind the downloaded image to.\n\n     */\n\n    public void loadImage(Object data, ImageView imageView) {\n\n        if (data == null) {\n\n            return;\n\n        }\n\n \n\n        BitmapDrawable value = null;\n\n \n\n        if (mImageCache != null) {\n\n            value = mImageCache.getBitmapFromMemCache(String.valueOf(data));\n\n        }\n\n \n\n        if (value != null) {\n\n            // Bitmap found in memory cache\n\n            imageView.setImageDrawable(value);\n\n        } else if (cancelPotentialWork(data, imageView)) {\n\n            final BitmapWorkerTask task = new BitmapWorkerTask(data, imageView);\n\n            final AsyncDrawable asyncDrawable =\n\n                    new AsyncDrawable(mResources, mLoadingBitmap, task);\n\n            imageView.setImageDrawable(asyncDrawable);\n\n \n\n            // NOTE: This uses a custom version of AsyncTask that has been pulled from the\n\n            // framework and slightly modified. Refer to the docs at the top of the class\n\n            // for more info on what was changed.\n\n            task.executeOnExecutor(AsyncTask.DUAL_THREAD_EXECUTOR);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Set placeholder bitmap that shows when the the background thread is running.\n\n     *\n\n     * @param bitmap\n\n     */\n\n    public void setLoadingImage(Bitmap bitmap) {\n\n        mLoadingBitmap = bitmap;\n\n    }\n\n \n\n    /**\n\n     * Set placeholder bitmap that shows when the the background thread is running.\n\n     *\n\n     * @param resId\n\n     */\n\n    public void setLoadingImage(int resId) {\n\n        mLoadingBitmap = BitmapFactory.decodeResource(mResources, resId);\n\n    }\n\n \n\n    /**\n\n     * Adds an {@link ImageCache} to this {@link ImageWorker} to handle disk and memory bitmap\n\n     * caching.\n\n     * @param fragmentManager\n\n     * @param cacheParams The cache parameters to use for the image cache.\n\n     */\n\n    public void addImageCache(FragmentManager fragmentManager,\n\n            ImageCache.ImageCacheParams cacheParams) {\n\n        mImageCacheParams = cacheParams;\n\n        mImageCache = ImageCache.getInstance(fragmentManager, mImageCacheParams);\n\n        new CacheAsyncTask().execute(MESSAGE_INIT_DISK_CACHE);\n\n    }\n\n \n\n    /**\n\n     * Adds an {@link ImageCache} to this {@link ImageWorker} to handle disk and memory bitmap\n\n     * caching.\n\n     * @param activity\n\n     * @param diskCacheDirectoryName See\n\n     * {@link ImageCache.ImageCacheParams#ImageCacheParams(android.content.Context, String)}.\n\n     */\n\n    public void addImageCache(FragmentActivity activity, String diskCacheDirectoryName) {\n\n        mImageCacheParams = new ImageCache.ImageCacheParams(activity, diskCacheDirectoryName);\n\n        mImageCache = ImageCache.getInstance(activity.getSupportFragmentManager(), mImageCacheParams);\n\n        new CacheAsyncTask().execute(MESSAGE_INIT_DISK_CACHE);\n\n    }\n\n \n\n    /**\n\n     * If set to true, the image will fade-in once it has been loaded by the background thread.\n\n     */\n\n    public void setImageFadeIn(boolean fadeIn) {\n\n        mFadeInBitmap = fadeIn;\n\n    }\n\n \n\n    public void setExitTasksEarly(boolean exitTasksEarly) {\n\n        mExitTasksEarly = exitTasksEarly;\n\n        setPauseWork(false);\n\n    }\n\n \n\n    /**\n\n     * Subclasses should override this to define any processing or work that must happen to produce\n\n     * the final bitmap. This will be executed in a background thread and be long running. For\n\n     * example, you could resize a large bitmap here, or pull down an image from the network.\n\n     *\n\n     * @param data The data to identify which image to process, as provided by\n\n     *            {@link ImageWorker#loadImage(Object, android.widget.ImageView)}\n\n     * @return The processed bitmap\n\n     */\n\n    protected abstract Bitmap processBitmap(Object data);\n\n \n\n    /**\n\n     * @return The {@link ImageCache} object currently being used by this ImageWorker.\n\n     */\n\n    protected ImageCache getImageCache() {\n\n        return mImageCache;\n\n    }\n\n \n\n    /**\n\n     * Cancels any pending work attached to the provided ImageView.\n\n     * @param imageView\n\n     */\n\n    public static void cancelWork(ImageView imageView) {\n\n        final BitmapWorkerTask bitmapWorkerTask = getBitmapWorkerTask(imageView);\n\n        if (bitmapWorkerTask != null) {\n\n            bitmapWorkerTask.cancel(true);\n\n            if (BuildConfig.DEBUG) {\n\n                final Object bitmapData = bitmapWorkerTask.mData;\n\n                Log.d(TAG, \"cancelWork - cancelled work for \" + bitmapData);\n\n            }\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns true if the current work has been canceled or if there was no work in\n\n     * progress on this image view.\n\n     * Returns false if the work in progress deals with the same data. The work is not\n\n     * stopped in that case.\n\n     */\n\n    public static boolean cancelPotentialWork(Object data, ImageView imageView) {\n\n        final BitmapWorkerTask bitmapWorkerTask = getBitmapWorkerTask(imageView);\n\n \n\n        if (bitmapWorkerTask != null) {\n\n            final Object bitmapData = bitmapWorkerTask.mData;\n\n            if (bitmapData == null || !bitmapData.equals(data)) {\n\n                bitmapWorkerTask.cancel(true);\n\n                if (BuildConfig.DEBUG) {\n\n                    Log.d(TAG, \"cancelPotentialWork - cancelled work for \" + data);\n\n                }\n\n            } else {\n\n                // The same work is already in progress.\n\n                return false;\n\n            }\n\n        }\n\n        return true;\n\n    }\n\n \n\n    /**\n\n     * @param imageView Any imageView\n\n     * @return Retrieve the currently active work task (if any) associated with this imageView.\n\n     * null if there is no such task.\n\n     */\n\n    private static BitmapWorkerTask getBitmapWorkerTask(ImageView imageView) {\n\n        if (imageView != null) {\n\n            final Drawable drawable = imageView.getDrawable();\n\n            if (drawable instanceof AsyncDrawable) {\n\n                final AsyncDrawable asyncDrawable = (AsyncDrawable) drawable;\n\n                return asyncDrawable.getBitmapWorkerTask();\n\n            }\n\n        }\n\n        return null;\n\n    }\n\n \n\n    /**\n\n     * The actual AsyncTask that will asynchronously process the image.\n\n     */\n\n    private class BitmapWorkerTask extends AsyncTask<Void, Void, BitmapDrawable> {\n\n        private Object mData;\n\n        private final WeakReference<ImageView> imageViewReference;\n\n \n\n        public BitmapWorkerTask(Object data, ImageView imageView) {\n\n            mData = data;\n\n            imageViewReference = new WeakReference<ImageView>(imageView);\n\n        }\n\n \n\n        /**\n\n         * Background processing.\n\n         */\n\n        @Override\n\n        protected BitmapDrawable doInBackground(Void... params) {\n\n            if (BuildConfig.DEBUG) {\n\n                Log.d(TAG, \"doInBackground - starting work\");\n\n            }\n\n \n\n            final String dataString = String.valueOf(mData);\n\n            Bitmap bitmap = null;\n\n            BitmapDrawable drawable = null;\n\n \n\n            // Wait here if work is paused and the task is not cancelled\n\n            synchronized (mPauseWorkLock) {\n\n                while (mPauseWork && !isCancelled()) {\n\n                    try {\n\n                        mPauseWorkLock.wait();\n\n                    } catch (InterruptedException e) {}\n\n                }\n\n            }\n\n \n\n            // If the image cache is available and this task has not been cancelled by another\n\n            // thread and the ImageView that was originally bound to this task is still bound back\n\n            // to this task and our \"exit early\" flag is not set then try and fetch the bitmap from\n\n            // the cache\n\n            if (mImageCache != null && !isCancelled() && getAttachedImageView() != null\n\n                    && !mExitTasksEarly) {\n\n                bitmap = mImageCache.getBitmapFromDiskCache(dataString);\n\n            }\n\n \n\n            // If the bitmap was not found in the cache and this task has not been cancelled by\n\n            // another thread and the ImageView that was originally bound to this task is still\n\n            // bound back to this task and our \"exit early\" flag is not set, then call the main\n\n            // process method (as implemented by a subclass)\n\n            if (bitmap == null && !isCancelled() && getAttachedImageView() != null\n\n                    && !mExitTasksEarly) {\n\n                bitmap = processBitmap(mData);\n\n            }\n\n \n\n            // If the bitmap was processed and the image cache is available, then add the processed\n\n            // bitmap to the cache for future use. Note we don't check if the task was cancelled\n\n            // here, if it was, and the thread is still running, we may as well add the processed\n\n            // bitmap to our cache as it might be used again in the future\n\n            if (bitmap != null) {\n\n                if (Utils.hasHoneycomb()) {\n\n                    // Running on Honeycomb or newer, so wrap in a standard BitmapDrawable\n\n                    drawable = new BitmapDrawable(mResources, bitmap);\n\n                } else {\n\n                    // Running on Gingerbread or older, so wrap in a RecyclingBitmapDrawable\n\n                    // which will recycle automagically\n\n                    drawable = new RecyclingBitmapDrawable(mResources, bitmap);\n\n                }\n\n \n\n                if (mImageCache != null) {\n\n                    mImageCache.addBitmapToCache(dataString, drawable);\n\n                }\n\n            }\n\n \n\n            if (BuildConfig.DEBUG) {\n\n                Log.d(TAG, \"doInBackground - finished work\");\n\n            }\n\n \n\n            return drawable;\n\n        }\n\n \n\n        /**\n\n         * Once the image is processed, associates it to the imageView\n\n         */\n\n        @Override\n\n        protected void onPostExecute(BitmapDrawable value) {\n\n            // if cancel was called on this task or the \"exit early\" flag is set then we're done\n\n            if (isCancelled() || mExitTasksEarly) {\n\n                value = null;\n\n            }\n\n \n\n            final ImageView imageView = getAttachedImageView();\n\n            if (value != null && imageView != null) {\n\n                if (BuildConfig.DEBUG) {\n\n                    Log.d(TAG, \"onPostExecute - setting bitmap\");\n\n                }\n\n                setImageDrawable(imageView, value);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        protected void onCancelled(BitmapDrawable value) {\n\n            super.onCancelled(value);\n\n            synchronized (mPauseWorkLock) {\n\n                mPauseWorkLock.notifyAll();\n\n            }\n\n        }\n\n \n\n        /**\n\n         * Returns the ImageView associated with this task as long as the ImageView's task still\n\n         * points to this task as well. Returns null otherwise.\n\n         */\n\n        private ImageView getAttachedImageView() {\n\n            final ImageView imageView = imageViewReference.get();\n\n            final BitmapWorkerTask bitmapWorkerTask = getBitmapWorkerTask(imageView);\n\n \n\n            if (this == bitmapWorkerTask) {\n\n                return imageView;\n\n            }\n\n \n\n            return null;\n\n        }\n\n    }\n\n \n\n    /**\n\n     * A custom Drawable that will be attached to the imageView while the work is in progress.\n\n     * Contains a reference to the actual worker task, so that it can be stopped if a new binding is\n\n     * required, and makes sure that only the last started worker process can bind its result,\n\n     * independently of the finish order.\n\n     */\n\n    private static class AsyncDrawable extends BitmapDrawable {\n\n        private final WeakReference<BitmapWorkerTask> bitmapWorkerTaskReference;\n\n \n\n        public AsyncDrawable(Resources res, Bitmap bitmap, BitmapWorkerTask bitmapWorkerTask) {\n\n            super(res, bitmap);\n\n            bitmapWorkerTaskReference =\n\n                new WeakReference<BitmapWorkerTask>(bitmapWorkerTask);\n\n        }\n\n \n\n        public BitmapWorkerTask getBitmapWorkerTask() {\n\n            return bitmapWorkerTaskReference.get();\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Called when the processing is complete and the final drawable should be \n\n     * set on the ImageView.\n\n     *\n\n     * @param imageView\n\n     * @param drawable\n\n     */\n\n    private void setImageDrawable(ImageView imageView, Drawable drawable) {\n\n        if (mFadeInBitmap) {\n\n            // Transition drawable with a transparent drawable and the final drawable\n\n            final TransitionDrawable td =\n\n                    new TransitionDrawable(new Drawable[] {\n\n                            new ColorDrawable(android.R.color.transparent),\n\n                            drawable\n\n                    });\n\n            // Set background to loading bitmap\n\n            imageView.setBackgroundDrawable(\n\n                    new BitmapDrawable(mResources, mLoadingBitmap));\n\n \n\n            imageView.setImageDrawable(td);\n\n            td.startTransition(FADE_IN_TIME);\n\n        } else {\n\n            imageView.setImageDrawable(drawable);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Pause any ongoing background work. This can be used as a temporary\n\n     * measure to improve performance. For example background work could\n\n     * be paused when a ListView or GridView is being scrolled using a\n\n     * {@link android.widget.AbsListView.OnScrollListener} to keep\n\n     * scrolling smooth.\n\n     * <p>\n\n     * If work is paused, be sure setPauseWork(false) is called again\n\n     * before your fragment or activity is destroyed (for example during\n\n     * {@link android.app.Activity#onPause()}), or there is a risk the\n\n     * background thread will never finish.\n\n     */\n\n    public void setPauseWork(boolean pauseWork) {\n\n        synchronized (mPauseWorkLock) {\n\n            mPauseWork = pauseWork;\n\n            if (!mPauseWork) {\n\n                mPauseWorkLock.notifyAll();\n\n            }\n\n        }\n\n    }\n\n \n\n    protected class CacheAsyncTask extends AsyncTask<Object, Void, Void> {\n\n \n\n        @Override\n\n        protected Void doInBackground(Object... params) {\n\n            switch ((Integer)params[0]) {\n\n                case MESSAGE_CLEAR:\n\n                    clearCacheInternal();\n\n                    break;\n\n                case MESSAGE_INIT_DISK_CACHE:\n\n                    initDiskCacheInternal();\n\n                    break;\n\n                case MESSAGE_FLUSH:\n\n                    flushCacheInternal();\n\n                    break;\n\n                case MESSAGE_CLOSE:\n\n                    closeCacheInternal();\n\n                    break;\n\n            }\n\n            return null;\n\n        }\n\n    }\n\n \n\n    protected void initDiskCacheInternal() {\n\n        if (mImageCache != null) {\n\n            mImageCache.initDiskCache();\n\n        }\n\n    }\n\n \n\n    protected void clearCacheInternal() {\n\n        if (mImageCache != null) {\n\n            mImageCache.clearCache();\n\n        }\n\n    }\n\n \n\n    protected void flushCacheInternal() {\n\n        if (mImageCache != null) {\n\n            mImageCache.flush();\n\n        }\n\n    }\n\n \n\n    protected void closeCacheInternal() {\n\n        if (mImageCache != null) {\n\n            mImageCache.close();\n\n            mImageCache = null;\n\n        }\n\n    }\n\n \n\n    public void clearCache() {\n\n        new CacheAsyncTask().execute(MESSAGE_CLEAR);\n\n    }\n\n \n\n    public void flushCache() {\n\n        new CacheAsyncTask().execute(MESSAGE_FLUSH);\n\n    }\n\n \n\n    public void closeCache() {\n\n        new CacheAsyncTask().execute(MESSAGE_CLOSE);\n\n    }\n\n}\n  ","RecyclingBitmapDrawable.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.displayingbitmaps.util;\n\n \n\nimport android.content.res.Resources;\n\nimport android.graphics.Bitmap;\n\nimport android.graphics.drawable.BitmapDrawable;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.displayingbitmaps.BuildConfig;\n\n \n\n/**\n\n * A BitmapDrawable that keeps track of whether it is being displayed or cached.\n\n * When the drawable is no longer being displayed or cached,\n\n * {@link android.graphics.Bitmap#recycle() recycle()} will be called on this drawable's bitmap.\n\n */\n\npublic class RecyclingBitmapDrawable extends BitmapDrawable {\n\n \n\n    static final String TAG = \"CountingBitmapDrawable\";\n\n \n\n    private int mCacheRefCount = 0;\n\n    private int mDisplayRefCount = 0;\n\n \n\n    private boolean mHasBeenDisplayed;\n\n \n\n    public RecyclingBitmapDrawable(Resources res, Bitmap bitmap) {\n\n        super(res, bitmap);\n\n    }\n\n \n\n    /**\n\n     * Notify the drawable that the displayed state has changed. Internally a\n\n     * count is kept so that the drawable knows when it is no longer being\n\n     * displayed.\n\n     *\n\n     * @param isDisplayed - Whether the drawable is being displayed or not\n\n     */\n\n    public void setIsDisplayed(boolean isDisplayed) {\n\n        synchronized (this) {\n\n            if (isDisplayed) {\n\n                mDisplayRefCount++;\n\n                mHasBeenDisplayed = true;\n\n            } else {\n\n                mDisplayRefCount--;\n\n            }\n\n        }\n\n \n\n        // Check to see if recycle() can be called\n\n        checkState();\n\n    }\n\n \n\n    /**\n\n     * Notify the drawable that the cache state has changed. Internally a count\n\n     * is kept so that the drawable knows when it is no longer being cached.\n\n     *\n\n     * @param isCached - Whether the drawable is being cached or not\n\n     */\n\n    public void setIsCached(boolean isCached) {\n\n        synchronized (this) {\n\n            if (isCached) {\n\n                mCacheRefCount++;\n\n            } else {\n\n                mCacheRefCount--;\n\n            }\n\n        }\n\n \n\n        // Check to see if recycle() can be called\n\n        checkState();\n\n    }\n\n \n\n    private synchronized void checkState() {\n\n        // If the drawable cache and display ref counts = 0, and this drawable\n\n        // has been displayed, then recycle\n\n        if (mCacheRefCount <= 0 && mDisplayRefCount <= 0 && mHasBeenDisplayed\n\n                && hasValidBitmap()) {\n\n            if (BuildConfig.DEBUG) {\n\n                Log.d(TAG, \"No longer being used or cached so recycling. \"\n\n                        + toString());\n\n            }\n\n \n\n            getBitmap().recycle();\n\n        }\n\n    }\n\n \n\n    private synchronized boolean hasValidBitmap() {\n\n        Bitmap bitmap = getBitmap();\n\n        return bitmap != null && !bitmap.isRecycled();\n\n    }\n\n \n\n}\n  ","Utils.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.displayingbitmaps.util;\n\n \n\nimport android.annotation.TargetApi;\n\nimport android.os.Build;\n\nimport android.os.Build.VERSION_CODES;\n\nimport android.os.StrictMode;\n\n \n\nimport com.example.android.displayingbitmaps.ui.ImageDetailActivity;\n\nimport com.example.android.displayingbitmaps.ui.ImageGridActivity;\n\n \n\n/**\n\n * Class containing some static utility methods.\n\n */\n\npublic class Utils {\n\n    private Utils() {};\n\n \n\n \n\n    @TargetApi(VERSION_CODES.HONEYCOMB)\n\n    public static void enableStrictMode() {\n\n        if (Utils.hasGingerbread()) {\n\n            StrictMode.ThreadPolicy.Builder threadPolicyBuilder =\n\n                    new StrictMode.ThreadPolicy.Builder()\n\n                            .detectAll()\n\n                            .penaltyLog();\n\n            StrictMode.VmPolicy.Builder vmPolicyBuilder =\n\n                    new StrictMode.VmPolicy.Builder()\n\n                            .detectAll()\n\n                            .penaltyLog();\n\n \n\n            if (Utils.hasHoneycomb()) {\n\n                threadPolicyBuilder.penaltyFlashScreen();\n\n                vmPolicyBuilder\n\n                        .setClassInstanceLimit(ImageGridActivity.class, 1)\n\n                        .setClassInstanceLimit(ImageDetailActivity.class, 1);\n\n            }\n\n            StrictMode.setThreadPolicy(threadPolicyBuilder.build());\n\n            StrictMode.setVmPolicy(vmPolicyBuilder.build());\n\n        }\n\n    }\n\n \n\n    public static boolean hasFroyo() {\n\n        // Can use static final constants like FROYO, declared in later versions\n\n        // of the OS since they are inlined at compile time. This is guaranteed behavior.\n\n        return Build.VERSION.SDK_INT >= VERSION_CODES.FROYO;\n\n    }\n\n \n\n    public static boolean hasGingerbread() {\n\n        return Build.VERSION.SDK_INT >= VERSION_CODES.GINGERBREAD;\n\n    }\n\n \n\n    public static boolean hasHoneycomb() {\n\n        return Build.VERSION.SDK_INT >= VERSION_CODES.HONEYCOMB;\n\n    }\n\n \n\n    public static boolean hasHoneycombMR1() {\n\n        return Build.VERSION.SDK_INT >= VERSION_CODES.HONEYCOMB_MR1;\n\n    }\n\n \n\n    public static boolean hasJellyBean() {\n\n        return Build.VERSION.SDK_INT >= VERSION_CODES.JELLY_BEAN;\n\n    }\n\n \n\n    public static boolean hasKitKat() {\n\n        return Build.VERSION.SDK_INT >= VERSION_CODES.KITKAT;\n\n    }\n\n}\n  "}}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.displayingbitmaps\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk android:minSdkVersion=\"7\" android:targetSdkVersion=\"19\" />\n\n \n\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n\n \n\n    <application android:allowBackup=\"true\"\n\n        android:label=\"@string/app_name\"\n\n        android:description=\"@string/intro_message\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:theme=\"@style/AppThemeDark\">\n\n \n\n        <activity android:name=\".ui.ImageGridActivity\"\n\n                  android:label=\"@string/app_name\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n \n\n        <activity\n\n            android:name=\".ui.ImageDetailActivity\"\n\n            android:label=\"@string/app_name\"\n\n            android:parentActivityName=\".ui.ImageGridActivity\"\n\n            android:theme=\"@style/AppThemeDark.FullScreen\" >\n\n            <meta-data android:name=\"android.support.PARENT_ACTIVITY\"\n\n                android:value=\".ui.ImageGridActivity\" />\n\n        </activity>\n\n \n\n    </application>\n\n \n\n</manifest>\n  "},"DoneBar":{"res":{"drawable-hdpi":{"ic_action_cancel.png":"http://developer.android.com//samples/DoneBar/res/drawable-hdpi/ic_action_cancel.png","ic_action_done.png":"http://developer.android.com//samples/DoneBar/res/drawable-hdpi/ic_action_done.png","ic_launcher.png":"http://developer.android.com//samples/DoneBar/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com//samples/DoneBar/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_action_cancel.png":"http://developer.android.com//samples/DoneBar/res/drawable-mdpi/ic_action_cancel.png","ic_action_done.png":"http://developer.android.com//samples/DoneBar/res/drawable-mdpi/ic_action_done.png","ic_launcher.png":"http://developer.android.com//samples/DoneBar/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_action_cancel.png":"http://developer.android.com//samples/DoneBar/res/drawable-xhdpi/ic_action_cancel.png","ic_action_done.png":"http://developer.android.com//samples/DoneBar/res/drawable-xhdpi/ic_action_done.png","ic_launcher.png":"http://developer.android.com//samples/DoneBar/res/drawable-xhdpi/ic_launcher.png","sample_dashboard_item_background.9.png":"http://developer.android.com//samples/DoneBar/res/drawable-xhdpi/sample_dashboard_item_background.9.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com//samples/DoneBar/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"actionbar_custom_view_done.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"horizontal\"\n\n    android:divider=\"?android:attr/dividerVertical\"\n\n    android:showDividers=\"end\"\n\n    android:dividerPadding=\"12dp\">\n\n \n\n    <include layout=\"@layout/include_done_button\" />\n\n</LinearLayout>\n  ","actionbar_custom_view_done_cancel.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"horizontal\"\n\n    android:divider=\"?android:attr/dividerVertical\"\n\n    android:showDividers=\"middle\"\n\n    android:dividerPadding=\"12dp\">\n\n \n\n    <include layout=\"@layout/include_cancel_button\" />\n\n    <include layout=\"@layout/include_done_button\" />\n\n</LinearLayout>\n  ","activity_done_bar.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<ScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleContentContainer\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:text=\"@string/donebaractivity_description\" />\n\n \n\n    </LinearLayout>\n\n</ScrollView>\n  ","activity_done_button.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<ScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleContentContainer\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:text=\"@string/donebuttonactivity_description\" />\n\n \n\n    </LinearLayout>\n\n</ScrollView>\n  ","activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <TextView style=\"@style/Widget.SampleMessage\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n        android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n        android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n        android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n        android:text=\"@string/intro_message\" />\n\n \n\n    <GridView android:id=\"@android:id/list\"\n\n        style=\"@style/Widget.SampleDashboard.Grid\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"0dp\"\n\n        android:layout_weight=\"1\"\n\n        android:paddingLeft=\"@dimen/horizontal_page_margin\"\n\n        android:paddingRight=\"@dimen/horizontal_page_margin\"\n\n        android:paddingBottom=\"@dimen/vertical_page_margin\"\n\n        android:scrollbarStyle=\"outsideOverlay\" />\n\n \n\n</LinearLayout>\n  ","activity_sample_dashboard.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <TextView style=\"@style/Widget.SampleMessage\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n        android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n        android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n        android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n        android:text=\"@string/intro_message\" />\n\n \n\n    <GridView android:id=\"@android:id/list\"\n\n        style=\"@style/Widget.SampleDashboard.Grid\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"0dp\"\n\n        android:layout_weight=\"1\"\n\n        android:paddingLeft=\"@dimen/horizontal_page_margin\"\n\n        android:paddingRight=\"@dimen/horizontal_page_margin\"\n\n        android:paddingBottom=\"@dimen/vertical_page_margin\"\n\n        android:scrollbarStyle=\"outsideOverlay\" />\n\n \n\n</LinearLayout>\n  ","include_cancel_button.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    style=\"?android:actionButtonStyle\"\n\n    android:id=\"@+id/actionbar_cancel\"\n\n    android:layout_width=\"0dp\"\n\n    android:layout_height=\"match_parent\"\n\n    android:layout_weight=\"1\">\n\n \n\n    <TextView style=\"?android:actionBarTabTextStyle\"\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:layout_gravity=\"center\"\n\n        android:paddingRight=\"20dp\"\n\n        android:drawableLeft=\"@drawable/ic_action_cancel\"\n\n        android:drawablePadding=\"8dp\"\n\n        android:gravity=\"center_vertical\"\n\n        android:text=\"@string/cancel\" />\n\n</FrameLayout>\n  ","include_done_button.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    style=\"?android:actionButtonStyle\"\n\n    android:id=\"@+id/actionbar_done\"\n\n    android:layout_width=\"0dp\"\n\n    android:layout_height=\"match_parent\"\n\n    android:layout_weight=\"1\">\n\n \n\n    <TextView style=\"?android:actionBarTabTextStyle\"\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:layout_gravity=\"center\"\n\n        android:paddingRight=\"20dp\"\n\n        android:drawableLeft=\"@drawable/ic_action_done\"\n\n        android:drawablePadding=\"8dp\"\n\n        android:gravity=\"center_vertical\"\n\n        android:text=\"@string/done\" />\n\n</FrameLayout>\n  ","sample_dashboard_item.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    style=\"@style/Widget.SampleDashboard.Item\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <TextView android:id=\"@android:id/text1\"\n\n        style=\"@style/Widget.SampleDashboard.Item.Title\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\" />\n\n \n\n    <TextView android:id=\"@android:id/text2\"\n\n        style=\"@style/Widget.SampleDashboard.Item.Description\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\" />\n\n</LinearLayout>\n  "},"menu":{"cancel.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:id=\"@+id/cancel\"\n\n        android:title=\"@string/cancel\"\n\n        android:icon=\"@drawable/ic_action_cancel\"\n\n        android:showAsAction=\"never\" />\n\n</menu>\n  "},"values":{"activitycards-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"donebaractivity_title\">Done Bar</string>\n\n    <string name=\"donebaractivity_description\">In this presentation, a done bar replaces the action bar entirely, providing\n\n            two direct actions to persist or dismiss changes. This is suitable for cases where no\n\n            additional view details or actions are needed in the action bar.</string>\n\n    <string name=\"donebuttonactivity_title\">Done Button</string>\n\n    <string name=\"donebuttonactivity_description\">In this presentation, a done button replaces the action bar\\'s \"Up\" affordance\n\n            and app icon, while the cancel action is made available in the action overflow. This is\n\n            well-suited to scenarios where additional view details or\n\n            actions may be needed in the action bar.</string>\n\n</resources>\n  ","base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">DoneBar</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n                This sample demonstrates two alternative presentations of the\n\n                action bar that are well-suited for simple data entry scenarios.\n\n \n\n                In this presentation, a done bar replaces the action\n\n                bar entirely, providing two direct actions to persist or dismiss changes. This is\n\n                suitable for cases where no additional view details or actions are needed in the\n\n                action bar.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","strings.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n    <!-- Done bar strings -->\n\n    <string name=\"done\">Done</string>\n\n    <string name=\"cancel\">Cancel</string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleContentContainer\">\n\n        <item name=\"android:paddingTop\">@dimen/vertical_page_margin</item>\n\n        <item name=\"android:paddingBottom\">@dimen/vertical_page_margin</item>\n\n        <item name=\"android:paddingLeft\">@dimen/horizontal_page_margin</item>\n\n        <item name=\"android:paddingRight\">@dimen/horizontal_page_margin</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleDashboard.Grid\" parent=\"Widget\">\n\n        <item name=\"android:stretchMode\">columnWidth</item>\n\n        <item name=\"android:columnWidth\">200dp</item>\n\n        <item name=\"android:numColumns\">auto_fit</item>\n\n        <item name=\"android:drawSelectorOnTop\">true</item>\n\n        <item name=\"android:horizontalSpacing\">@dimen/margin_medium</item>\n\n        <item name=\"android:verticalSpacing\">@dimen/margin_medium</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleDashboard.Item\" parent=\"Widget\">\n\n        <item name=\"android:background\">@drawable/sample_dashboard_item_background</item>\n\n        <item name=\"android:paddingTop\">@dimen/margin_small</item>\n\n        <item name=\"android:paddingLeft\">@dimen/margin_medium</item>\n\n        <item name=\"android:paddingRight\">@dimen/margin_medium</item>\n\n        <item name=\"android:paddingBottom\">@dimen/margin_medium</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleDashboard.Item.Title\" parent=\"Widget\">\n\n        <item name=\"android:layout_marginBottom\">@dimen/margin_tiny</item>\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:textColor\">#09c</item>\n\n        <item name=\"android:textStyle\">bold</item>\n\n        <item name=\"android:textSize\">24sp</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleDashboard.Item.Description\" parent=\"Widget\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceSmall</item>\n\n        <item name=\"android:fontFamily\">sans-serif-light</item>\n\n    </style>\n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.donebar":{"DoneBarActivity.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.donebar;\n\n \n\nimport android.app.ActionBar;\n\nimport android.app.Activity;\n\nimport android.os.Bundle;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\n \n\n/**\n\n * A sample activity demonstrating the \"done bar\" alternative action bar presentation. For a more\n\n * detailed description see {@link R.string.done_bar_description}.\n\n */\n\npublic class DoneBarActivity extends Activity {\n\n    public void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n \n\n        // Inflate a \"Done/Cancel\" custom action bar view.\n\n        final LayoutInflater inflater = (LayoutInflater) getActionBar().getThemedContext()\n\n                .getSystemService(LAYOUT_INFLATER_SERVICE);\n\n        final View customActionBarView = inflater.inflate(\n\n                R.layout.actionbar_custom_view_done_cancel, null);\n\n        customActionBarView.findViewById(R.id.actionbar_done).setOnClickListener(\n\n                new View.OnClickListener() {\n\n                    @Override\n\n                    public void onClick(View v) {\n\n                        // \"Done\"\n\n                        finish();\n\n                    }\n\n                });\n\n        customActionBarView.findViewById(R.id.actionbar_cancel).setOnClickListener(\n\n                new View.OnClickListener() {\n\n                    @Override\n\n                    public void onClick(View v) {\n\n                        // \"Cancel\"\n\n                        finish();\n\n                    }\n\n                });\n\n \n\n        // Show the custom action bar view and hide the normal Home icon and title.\n\n        final ActionBar actionBar = getActionBar();\n\n        actionBar.setDisplayOptions(\n\n                ActionBar.DISPLAY_SHOW_CUSTOM,\n\n                ActionBar.DISPLAY_SHOW_CUSTOM | ActionBar.DISPLAY_SHOW_HOME\n\n                        | ActionBar.DISPLAY_SHOW_TITLE);\n\n        actionBar.setCustomView(customActionBarView,\n\n                new ActionBar.LayoutParams(\n\n                        ViewGroup.LayoutParams.MATCH_PARENT,\n\n                        ViewGroup.LayoutParams.MATCH_PARENT));\n\n \n\n        setContentView(R.layout.activity_done_bar);\n\n    }\n\n}\n  ","DoneButtonActivity.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.donebar;\n\n \n\nimport android.app.ActionBar;\n\nimport android.app.Activity;\n\nimport android.os.Bundle;\n\nimport android.view.LayoutInflater;\n\nimport android.view.Menu;\n\nimport android.view.MenuItem;\n\nimport android.view.View;\n\n \n\n/**\n\n * A sample activity demonstrating the \"done button\" alternative action bar presentation. For a more\n\n * detailed description see {@link R.string.done_button_description}.\n\n */\n\npublic class DoneButtonActivity extends Activity {\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n \n\n        // Inflate a \"Done\" custom action bar view to serve as the \"Up\" affordance.\n\n        final LayoutInflater inflater = (LayoutInflater) getActionBar().getThemedContext()\n\n                .getSystemService(LAYOUT_INFLATER_SERVICE);\n\n        final View customActionBarView = inflater.inflate(\n\n                R.layout.actionbar_custom_view_done, null);\n\n        customActionBarView.findViewById(R.id.actionbar_done).setOnClickListener(\n\n                new View.OnClickListener() {\n\n                    @Override\n\n                    public void onClick(View v) {\n\n                        // \"Done\"\n\n                        finish();\n\n                    }\n\n                });\n\n \n\n        // Show the custom action bar view and hide the normal Home icon and title.\n\n        final ActionBar actionBar = getActionBar();\n\n        actionBar.setDisplayOptions(\n\n                ActionBar.DISPLAY_SHOW_CUSTOM,\n\n                ActionBar.DISPLAY_SHOW_CUSTOM | ActionBar.DISPLAY_SHOW_HOME\n\n                        | ActionBar.DISPLAY_SHOW_TITLE);\n\n        actionBar.setCustomView(customActionBarView);\n\n \n\n        setContentView(R.layout.activity_done_button);\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        super.onCreateOptionsMenu(menu);\n\n        getMenuInflater().inflate(R.menu.cancel, menu);\n\n        return true;\n\n    }\n\n \n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch (item.getItemId()) {\n\n            case R.id.cancel:\n\n                // \"Cancel\"\n\n                finish();\n\n                return true;\n\n        }\n\n        return super.onOptionsItemSelected(item);\n\n    }\n\n}\n  ","MainActivity.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.donebar;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Intent;\n\nimport android.content.res.Resources;\n\nimport android.os.Bundle;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.view.ViewTreeObserver;\n\nimport android.widget.AdapterView;\n\nimport android.widget.BaseAdapter;\n\nimport android.widget.GridView;\n\nimport android.widget.TextView;\n\n \n\n/**\n\n * A simple launcher activity offering access to the individual samples in this project.\n\n */\n\npublic class MainActivity extends Activity implements AdapterView.OnItemClickListener {\n\n    private Sample[] mSamples;\n\n    private GridView mGridView;\n\n \n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_main);\n\n \n\n        // Prepare list of samples in this dashboard.\n\n        mSamples = new Sample[]{\n\n            new Sample(R.string.donebaractivity_title, R.string.donebaractivity_description,\n\n                    DoneBarActivity.class),\n\n            new Sample(R.string.donebuttonactivity_title, R.string.donebuttonactivity_description,\n\n                    DoneButtonActivity.class),\n\n        };\n\n \n\n        // Prepare the GridView\n\n        mGridView = (GridView) findViewById(android.R.id.list);\n\n        mGridView.setAdapter(new SampleAdapter());\n\n        mGridView.setOnItemClickListener(this);\n\n    }\n\n \n\n    @Override\n\n    public void onItemClick(AdapterView<?> container, View view, int position, long id) {\n\n        startActivity(mSamples[position].intent);\n\n    }\n\n \n\n    private class SampleAdapter extends BaseAdapter {\n\n        @Override\n\n        public int getCount() {\n\n            return mSamples.length;\n\n        }\n\n \n\n        @Override\n\n        public Object getItem(int position) {\n\n            return mSamples[position];\n\n        }\n\n \n\n        @Override\n\n        public long getItemId(int position) {\n\n            return mSamples[position].hashCode();\n\n        }\n\n \n\n        @Override\n\n        public View getView(int position, View convertView, ViewGroup container) {\n\n            if (convertView == null) {\n\n                convertView = getLayoutInflater().inflate(R.layout.sample_dashboard_item,\n\n                        container, false);\n\n            }\n\n \n\n            ((TextView) convertView.findViewById(android.R.id.text1)).setText(\n\n                    mSamples[position].titleResId);\n\n            ((TextView) convertView.findViewById(android.R.id.text2)).setText(\n\n                    mSamples[position].descriptionResId);\n\n            return convertView;\n\n        }\n\n    }\n\n \n\n    private class Sample {\n\n        int titleResId;\n\n        int descriptionResId;\n\n        Intent intent;\n\n \n\n        private Sample(int titleResId, int descriptionResId, Intent intent) {\n\n            this.intent = intent;\n\n            this.titleResId = titleResId;\n\n            this.descriptionResId = descriptionResId;\n\n        }\n\n \n\n        private Sample(int titleResId, int descriptionResId,\n\n                Class<? extends Activity> activityClass) {\n\n            this(titleResId, descriptionResId,\n\n                    new Intent(MainActivity.this, activityClass));\n\n        }\n\n    }\n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.donebar\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk android:minSdkVersion=\"14\" android:targetSdkVersion=\"17\" />\n\n \n\n    <application android:label=\"@string/app_name\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:theme=\"@style/Theme.Sample\"\n\n        android:allowBackup=\"true\">\n\n \n\n        <activity android:name=\".MainActivity\"\n\n            android:label=\"@string/app_name\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n \n\n        <activity android:name=\".DoneBarActivity\"\n\n            android:parentActivityName=\".MainActivity\" />\n\n \n\n        <activity android:name=\".DoneButtonActivity\"\n\n            android:parentActivityName=\".MainActivity\" />\n\n \n\n    </application>\n\n \n\n</manifest>\n  "},"FragmentTransition":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com//samples/FragmentTransition/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com//samples/FragmentTransition/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com//samples/FragmentTransition/res/drawable-mdpi/ic_launcher.png"},"drawable-nodpi":{"p1.jpg":"http://developer.android.com//samples/FragmentTransition/res/drawable-nodpi/p1.jpg","p10.jpg":"http://developer.android.com//samples/FragmentTransition/res/drawable-nodpi/p10.jpg","p11.jpg":"http://developer.android.com//samples/FragmentTransition/res/drawable-nodpi/p11.jpg","p2.jpg":"http://developer.android.com//samples/FragmentTransition/res/drawable-nodpi/p2.jpg","p3.jpg":"http://developer.android.com//samples/FragmentTransition/res/drawable-nodpi/p3.jpg","p4.jpg":"http://developer.android.com//samples/FragmentTransition/res/drawable-nodpi/p4.jpg","p5.jpg":"http://developer.android.com//samples/FragmentTransition/res/drawable-nodpi/p5.jpg","p6.jpg":"http://developer.android.com//samples/FragmentTransition/res/drawable-nodpi/p6.jpg","p7.jpg":"http://developer.android.com//samples/FragmentTransition/res/drawable-nodpi/p7.jpg","p8.jpg":"http://developer.android.com//samples/FragmentTransition/res/drawable-nodpi/p8.jpg","p9.jpg":"http://developer.android.com//samples/FragmentTransition/res/drawable-nodpi/p9.jpg"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com//samples/FragmentTransition/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com//samples/FragmentTransition/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"vertical\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <ViewAnimator\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\"\n\n          android:layout_weight=\"1\">\n\n \n\n        <ScrollView\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingRight=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingTop=\"@dimen/vertical_page_margin\"\n\n                  android:paddingBottom=\"@dimen/vertical_page_margin\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </ScrollView>\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\" />\n\n \n\n    </ViewAnimator>\n\n \n\n    <View\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"1dp\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\" />\n\n \n\n</LinearLayout>\n\n \n  ","fragment_detail.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2014 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<FrameLayout\n\n    android:id=\"@+id/container\"\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"wrap_content\"\n\n    android:layout_height=\"match_parent\"/>\n  ","fragment_detail_content.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\nCopyright 2014 The Android Open Source Project\n\n \n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n \n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n \n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n-->\n\n<ScrollView\n\n    android:id=\"@+id/frame\"\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:tools=\"http://schemas.android.com/tools\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:scrollbars=\"none\">\n\n \n\n    <RelativeLayout\n\n        android:id=\"@+id/container\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\">\n\n \n\n        <ImageView\n\n            android:id=\"@+id/image\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"180dp\"\n\n            android:scaleType=\"centerCrop\"\n\n            tools:src=\"@drawable/p1\"/>\n\n \n\n        <TextView\n\n            android:id=\"@+id/title\"\n\n            android:layout_width=\"wrap_content\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_alignBottom=\"@id/image\"\n\n            android:layout_alignEnd=\"@id/image\"\n\n            android:layout_marginEnd=\"16dp\"\n\n            android:shadowColor=\"#000000\"\n\n            android:shadowDx=\"0\"\n\n            android:shadowDy=\"0\"\n\n            android:shadowRadius=\"10\"\n\n            android:textColor=\"#ffffff\"\n\n            android:textSize=\"24sp\"\n\n            android:textStyle=\"bold\"\n\n            tools:text=\"Image\"/>\n\n \n\n        <TextView\n\n            android:id=\"@+id/body\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_below=\"@id/image\"\n\n            android:layout_marginBottom=\"16dp\"\n\n            android:layout_marginEnd=\"16dp\"\n\n            android:layout_marginStart=\"16dp\"\n\n            android:layout_marginTop=\"16dp\"\n\n            android:text=\"@string/lorem_ipsum\"/>\n\n \n\n    </RelativeLayout>\n\n \n\n</ScrollView>\n  ","fragment_fragment_transition.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\nCopyright 2014 The Android Open Source Project\n\n \n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\n\nYou may obtain a copy of the License at\n\n \n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n \n\nUnless required by applicable law or agreed to in writing, software\n\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\n\nlimitations under the License.\n\n-->\n\n<GridView\n\n    android:id=\"@+id/grid\"\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:tools=\"http://schemas.android.com/tools\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:clipToPadding=\"false\"\n\n    android:columnWidth=\"150dp\"\n\n    android:horizontalSpacing=\"1dp\"\n\n    android:numColumns=\"auto_fit\"\n\n    android:padding=\"1dp\"\n\n    android:scrollbars=\"none\"\n\n    android:stretchMode=\"columnWidth\"\n\n    android:verticalSpacing=\"1dp\"\n\n    tools:context=\"com.example.android.fragmenttransition.FragmentTransitionFragment\"/>\n  ","item_meat_grid.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2014 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<FrameLayout\n\n    android:id=\"@+id/frame\"\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:tools=\"http://schemas.android.com/tools\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\">\n\n \n\n    <RelativeLayout\n\n        android:id=\"@+id/container\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"150dp\"\n\n        tools:ignore=\"UselessParent\">\n\n \n\n        <ImageView\n\n            android:id=\"@+id/image\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"match_parent\"\n\n            android:scaleType=\"centerCrop\"\n\n            tools:src=\"@drawable/p1\"/>\n\n \n\n        <TextView\n\n            android:id=\"@+id/title\"\n\n            android:layout_width=\"wrap_content\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_alignParentBottom=\"true\"\n\n            android:layout_alignParentEnd=\"true\"\n\n            android:layout_gravity=\"bottom|end\"\n\n            android:layout_marginEnd=\"16dp\"\n\n            android:layout_marginStart=\"16dp\"\n\n            android:gravity=\"center_horizontal\"\n\n            android:shadowColor=\"#000000\"\n\n            android:shadowDx=\"0\"\n\n            android:shadowDy=\"0\"\n\n            android:shadowRadius=\"10\"\n\n            android:textColor=\"#ffffff\"\n\n            android:textSize=\"24sp\"\n\n            android:textStyle=\"bold\"\n\n            tools:text=\"Hello\"/>\n\n \n\n    </RelativeLayout>\n\n \n\n</FrameLayout>\n  "},"layout-w720dp":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"horizontal\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <LinearLayout\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\"\n\n          android:layout_weight=\"1\"\n\n          android:orientation=\"vertical\">\n\n \n\n        <FrameLayout\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"wrap_content\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/margin_medium\"\n\n                  android:paddingRight=\"@dimen/margin_medium\"\n\n                  android:paddingTop=\"@dimen/margin_large\"\n\n                  android:paddingBottom=\"@dimen/margin_large\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </FrameLayout>\n\n \n\n        <View\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"1dp\"\n\n              android:background=\"@android:color/darker_gray\" />\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"0px\"\n\n              android:layout_weight=\"1\" />\n\n \n\n    </LinearLayout>\n\n \n\n    <View\n\n          android:layout_width=\"1dp\"\n\n          android:layout_height=\"match_parent\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\" />\n\n \n\n</LinearLayout>\n\n \n\n \n  "},"menu":{"main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:id=\"@+id/menu_toggle_log\"\n\n          android:showAsAction=\"always\"\n\n          android:title=\"@string/sample_show_log\" />\n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">FragmentTransition</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n\t    This sample demonstrates how to start a transition right after a fragment transaction.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","strings.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<resources>\n\n    <string name=\"sample_show_log\">Show Log</string>\n\n    <string name=\"sample_hide_log\">Hide Log</string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.common":{"activities":{"SampleActivityBase.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\npackage com.example.android.common.activities;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentActivity;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogWrapper;\n\n \n\n/**\n\n * Base launcher activity, to handle most of the common plumbing for samples.\n\n */\n\npublic class SampleActivityBase extends FragmentActivity {\n\n \n\n    public static final String TAG = \"SampleActivityBase\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n    }\n\n \n\n    @Override\n\n    protected  void onStart() {\n\n        super.onStart();\n\n        initializeLogging();\n\n    }\n\n \n\n    /** Set up targets to receive log data */\n\n    public void initializeLogging() {\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        // Wraps Android's native log framework\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        Log.setLogNode(logWrapper);\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "},"logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "},"view":{"SlidingTabLayout.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.view;\n\n \n\nimport android.content.Context;\n\nimport android.graphics.Typeface;\n\nimport android.os.Build;\n\nimport android.support.v4.view.PagerAdapter;\n\nimport android.support.v4.view.ViewPager;\n\nimport android.util.AttributeSet;\n\nimport android.util.TypedValue;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.widget.HorizontalScrollView;\n\nimport android.widget.TextView;\n\n \n\n/**\n\n * To be used with ViewPager to provide a tab indicator component which give constant feedback as to\n\n * the user's scroll progress.\n\n * <p>\n\n * To use the component, simply add it to your view hierarchy. Then in your\n\n * {@link android.app.Activity} or {@link android.support.v4.app.Fragment} call\n\n * {@link #setViewPager(ViewPager)} providing it the ViewPager this layout is being used for.\n\n * <p>\n\n * The colors can be customized in two ways. The first and simplest is to provide an array of colors\n\n * via {@link #setSelectedIndicatorColors(int...)} and {@link #setDividerColors(int...)}. The\n\n * alternative is via the {@link TabColorizer} interface which provides you complete control over\n\n * which color is used for any individual position.\n\n * <p>\n\n * The views used as tabs can be customized by calling {@link #setCustomTabView(int, int)},\n\n * providing the layout ID of your custom layout.\n\n */\n\npublic class SlidingTabLayout extends HorizontalScrollView {\n\n \n\n    /**\n\n     * Allows complete control over the colors drawn in the tab layout. Set with\n\n     * {@link #setCustomTabColorizer(TabColorizer)}.\n\n     */\n\n    public interface TabColorizer {\n\n \n\n        /**\n\n         * @return return the color of the indicator used when {@code position} is selected.\n\n         */\n\n        int getIndicatorColor(int position);\n\n \n\n        /**\n\n         * @return return the color of the divider drawn to the right of {@code position}.\n\n         */\n\n        int getDividerColor(int position);\n\n \n\n    }\n\n \n\n    private static final int TITLE_OFFSET_DIPS = 24;\n\n    private static final int TAB_VIEW_PADDING_DIPS = 16;\n\n    private static final int TAB_VIEW_TEXT_SIZE_SP = 12;\n\n \n\n    private int mTitleOffset;\n\n \n\n    private int mTabViewLayoutId;\n\n    private int mTabViewTextViewId;\n\n \n\n    private ViewPager mViewPager;\n\n    private ViewPager.OnPageChangeListener mViewPagerPageChangeListener;\n\n \n\n    private final SlidingTabStrip mTabStrip;\n\n \n\n    public SlidingTabLayout(Context context) {\n\n        this(context, null);\n\n    }\n\n \n\n    public SlidingTabLayout(Context context, AttributeSet attrs) {\n\n        this(context, attrs, 0);\n\n    }\n\n \n\n    public SlidingTabLayout(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n \n\n        // Disable the Scroll Bar\n\n        setHorizontalScrollBarEnabled(false);\n\n        // Make sure that the Tab Strips fills this View\n\n        setFillViewport(true);\n\n \n\n        mTitleOffset = (int) (TITLE_OFFSET_DIPS * getResources().getDisplayMetrics().density);\n\n \n\n        mTabStrip = new SlidingTabStrip(context);\n\n        addView(mTabStrip, LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);\n\n    }\n\n \n\n    /**\n\n     * Set the custom {@link TabColorizer} to be used.\n\n     *\n\n     * If you only require simple custmisation then you can use\n\n     * {@link #setSelectedIndicatorColors(int...)} and {@link #setDividerColors(int...)} to achieve\n\n     * similar effects.\n\n     */\n\n    public void setCustomTabColorizer(TabColorizer tabColorizer) {\n\n        mTabStrip.setCustomTabColorizer(tabColorizer);\n\n    }\n\n \n\n    /**\n\n     * Sets the colors to be used for indicating the selected tab. These colors are treated as a\n\n     * circular array. Providing one color will mean that all tabs are indicated with the same color.\n\n     */\n\n    public void setSelectedIndicatorColors(int... colors) {\n\n        mTabStrip.setSelectedIndicatorColors(colors);\n\n    }\n\n \n\n    /**\n\n     * Sets the colors to be used for tab dividers. These colors are treated as a circular array.\n\n     * Providing one color will mean that all tabs are indicated with the same color.\n\n     */\n\n    public void setDividerColors(int... colors) {\n\n        mTabStrip.setDividerColors(colors);\n\n    }\n\n \n\n    /**\n\n     * Set the {@link ViewPager.OnPageChangeListener}. When using {@link SlidingTabLayout} you are\n\n     * required to set any {@link ViewPager.OnPageChangeListener} through this method. This is so\n\n     * that the layout can update it's scroll position correctly.\n\n     *\n\n     * @see ViewPager#setOnPageChangeListener(ViewPager.OnPageChangeListener)\n\n     */\n\n    public void setOnPageChangeListener(ViewPager.OnPageChangeListener listener) {\n\n        mViewPagerPageChangeListener = listener;\n\n    }\n\n \n\n    /**\n\n     * Set the custom layout to be inflated for the tab views.\n\n     *\n\n     * @param layoutResId Layout id to be inflated\n\n     * @param textViewId id of the {@link TextView} in the inflated view\n\n     */\n\n    public void setCustomTabView(int layoutResId, int textViewId) {\n\n        mTabViewLayoutId = layoutResId;\n\n        mTabViewTextViewId = textViewId;\n\n    }\n\n \n\n    /**\n\n     * Sets the associated view pager. Note that the assumption here is that the pager content\n\n     * (number of tabs and tab titles) does not change after this call has been made.\n\n     */\n\n    public void setViewPager(ViewPager viewPager) {\n\n        mTabStrip.removeAllViews();\n\n \n\n        mViewPager = viewPager;\n\n        if (viewPager != null) {\n\n            viewPager.setOnPageChangeListener(new InternalViewPagerListener());\n\n            populateTabStrip();\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Create a default view to be used for tabs. This is called if a custom tab view is not set via\n\n     * {@link #setCustomTabView(int, int)}.\n\n     */\n\n    protected TextView createDefaultTabView(Context context) {\n\n        TextView textView = new TextView(context);\n\n        textView.setGravity(Gravity.CENTER);\n\n        textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, TAB_VIEW_TEXT_SIZE_SP);\n\n        textView.setTypeface(Typeface.DEFAULT_BOLD);\n\n \n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {\n\n            // If we're running on Honeycomb or newer, then we can use the Theme's\n\n            // selectableItemBackground to ensure that the View has a pressed state\n\n            TypedValue outValue = new TypedValue();\n\n            getContext().getTheme().resolveAttribute(android.R.attr.selectableItemBackground,\n\n                    outValue, true);\n\n            textView.setBackgroundResource(outValue.resourceId);\n\n        }\n\n \n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {\n\n            // If we're running on ICS or newer, enable all-caps to match the Action Bar tab style\n\n            textView.setAllCaps(true);\n\n        }\n\n \n\n        int padding = (int) (TAB_VIEW_PADDING_DIPS * getResources().getDisplayMetrics().density);\n\n        textView.setPadding(padding, padding, padding, padding);\n\n \n\n        return textView;\n\n    }\n\n \n\n    private void populateTabStrip() {\n\n        final PagerAdapter adapter = mViewPager.getAdapter();\n\n        final View.OnClickListener tabClickListener = new TabClickListener();\n\n \n\n        for (int i = 0; i < adapter.getCount(); i++) {\n\n            View tabView = null;\n\n            TextView tabTitleView = null;\n\n \n\n            if (mTabViewLayoutId != 0) {\n\n                // If there is a custom tab view layout id set, try and inflate it\n\n                tabView = LayoutInflater.from(getContext()).inflate(mTabViewLayoutId, mTabStrip,\n\n                        false);\n\n                tabTitleView = (TextView) tabView.findViewById(mTabViewTextViewId);\n\n            }\n\n \n\n            if (tabView == null) {\n\n                tabView = createDefaultTabView(getContext());\n\n            }\n\n \n\n            if (tabTitleView == null && TextView.class.isInstance(tabView)) {\n\n                tabTitleView = (TextView) tabView;\n\n            }\n\n \n\n            tabTitleView.setText(adapter.getPageTitle(i));\n\n            tabView.setOnClickListener(tabClickListener);\n\n \n\n            mTabStrip.addView(tabView);\n\n        }\n\n    }\n\n \n\n    @Override\n\n    protected void onAttachedToWindow() {\n\n        super.onAttachedToWindow();\n\n \n\n        if (mViewPager != null) {\n\n            scrollToTab(mViewPager.getCurrentItem(), 0);\n\n        }\n\n    }\n\n \n\n    private void scrollToTab(int tabIndex, int positionOffset) {\n\n        final int tabStripChildCount = mTabStrip.getChildCount();\n\n        if (tabStripChildCount == 0 || tabIndex < 0 || tabIndex >= tabStripChildCount) {\n\n            return;\n\n        }\n\n \n\n        View selectedChild = mTabStrip.getChildAt(tabIndex);\n\n        if (selectedChild != null) {\n\n            int targetScrollX = selectedChild.getLeft() + positionOffset;\n\n \n\n            if (tabIndex > 0 || positionOffset > 0) {\n\n                // If we're not at the first child and are mid-scroll, make sure we obey the offset\n\n                targetScrollX -= mTitleOffset;\n\n            }\n\n \n\n            scrollTo(targetScrollX, 0);\n\n        }\n\n    }\n\n \n\n    private class InternalViewPagerListener implements ViewPager.OnPageChangeListener {\n\n        private int mScrollState;\n\n \n\n        @Override\n\n        public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\n\n            int tabStripChildCount = mTabStrip.getChildCount();\n\n            if ((tabStripChildCount == 0) || (position < 0) || (position >= tabStripChildCount)) {\n\n                return;\n\n            }\n\n \n\n            mTabStrip.onViewPagerPageChanged(position, positionOffset);\n\n \n\n            View selectedTitle = mTabStrip.getChildAt(position);\n\n            int extraOffset = (selectedTitle != null)\n\n                    ? (int) (positionOffset * selectedTitle.getWidth())\n\n                    : 0;\n\n            scrollToTab(position, extraOffset);\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageScrolled(position, positionOffset,\n\n                        positionOffsetPixels);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void onPageScrollStateChanged(int state) {\n\n            mScrollState = state;\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageScrollStateChanged(state);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void onPageSelected(int position) {\n\n            if (mScrollState == ViewPager.SCROLL_STATE_IDLE) {\n\n                mTabStrip.onViewPagerPageChanged(position, 0f);\n\n                scrollToTab(position, 0);\n\n            }\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageSelected(position);\n\n            }\n\n        }\n\n \n\n    }\n\n \n\n    private class TabClickListener implements View.OnClickListener {\n\n        @Override\n\n        public void onClick(View v) {\n\n            for (int i = 0; i < mTabStrip.getChildCount(); i++) {\n\n                if (v == mTabStrip.getChildAt(i)) {\n\n                    mViewPager.setCurrentItem(i);\n\n                    return;\n\n                }\n\n            }\n\n        }\n\n    }\n\n \n\n}\n  ","SlidingTabStrip.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.view;\n\n \n\nimport android.R;\n\nimport android.content.Context;\n\nimport android.graphics.Canvas;\n\nimport android.graphics.Color;\n\nimport android.graphics.Paint;\n\nimport android.util.AttributeSet;\n\nimport android.util.TypedValue;\n\nimport android.view.View;\n\nimport android.widget.LinearLayout;\n\n \n\nclass SlidingTabStrip extends LinearLayout {\n\n \n\n    private static final int DEFAULT_BOTTOM_BORDER_THICKNESS_DIPS = 2;\n\n    private static final byte DEFAULT_BOTTOM_BORDER_COLOR_ALPHA = 0x26;\n\n    private static final int SELECTED_INDICATOR_THICKNESS_DIPS = 8;\n\n    private static final int DEFAULT_SELECTED_INDICATOR_COLOR = 0xFF33B5E5;\n\n \n\n    private static final int DEFAULT_DIVIDER_THICKNESS_DIPS = 1;\n\n    private static final byte DEFAULT_DIVIDER_COLOR_ALPHA = 0x20;\n\n    private static final float DEFAULT_DIVIDER_HEIGHT = 0.5f;\n\n \n\n    private final int mBottomBorderThickness;\n\n    private final Paint mBottomBorderPaint;\n\n \n\n    private final int mSelectedIndicatorThickness;\n\n    private final Paint mSelectedIndicatorPaint;\n\n \n\n    private final int mDefaultBottomBorderColor;\n\n \n\n    private final Paint mDividerPaint;\n\n    private final float mDividerHeight;\n\n \n\n    private int mSelectedPosition;\n\n    private float mSelectionOffset;\n\n \n\n    private SlidingTabLayout.TabColorizer mCustomTabColorizer;\n\n    private final SimpleTabColorizer mDefaultTabColorizer;\n\n \n\n    SlidingTabStrip(Context context) {\n\n        this(context, null);\n\n    }\n\n \n\n    SlidingTabStrip(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n        setWillNotDraw(false);\n\n \n\n        final float density = getResources().getDisplayMetrics().density;\n\n \n\n        TypedValue outValue = new TypedValue();\n\n        context.getTheme().resolveAttribute(R.attr.colorForeground, outValue, true);\n\n        final int themeForegroundColor =  outValue.data;\n\n \n\n        mDefaultBottomBorderColor = setColorAlpha(themeForegroundColor,\n\n                DEFAULT_BOTTOM_BORDER_COLOR_ALPHA);\n\n \n\n        mDefaultTabColorizer = new SimpleTabColorizer();\n\n        mDefaultTabColorizer.setIndicatorColors(DEFAULT_SELECTED_INDICATOR_COLOR);\n\n        mDefaultTabColorizer.setDividerColors(setColorAlpha(themeForegroundColor,\n\n                DEFAULT_DIVIDER_COLOR_ALPHA));\n\n \n\n        mBottomBorderThickness = (int) (DEFAULT_BOTTOM_BORDER_THICKNESS_DIPS * density);\n\n        mBottomBorderPaint = new Paint();\n\n        mBottomBorderPaint.setColor(mDefaultBottomBorderColor);\n\n \n\n        mSelectedIndicatorThickness = (int) (SELECTED_INDICATOR_THICKNESS_DIPS * density);\n\n        mSelectedIndicatorPaint = new Paint();\n\n \n\n        mDividerHeight = DEFAULT_DIVIDER_HEIGHT;\n\n        mDividerPaint = new Paint();\n\n        mDividerPaint.setStrokeWidth((int) (DEFAULT_DIVIDER_THICKNESS_DIPS * density));\n\n    }\n\n \n\n    void setCustomTabColorizer(SlidingTabLayout.TabColorizer customTabColorizer) {\n\n        mCustomTabColorizer = customTabColorizer;\n\n        invalidate();\n\n    }\n\n \n\n    void setSelectedIndicatorColors(int... colors) {\n\n        // Make sure that the custom colorizer is removed\n\n        mCustomTabColorizer = null;\n\n        mDefaultTabColorizer.setIndicatorColors(colors);\n\n        invalidate();\n\n    }\n\n \n\n    void setDividerColors(int... colors) {\n\n        // Make sure that the custom colorizer is removed\n\n        mCustomTabColorizer = null;\n\n        mDefaultTabColorizer.setDividerColors(colors);\n\n        invalidate();\n\n    }\n\n \n\n    void onViewPagerPageChanged(int position, float positionOffset) {\n\n        mSelectedPosition = position;\n\n        mSelectionOffset = positionOffset;\n\n        invalidate();\n\n    }\n\n \n\n    @Override\n\n    protected void onDraw(Canvas canvas) {\n\n        final int height = getHeight();\n\n        final int childCount = getChildCount();\n\n        final int dividerHeightPx = (int) (Math.min(Math.max(0f, mDividerHeight), 1f) * height);\n\n        final SlidingTabLayout.TabColorizer tabColorizer = mCustomTabColorizer != null\n\n                ? mCustomTabColorizer\n\n                : mDefaultTabColorizer;\n\n \n\n        // Thick colored underline below the current selection\n\n        if (childCount > 0) {\n\n            View selectedTitle = getChildAt(mSelectedPosition);\n\n            int left = selectedTitle.getLeft();\n\n            int right = selectedTitle.getRight();\n\n            int color = tabColorizer.getIndicatorColor(mSelectedPosition);\n\n \n\n            if (mSelectionOffset > 0f && mSelectedPosition < (getChildCount() - 1)) {\n\n                int nextColor = tabColorizer.getIndicatorColor(mSelectedPosition + 1);\n\n                if (color != nextColor) {\n\n                    color = blendColors(nextColor, color, mSelectionOffset);\n\n                }\n\n \n\n                // Draw the selection partway between the tabs\n\n                View nextTitle = getChildAt(mSelectedPosition + 1);\n\n                left = (int) (mSelectionOffset * nextTitle.getLeft() +\n\n                        (1.0f - mSelectionOffset) * left);\n\n                right = (int) (mSelectionOffset * nextTitle.getRight() +\n\n                        (1.0f - mSelectionOffset) * right);\n\n            }\n\n \n\n            mSelectedIndicatorPaint.setColor(color);\n\n \n\n            canvas.drawRect(left, height - mSelectedIndicatorThickness, right,\n\n                    height, mSelectedIndicatorPaint);\n\n        }\n\n \n\n        // Thin underline along the entire bottom edge\n\n        canvas.drawRect(0, height - mBottomBorderThickness, getWidth(), height, mBottomBorderPaint);\n\n \n\n        // Vertical separators between the titles\n\n        int separatorTop = (height - dividerHeightPx) / 2;\n\n        for (int i = 0; i < childCount - 1; i++) {\n\n            View child = getChildAt(i);\n\n            mDividerPaint.setColor(tabColorizer.getDividerColor(i));\n\n            canvas.drawLine(child.getRight(), separatorTop, child.getRight(),\n\n                    separatorTop + dividerHeightPx, mDividerPaint);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Set the alpha value of the {@code color} to be the given {@code alpha} value.\n\n     */\n\n    private static int setColorAlpha(int color, byte alpha) {\n\n        return Color.argb(alpha, Color.red(color), Color.green(color), Color.blue(color));\n\n    }\n\n \n\n    /**\n\n     * Blend {@code color1} and {@code color2} using the given ratio.\n\n     *\n\n     * @param ratio of which to blend. 1.0 will return {@code color1}, 0.5 will give an even blend,\n\n     *              0.0 will return {@code color2}.\n\n     */\n\n    private static int blendColors(int color1, int color2, float ratio) {\n\n        final float inverseRation = 1f - ratio;\n\n        float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRation);\n\n        float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRation);\n\n        float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRation);\n\n        return Color.rgb((int) r, (int) g, (int) b);\n\n    }\n\n \n\n    private static class SimpleTabColorizer implements SlidingTabLayout.TabColorizer {\n\n        private int[] mIndicatorColors;\n\n        private int[] mDividerColors;\n\n \n\n        @Override\n\n        public final int getIndicatorColor(int position) {\n\n            return mIndicatorColors[position % mIndicatorColors.length];\n\n        }\n\n \n\n        @Override\n\n        public final int getDividerColor(int position) {\n\n            return mDividerColors[position % mDividerColors.length];\n\n        }\n\n \n\n        void setIndicatorColors(int... colors) {\n\n            mIndicatorColors = colors;\n\n        }\n\n \n\n        void setDividerColors(int... colors) {\n\n            mDividerColors = colors;\n\n        }\n\n    }\n\n}\n  "}},"com.example.android.fragmenttransition":{"DetailFragment.java":"\n    \n\n/*\n\n * Copyright 2014 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.fragmenttransition;\n\n \n\nimport com.example.android.common.logger.Log;\n\n \n\nimport android.content.Context;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.transition.Scene;\n\nimport android.transition.TransitionManager;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.view.animation.Animation;\n\nimport android.view.animation.AnimationUtils;\n\nimport android.widget.FrameLayout;\n\nimport android.widget.ImageView;\n\nimport android.widget.TextView;\n\n \n\npublic class DetailFragment extends Fragment implements Animation.AnimationListener {\n\n \n\n    private static final String TAG = \"DetailFragment\";\n\n \n\n    private static final String ARG_RESOURCE_ID = \"resource_id\";\n\n    private static final String ARG_TITLE = \"title\";\n\n    private static final String ARG_X = \"x\";\n\n    private static final String ARG_Y = \"y\";\n\n    private static final String ARG_WIDTH = \"width\";\n\n    private static final String ARG_HEIGHT = \"height\";\n\n \n\n    /**\n\n     * Create a new instance of DetailFragment.\n\n     *\n\n     * @param resourceId The resource ID of the Drawable image to show\n\n     * @param title The title of the image\n\n     * @param x The horizontal position of the grid item in pixel\n\n     * @param y The vertical position of the grid item in pixel\n\n     * @param width The width of the grid item in pixel\n\n     * @param height The height of the grid item in pixel\n\n     * @return a new instance of DetailFragment\n\n     */\n\n    public static DetailFragment newInstance(int resourceId, String title,\n\n                                             int x, int y, int width, int height) {\n\n        DetailFragment fragment = new DetailFragment();\n\n        Bundle args = new Bundle();\n\n        args.putInt(ARG_RESOURCE_ID, resourceId);\n\n        args.putString(ARG_TITLE, title);\n\n        args.putInt(ARG_X, x);\n\n        args.putInt(ARG_Y, y);\n\n        args.putInt(ARG_WIDTH, width);\n\n        args.putInt(ARG_HEIGHT, height);\n\n        fragment.setArguments(args);\n\n        return fragment;\n\n    }\n\n \n\n    public DetailFragment() {\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n\n        return inflater.inflate(R.layout.fragment_detail, container, false);\n\n    }\n\n \n\n    @Override\n\n    public void onViewCreated(View view, Bundle savedInstanceState) {\n\n        FrameLayout root = (FrameLayout) view;\n\n        Context context = view.getContext();\n\n        assert context != null;\n\n        // This is how the fragment looks at first. Since the transition is one-way, we don't need to make\n\n        // this a Scene.\n\n        View item = LayoutInflater.from(context).inflate(R.layout.item_meat_grid, root, false);\n\n        assert item != null;\n\n        bind(item);\n\n        // We adjust the position of the initial image with LayoutParams using the values supplied\n\n        // as the fragment arguments.\n\n        Bundle args = getArguments();\n\n        FrameLayout.LayoutParams params = null;\n\n        if (args != null) {\n\n            params = new FrameLayout.LayoutParams(\n\n                    args.getInt(ARG_WIDTH), args.getInt(ARG_HEIGHT));\n\n            params.topMargin = args.getInt(ARG_Y);\n\n            params.leftMargin = args.getInt(ARG_X);\n\n        }\n\n        root.addView(item, params);\n\n    }\n\n \n\n    @Override\n\n    public void onResume() {\n\n        super.onResume();\n\n    }\n\n \n\n    /**\n\n     * Bind the views inside of parent with the fragment arguments.\n\n     *\n\n     * @param parent The parent of views to bind.\n\n     */\n\n    private void bind(View parent) {\n\n        Bundle args = getArguments();\n\n        if (args == null) {\n\n            return;\n\n        }\n\n        ImageView image = (ImageView) parent.findViewById(R.id.image);\n\n        image.setImageResource(args.getInt(ARG_RESOURCE_ID));\n\n        TextView title = (TextView) parent.findViewById(R.id.title);\n\n        title.setText(args.getString(ARG_TITLE));\n\n    }\n\n \n\n    @Override\n\n    public Animation onCreateAnimation(int transit, boolean enter, int nextAnim) {\n\n        Animation animation = AnimationUtils.loadAnimation(getActivity(),\n\n                enter ? android.R.anim.fade_in : android.R.anim.fade_out);\n\n        // We bind a listener for the fragment transaction. We only bind it when\n\n        // this fragment is entering.\n\n        if (animation != null && enter) {\n\n            animation.setAnimationListener(this);\n\n        }\n\n        return animation;\n\n    }\n\n \n\n    @Override\n\n    public void onAnimationStart(Animation animation) {\n\n        // This method is called at the end of the animation for the fragment transaction.\n\n        // There is nothing we need to do in this sample.\n\n    }\n\n \n\n    @Override\n\n    public void onAnimationEnd(Animation animation) {\n\n        // This method is called at the end of the animation for the fragment transaction,\n\n        // which is perfect time to start our Transition.\n\n        Log.i(TAG, \"Fragment animation ended. Starting a Transition.\");\n\n        final Scene scene = Scene.getSceneForLayout((ViewGroup) getView(),\n\n                R.layout.fragment_detail_content, getActivity());\n\n        TransitionManager.go(scene);\n\n        // Note that we need to bind views with data after we call TransitionManager.go().\n\n        bind(scene.getSceneRoot());\n\n    }\n\n \n\n    @Override\n\n    public void onAnimationRepeat(Animation animation) {\n\n        // This method is never called in this sample because the animation doesn't repeat.\n\n    }\n\n \n\n}\n  ","FragmentTransitionFragment.java":"\n    \n\n/*\n\n * Copyright 2014 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.fragmenttransition;\n\n \n\nimport com.example.android.common.logger.Log;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.view.animation.Animation;\n\nimport android.view.animation.AnimationUtils;\n\nimport android.widget.AdapterView;\n\nimport android.widget.GridView;\n\n \n\npublic class FragmentTransitionFragment extends Fragment implements AdapterView.OnItemClickListener {\n\n \n\n    private static final String TAG = \"FragmentTransitionFragment\";\n\n \n\n    private MeatAdapter mAdapter;\n\n \n\n    public static FragmentTransitionFragment newInstance() {\n\n        return new FragmentTransitionFragment();\n\n    }\n\n \n\n    public FragmentTransitionFragment() {\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n\n        // This is the adapter we use to populate the grid.\n\n        mAdapter = new MeatAdapter(inflater, R.layout.item_meat_grid);\n\n        // Inflate the layout with a GridView in it.\n\n        return inflater.inflate(R.layout.fragment_fragment_transition, container, false);\n\n    }\n\n \n\n    @Override\n\n    public void onViewCreated(View view, Bundle savedInstanceState) {\n\n        GridView grid = (GridView) view.findViewById(R.id.grid);\n\n        grid.setAdapter(mAdapter);\n\n        grid.setOnItemClickListener(this);\n\n    }\n\n \n\n    @Override\n\n    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n\n        Meat meat = mAdapter.getItem(position);\n\n        Log.i(TAG, meat.title + \" clicked. Replacing fragment.\");\n\n        // We start the fragment transaction here. It is just an ordinary fragment transaction.\n\n        getActivity().getSupportFragmentManager()\n\n                .beginTransaction()\n\n                .replace(R.id.sample_content_fragment,\n\n                        DetailFragment.newInstance(meat.resourceId, meat.title,\n\n                                (int) view.getX(), (int) view.getY(),\n\n                                view.getWidth(), view.getHeight())\n\n                )\n\n                // We push the fragment transaction to back stack. User can go back to the\n\n                // previous fragment by pressing back button.\n\n                .addToBackStack(\"detail\")\n\n                .commit();\n\n    }\n\n \n\n    @Override\n\n    public Animation onCreateAnimation(int transit, boolean enter, int nextAnim) {\n\n        return AnimationUtils.loadAnimation(getActivity(),\n\n                enter ? android.R.anim.fade_in : android.R.anim.fade_out);\n\n    }\n\n \n\n}\n  ","MainActivity.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.fragmenttransition;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentTransaction;\n\nimport android.view.Menu;\n\nimport android.view.MenuItem;\n\nimport android.widget.ViewAnimator;\n\n \n\nimport com.example.android.common.activities.SampleActivityBase;\n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogFragment;\n\nimport com.example.android.common.logger.LogWrapper;\n\nimport com.example.android.common.logger.MessageOnlyLogFilter;\n\n \n\n/**\n\n * A simple launcher activity containing a summary sample description, sample log and a custom\n\n * {@link android.support.v4.app.Fragment} which can display a view.\n\n * <p>\n\n * For devices with displays with a width of 720dp or greater, the sample log is always visible,\n\n * on other devices it's visibility is controlled by an item on the Action Bar.\n\n */\n\npublic class MainActivity extends SampleActivityBase {\n\n \n\n    public static final String TAG = \"MainActivity\";\n\n \n\n    // Whether the Log Fragment is currently shown\n\n    private boolean mLogShown;\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_main);\n\n \n\n        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n\n        FragmentTransitionFragment fragment = new FragmentTransitionFragment();\n\n        transaction.replace(R.id.sample_content_fragment, fragment);\n\n        transaction.commit();\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        getMenuInflater().inflate(R.menu.main, menu);\n\n        return true;\n\n    }\n\n \n\n    @Override\n\n    public boolean onPrepareOptionsMenu(Menu menu) {\n\n        MenuItem logToggle = menu.findItem(R.id.menu_toggle_log);\n\n        logToggle.setVisible(findViewById(R.id.sample_output) instanceof ViewAnimator);\n\n        logToggle.setTitle(mLogShown ? R.string.sample_hide_log : R.string.sample_show_log);\n\n \n\n        return super.onPrepareOptionsMenu(menu);\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch(item.getItemId()) {\n\n            case R.id.menu_toggle_log:\n\n                mLogShown = !mLogShown;\n\n                ViewAnimator output = (ViewAnimator) findViewById(R.id.sample_output);\n\n                if (mLogShown) {\n\n                    output.setDisplayedChild(1);\n\n                } else {\n\n                    output.setDisplayedChild(0);\n\n                }\n\n                supportInvalidateOptionsMenu();\n\n                return true;\n\n        }\n\n        return super.onOptionsItemSelected(item);\n\n    }\n\n \n\n    /** Create a chain of targets that will receive log data */\n\n    @Override\n\n    public void initializeLogging() {\n\n        // Wraps Android's native log framework.\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        Log.setLogNode(logWrapper);\n\n \n\n        // Filter strips out everything except the message text.\n\n        MessageOnlyLogFilter msgFilter = new MessageOnlyLogFilter();\n\n        logWrapper.setNext(msgFilter);\n\n \n\n        // On screen logging via a fragment with a TextView.\n\n        LogFragment logFragment = (LogFragment) getSupportFragmentManager()\n\n                .findFragmentById(R.id.log_fragment);\n\n        msgFilter.setNext(logFragment.getLogView());\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  ","Meat.java":"\n    \n\n/*\n\n * Copyright 2014 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.fragmenttransition;\n\n \n\n/**\n\n * This represents a sample data.\n\n */\n\npublic class Meat {\n\n \n\n    public int resourceId;\n\n    public String title;\n\n \n\n    public Meat(int resourceId, String title) {\n\n        this.resourceId = resourceId;\n\n        this.title = title;\n\n    }\n\n \n\n    public static final Meat[] MEATS = {\n\n            new Meat(R.drawable.p1, \"First\"),\n\n            new Meat(R.drawable.p2, \"Second\"),\n\n            new Meat(R.drawable.p3, \"Third\"),\n\n            new Meat(R.drawable.p4, \"Fourth\"),\n\n            new Meat(R.drawable.p5, \"Fifth\"),\n\n            new Meat(R.drawable.p6, \"Sixth\"),\n\n            new Meat(R.drawable.p7, \"Seventh\"),\n\n            new Meat(R.drawable.p8, \"Eighth\"),\n\n            new Meat(R.drawable.p9, \"Ninth\"),\n\n            new Meat(R.drawable.p10, \"Tenth\"),\n\n            new Meat(R.drawable.p11, \"Eleventh\"),\n\n    };\n\n \n\n}\n  ","MeatAdapter.java":"\n    \n\n/*\n\n * Copyright 2014 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.fragmenttransition;\n\n \n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.BaseAdapter;\n\nimport android.widget.ImageView;\n\nimport android.widget.TextView;\n\n \n\nclass MeatAdapter extends BaseAdapter {\n\n \n\n    private final LayoutInflater mLayoutInflater;\n\n    private final int mResourceId;\n\n \n\n    public MeatAdapter(LayoutInflater inflater, int resourceId) {\n\n        mLayoutInflater = inflater;\n\n        mResourceId = resourceId;\n\n    }\n\n \n\n    @Override\n\n    public int getCount() {\n\n        return Meat.MEATS.length;\n\n    }\n\n \n\n    @Override\n\n    public Meat getItem(int position) {\n\n        return Meat.MEATS[position];\n\n    }\n\n \n\n    @Override\n\n    public long getItemId(int position) {\n\n        return Meat.MEATS[position].resourceId;\n\n    }\n\n \n\n    @Override\n\n    public View getView(int position, View convertView, ViewGroup parent) {\n\n        final View view;\n\n        final ViewHolder holder;\n\n        if (null == convertView) {\n\n            view = mLayoutInflater.inflate(mResourceId, parent, false);\n\n            holder = new ViewHolder();\n\n            assert view != null;\n\n            holder.image = (ImageView) view.findViewById(R.id.image);\n\n            holder.title = (TextView) view.findViewById(R.id.title);\n\n            view.setTag(holder);\n\n        } else {\n\n            view = convertView;\n\n            holder = (ViewHolder) view.getTag();\n\n        }\n\n        bindView(holder, position);\n\n        return view;\n\n    }\n\n \n\n    public void bindView(ViewHolder holder, int position) {\n\n        Meat meat = getItem(position);\n\n        holder.image.setImageResource(meat.resourceId);\n\n        holder.title.setText(meat.title);\n\n    }\n\n \n\n    public static class ViewHolder {\n\n        public ImageView image;\n\n        public TextView title;\n\n    }\n\n \n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2014 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.fragmenttransition\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk android:minSdkVersion=\"19\" android:targetSdkVersion=\"19\" />\n\n \n\n    <application\n\n        android:allowBackup=\"true\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:label=\"@string/app_name\"\n\n        android:theme=\"@style/AppTheme\" >\n\n        <activity\n\n            android:name=\"com.example.android.fragmenttransition.MainActivity\"\n\n            android:label=\"@string/app_name\" >\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n \n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n</manifest>\n  "},"HorizontalPaging":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com//samples/HorizontalPaging/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com//samples/HorizontalPaging/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com//samples/HorizontalPaging/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com//samples/HorizontalPaging/res/drawable-xhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleMessageTile\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n            android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n            android:text=\"@string/intro_message\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n  ","fragment_main_dummy.xml":"\n    \n\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:tools=\"http://schemas.android.com/tools\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n\n    android:paddingRight=\"@dimen/activity_horizontal_margin\"\n\n    android:paddingTop=\"@dimen/activity_vertical_margin\"\n\n    android:paddingBottom=\"@dimen/activity_vertical_margin\"\n\n    tools:context=\".MainActivity$DummySectionFragment\">\n\n \n\n    <TextView\n\n        android:id=\"@+id/section_label\"\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\" />\n\n \n\n</RelativeLayout>\n  ","sample_main.xml":"\n    \n\n<android.support.v4.view.ViewPager xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:tools=\"http://schemas.android.com/tools\"\n\n    android:id=\"@+id/pager\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    tools:context=\".MainActivity\" />\n  "},"values":{"values-sw720dp-land":{"dimens.xml":"\n    \n\n<resources>\n\n    <!-- Customize dimensions originally defined in res/values/dimens.xml (such as\n\n         screen margins) for sw720dp devices (e.g. 10\" tablets) in landscape here. -->\n\n    <dimen name=\"activity_horizontal_margin\">128dp</dimen>\n\n</resources>\n  "},"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">HorizontalPaging</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            This sample demonstrates how to implement horizontal paging between fragments in\n\n            applications that use ActionBar, using a ViewPager widget.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","dimens.xml":"\n    \n\n<resources>\n\n    <!-- Default screen margins, per the Android Design guidelines. -->\n\n    <dimen name=\"activity_horizontal_margin\">16dp</dimen>\n\n    <dimen name=\"activity_vertical_margin\">16dp</dimen>\n\n</resources>\n  ","strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<resources>\n\n \n\n    <string name=\"action_settings\">Settings</string>\n\n    <string name=\"title_section1\">Section 1</string>\n\n    <string name=\"title_section2\">Section 2</string>\n\n    <string name=\"title_section3\">Section 3</string>\n\n \n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.horizontalpaging":{"MainActivity.java":"\n    \n\npackage com.example.android.horizontalpaging;\n\n \n\nimport android.app.ActionBar;\n\nimport android.app.FragmentTransaction;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.support.v4.app.FragmentActivity;\n\nimport android.support.v4.app.FragmentManager;\n\nimport android.support.v4.app.FragmentPagerAdapter;\n\nimport android.support.v4.view.ViewPager;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.TextView;\n\n \n\nimport java.util.Locale;\n\n \n\npublic class MainActivity extends FragmentActivity implements ActionBar.TabListener {\n\n \n\n    /**\n\n     * The {@link android.support.v4.view.PagerAdapter} that will provide\n\n     * fragments for each of the sections. We use a\n\n     * {@link android.support.v4.app.FragmentPagerAdapter} derivative, which\n\n     * will keep every loaded fragment in memory. If this becomes too memory\n\n     * intensive, it may be best to switch to a\n\n     * {@link android.support.v4.app.FragmentStatePagerAdapter}.\n\n     */\n\n    SectionsPagerAdapter mSectionsPagerAdapter;\n\n \n\n    /**\n\n     * The {@link ViewPager} that will host the section contents.\n\n     */\n\n    ViewPager mViewPager;\n\n \n\n    /**\n\n     * Create the activity. Sets up an {@link android.app.ActionBar} with tabs, and then configures the\n\n     * {@link ViewPager} contained inside R.layout.activity_main.\n\n     *\n\n     * <p>A {@link SectionsPagerAdapter} will be instantiated to hold the different pages of\n\n     * fragments that are to be displayed. A\n\n     * {@link android.support.v4.view.ViewPager.SimpleOnPageChangeListener} will also be configured\n\n     * to receive callbacks when the user swipes between pages in the ViewPager.\n\n     *\n\n     * @param savedInstanceState\n\n     */\n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        // Load the UI from res/layout/activity_main.xml\n\n        setContentView(R.layout.sample_main);\n\n \n\n        // Set up the action bar. The navigation mode is set to NAVIGATION_MODE_TABS, which will\n\n        // cause the ActionBar to render a set of tabs. Note that these tabs are *not* rendered\n\n        // by the ViewPager; additional logic is lower in this file to synchronize the ViewPager\n\n        // state with the tab state. (See mViewPager.setOnPageChangeListener() and onTabSelected().)\n\n        final ActionBar actionBar = getActionBar();\n\n        actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);\n\n \n\n        // Create the adapter that will return a fragment for each of the three primary sections\n\n        // of the app.\n\n        mSectionsPagerAdapter = new SectionsPagerAdapter(getSupportFragmentManager());\n\n \n\n        // Set up the ViewPager with the sections adapter.\n\n        mViewPager = (ViewPager) findViewById(R.id.pager);\n\n        mViewPager.setAdapter(mSectionsPagerAdapter);\n\n \n\n        // When swiping between different sections, select the corresponding tab. We can also use\n\n        // ActionBar.Tab#select() to do this if we have a reference to the Tab.\n\n        mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener() {\n\n            @Override\n\n            public void onPageSelected(int position) {\n\n                actionBar.setSelectedNavigationItem(position);\n\n            }\n\n        });\n\n \n\n        // For each of the sections in the app, add a tab to the action bar.\n\n        for (int i = 0; i < mSectionsPagerAdapter.getCount(); i++) {\n\n            // Create a tab with text corresponding to the page title defined by the adapter. Also\n\n            // specify this Activity object, which implements the TabListener interface, as the\n\n            // callback (listener) for when this tab is selected.\n\n            actionBar.addTab(\n\n                    actionBar.newTab()\n\n                            .setText(mSectionsPagerAdapter.getPageTitle(i))\n\n                            .setTabListener(this));\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Update {@link ViewPager} after a tab has been selected in the ActionBar.\n\n     *\n\n     * @param tab Tab that was selected.\n\n     * @param fragmentTransaction A {@link android.app.FragmentTransaction} for queuing fragment operations to\n\n     *                            execute once this method returns. This FragmentTransaction does\n\n     *                            not support being added to the back stack.\n\n     */\n\n    @Override\n\n    public void onTabSelected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {\n\n        // When the given tab is selected, tell the ViewPager to switch to the corresponding page.\n\n        mViewPager.setCurrentItem(tab.getPosition());\n\n    }\n\n \n\n    /**\n\n     * Unused. Required for {@link android.app.ActionBar.TabListener}.\n\n     */\n\n    @Override\n\n    public void onTabUnselected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {\n\n    }\n\n \n\n    /**\n\n     * Unused. Required for {@link android.app.ActionBar.TabListener}.\n\n     */\n\n    @Override\n\n    public void onTabReselected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {\n\n    }\n\n \n\n    /**\n\n     * A {@link FragmentPagerAdapter} that returns a fragment corresponding to\n\n     * one of the sections/tabs/pages. This provides the data for the {@link ViewPager}.\n\n     */\n\n    public class SectionsPagerAdapter extends FragmentPagerAdapter {\n\n \n\n        public SectionsPagerAdapter(FragmentManager fm) {\n\n            super(fm);\n\n        }\n\n \n\n        /**\n\n         * Get fragment corresponding to a specific position. This will be used to populate the\n\n         * contents of the {@link ViewPager}.\n\n         *\n\n         * @param position Position to fetch fragment for.\n\n         * @return Fragment for specified position.\n\n         */\n\n        @Override\n\n        public Fragment getItem(int position) {\n\n            // getItem is called to instantiate the fragment for the given page.\n\n            // Return a DummySectionFragment (defined as a static inner class\n\n            // below) with the page number as its lone argument.\n\n            Fragment fragment = new DummySectionFragment();\n\n            Bundle args = new Bundle();\n\n            args.putInt(DummySectionFragment.ARG_SECTION_NUMBER, position + 1);\n\n            fragment.setArguments(args);\n\n            return fragment;\n\n        }\n\n \n\n        /**\n\n         * Get number of pages the {@link ViewPager} should render.\n\n         *\n\n         * @return Number of fragments to be rendered as pages.\n\n         */\n\n        @Override\n\n        public int getCount() {\n\n            // Show 3 total pages.\n\n            return 3;\n\n        }\n\n \n\n        /**\n\n         * Get title for each of the pages. This will be displayed on each of the tabs.\n\n         *\n\n         * @param position Page to fetch title for.\n\n         * @return Title for specified page.\n\n         */\n\n        @Override\n\n        public CharSequence getPageTitle(int position) {\n\n            Locale l = Locale.getDefault();\n\n            switch (position) {\n\n                case 0:\n\n                    return getString(R.string.title_section1).toUpperCase(l);\n\n                case 1:\n\n                    return getString(R.string.title_section2).toUpperCase(l);\n\n                case 2:\n\n                    return getString(R.string.title_section3).toUpperCase(l);\n\n            }\n\n            return null;\n\n        }\n\n    }\n\n \n\n    /**\n\n     * A dummy fragment representing a section of the app, but that simply displays dummy text.\n\n     * This would be replaced with your application's content.\n\n     */\n\n    public static class DummySectionFragment extends Fragment {\n\n        /**\n\n         * The fragment argument representing the section number for this\n\n         * fragment.\n\n         */\n\n        public static final String ARG_SECTION_NUMBER = \"section_number\";\n\n \n\n        public DummySectionFragment() {\n\n        }\n\n \n\n        @Override\n\n        public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                Bundle savedInstanceState) {\n\n            View rootView = inflater.inflate(R.layout.fragment_main_dummy, container, false);\n\n            TextView dummyTextView = (TextView) rootView.findViewById(R.id.section_label);\n\n            dummyTextView.setText(Integer.toString(getArguments().getInt(ARG_SECTION_NUMBER)));\n\n            return rootView;\n\n        }\n\n    }\n\n \n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.horizontalpaging\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\" >\n\n \n\n    <!-- While ViewPager will work on API 4 or above, tabs require an ActionBar. ActionBar is only\n\n         available in API 11 or above. -->\n\n    <uses-sdk\n\n        android:minSdkVersion=\"11\"\n\n        android:targetSdkVersion=\"16\" />\n\n \n\n    <application\n\n        android:allowBackup=\"true\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:label=\"@string/app_name\"\n\n        android:theme=\"@style/AppTheme\" >\n\n        <!-- This is a standard Activity invocation for MainActivity. -->\n\n        <activity\n\n            android:name=\"com.example.android.horizontalpaging.MainActivity\"\n\n            android:label=\"@string/app_name\" >\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n \n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n</manifest>\n  "},"ImmersiveMode":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com//samples/ImmersiveMode/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com//samples/ImmersiveMode/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com//samples/ImmersiveMode/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com//samples/ImmersiveMode/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com//samples/ImmersiveMode/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n        android:orientation=\"vertical\"\n\n        android:layout_width=\"fill_parent\"\n\n        android:layout_height=\"fill_parent\"\n\n        android:id=\"@+id/sample_main_layout\">\n\n    <TextView android:id=\"@+id/sample_output\"\n\n              style=\"@style/Widget.SampleMessage\"\n\n              android:layout_weight=\"1\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\"\n\n              android:text=\"@string/intro_message\"\n\n              android:padding=\"16dp\" />\n\n    <View\n\n            android:layout_width=\"fill_parent\"\n\n            android:layout_height=\"1dp\"\n\n            android:background=\"@android:color/darker_gray\"/>\n\n    <fragment\n\n            android:name=\"com.example.android.common.logger.LogFragment\"\n\n            android:id=\"@+id/log_fragment\"\n\n            android:layout_weight=\"1\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"match_parent\" />\n\n</LinearLayout>\n  "},"layout-sw600dp":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:orientation=\"vertical\"\n\n    android:layout_width=\"fill_parent\"\n\n    android:layout_height=\"fill_parent\"\n\n    android:id=\"@+id/sample_main_layout\" >\n\n \n\n    <TextView android:id=\"@+id/sample_output\"\n\n        style=\"@style/Widget.SampleMessage\"\n\n        android:background=\"@android:color/white\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:text=\"@string/intro_message\"\n\n        android:padding=\"16dp\"\n\n        android:layout_margin=\"16dp\"/>\n\n    <fragment\n\n        android:name=\"com.example.android.common.logger.LogFragment\"\n\n        android:id=\"@+id/log_fragment\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"match_parent\"\n\n        android:layout_margin=\"16dp\" />\n\n</LinearLayout>\n  "},"layout-sw600dp-land":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n        android:orientation=\"horizontal\"\n\n        android:layout_width=\"fill_parent\"\n\n        android:layout_height=\"fill_parent\"\n\n        android:id=\"@+id/sample_main_layout\">\n\n    <TextView android:id=\"@+id/sample_output\"\n\n              style=\"@style/Widget.SampleMessage\"\n\n              android:background=\"@android:color/white\"\n\n              android:layout_weight=\"1\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\"\n\n              android:text=\"@string/intro_message\"\n\n              android:layout_margin=\"16dp\" />\n\n    <fragment\n\n            android:name=\"com.example.android.common.logger.LogFragment\"\n\n            android:id=\"@+id/log_fragment\"\n\n            android:layout_weight=\"1\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"match_parent\"\n\n            android:layout_margin=\"16dp\" />\n\n</LinearLayout>\n  "},"menu":{"main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:id=\"@+id/sample_action\"\n\n          android:showAsAction=\"ifRoom|withText\"\n\n          android:title=\"@string/sample_action\" />\n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">ImmersiveMode</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            One of the features introduced in KitKat is \"immersive mode\". Immersive mode gives the\n\n            user the ability to show/hide the status bar and navigation bar with a swipe.  To try,\n\n            click the \"Toggle immersive mode\" button, then try swiping the bar in and out!\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n        <string name=\"sample_action\">Toggle immersive mode!</string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Base\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n \n\n    <style name=\"Widget.SampleOutput\">\n\n        <item name=\"android:padding\">@dimen/margin_medium</item>\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Log\" parent=\"Widget.SampleOutput\">\n\n        <item name=\"android:typeface\">monospace</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:padding\">@dimen/margin_medium</item>\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n \n\n        <item name=\"android:layout_margin\">16dp</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n    <style name=\"Log\" parent=\"Widget.SampleOutput\">\n\n        <item name=\"android:typeface\">monospace</item>\n\n    </style>\n\n \n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.common":{"activities":{"SampleActivityBase.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\npackage com.example.android.common.activities;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentActivity;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogWrapper;\n\n \n\n/**\n\n * Base launcher activity, to handle most of the common plumbing for samples.\n\n */\n\npublic class SampleActivityBase extends FragmentActivity {\n\n \n\n    public static final String TAG = \"SampleActivityBase\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n    }\n\n \n\n    @Override\n\n    protected  void onStart() {\n\n        super.onStart();\n\n        initializeLogging();\n\n    }\n\n \n\n    /** Set up targets to receive log data */\n\n    public void initializeLogging() {\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        // Wraps Android's native log framework\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        Log.setLogNode(logWrapper);\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "},"logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "}},"com.example.android.immersivemode":{"ImmersiveModeFragment.java":"\n    \n\n/*\n\n* Copyright (C) 2012 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*      http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\npackage com.example.android.immersivemode;\n\n \n\nimport android.os.Build;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.view.MenuItem;\n\nimport android.view.View;\n\n \n\nimport com.example.android.common.logger.Log;\n\n \n\npublic class ImmersiveModeFragment extends Fragment {\n\n \n\n    public static final String TAG = \"ImmersiveModeFragment\";\n\n \n\n    @Override\n\n    public void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setHasOptionsMenu(true);\n\n    }\n\n \n\n    @Override\n\n    public void onActivityCreated(Bundle savedInstanceState) {\n\n        super.onActivityCreated(savedInstanceState);\n\n        final View decorView = getActivity().getWindow().getDecorView();\n\n        decorView.setOnSystemUiVisibilityChangeListener(\n\n                new View.OnSystemUiVisibilityChangeListener() {\n\n                    @Override\n\n                    public void onSystemUiVisibilityChange(int i) {\n\n                        int height = decorView.getHeight();\n\n                        Log.i(TAG, \"Current height: \" + height);\n\n                    }\n\n                });\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        if (item.getItemId() == R.id.sample_action) {\n\n            toggleHideyBar();\n\n        }\n\n        return true;\n\n    }\n\n \n\n    /**\n\n     * Detects and toggles immersive mode (also known as \"hidey bar\" mode).\n\n     */\n\n    public void toggleHideyBar() {\n\n \n\n        // The UI options currently enabled are represented by a bitfield.\n\n        // getSystemUiVisibility() gives us that bitfield.\n\n        int uiOptions = getActivity().getWindow().getDecorView().getSystemUiVisibility();\n\n        int newUiOptions = uiOptions;\n\n        boolean isImmersiveModeEnabled =\n\n                ((uiOptions | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY) == uiOptions);\n\n        if (isImmersiveModeEnabled) {\n\n            Log.i(TAG, \"Turning immersive mode mode off. \");\n\n        } else {\n\n            Log.i(TAG, \"Turning immersive mode mode on.\");\n\n        }\n\n \n\n        // Navigation bar hiding:  Backwards compatible to ICS.\n\n        if (Build.VERSION.SDK_INT >= 14) {\n\n            newUiOptions ^= View.SYSTEM_UI_FLAG_HIDE_NAVIGATION;\n\n        }\n\n \n\n        // Status bar hiding: Backwards compatible to Jellybean\n\n        if (Build.VERSION.SDK_INT >= 16) {\n\n            newUiOptions ^= View.SYSTEM_UI_FLAG_FULLSCREEN;\n\n        }\n\n \n\n        // Immersive mode: Backward compatible to KitKat.\n\n        // Note that this flag doesn't do anything by itself, it only augments the behavior\n\n        // of HIDE_NAVIGATION and FLAG_FULLSCREEN.  For the purposes of this sample\n\n        // all three flags are being toggled together.\n\n        // Note that there are two immersive mode UI flags, one of which is referred to as \"sticky\".\n\n        // Sticky immersive mode differs in that it makes the navigation and status bars\n\n        // semi-transparent, and the UI flag does not get cleared when the user interacts with\n\n        // the screen.\n\n        if (Build.VERSION.SDK_INT >= 18) {\n\n            newUiOptions ^= View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;\n\n        }\n\n \n\n        getActivity().getWindow().getDecorView().setSystemUiVisibility(newUiOptions);\n\n    }\n\n}\n  ","MainActivity.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.immersivemode;\n\n \n\nimport android.graphics.Color;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentTransaction;\n\nimport android.view.Menu;\n\n \n\nimport com.example.android.common.activities.SampleActivityBase;\n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogFragment;\n\nimport com.example.android.common.logger.LogWrapper;\n\nimport com.example.android.common.logger.MessageOnlyLogFilter;\n\n \n\n/**\n\n * A simple launcher activity containing a summary sample description\n\n * and a few action bar buttons.\n\n */\n\npublic class MainActivity extends SampleActivityBase {\n\n \n\n    public static final String TAG = \"MainActivity\";\n\n \n\n    public static final String FRAGTAG = \"ImmersiveModeFragment\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_main);\n\n \n\n        if (getSupportFragmentManager().findFragmentByTag(FRAGTAG) == null ) {\n\n            FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n\n            ImmersiveModeFragment fragment = new ImmersiveModeFragment();\n\n            transaction.add(fragment, FRAGTAG);\n\n            transaction.commit();\n\n        }\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        getMenuInflater().inflate(R.menu.main, menu);\n\n        return true;\n\n    }\n\n \n\n    /** Create a chain of targets that will receive log data */\n\n    @Override\n\n    public void initializeLogging() {\n\n        // Wraps Android's native log framework.\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        Log.setLogNode(logWrapper);\n\n \n\n        // Filter strips out everything except the message text.\n\n        MessageOnlyLogFilter msgFilter = new MessageOnlyLogFilter();\n\n        logWrapper.setNext(msgFilter);\n\n \n\n        // On screen logging via a fragment with a TextView.\n\n        LogFragment logFragment = (LogFragment) getSupportFragmentManager()\n\n                .findFragmentById(R.id.log_fragment);\n\n        msgFilter.setNext(logFragment.getLogView());\n\n        logFragment.getLogView().setTextAppearance(this, R.style.Log);\n\n        logFragment.getLogView().setBackgroundColor(Color.WHITE);\n\n \n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.immersivemode\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk android:minSdkVersion=\"11\" android:targetSdkVersion=\"19\" />\n\n \n\n    <application android:allowBackup=\"true\"\n\n        android:label=\"@string/app_name\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:theme=\"@style/AppTheme\">\n\n \n\n        <activity android:name=\".MainActivity\"\n\n                  android:label=\"@string/app_name\"\n\n                  android:uiOptions=\"splitActionBarWhenNarrow\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n \n\n</manifest>\n  "},"SlidingTabsBasic":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com//samples/SlidingTabsBasic/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com//samples/SlidingTabsBasic/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com//samples/SlidingTabsBasic/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com//samples/SlidingTabsBasic/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com//samples/SlidingTabsBasic/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"vertical\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <ViewAnimator\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\"\n\n          android:layout_weight=\"1\">\n\n \n\n        <ScrollView\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingRight=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingTop=\"@dimen/vertical_page_margin\"\n\n                  android:paddingBottom=\"@dimen/vertical_page_margin\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </ScrollView>\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\" />\n\n \n\n    </ViewAnimator>\n\n \n\n    <View\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"1dp\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\" />\n\n \n\n</LinearLayout>\n\n \n  ","fragment_sample.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:orientation=\"vertical\">\n\n \n\n    <com.example.android.common.view.SlidingTabLayout\n\n          android:id=\"@+id/sliding_tabs\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"wrap_content\" />\n\n \n\n    <android.support.v4.view.ViewPager\n\n          android:id=\"@+id/viewpager\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\"\n\n          android:layout_weight=\"1\"\n\n          android:background=\"@android:color/white\"/>\n\n \n\n</LinearLayout>\n  ","pager_item.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:orientation=\"vertical\"\n\n      android:gravity=\"center\">\n\n \n\n    <TextView\n\n          android:id=\"@+id/item_subtitle\"\n\n          android:layout_width=\"wrap_content\"\n\n          android:layout_height=\"wrap_content\"\n\n          android:textAppearance=\"?android:attr/textAppearanceLarge\"\n\n          android:text=\"Page:\"/>\n\n \n\n    <TextView\n\n          android:id=\"@+id/item_title\"\n\n          android:layout_width=\"wrap_content\"\n\n          android:layout_height=\"wrap_content\"\n\n          android:textSize=\"80sp\" />\n\n \n\n</LinearLayout>\n  "},"layout-w720dp":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"horizontal\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <LinearLayout\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\"\n\n          android:layout_weight=\"1\"\n\n          android:orientation=\"vertical\">\n\n \n\n        <FrameLayout\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"wrap_content\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/margin_medium\"\n\n                  android:paddingRight=\"@dimen/margin_medium\"\n\n                  android:paddingTop=\"@dimen/margin_large\"\n\n                  android:paddingBottom=\"@dimen/margin_large\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </FrameLayout>\n\n \n\n        <View\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"1dp\"\n\n              android:background=\"@android:color/darker_gray\" />\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"0px\"\n\n              android:layout_weight=\"1\" />\n\n \n\n    </LinearLayout>\n\n \n\n    <View\n\n          android:layout_width=\"1dp\"\n\n          android:layout_height=\"match_parent\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\" />\n\n \n\n</LinearLayout>\n\n \n\n \n  "},"menu":{"main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:id=\"@+id/menu_toggle_log\"\n\n          android:showAsAction=\"always\"\n\n          android:title=\"@string/sample_show_log\" />\n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">SlidingTabsBasic</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            A basic sample which shows how to use SlidingTabLayout to display a custom\n\n            ViewPager title strip which gives continuous feedback to the user when scrolling.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","strings.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<resources>\n\n    <string name=\"sample_show_log\">Show Log</string>\n\n    <string name=\"sample_hide_log\">Hide Log</string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.common":{"activities":{"SampleActivityBase.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\npackage com.example.android.common.activities;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentActivity;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogWrapper;\n\n \n\n/**\n\n * Base launcher activity, to handle most of the common plumbing for samples.\n\n */\n\npublic class SampleActivityBase extends FragmentActivity {\n\n \n\n    public static final String TAG = \"SampleActivityBase\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n    }\n\n \n\n    @Override\n\n    protected  void onStart() {\n\n        super.onStart();\n\n        initializeLogging();\n\n    }\n\n \n\n    /** Set up targets to receive log data */\n\n    public void initializeLogging() {\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        // Wraps Android's native log framework\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        Log.setLogNode(logWrapper);\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "},"logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "},"view":{"SlidingTabLayout.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.view;\n\n \n\nimport android.content.Context;\n\nimport android.graphics.Typeface;\n\nimport android.os.Build;\n\nimport android.support.v4.view.PagerAdapter;\n\nimport android.support.v4.view.ViewPager;\n\nimport android.util.AttributeSet;\n\nimport android.util.TypedValue;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.widget.HorizontalScrollView;\n\nimport android.widget.TextView;\n\n \n\n/**\n\n * To be used with ViewPager to provide a tab indicator component which give constant feedback as to\n\n * the user's scroll progress.\n\n * <p>\n\n * To use the component, simply add it to your view hierarchy. Then in your\n\n * {@link android.app.Activity} or {@link android.support.v4.app.Fragment} call\n\n * {@link #setViewPager(ViewPager)} providing it the ViewPager this layout is being used for.\n\n * <p>\n\n * The colors can be customized in two ways. The first and simplest is to provide an array of colors\n\n * via {@link #setSelectedIndicatorColors(int...)} and {@link #setDividerColors(int...)}. The\n\n * alternative is via the {@link TabColorizer} interface which provides you complete control over\n\n * which color is used for any individual position.\n\n * <p>\n\n * The views used as tabs can be customized by calling {@link #setCustomTabView(int, int)},\n\n * providing the layout ID of your custom layout.\n\n */\n\npublic class SlidingTabLayout extends HorizontalScrollView {\n\n \n\n    /**\n\n     * Allows complete control over the colors drawn in the tab layout. Set with\n\n     * {@link #setCustomTabColorizer(TabColorizer)}.\n\n     */\n\n    public interface TabColorizer {\n\n \n\n        /**\n\n         * @return return the color of the indicator used when {@code position} is selected.\n\n         */\n\n        int getIndicatorColor(int position);\n\n \n\n        /**\n\n         * @return return the color of the divider drawn to the right of {@code position}.\n\n         */\n\n        int getDividerColor(int position);\n\n \n\n    }\n\n \n\n    private static final int TITLE_OFFSET_DIPS = 24;\n\n    private static final int TAB_VIEW_PADDING_DIPS = 16;\n\n    private static final int TAB_VIEW_TEXT_SIZE_SP = 12;\n\n \n\n    private int mTitleOffset;\n\n \n\n    private int mTabViewLayoutId;\n\n    private int mTabViewTextViewId;\n\n \n\n    private ViewPager mViewPager;\n\n    private ViewPager.OnPageChangeListener mViewPagerPageChangeListener;\n\n \n\n    private final SlidingTabStrip mTabStrip;\n\n \n\n    public SlidingTabLayout(Context context) {\n\n        this(context, null);\n\n    }\n\n \n\n    public SlidingTabLayout(Context context, AttributeSet attrs) {\n\n        this(context, attrs, 0);\n\n    }\n\n \n\n    public SlidingTabLayout(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n \n\n        // Disable the Scroll Bar\n\n        setHorizontalScrollBarEnabled(false);\n\n        // Make sure that the Tab Strips fills this View\n\n        setFillViewport(true);\n\n \n\n        mTitleOffset = (int) (TITLE_OFFSET_DIPS * getResources().getDisplayMetrics().density);\n\n \n\n        mTabStrip = new SlidingTabStrip(context);\n\n        addView(mTabStrip, LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);\n\n    }\n\n \n\n    /**\n\n     * Set the custom {@link TabColorizer} to be used.\n\n     *\n\n     * If you only require simple custmisation then you can use\n\n     * {@link #setSelectedIndicatorColors(int...)} and {@link #setDividerColors(int...)} to achieve\n\n     * similar effects.\n\n     */\n\n    public void setCustomTabColorizer(TabColorizer tabColorizer) {\n\n        mTabStrip.setCustomTabColorizer(tabColorizer);\n\n    }\n\n \n\n    /**\n\n     * Sets the colors to be used for indicating the selected tab. These colors are treated as a\n\n     * circular array. Providing one color will mean that all tabs are indicated with the same color.\n\n     */\n\n    public void setSelectedIndicatorColors(int... colors) {\n\n        mTabStrip.setSelectedIndicatorColors(colors);\n\n    }\n\n \n\n    /**\n\n     * Sets the colors to be used for tab dividers. These colors are treated as a circular array.\n\n     * Providing one color will mean that all tabs are indicated with the same color.\n\n     */\n\n    public void setDividerColors(int... colors) {\n\n        mTabStrip.setDividerColors(colors);\n\n    }\n\n \n\n    /**\n\n     * Set the {@link ViewPager.OnPageChangeListener}. When using {@link SlidingTabLayout} you are\n\n     * required to set any {@link ViewPager.OnPageChangeListener} through this method. This is so\n\n     * that the layout can update it's scroll position correctly.\n\n     *\n\n     * @see ViewPager#setOnPageChangeListener(ViewPager.OnPageChangeListener)\n\n     */\n\n    public void setOnPageChangeListener(ViewPager.OnPageChangeListener listener) {\n\n        mViewPagerPageChangeListener = listener;\n\n    }\n\n \n\n    /**\n\n     * Set the custom layout to be inflated for the tab views.\n\n     *\n\n     * @param layoutResId Layout id to be inflated\n\n     * @param textViewId id of the {@link TextView} in the inflated view\n\n     */\n\n    public void setCustomTabView(int layoutResId, int textViewId) {\n\n        mTabViewLayoutId = layoutResId;\n\n        mTabViewTextViewId = textViewId;\n\n    }\n\n \n\n    /**\n\n     * Sets the associated view pager. Note that the assumption here is that the pager content\n\n     * (number of tabs and tab titles) does not change after this call has been made.\n\n     */\n\n    public void setViewPager(ViewPager viewPager) {\n\n        mTabStrip.removeAllViews();\n\n \n\n        mViewPager = viewPager;\n\n        if (viewPager != null) {\n\n            viewPager.setOnPageChangeListener(new InternalViewPagerListener());\n\n            populateTabStrip();\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Create a default view to be used for tabs. This is called if a custom tab view is not set via\n\n     * {@link #setCustomTabView(int, int)}.\n\n     */\n\n    protected TextView createDefaultTabView(Context context) {\n\n        TextView textView = new TextView(context);\n\n        textView.setGravity(Gravity.CENTER);\n\n        textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, TAB_VIEW_TEXT_SIZE_SP);\n\n        textView.setTypeface(Typeface.DEFAULT_BOLD);\n\n \n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {\n\n            // If we're running on Honeycomb or newer, then we can use the Theme's\n\n            // selectableItemBackground to ensure that the View has a pressed state\n\n            TypedValue outValue = new TypedValue();\n\n            getContext().getTheme().resolveAttribute(android.R.attr.selectableItemBackground,\n\n                    outValue, true);\n\n            textView.setBackgroundResource(outValue.resourceId);\n\n        }\n\n \n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {\n\n            // If we're running on ICS or newer, enable all-caps to match the Action Bar tab style\n\n            textView.setAllCaps(true);\n\n        }\n\n \n\n        int padding = (int) (TAB_VIEW_PADDING_DIPS * getResources().getDisplayMetrics().density);\n\n        textView.setPadding(padding, padding, padding, padding);\n\n \n\n        return textView;\n\n    }\n\n \n\n    private void populateTabStrip() {\n\n        final PagerAdapter adapter = mViewPager.getAdapter();\n\n        final View.OnClickListener tabClickListener = new TabClickListener();\n\n \n\n        for (int i = 0; i < adapter.getCount(); i++) {\n\n            View tabView = null;\n\n            TextView tabTitleView = null;\n\n \n\n            if (mTabViewLayoutId != 0) {\n\n                // If there is a custom tab view layout id set, try and inflate it\n\n                tabView = LayoutInflater.from(getContext()).inflate(mTabViewLayoutId, mTabStrip,\n\n                        false);\n\n                tabTitleView = (TextView) tabView.findViewById(mTabViewTextViewId);\n\n            }\n\n \n\n            if (tabView == null) {\n\n                tabView = createDefaultTabView(getContext());\n\n            }\n\n \n\n            if (tabTitleView == null && TextView.class.isInstance(tabView)) {\n\n                tabTitleView = (TextView) tabView;\n\n            }\n\n \n\n            tabTitleView.setText(adapter.getPageTitle(i));\n\n            tabView.setOnClickListener(tabClickListener);\n\n \n\n            mTabStrip.addView(tabView);\n\n        }\n\n    }\n\n \n\n    @Override\n\n    protected void onAttachedToWindow() {\n\n        super.onAttachedToWindow();\n\n \n\n        if (mViewPager != null) {\n\n            scrollToTab(mViewPager.getCurrentItem(), 0);\n\n        }\n\n    }\n\n \n\n    private void scrollToTab(int tabIndex, int positionOffset) {\n\n        final int tabStripChildCount = mTabStrip.getChildCount();\n\n        if (tabStripChildCount == 0 || tabIndex < 0 || tabIndex >= tabStripChildCount) {\n\n            return;\n\n        }\n\n \n\n        View selectedChild = mTabStrip.getChildAt(tabIndex);\n\n        if (selectedChild != null) {\n\n            int targetScrollX = selectedChild.getLeft() + positionOffset;\n\n \n\n            if (tabIndex > 0 || positionOffset > 0) {\n\n                // If we're not at the first child and are mid-scroll, make sure we obey the offset\n\n                targetScrollX -= mTitleOffset;\n\n            }\n\n \n\n            scrollTo(targetScrollX, 0);\n\n        }\n\n    }\n\n \n\n    private class InternalViewPagerListener implements ViewPager.OnPageChangeListener {\n\n        private int mScrollState;\n\n \n\n        @Override\n\n        public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\n\n            int tabStripChildCount = mTabStrip.getChildCount();\n\n            if ((tabStripChildCount == 0) || (position < 0) || (position >= tabStripChildCount)) {\n\n                return;\n\n            }\n\n \n\n            mTabStrip.onViewPagerPageChanged(position, positionOffset);\n\n \n\n            View selectedTitle = mTabStrip.getChildAt(position);\n\n            int extraOffset = (selectedTitle != null)\n\n                    ? (int) (positionOffset * selectedTitle.getWidth())\n\n                    : 0;\n\n            scrollToTab(position, extraOffset);\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageScrolled(position, positionOffset,\n\n                        positionOffsetPixels);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void onPageScrollStateChanged(int state) {\n\n            mScrollState = state;\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageScrollStateChanged(state);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void onPageSelected(int position) {\n\n            if (mScrollState == ViewPager.SCROLL_STATE_IDLE) {\n\n                mTabStrip.onViewPagerPageChanged(position, 0f);\n\n                scrollToTab(position, 0);\n\n            }\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageSelected(position);\n\n            }\n\n        }\n\n \n\n    }\n\n \n\n    private class TabClickListener implements View.OnClickListener {\n\n        @Override\n\n        public void onClick(View v) {\n\n            for (int i = 0; i < mTabStrip.getChildCount(); i++) {\n\n                if (v == mTabStrip.getChildAt(i)) {\n\n                    mViewPager.setCurrentItem(i);\n\n                    return;\n\n                }\n\n            }\n\n        }\n\n    }\n\n \n\n}\n  ","SlidingTabStrip.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.view;\n\n \n\nimport android.R;\n\nimport android.content.Context;\n\nimport android.graphics.Canvas;\n\nimport android.graphics.Color;\n\nimport android.graphics.Paint;\n\nimport android.util.AttributeSet;\n\nimport android.util.TypedValue;\n\nimport android.view.View;\n\nimport android.widget.LinearLayout;\n\n \n\nclass SlidingTabStrip extends LinearLayout {\n\n \n\n    private static final int DEFAULT_BOTTOM_BORDER_THICKNESS_DIPS = 2;\n\n    private static final byte DEFAULT_BOTTOM_BORDER_COLOR_ALPHA = 0x26;\n\n    private static final int SELECTED_INDICATOR_THICKNESS_DIPS = 8;\n\n    private static final int DEFAULT_SELECTED_INDICATOR_COLOR = 0xFF33B5E5;\n\n \n\n    private static final int DEFAULT_DIVIDER_THICKNESS_DIPS = 1;\n\n    private static final byte DEFAULT_DIVIDER_COLOR_ALPHA = 0x20;\n\n    private static final float DEFAULT_DIVIDER_HEIGHT = 0.5f;\n\n \n\n    private final int mBottomBorderThickness;\n\n    private final Paint mBottomBorderPaint;\n\n \n\n    private final int mSelectedIndicatorThickness;\n\n    private final Paint mSelectedIndicatorPaint;\n\n \n\n    private final int mDefaultBottomBorderColor;\n\n \n\n    private final Paint mDividerPaint;\n\n    private final float mDividerHeight;\n\n \n\n    private int mSelectedPosition;\n\n    private float mSelectionOffset;\n\n \n\n    private SlidingTabLayout.TabColorizer mCustomTabColorizer;\n\n    private final SimpleTabColorizer mDefaultTabColorizer;\n\n \n\n    SlidingTabStrip(Context context) {\n\n        this(context, null);\n\n    }\n\n \n\n    SlidingTabStrip(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n        setWillNotDraw(false);\n\n \n\n        final float density = getResources().getDisplayMetrics().density;\n\n \n\n        TypedValue outValue = new TypedValue();\n\n        context.getTheme().resolveAttribute(R.attr.colorForeground, outValue, true);\n\n        final int themeForegroundColor =  outValue.data;\n\n \n\n        mDefaultBottomBorderColor = setColorAlpha(themeForegroundColor,\n\n                DEFAULT_BOTTOM_BORDER_COLOR_ALPHA);\n\n \n\n        mDefaultTabColorizer = new SimpleTabColorizer();\n\n        mDefaultTabColorizer.setIndicatorColors(DEFAULT_SELECTED_INDICATOR_COLOR);\n\n        mDefaultTabColorizer.setDividerColors(setColorAlpha(themeForegroundColor,\n\n                DEFAULT_DIVIDER_COLOR_ALPHA));\n\n \n\n        mBottomBorderThickness = (int) (DEFAULT_BOTTOM_BORDER_THICKNESS_DIPS * density);\n\n        mBottomBorderPaint = new Paint();\n\n        mBottomBorderPaint.setColor(mDefaultBottomBorderColor);\n\n \n\n        mSelectedIndicatorThickness = (int) (SELECTED_INDICATOR_THICKNESS_DIPS * density);\n\n        mSelectedIndicatorPaint = new Paint();\n\n \n\n        mDividerHeight = DEFAULT_DIVIDER_HEIGHT;\n\n        mDividerPaint = new Paint();\n\n        mDividerPaint.setStrokeWidth((int) (DEFAULT_DIVIDER_THICKNESS_DIPS * density));\n\n    }\n\n \n\n    void setCustomTabColorizer(SlidingTabLayout.TabColorizer customTabColorizer) {\n\n        mCustomTabColorizer = customTabColorizer;\n\n        invalidate();\n\n    }\n\n \n\n    void setSelectedIndicatorColors(int... colors) {\n\n        // Make sure that the custom colorizer is removed\n\n        mCustomTabColorizer = null;\n\n        mDefaultTabColorizer.setIndicatorColors(colors);\n\n        invalidate();\n\n    }\n\n \n\n    void setDividerColors(int... colors) {\n\n        // Make sure that the custom colorizer is removed\n\n        mCustomTabColorizer = null;\n\n        mDefaultTabColorizer.setDividerColors(colors);\n\n        invalidate();\n\n    }\n\n \n\n    void onViewPagerPageChanged(int position, float positionOffset) {\n\n        mSelectedPosition = position;\n\n        mSelectionOffset = positionOffset;\n\n        invalidate();\n\n    }\n\n \n\n    @Override\n\n    protected void onDraw(Canvas canvas) {\n\n        final int height = getHeight();\n\n        final int childCount = getChildCount();\n\n        final int dividerHeightPx = (int) (Math.min(Math.max(0f, mDividerHeight), 1f) * height);\n\n        final SlidingTabLayout.TabColorizer tabColorizer = mCustomTabColorizer != null\n\n                ? mCustomTabColorizer\n\n                : mDefaultTabColorizer;\n\n \n\n        // Thick colored underline below the current selection\n\n        if (childCount > 0) {\n\n            View selectedTitle = getChildAt(mSelectedPosition);\n\n            int left = selectedTitle.getLeft();\n\n            int right = selectedTitle.getRight();\n\n            int color = tabColorizer.getIndicatorColor(mSelectedPosition);\n\n \n\n            if (mSelectionOffset > 0f && mSelectedPosition < (getChildCount() - 1)) {\n\n                int nextColor = tabColorizer.getIndicatorColor(mSelectedPosition + 1);\n\n                if (color != nextColor) {\n\n                    color = blendColors(nextColor, color, mSelectionOffset);\n\n                }\n\n \n\n                // Draw the selection partway between the tabs\n\n                View nextTitle = getChildAt(mSelectedPosition + 1);\n\n                left = (int) (mSelectionOffset * nextTitle.getLeft() +\n\n                        (1.0f - mSelectionOffset) * left);\n\n                right = (int) (mSelectionOffset * nextTitle.getRight() +\n\n                        (1.0f - mSelectionOffset) * right);\n\n            }\n\n \n\n            mSelectedIndicatorPaint.setColor(color);\n\n \n\n            canvas.drawRect(left, height - mSelectedIndicatorThickness, right,\n\n                    height, mSelectedIndicatorPaint);\n\n        }\n\n \n\n        // Thin underline along the entire bottom edge\n\n        canvas.drawRect(0, height - mBottomBorderThickness, getWidth(), height, mBottomBorderPaint);\n\n \n\n        // Vertical separators between the titles\n\n        int separatorTop = (height - dividerHeightPx) / 2;\n\n        for (int i = 0; i < childCount - 1; i++) {\n\n            View child = getChildAt(i);\n\n            mDividerPaint.setColor(tabColorizer.getDividerColor(i));\n\n            canvas.drawLine(child.getRight(), separatorTop, child.getRight(),\n\n                    separatorTop + dividerHeightPx, mDividerPaint);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Set the alpha value of the {@code color} to be the given {@code alpha} value.\n\n     */\n\n    private static int setColorAlpha(int color, byte alpha) {\n\n        return Color.argb(alpha, Color.red(color), Color.green(color), Color.blue(color));\n\n    }\n\n \n\n    /**\n\n     * Blend {@code color1} and {@code color2} using the given ratio.\n\n     *\n\n     * @param ratio of which to blend. 1.0 will return {@code color1}, 0.5 will give an even blend,\n\n     *              0.0 will return {@code color2}.\n\n     */\n\n    private static int blendColors(int color1, int color2, float ratio) {\n\n        final float inverseRation = 1f - ratio;\n\n        float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRation);\n\n        float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRation);\n\n        float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRation);\n\n        return Color.rgb((int) r, (int) g, (int) b);\n\n    }\n\n \n\n    private static class SimpleTabColorizer implements SlidingTabLayout.TabColorizer {\n\n        private int[] mIndicatorColors;\n\n        private int[] mDividerColors;\n\n \n\n        @Override\n\n        public final int getIndicatorColor(int position) {\n\n            return mIndicatorColors[position % mIndicatorColors.length];\n\n        }\n\n \n\n        @Override\n\n        public final int getDividerColor(int position) {\n\n            return mDividerColors[position % mDividerColors.length];\n\n        }\n\n \n\n        void setIndicatorColors(int... colors) {\n\n            mIndicatorColors = colors;\n\n        }\n\n \n\n        void setDividerColors(int... colors) {\n\n            mDividerColors = colors;\n\n        }\n\n    }\n\n}\n  "}},"com.example.android.slidingtabsbasic":{"MainActivity.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.slidingtabsbasic;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentTransaction;\n\nimport android.view.Menu;\n\nimport android.view.MenuItem;\n\nimport android.widget.ViewAnimator;\n\n \n\nimport com.example.android.common.activities.SampleActivityBase;\n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogFragment;\n\nimport com.example.android.common.logger.LogWrapper;\n\nimport com.example.android.common.logger.MessageOnlyLogFilter;\n\n \n\n/**\n\n * A simple launcher activity containing a summary sample description, sample log and a custom\n\n * {@link android.support.v4.app.Fragment} which can display a view.\n\n * <p>\n\n * For devices with displays with a width of 720dp or greater, the sample log is always visible,\n\n * on other devices it's visibility is controlled by an item on the Action Bar.\n\n */\n\npublic class MainActivity extends SampleActivityBase {\n\n \n\n    public static final String TAG = \"MainActivity\";\n\n \n\n    // Whether the Log Fragment is currently shown\n\n    private boolean mLogShown;\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_main);\n\n \n\n        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n\n        SlidingTabsBasicFragment fragment = new SlidingTabsBasicFragment();\n\n        transaction.replace(R.id.sample_content_fragment, fragment);\n\n        transaction.commit();\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        getMenuInflater().inflate(R.menu.main, menu);\n\n        return true;\n\n    }\n\n \n\n    @Override\n\n    public boolean onPrepareOptionsMenu(Menu menu) {\n\n        MenuItem logToggle = menu.findItem(R.id.menu_toggle_log);\n\n        logToggle.setVisible(findViewById(R.id.sample_output) instanceof ViewAnimator);\n\n        logToggle.setTitle(mLogShown ? R.string.sample_hide_log : R.string.sample_show_log);\n\n \n\n        return super.onPrepareOptionsMenu(menu);\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch(item.getItemId()) {\n\n            case R.id.menu_toggle_log:\n\n                mLogShown = !mLogShown;\n\n                ViewAnimator output = (ViewAnimator) findViewById(R.id.sample_output);\n\n                if (mLogShown) {\n\n                    output.setDisplayedChild(1);\n\n                } else {\n\n                    output.setDisplayedChild(0);\n\n                }\n\n                supportInvalidateOptionsMenu();\n\n                return true;\n\n        }\n\n        return super.onOptionsItemSelected(item);\n\n    }\n\n \n\n    /** Create a chain of targets that will receive log data */\n\n    @Override\n\n    public void initializeLogging() {\n\n        // Wraps Android's native log framework.\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        Log.setLogNode(logWrapper);\n\n \n\n        // Filter strips out everything except the message text.\n\n        MessageOnlyLogFilter msgFilter = new MessageOnlyLogFilter();\n\n        logWrapper.setNext(msgFilter);\n\n \n\n        // On screen logging via a fragment with a TextView.\n\n        LogFragment logFragment = (LogFragment) getSupportFragmentManager()\n\n                .findFragmentById(R.id.log_fragment);\n\n        msgFilter.setNext(logFragment.getLogView());\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  ","SlidingTabsBasicFragment.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.slidingtabsbasic;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.view.SlidingTabLayout;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.support.v4.view.PagerAdapter;\n\nimport android.support.v4.view.ViewPager;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.TextView;\n\n \n\n/**\n\n * A basic sample which shows how to use {@link com.example.android.common.view.SlidingTabLayout}\n\n * to display a custom {@link ViewPager} title strip which gives continuous feedback to the user\n\n * when scrolling.\n\n */\n\npublic class SlidingTabsBasicFragment extends Fragment {\n\n \n\n    static final String LOG_TAG = \"SlidingTabsBasicFragment\";\n\n \n\n    /**\n\n     * A custom {@link ViewPager} title strip which looks much like Tabs present in Android v4.0 and\n\n     * above, but is designed to give continuous feedback to the user when scrolling.\n\n     */\n\n    private SlidingTabLayout mSlidingTabLayout;\n\n \n\n    /**\n\n     * A {@link ViewPager} which will be used in conjunction with the {@link SlidingTabLayout} above.\n\n     */\n\n    private ViewPager mViewPager;\n\n \n\n    /**\n\n     * Inflates the {@link View} which will be displayed by this {@link Fragment}, from the app's\n\n     * resources.\n\n     */\n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n            Bundle savedInstanceState) {\n\n        return inflater.inflate(R.layout.fragment_sample, container, false);\n\n    }\n\n \n\n    /**\n\n     * This is called after the {@link #onCreateView(LayoutInflater, ViewGroup, Bundle)} has finished.\n\n     * Here we can pick out the {@link View}s we need to configure from the content view.\n\n     *\n\n     * We set the {@link ViewPager}'s adapter to be an instance of {@link SamplePagerAdapter}. The\n\n     * {@link SlidingTabLayout} is then given the {@link ViewPager} so that it can populate itself.\n\n     *\n\n     * @param view View created in {@link #onCreateView(LayoutInflater, ViewGroup, Bundle)}\n\n     */\n\n    @Override\n\n    public void onViewCreated(View view, Bundle savedInstanceState) {\n\n        // Get the ViewPager and set it's PagerAdapter so that it can display items\n\n        mViewPager = (ViewPager) view.findViewById(R.id.viewpager);\n\n        mViewPager.setAdapter(new SamplePagerAdapter());\n\n \n\n        // Give the SlidingTabLayout the ViewPager, this must be done AFTER the ViewPager has had\n\n        // it's PagerAdapter set.\n\n        mSlidingTabLayout = (SlidingTabLayout) view.findViewById(R.id.sliding_tabs);\n\n        mSlidingTabLayout.setViewPager(mViewPager);\n\n    }\n\n \n\n    /**\n\n     * The {@link android.support.v4.view.PagerAdapter} used to display pages in this sample.\n\n     * The individual pages are simple and just display two lines of text. The important section of\n\n     * this class is the {@link #getPageTitle(int)} method which controls what is displayed in the\n\n     * {@link SlidingTabLayout}.\n\n     */\n\n    class SamplePagerAdapter extends PagerAdapter {\n\n \n\n        /**\n\n         * @return the number of pages to display\n\n         */\n\n        @Override\n\n        public int getCount() {\n\n            return 10;\n\n        }\n\n \n\n        /**\n\n         * @return true if the value returned from {@link #instantiateItem(ViewGroup, int)} is the\n\n         * same object as the {@link View} added to the {@link ViewPager}.\n\n         */\n\n        @Override\n\n        public boolean isViewFromObject(View view, Object o) {\n\n            return o == view;\n\n        }\n\n \n\n        /**\n\n         * Return the title of the item at {@code position}. This is important as what this method\n\n         * returns is what is displayed in the {@link SlidingTabLayout}.\n\n         * <p>\n\n         * Here we construct one using the position value, but for real application the title should\n\n         * refer to the item's contents.\n\n         */\n\n        @Override\n\n        public CharSequence getPageTitle(int position) {\n\n            return \"Item \" + (position + 1);\n\n        }\n\n \n\n        /**\n\n         * Instantiate the {@link View} which should be displayed at {@code position}. Here we\n\n         * inflate a layout from the apps resources and then change the text view to signify the position.\n\n         */\n\n        @Override\n\n        public Object instantiateItem(ViewGroup container, int position) {\n\n            // Inflate a new layout from our resources\n\n            View view = getActivity().getLayoutInflater().inflate(R.layout.pager_item,\n\n                    container, false);\n\n            // Add the newly created View to the ViewPager\n\n            container.addView(view);\n\n \n\n            // Retrieve a TextView from the inflated View, and update it's text\n\n            TextView title = (TextView) view.findViewById(R.id.item_title);\n\n            title.setText(String.valueOf(position + 1));\n\n \n\n            Log.i(LOG_TAG, \"instantiateItem() [position: \" + position + \"]\");\n\n \n\n            // Return the View\n\n            return view;\n\n        }\n\n \n\n        /**\n\n         * Destroy the item from the {@link ViewPager}. In our case this is simply removing the\n\n         * {@link View}.\n\n         */\n\n        @Override\n\n        public void destroyItem(ViewGroup container, int position, Object object) {\n\n            container.removeView((View) object);\n\n            Log.i(LOG_TAG, \"destroyItem() [position: \" + position + \"]\");\n\n        }\n\n \n\n    }\n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.slidingtabsbasic\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk android:minSdkVersion=\"4\" android:targetSdkVersion=\"19\" />\n\n \n\n    <application android:allowBackup=\"true\"\n\n        android:label=\"@string/app_name\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:theme=\"@style/AppTheme\">\n\n \n\n        <activity android:name=\".MainActivity\"\n\n                  android:label=\"@string/app_name\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n \n\n</manifest>\n  "},"SlidingTabsColors":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com//samples/SlidingTabsColors/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com//samples/SlidingTabsColors/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com//samples/SlidingTabsColors/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com//samples/SlidingTabsColors/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com//samples/SlidingTabsColors/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"vertical\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <ViewAnimator\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\"\n\n          android:layout_weight=\"1\">\n\n \n\n        <ScrollView\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingRight=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingTop=\"@dimen/vertical_page_margin\"\n\n                  android:paddingBottom=\"@dimen/vertical_page_margin\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </ScrollView>\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\" />\n\n \n\n    </ViewAnimator>\n\n \n\n    <View\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"1dp\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\" />\n\n \n\n</LinearLayout>\n\n \n  ","fragment_sample.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\"\n\n              android:orientation=\"vertical\">\n\n \n\n    <com.example.android.common.view.SlidingTabLayout\n\n          android:id=\"@+id/sliding_tabs\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"wrap_content\" />\n\n \n\n    <android.support.v4.view.ViewPager\n\n          android:id=\"@+id/viewpager\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\"\n\n          android:layout_weight=\"1\"\n\n          android:background=\"@android:color/white\" />\n\n \n\n</LinearLayout>\n  ","pager_item.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\"\n\n              android:orientation=\"vertical\"\n\n              android:gravity=\"center\">\n\n \n\n    <TextView\n\n          android:id=\"@+id/item_title\"\n\n          android:layout_width=\"wrap_content\"\n\n          android:layout_height=\"wrap_content\"\n\n          android:textAppearance=\"?android:attr/textAppearanceLarge\" />\n\n \n\n    <TextView\n\n          android:id=\"@+id/item_indicator_color\"\n\n          android:layout_width=\"wrap_content\"\n\n          android:layout_height=\"wrap_content\"\n\n          android:textAppearance=\"?android:attr/textAppearanceLarge\" />\n\n \n\n    <TextView\n\n          android:id=\"@+id/item_divider_color\"\n\n          android:layout_width=\"wrap_content\"\n\n          android:layout_height=\"wrap_content\"\n\n          android:textAppearance=\"?android:attr/textAppearanceLarge\" />\n\n \n\n</LinearLayout>\n  "},"layout-w720dp":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"horizontal\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <LinearLayout\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\"\n\n          android:layout_weight=\"1\"\n\n          android:orientation=\"vertical\">\n\n \n\n        <FrameLayout\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"wrap_content\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/margin_medium\"\n\n                  android:paddingRight=\"@dimen/margin_medium\"\n\n                  android:paddingTop=\"@dimen/margin_large\"\n\n                  android:paddingBottom=\"@dimen/margin_large\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </FrameLayout>\n\n \n\n        <View\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"1dp\"\n\n              android:background=\"@android:color/darker_gray\" />\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"0px\"\n\n              android:layout_weight=\"1\" />\n\n \n\n    </LinearLayout>\n\n \n\n    <View\n\n          android:layout_width=\"1dp\"\n\n          android:layout_height=\"match_parent\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\" />\n\n \n\n</LinearLayout>\n\n \n\n \n  "},"menu":{"main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:id=\"@+id/menu_toggle_log\"\n\n          android:showAsAction=\"always\"\n\n          android:title=\"@string/sample_show_log\" />\n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">SlidingTabsColors</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            A more advanced sample which shows how to use SlidingTabLayout to display a custom\n\n            ViewPager title strip, with custom coloring for each tab.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","strings.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<resources>\n\n    <string name=\"sample_show_log\">Show Log</string>\n\n    <string name=\"sample_hide_log\">Hide Log</string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.common":{"activities":{"SampleActivityBase.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\npackage com.example.android.common.activities;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentActivity;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogWrapper;\n\n \n\n/**\n\n * Base launcher activity, to handle most of the common plumbing for samples.\n\n */\n\npublic class SampleActivityBase extends FragmentActivity {\n\n \n\n    public static final String TAG = \"SampleActivityBase\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n    }\n\n \n\n    @Override\n\n    protected  void onStart() {\n\n        super.onStart();\n\n        initializeLogging();\n\n    }\n\n \n\n    /** Set up targets to receive log data */\n\n    public void initializeLogging() {\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        // Wraps Android's native log framework\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        Log.setLogNode(logWrapper);\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "},"logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "},"view":{"SlidingTabLayout.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.view;\n\n \n\nimport android.content.Context;\n\nimport android.graphics.Typeface;\n\nimport android.os.Build;\n\nimport android.support.v4.view.PagerAdapter;\n\nimport android.support.v4.view.ViewPager;\n\nimport android.util.AttributeSet;\n\nimport android.util.TypedValue;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.widget.HorizontalScrollView;\n\nimport android.widget.TextView;\n\n \n\n/**\n\n * To be used with ViewPager to provide a tab indicator component which give constant feedback as to\n\n * the user's scroll progress.\n\n * <p>\n\n * To use the component, simply add it to your view hierarchy. Then in your\n\n * {@link android.app.Activity} or {@link android.support.v4.app.Fragment} call\n\n * {@link #setViewPager(ViewPager)} providing it the ViewPager this layout is being used for.\n\n * <p>\n\n * The colors can be customized in two ways. The first and simplest is to provide an array of colors\n\n * via {@link #setSelectedIndicatorColors(int...)} and {@link #setDividerColors(int...)}. The\n\n * alternative is via the {@link TabColorizer} interface which provides you complete control over\n\n * which color is used for any individual position.\n\n * <p>\n\n * The views used as tabs can be customized by calling {@link #setCustomTabView(int, int)},\n\n * providing the layout ID of your custom layout.\n\n */\n\npublic class SlidingTabLayout extends HorizontalScrollView {\n\n \n\n    /**\n\n     * Allows complete control over the colors drawn in the tab layout. Set with\n\n     * {@link #setCustomTabColorizer(TabColorizer)}.\n\n     */\n\n    public interface TabColorizer {\n\n \n\n        /**\n\n         * @return return the color of the indicator used when {@code position} is selected.\n\n         */\n\n        int getIndicatorColor(int position);\n\n \n\n        /**\n\n         * @return return the color of the divider drawn to the right of {@code position}.\n\n         */\n\n        int getDividerColor(int position);\n\n \n\n    }\n\n \n\n    private static final int TITLE_OFFSET_DIPS = 24;\n\n    private static final int TAB_VIEW_PADDING_DIPS = 16;\n\n    private static final int TAB_VIEW_TEXT_SIZE_SP = 12;\n\n \n\n    private int mTitleOffset;\n\n \n\n    private int mTabViewLayoutId;\n\n    private int mTabViewTextViewId;\n\n \n\n    private ViewPager mViewPager;\n\n    private ViewPager.OnPageChangeListener mViewPagerPageChangeListener;\n\n \n\n    private final SlidingTabStrip mTabStrip;\n\n \n\n    public SlidingTabLayout(Context context) {\n\n        this(context, null);\n\n    }\n\n \n\n    public SlidingTabLayout(Context context, AttributeSet attrs) {\n\n        this(context, attrs, 0);\n\n    }\n\n \n\n    public SlidingTabLayout(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n \n\n        // Disable the Scroll Bar\n\n        setHorizontalScrollBarEnabled(false);\n\n        // Make sure that the Tab Strips fills this View\n\n        setFillViewport(true);\n\n \n\n        mTitleOffset = (int) (TITLE_OFFSET_DIPS * getResources().getDisplayMetrics().density);\n\n \n\n        mTabStrip = new SlidingTabStrip(context);\n\n        addView(mTabStrip, LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);\n\n    }\n\n \n\n    /**\n\n     * Set the custom {@link TabColorizer} to be used.\n\n     *\n\n     * If you only require simple custmisation then you can use\n\n     * {@link #setSelectedIndicatorColors(int...)} and {@link #setDividerColors(int...)} to achieve\n\n     * similar effects.\n\n     */\n\n    public void setCustomTabColorizer(TabColorizer tabColorizer) {\n\n        mTabStrip.setCustomTabColorizer(tabColorizer);\n\n    }\n\n \n\n    /**\n\n     * Sets the colors to be used for indicating the selected tab. These colors are treated as a\n\n     * circular array. Providing one color will mean that all tabs are indicated with the same color.\n\n     */\n\n    public void setSelectedIndicatorColors(int... colors) {\n\n        mTabStrip.setSelectedIndicatorColors(colors);\n\n    }\n\n \n\n    /**\n\n     * Sets the colors to be used for tab dividers. These colors are treated as a circular array.\n\n     * Providing one color will mean that all tabs are indicated with the same color.\n\n     */\n\n    public void setDividerColors(int... colors) {\n\n        mTabStrip.setDividerColors(colors);\n\n    }\n\n \n\n    /**\n\n     * Set the {@link ViewPager.OnPageChangeListener}. When using {@link SlidingTabLayout} you are\n\n     * required to set any {@link ViewPager.OnPageChangeListener} through this method. This is so\n\n     * that the layout can update it's scroll position correctly.\n\n     *\n\n     * @see ViewPager#setOnPageChangeListener(ViewPager.OnPageChangeListener)\n\n     */\n\n    public void setOnPageChangeListener(ViewPager.OnPageChangeListener listener) {\n\n        mViewPagerPageChangeListener = listener;\n\n    }\n\n \n\n    /**\n\n     * Set the custom layout to be inflated for the tab views.\n\n     *\n\n     * @param layoutResId Layout id to be inflated\n\n     * @param textViewId id of the {@link TextView} in the inflated view\n\n     */\n\n    public void setCustomTabView(int layoutResId, int textViewId) {\n\n        mTabViewLayoutId = layoutResId;\n\n        mTabViewTextViewId = textViewId;\n\n    }\n\n \n\n    /**\n\n     * Sets the associated view pager. Note that the assumption here is that the pager content\n\n     * (number of tabs and tab titles) does not change after this call has been made.\n\n     */\n\n    public void setViewPager(ViewPager viewPager) {\n\n        mTabStrip.removeAllViews();\n\n \n\n        mViewPager = viewPager;\n\n        if (viewPager != null) {\n\n            viewPager.setOnPageChangeListener(new InternalViewPagerListener());\n\n            populateTabStrip();\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Create a default view to be used for tabs. This is called if a custom tab view is not set via\n\n     * {@link #setCustomTabView(int, int)}.\n\n     */\n\n    protected TextView createDefaultTabView(Context context) {\n\n        TextView textView = new TextView(context);\n\n        textView.setGravity(Gravity.CENTER);\n\n        textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, TAB_VIEW_TEXT_SIZE_SP);\n\n        textView.setTypeface(Typeface.DEFAULT_BOLD);\n\n \n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {\n\n            // If we're running on Honeycomb or newer, then we can use the Theme's\n\n            // selectableItemBackground to ensure that the View has a pressed state\n\n            TypedValue outValue = new TypedValue();\n\n            getContext().getTheme().resolveAttribute(android.R.attr.selectableItemBackground,\n\n                    outValue, true);\n\n            textView.setBackgroundResource(outValue.resourceId);\n\n        }\n\n \n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {\n\n            // If we're running on ICS or newer, enable all-caps to match the Action Bar tab style\n\n            textView.setAllCaps(true);\n\n        }\n\n \n\n        int padding = (int) (TAB_VIEW_PADDING_DIPS * getResources().getDisplayMetrics().density);\n\n        textView.setPadding(padding, padding, padding, padding);\n\n \n\n        return textView;\n\n    }\n\n \n\n    private void populateTabStrip() {\n\n        final PagerAdapter adapter = mViewPager.getAdapter();\n\n        final View.OnClickListener tabClickListener = new TabClickListener();\n\n \n\n        for (int i = 0; i < adapter.getCount(); i++) {\n\n            View tabView = null;\n\n            TextView tabTitleView = null;\n\n \n\n            if (mTabViewLayoutId != 0) {\n\n                // If there is a custom tab view layout id set, try and inflate it\n\n                tabView = LayoutInflater.from(getContext()).inflate(mTabViewLayoutId, mTabStrip,\n\n                        false);\n\n                tabTitleView = (TextView) tabView.findViewById(mTabViewTextViewId);\n\n            }\n\n \n\n            if (tabView == null) {\n\n                tabView = createDefaultTabView(getContext());\n\n            }\n\n \n\n            if (tabTitleView == null && TextView.class.isInstance(tabView)) {\n\n                tabTitleView = (TextView) tabView;\n\n            }\n\n \n\n            tabTitleView.setText(adapter.getPageTitle(i));\n\n            tabView.setOnClickListener(tabClickListener);\n\n \n\n            mTabStrip.addView(tabView);\n\n        }\n\n    }\n\n \n\n    @Override\n\n    protected void onAttachedToWindow() {\n\n        super.onAttachedToWindow();\n\n \n\n        if (mViewPager != null) {\n\n            scrollToTab(mViewPager.getCurrentItem(), 0);\n\n        }\n\n    }\n\n \n\n    private void scrollToTab(int tabIndex, int positionOffset) {\n\n        final int tabStripChildCount = mTabStrip.getChildCount();\n\n        if (tabStripChildCount == 0 || tabIndex < 0 || tabIndex >= tabStripChildCount) {\n\n            return;\n\n        }\n\n \n\n        View selectedChild = mTabStrip.getChildAt(tabIndex);\n\n        if (selectedChild != null) {\n\n            int targetScrollX = selectedChild.getLeft() + positionOffset;\n\n \n\n            if (tabIndex > 0 || positionOffset > 0) {\n\n                // If we're not at the first child and are mid-scroll, make sure we obey the offset\n\n                targetScrollX -= mTitleOffset;\n\n            }\n\n \n\n            scrollTo(targetScrollX, 0);\n\n        }\n\n    }\n\n \n\n    private class InternalViewPagerListener implements ViewPager.OnPageChangeListener {\n\n        private int mScrollState;\n\n \n\n        @Override\n\n        public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\n\n            int tabStripChildCount = mTabStrip.getChildCount();\n\n            if ((tabStripChildCount == 0) || (position < 0) || (position >= tabStripChildCount)) {\n\n                return;\n\n            }\n\n \n\n            mTabStrip.onViewPagerPageChanged(position, positionOffset);\n\n \n\n            View selectedTitle = mTabStrip.getChildAt(position);\n\n            int extraOffset = (selectedTitle != null)\n\n                    ? (int) (positionOffset * selectedTitle.getWidth())\n\n                    : 0;\n\n            scrollToTab(position, extraOffset);\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageScrolled(position, positionOffset,\n\n                        positionOffsetPixels);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void onPageScrollStateChanged(int state) {\n\n            mScrollState = state;\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageScrollStateChanged(state);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void onPageSelected(int position) {\n\n            if (mScrollState == ViewPager.SCROLL_STATE_IDLE) {\n\n                mTabStrip.onViewPagerPageChanged(position, 0f);\n\n                scrollToTab(position, 0);\n\n            }\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageSelected(position);\n\n            }\n\n        }\n\n \n\n    }\n\n \n\n    private class TabClickListener implements View.OnClickListener {\n\n        @Override\n\n        public void onClick(View v) {\n\n            for (int i = 0; i < mTabStrip.getChildCount(); i++) {\n\n                if (v == mTabStrip.getChildAt(i)) {\n\n                    mViewPager.setCurrentItem(i);\n\n                    return;\n\n                }\n\n            }\n\n        }\n\n    }\n\n \n\n}\n  ","SlidingTabStrip.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.view;\n\n \n\nimport android.R;\n\nimport android.content.Context;\n\nimport android.graphics.Canvas;\n\nimport android.graphics.Color;\n\nimport android.graphics.Paint;\n\nimport android.util.AttributeSet;\n\nimport android.util.TypedValue;\n\nimport android.view.View;\n\nimport android.widget.LinearLayout;\n\n \n\nclass SlidingTabStrip extends LinearLayout {\n\n \n\n    private static final int DEFAULT_BOTTOM_BORDER_THICKNESS_DIPS = 2;\n\n    private static final byte DEFAULT_BOTTOM_BORDER_COLOR_ALPHA = 0x26;\n\n    private static final int SELECTED_INDICATOR_THICKNESS_DIPS = 8;\n\n    private static final int DEFAULT_SELECTED_INDICATOR_COLOR = 0xFF33B5E5;\n\n \n\n    private static final int DEFAULT_DIVIDER_THICKNESS_DIPS = 1;\n\n    private static final byte DEFAULT_DIVIDER_COLOR_ALPHA = 0x20;\n\n    private static final float DEFAULT_DIVIDER_HEIGHT = 0.5f;\n\n \n\n    private final int mBottomBorderThickness;\n\n    private final Paint mBottomBorderPaint;\n\n \n\n    private final int mSelectedIndicatorThickness;\n\n    private final Paint mSelectedIndicatorPaint;\n\n \n\n    private final int mDefaultBottomBorderColor;\n\n \n\n    private final Paint mDividerPaint;\n\n    private final float mDividerHeight;\n\n \n\n    private int mSelectedPosition;\n\n    private float mSelectionOffset;\n\n \n\n    private SlidingTabLayout.TabColorizer mCustomTabColorizer;\n\n    private final SimpleTabColorizer mDefaultTabColorizer;\n\n \n\n    SlidingTabStrip(Context context) {\n\n        this(context, null);\n\n    }\n\n \n\n    SlidingTabStrip(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n        setWillNotDraw(false);\n\n \n\n        final float density = getResources().getDisplayMetrics().density;\n\n \n\n        TypedValue outValue = new TypedValue();\n\n        context.getTheme().resolveAttribute(R.attr.colorForeground, outValue, true);\n\n        final int themeForegroundColor =  outValue.data;\n\n \n\n        mDefaultBottomBorderColor = setColorAlpha(themeForegroundColor,\n\n                DEFAULT_BOTTOM_BORDER_COLOR_ALPHA);\n\n \n\n        mDefaultTabColorizer = new SimpleTabColorizer();\n\n        mDefaultTabColorizer.setIndicatorColors(DEFAULT_SELECTED_INDICATOR_COLOR);\n\n        mDefaultTabColorizer.setDividerColors(setColorAlpha(themeForegroundColor,\n\n                DEFAULT_DIVIDER_COLOR_ALPHA));\n\n \n\n        mBottomBorderThickness = (int) (DEFAULT_BOTTOM_BORDER_THICKNESS_DIPS * density);\n\n        mBottomBorderPaint = new Paint();\n\n        mBottomBorderPaint.setColor(mDefaultBottomBorderColor);\n\n \n\n        mSelectedIndicatorThickness = (int) (SELECTED_INDICATOR_THICKNESS_DIPS * density);\n\n        mSelectedIndicatorPaint = new Paint();\n\n \n\n        mDividerHeight = DEFAULT_DIVIDER_HEIGHT;\n\n        mDividerPaint = new Paint();\n\n        mDividerPaint.setStrokeWidth((int) (DEFAULT_DIVIDER_THICKNESS_DIPS * density));\n\n    }\n\n \n\n    void setCustomTabColorizer(SlidingTabLayout.TabColorizer customTabColorizer) {\n\n        mCustomTabColorizer = customTabColorizer;\n\n        invalidate();\n\n    }\n\n \n\n    void setSelectedIndicatorColors(int... colors) {\n\n        // Make sure that the custom colorizer is removed\n\n        mCustomTabColorizer = null;\n\n        mDefaultTabColorizer.setIndicatorColors(colors);\n\n        invalidate();\n\n    }\n\n \n\n    void setDividerColors(int... colors) {\n\n        // Make sure that the custom colorizer is removed\n\n        mCustomTabColorizer = null;\n\n        mDefaultTabColorizer.setDividerColors(colors);\n\n        invalidate();\n\n    }\n\n \n\n    void onViewPagerPageChanged(int position, float positionOffset) {\n\n        mSelectedPosition = position;\n\n        mSelectionOffset = positionOffset;\n\n        invalidate();\n\n    }\n\n \n\n    @Override\n\n    protected void onDraw(Canvas canvas) {\n\n        final int height = getHeight();\n\n        final int childCount = getChildCount();\n\n        final int dividerHeightPx = (int) (Math.min(Math.max(0f, mDividerHeight), 1f) * height);\n\n        final SlidingTabLayout.TabColorizer tabColorizer = mCustomTabColorizer != null\n\n                ? mCustomTabColorizer\n\n                : mDefaultTabColorizer;\n\n \n\n        // Thick colored underline below the current selection\n\n        if (childCount > 0) {\n\n            View selectedTitle = getChildAt(mSelectedPosition);\n\n            int left = selectedTitle.getLeft();\n\n            int right = selectedTitle.getRight();\n\n            int color = tabColorizer.getIndicatorColor(mSelectedPosition);\n\n \n\n            if (mSelectionOffset > 0f && mSelectedPosition < (getChildCount() - 1)) {\n\n                int nextColor = tabColorizer.getIndicatorColor(mSelectedPosition + 1);\n\n                if (color != nextColor) {\n\n                    color = blendColors(nextColor, color, mSelectionOffset);\n\n                }\n\n \n\n                // Draw the selection partway between the tabs\n\n                View nextTitle = getChildAt(mSelectedPosition + 1);\n\n                left = (int) (mSelectionOffset * nextTitle.getLeft() +\n\n                        (1.0f - mSelectionOffset) * left);\n\n                right = (int) (mSelectionOffset * nextTitle.getRight() +\n\n                        (1.0f - mSelectionOffset) * right);\n\n            }\n\n \n\n            mSelectedIndicatorPaint.setColor(color);\n\n \n\n            canvas.drawRect(left, height - mSelectedIndicatorThickness, right,\n\n                    height, mSelectedIndicatorPaint);\n\n        }\n\n \n\n        // Thin underline along the entire bottom edge\n\n        canvas.drawRect(0, height - mBottomBorderThickness, getWidth(), height, mBottomBorderPaint);\n\n \n\n        // Vertical separators between the titles\n\n        int separatorTop = (height - dividerHeightPx) / 2;\n\n        for (int i = 0; i < childCount - 1; i++) {\n\n            View child = getChildAt(i);\n\n            mDividerPaint.setColor(tabColorizer.getDividerColor(i));\n\n            canvas.drawLine(child.getRight(), separatorTop, child.getRight(),\n\n                    separatorTop + dividerHeightPx, mDividerPaint);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Set the alpha value of the {@code color} to be the given {@code alpha} value.\n\n     */\n\n    private static int setColorAlpha(int color, byte alpha) {\n\n        return Color.argb(alpha, Color.red(color), Color.green(color), Color.blue(color));\n\n    }\n\n \n\n    /**\n\n     * Blend {@code color1} and {@code color2} using the given ratio.\n\n     *\n\n     * @param ratio of which to blend. 1.0 will return {@code color1}, 0.5 will give an even blend,\n\n     *              0.0 will return {@code color2}.\n\n     */\n\n    private static int blendColors(int color1, int color2, float ratio) {\n\n        final float inverseRation = 1f - ratio;\n\n        float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRation);\n\n        float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRation);\n\n        float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRation);\n\n        return Color.rgb((int) r, (int) g, (int) b);\n\n    }\n\n \n\n    private static class SimpleTabColorizer implements SlidingTabLayout.TabColorizer {\n\n        private int[] mIndicatorColors;\n\n        private int[] mDividerColors;\n\n \n\n        @Override\n\n        public final int getIndicatorColor(int position) {\n\n            return mIndicatorColors[position % mIndicatorColors.length];\n\n        }\n\n \n\n        @Override\n\n        public final int getDividerColor(int position) {\n\n            return mDividerColors[position % mDividerColors.length];\n\n        }\n\n \n\n        void setIndicatorColors(int... colors) {\n\n            mIndicatorColors = colors;\n\n        }\n\n \n\n        void setDividerColors(int... colors) {\n\n            mDividerColors = colors;\n\n        }\n\n    }\n\n}\n  "}},"com.example.android.slidingtabscolors":{"ContentFragment.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *       http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.slidingtabscolors;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.TextView;\n\n \n\n/**\n\n * Simple Fragment used to display some meaningful content for each page in the sample's\n\n * {@link android.support.v4.view.ViewPager}.\n\n */\n\npublic class ContentFragment extends Fragment {\n\n \n\n    private static final String KEY_TITLE = \"title\";\n\n    private static final String KEY_INDICATOR_COLOR = \"indicator_color\";\n\n    private static final String KEY_DIVIDER_COLOR = \"divider_color\";\n\n \n\n    /**\n\n     * @return a new instance of {@link ContentFragment}, adding the parameters into a bundle and\n\n     * setting them as arguments.\n\n     */\n\n    public static ContentFragment newInstance(CharSequence title, int indicatorColor,\n\n            int dividerColor) {\n\n        Bundle bundle = new Bundle();\n\n        bundle.putCharSequence(KEY_TITLE, title);\n\n        bundle.putInt(KEY_INDICATOR_COLOR, indicatorColor);\n\n        bundle.putInt(KEY_DIVIDER_COLOR, dividerColor);\n\n \n\n        ContentFragment fragment = new ContentFragment();\n\n        fragment.setArguments(bundle);\n\n \n\n        return fragment;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n            Bundle savedInstanceState) {\n\n        return inflater.inflate(R.layout.pager_item, container, false);\n\n    }\n\n \n\n    @Override\n\n    public void onViewCreated(View view, Bundle savedInstanceState) {\n\n        super.onViewCreated(view, savedInstanceState);\n\n \n\n        Bundle args = getArguments();\n\n \n\n        if (args != null) {\n\n            TextView title = (TextView) view.findViewById(R.id.item_title);\n\n            title.setText(\"Title: \" + args.getCharSequence(KEY_TITLE));\n\n \n\n            int indicatorColor = args.getInt(KEY_INDICATOR_COLOR);\n\n            TextView indicatorColorView = (TextView) view.findViewById(R.id.item_indicator_color);\n\n            indicatorColorView.setText(\"Indicator: #\" + Integer.toHexString(indicatorColor));\n\n            indicatorColorView.setTextColor(indicatorColor);\n\n \n\n            int dividerColor = args.getInt(KEY_DIVIDER_COLOR);\n\n            TextView dividerColorView = (TextView) view.findViewById(R.id.item_divider_color);\n\n            dividerColorView.setText(\"Divider: #\" + Integer.toHexString(dividerColor));\n\n            dividerColorView.setTextColor(dividerColor);\n\n        }\n\n    }\n\n}\n  ","MainActivity.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.slidingtabscolors;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentTransaction;\n\nimport android.view.Menu;\n\nimport android.view.MenuItem;\n\nimport android.widget.ViewAnimator;\n\n \n\nimport com.example.android.common.activities.SampleActivityBase;\n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogFragment;\n\nimport com.example.android.common.logger.LogWrapper;\n\nimport com.example.android.common.logger.MessageOnlyLogFilter;\n\n \n\n/**\n\n * A simple launcher activity containing a summary sample description, sample log and a custom\n\n * {@link android.support.v4.app.Fragment} which can display a view.\n\n * <p>\n\n * For devices with displays with a width of 720dp or greater, the sample log is always visible,\n\n * on other devices it's visibility is controlled by an item on the Action Bar.\n\n */\n\npublic class MainActivity extends SampleActivityBase {\n\n \n\n    public static final String TAG = \"MainActivity\";\n\n \n\n    // Whether the Log Fragment is currently shown\n\n    private boolean mLogShown;\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_main);\n\n \n\n        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n\n        SlidingTabsColorsFragment fragment = new SlidingTabsColorsFragment();\n\n        transaction.replace(R.id.sample_content_fragment, fragment);\n\n        transaction.commit();\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        getMenuInflater().inflate(R.menu.main, menu);\n\n        return true;\n\n    }\n\n \n\n    @Override\n\n    public boolean onPrepareOptionsMenu(Menu menu) {\n\n        MenuItem logToggle = menu.findItem(R.id.menu_toggle_log);\n\n        logToggle.setVisible(findViewById(R.id.sample_output) instanceof ViewAnimator);\n\n        logToggle.setTitle(mLogShown ? R.string.sample_hide_log : R.string.sample_show_log);\n\n \n\n        return super.onPrepareOptionsMenu(menu);\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch(item.getItemId()) {\n\n            case R.id.menu_toggle_log:\n\n                mLogShown = !mLogShown;\n\n                ViewAnimator output = (ViewAnimator) findViewById(R.id.sample_output);\n\n                if (mLogShown) {\n\n                    output.setDisplayedChild(1);\n\n                } else {\n\n                    output.setDisplayedChild(0);\n\n                }\n\n                supportInvalidateOptionsMenu();\n\n                return true;\n\n        }\n\n        return super.onOptionsItemSelected(item);\n\n    }\n\n \n\n    /** Create a chain of targets that will receive log data */\n\n    @Override\n\n    public void initializeLogging() {\n\n        // Wraps Android's native log framework.\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        Log.setLogNode(logWrapper);\n\n \n\n        // Filter strips out everything except the message text.\n\n        MessageOnlyLogFilter msgFilter = new MessageOnlyLogFilter();\n\n        logWrapper.setNext(msgFilter);\n\n \n\n        // On screen logging via a fragment with a TextView.\n\n        LogFragment logFragment = (LogFragment) getSupportFragmentManager()\n\n                .findFragmentById(R.id.log_fragment);\n\n        msgFilter.setNext(logFragment.getLogView());\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  ","SlidingTabsColorsFragment.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *       http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.slidingtabscolors;\n\n \n\nimport com.example.android.common.view.SlidingTabLayout;\n\n \n\nimport android.graphics.Color;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.support.v4.app.FragmentManager;\n\nimport android.support.v4.app.FragmentPagerAdapter;\n\nimport android.support.v4.view.ViewPager;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\n \n\nimport java.util.ArrayList;\n\nimport java.util.List;\n\n \n\n/**\n\n * A basic sample which shows how to use {@link com.example.android.common.view.SlidingTabLayout}\n\n * to display a custom {@link ViewPager} title strip which gives continuous feedback to the user\n\n * when scrolling.\n\n */\n\npublic class SlidingTabsColorsFragment extends Fragment {\n\n \n\n    /**\n\n     * This class represents a tab to be displayed by {@link ViewPager} and it's associated\n\n     * {@link SlidingTabLayout}.\n\n     */\n\n    static class SamplePagerItem {\n\n        private final CharSequence mTitle;\n\n        private final int mIndicatorColor;\n\n        private final int mDividerColor;\n\n \n\n        SamplePagerItem(CharSequence title, int indicatorColor, int dividerColor) {\n\n            mTitle = title;\n\n            mIndicatorColor = indicatorColor;\n\n            mDividerColor = dividerColor;\n\n        }\n\n \n\n        /**\n\n         * @return A new {@link Fragment} to be displayed by a {@link ViewPager}\n\n         */\n\n        Fragment createFragment() {\n\n            return ContentFragment.newInstance(mTitle, mIndicatorColor, mDividerColor);\n\n        }\n\n \n\n        /**\n\n         * @return the title which represents this tab. In this sample this is used directly by\n\n         * {@link android.support.v4.view.PagerAdapter#getPageTitle(int)}\n\n         */\n\n        CharSequence getTitle() {\n\n            return mTitle;\n\n        }\n\n \n\n        /**\n\n         * @return the color to be used for indicator on the {@link SlidingTabLayout}\n\n         */\n\n        int getIndicatorColor() {\n\n            return mIndicatorColor;\n\n        }\n\n \n\n        /**\n\n         * @return the color to be used for right divider on the {@link SlidingTabLayout}\n\n         */\n\n        int getDividerColor() {\n\n            return mDividerColor;\n\n        }\n\n    }\n\n \n\n    static final String LOG_TAG = \"SlidingTabsColorsFragment\";\n\n \n\n    /**\n\n     * A custom {@link ViewPager} title strip which looks much like Tabs present in Android v4.0 and\n\n     * above, but is designed to give continuous feedback to the user when scrolling.\n\n     */\n\n    private SlidingTabLayout mSlidingTabLayout;\n\n \n\n    /**\n\n     * A {@link ViewPager} which will be used in conjunction with the {@link SlidingTabLayout} above.\n\n     */\n\n    private ViewPager mViewPager;\n\n \n\n    /**\n\n     * List of {@link SamplePagerItem} which represent this sample's tabs.\n\n     */\n\n    private List<SamplePagerItem> mTabs = new ArrayList<SamplePagerItem>();\n\n \n\n    @Override\n\n    public void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n \n\n        /**\n\n         * Populate our tab list with tabs. Each item contains a title, indicator color and divider\n\n         * color, which are used by {@link SlidingTabLayout}.\n\n         */\n\n        mTabs.add(new SamplePagerItem(\n\n                getString(R.string.tab_stream), // Title\n\n                Color.BLUE, // Indicator color\n\n                Color.GRAY // Divider color\n\n        ));\n\n \n\n        mTabs.add(new SamplePagerItem(\n\n                getString(R.string.tab_messages), // Title\n\n                Color.RED, // Indicator color\n\n                Color.GRAY // Divider color\n\n        ));\n\n \n\n        mTabs.add(new SamplePagerItem(\n\n                getString(R.string.tab_photos), // Title\n\n                Color.YELLOW, // Indicator color\n\n                Color.GRAY // Divider color\n\n        ));\n\n \n\n        mTabs.add(new SamplePagerItem(\n\n                getString(R.string.tab_notifications), // Title\n\n                Color.GREEN, // Indicator color\n\n                Color.GRAY // Divider color\n\n        ));\n\n    }\n\n \n\n    /**\n\n     * Inflates the {@link View} which will be displayed by this {@link Fragment}, from the app's\n\n     * resources.\n\n     */\n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n            Bundle savedInstanceState) {\n\n        return inflater.inflate(R.layout.fragment_sample, container, false);\n\n    }\n\n \n\n    /**\n\n     * This is called after the {@link #onCreateView(LayoutInflater, ViewGroup, Bundle)} has finished.\n\n     * Here we can pick out the {@link View}s we need to configure from the content view.\n\n     *\n\n     * We set the {@link ViewPager}'s adapter to be an instance of\n\n     * {@link SampleFragmentPagerAdapter}. The {@link SlidingTabLayout} is then given the\n\n     * {@link ViewPager} so that it can populate itself.\n\n     *\n\n     * @param view View created in {@link #onCreateView(LayoutInflater, ViewGroup, Bundle)}\n\n     */\n\n    @Override\n\n    public void onViewCreated(View view, Bundle savedInstanceState) {\n\n        // Get the ViewPager and set it's PagerAdapter so that it can display items\n\n        mViewPager = (ViewPager) view.findViewById(R.id.viewpager);\n\n        mViewPager.setAdapter(new SampleFragmentPagerAdapter(getChildFragmentManager()));\n\n \n\n        // Give the SlidingTabLayout the ViewPager, this must be done AFTER the ViewPager has had\n\n        // it's PagerAdapter set.\n\n        mSlidingTabLayout = (SlidingTabLayout) view.findViewById(R.id.sliding_tabs);\n\n        mSlidingTabLayout.setViewPager(mViewPager);\n\n \n\n        // Set a TabColorizer to customize the indicator and divider colors. Here we just retrieve\n\n        // the tab at the position, and return it's set color\n\n        mSlidingTabLayout.setCustomTabColorizer(new SlidingTabLayout.TabColorizer() {\n\n \n\n            @Override\n\n            public int getIndicatorColor(int position) {\n\n                return mTabs.get(position).getIndicatorColor();\n\n            }\n\n \n\n            @Override\n\n            public int getDividerColor(int position) {\n\n                return mTabs.get(position).getDividerColor();\n\n            }\n\n \n\n        });\n\n    }\n\n \n\n    /**\n\n     * The {@link FragmentPagerAdapter} used to display pages in this sample. The individual pages\n\n     * are instances of {@link ContentFragment} which just display three lines of text. Each page is\n\n     * created by the relevant {@link SamplePagerItem} for the requested position.\n\n     * <p>\n\n     * The important section of this class is the {@link #getPageTitle(int)} method which controls\n\n     * what is displayed in the {@link SlidingTabLayout}.\n\n     */\n\n    class SampleFragmentPagerAdapter extends FragmentPagerAdapter {\n\n \n\n        SampleFragmentPagerAdapter(FragmentManager fm) {\n\n            super(fm);\n\n        }\n\n \n\n        /**\n\n         * Return the {@link android.support.v4.app.Fragment} to be displayed at {@code position}.\n\n         * <p>\n\n         * Here we return the value returned from {@link SamplePagerItem#createFragment()}.\n\n         */\n\n        @Override\n\n        public Fragment getItem(int i) {\n\n            return mTabs.get(i).createFragment();\n\n        }\n\n \n\n        @Override\n\n        public int getCount() {\n\n            return mTabs.size();\n\n        }\n\n \n\n        /**\n\n         * Return the title of the item at {@code position}. This is important as what this method\n\n         * returns is what is displayed in the {@link SlidingTabLayout}.\n\n         * <p>\n\n         * Here we return the value returned from {@link SamplePagerItem#getTitle()}.\n\n         */\n\n        @Override\n\n        public CharSequence getPageTitle(int position) {\n\n            return mTabs.get(position).getTitle();\n\n        }\n\n \n\n    }\n\n \n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.slidingtabscolors\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk android:minSdkVersion=\"4\" android:targetSdkVersion=\"19\" />\n\n \n\n    <application android:allowBackup=\"true\"\n\n        android:label=\"@string/app_name\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:theme=\"@style/AppTheme\">\n\n \n\n        <activity android:name=\".MainActivity\"\n\n                  android:label=\"@string/app_name\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n \n\n</manifest>\n  "},"SwipeRefreshLayoutBasic":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com//samples/SwipeRefreshLayoutBasic/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com//samples/SwipeRefreshLayoutBasic/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com//samples/SwipeRefreshLayoutBasic/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com//samples/SwipeRefreshLayoutBasic/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com//samples/SwipeRefreshLayoutBasic/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"vertical\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <ViewAnimator\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\"\n\n          android:layout_weight=\"1\">\n\n \n\n        <ScrollView\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingRight=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingTop=\"@dimen/vertical_page_margin\"\n\n                  android:paddingBottom=\"@dimen/vertical_page_margin\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </ScrollView>\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\" />\n\n \n\n    </ViewAnimator>\n\n \n\n    <View\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"1dp\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\" />\n\n \n\n</LinearLayout>\n\n \n  ","fragment_sample.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n<android.support.v4.widget.SwipeRefreshLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:id=\"@+id/swiperefresh\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\">\n\n \n\n    <ListView\n\n          android:id=\"@android:id/list\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"match_parent\" />\n\n \n\n</android.support.v4.widget.SwipeRefreshLayout>\n  "},"layout-w720dp":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"horizontal\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <LinearLayout\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\"\n\n          android:layout_weight=\"1\"\n\n          android:orientation=\"vertical\">\n\n \n\n        <FrameLayout\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"wrap_content\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/margin_medium\"\n\n                  android:paddingRight=\"@dimen/margin_medium\"\n\n                  android:paddingTop=\"@dimen/margin_large\"\n\n                  android:paddingBottom=\"@dimen/margin_large\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </FrameLayout>\n\n \n\n        <View\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"1dp\"\n\n              android:background=\"@android:color/darker_gray\" />\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"0px\"\n\n              android:layout_weight=\"1\" />\n\n \n\n    </LinearLayout>\n\n \n\n    <View\n\n          android:layout_width=\"1dp\"\n\n          android:layout_height=\"match_parent\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\" />\n\n \n\n</LinearLayout>\n\n \n\n \n  "},"menu":{"main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:id=\"@+id/menu_toggle_log\"\n\n          android:showAsAction=\"always\"\n\n          android:title=\"@string/sample_show_log\" />\n\n</menu>\n  ","main_menu.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n \n\n    <item\n\n          android:id=\"@+id/menu_refresh\"\n\n          android:title=\"@string/menu_refresh\"\n\n          android:showAsAction=\"never\" />\n\n \n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">SwipeRefreshLayoutBasic</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            A basic sample which shows how to use SwipeRefreshLayout to add the \\'swipe-to-refresh\\'\n\n            gesture to a View, enabling the ability to trigger a refresh from swiping down on the view.\n\n            In this sample the View which can be refreshed is a ListView.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","colors.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<resources>\n\n \n\n    <color name=\"swipe_color_1\">#B6DB49</color>\n\n    <color name=\"swipe_color_2\">#99CC00</color>\n\n    <color name=\"swipe_color_3\">#8ABD00</color>\n\n    <color name=\"swipe_color_4\">#7CAF00</color>\n\n \n\n</resources>\n  ","strings.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<resources>\n\n    <string name=\"sample_show_log\">Show Log</string>\n\n    <string name=\"sample_hide_log\">Hide Log</string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.common":{"activities":{"SampleActivityBase.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\npackage com.example.android.common.activities;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentActivity;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogWrapper;\n\n \n\n/**\n\n * Base launcher activity, to handle most of the common plumbing for samples.\n\n */\n\npublic class SampleActivityBase extends FragmentActivity {\n\n \n\n    public static final String TAG = \"SampleActivityBase\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n    }\n\n \n\n    @Override\n\n    protected  void onStart() {\n\n        super.onStart();\n\n        initializeLogging();\n\n    }\n\n \n\n    /** Set up targets to receive log data */\n\n    public void initializeLogging() {\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        // Wraps Android's native log framework\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        Log.setLogNode(logWrapper);\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "},"dummydata":{"Cheeses.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.dummydata;\n\n \n\nimport java.util.ArrayList;\n\nimport java.util.HashSet;\n\nimport java.util.Random;\n\n \n\n/**\n\n * Dummy data.\n\n */\n\npublic class Cheeses {\n\n    static final String[] CHEESES = {\n\n            \"Abbaye de Belloc\", \"Abbaye du Mont des Cats\", \"Abertam\", \"Abondance\", \"Ackawi\",\n\n            \"Acorn\", \"Adelost\", \"Affidelice au Chablis\", \"Afuega'l Pitu\", \"Airag\", \"Airedale\",\n\n            \"Aisy Cendre\", \"Allgauer Emmentaler\", \"Alverca\", \"Ambert\", \"American Cheese\",\n\n            \"Ami du Chambertin\", \"Anejo Enchilado\", \"Anneau du Vic-Bilh\", \"Anthoriro\", \"Appenzell\",\n\n            \"Aragon\", \"Ardi Gasna\", \"Ardrahan\", \"Armenian String\", \"Aromes au Gene de Marc\",\n\n            \"Asadero\", \"Asiago\", \"Aubisque Pyrenees\", \"Autun\", \"Avaxtskyr\", \"Baby Swiss\",\n\n            \"Babybel\", \"Baguette Laonnaise\", \"Bakers\", \"Baladi\", \"Balaton\", \"Bandal\", \"Banon\",\n\n            \"Barry's Bay Cheddar\", \"Basing\", \"Basket Cheese\", \"Bath Cheese\", \"Bavarian Bergkase\",\n\n            \"Baylough\", \"Beaufort\", \"Beauvoorde\", \"Beenleigh Blue\", \"Beer Cheese\", \"Bel Paese\",\n\n            \"Bergader\", \"Bergere Bleue\", \"Berkswell\", \"Beyaz Peynir\", \"Bierkase\", \"Bishop Kennedy\",\n\n            \"Blarney\", \"Bleu d'Auvergne\", \"Bleu de Gex\", \"Bleu de Laqueuille\",\n\n            \"Bleu de Septmoncel\", \"Bleu Des Causses\", \"Blue\", \"Blue Castello\", \"Blue Rathgore\",\n\n            \"Blue Vein (Australian)\", \"Blue Vein Cheeses\", \"Bocconcini\", \"Bocconcini (Australian)\",\n\n            \"Boeren Leidenkaas\", \"Bonchester\", \"Bosworth\", \"Bougon\", \"Boule Du Roves\",\n\n            \"Boulette d'Avesnes\", \"Boursault\", \"Boursin\", \"Bouyssou\", \"Bra\", \"Braudostur\",\n\n            \"Breakfast Cheese\", \"Brebis du Lavort\", \"Brebis du Lochois\", \"Brebis du Puyfaucon\",\n\n            \"Bresse Bleu\", \"Brick\", \"Brie\", \"Brie de Meaux\", \"Brie de Melun\", \"Brillat-Savarin\",\n\n            \"Brin\", \"Brin d' Amour\", \"Brin d'Amour\", \"Brinza (Burduf Brinza)\",\n\n            \"Briquette de Brebis\", \"Briquette du Forez\", \"Broccio\", \"Broccio Demi-Affine\",\n\n            \"Brousse du Rove\", \"Bruder Basil\", \"Brusselae Kaas (Fromage de Bruxelles)\", \"Bryndza\",\n\n            \"Buchette d'Anjou\", \"Buffalo\", \"Burgos\", \"Butte\", \"Butterkase\", \"Button (Innes)\",\n\n            \"Buxton Blue\", \"Cabecou\", \"Caboc\", \"Cabrales\", \"Cachaille\", \"Caciocavallo\", \"Caciotta\",\n\n            \"Caerphilly\", \"Cairnsmore\", \"Calenzana\", \"Cambazola\", \"Camembert de Normandie\",\n\n            \"Canadian Cheddar\", \"Canestrato\", \"Cantal\", \"Caprice des Dieux\", \"Capricorn Goat\",\n\n            \"Capriole Banon\", \"Carre de l'Est\", \"Casciotta di Urbino\", \"Cashel Blue\", \"Castellano\",\n\n            \"Castelleno\", \"Castelmagno\", \"Castelo Branco\", \"Castigliano\", \"Cathelain\",\n\n            \"Celtic Promise\", \"Cendre d'Olivet\", \"Cerney\", \"Chabichou\", \"Chabichou du Poitou\",\n\n            \"Chabis de Gatine\", \"Chaource\", \"Charolais\", \"Chaumes\", \"Cheddar\",\n\n            \"Cheddar Clothbound\", \"Cheshire\", \"Chevres\", \"Chevrotin des Aravis\", \"Chontaleno\",\n\n            \"Civray\", \"Coeur de Camembert au Calvados\", \"Coeur de Chevre\", \"Colby\", \"Cold Pack\",\n\n            \"Comte\", \"Coolea\", \"Cooleney\", \"Coquetdale\", \"Corleggy\", \"Cornish Pepper\",\n\n            \"Cotherstone\", \"Cotija\", \"Cottage Cheese\", \"Cottage Cheese (Australian)\",\n\n            \"Cougar Gold\", \"Coulommiers\", \"Coverdale\", \"Crayeux de Roncq\", \"Cream Cheese\",\n\n            \"Cream Havarti\", \"Crema Agria\", \"Crema Mexicana\", \"Creme Fraiche\", \"Crescenza\",\n\n            \"Croghan\", \"Crottin de Chavignol\", \"Crottin du Chavignol\", \"Crowdie\", \"Crowley\",\n\n            \"Cuajada\", \"Curd\", \"Cure Nantais\", \"Curworthy\", \"Cwmtawe Pecorino\",\n\n            \"Cypress Grove Chevre\", \"Danablu (Danish Blue)\", \"Danbo\", \"Danish Fontina\",\n\n            \"Daralagjazsky\", \"Dauphin\", \"Delice des Fiouves\", \"Denhany Dorset Drum\", \"Derby\",\n\n            \"Dessertnyj Belyj\", \"Devon Blue\", \"Devon Garland\", \"Dolcelatte\", \"Doolin\",\n\n            \"Doppelrhamstufel\", \"Dorset Blue Vinney\", \"Double Gloucester\", \"Double Worcester\",\n\n            \"Dreux a la Feuille\", \"Dry Jack\", \"Duddleswell\", \"Dunbarra\", \"Dunlop\", \"Dunsyre Blue\",\n\n            \"Duroblando\", \"Durrus\", \"Dutch Mimolette (Commissiekaas)\", \"Edam\", \"Edelpilz\",\n\n            \"Emental Grand Cru\", \"Emlett\", \"Emmental\", \"Epoisses de Bourgogne\", \"Esbareich\",\n\n            \"Esrom\", \"Etorki\", \"Evansdale Farmhouse Brie\", \"Evora De L'Alentejo\", \"Exmoor Blue\",\n\n            \"Explorateur\", \"Feta\", \"Feta (Australian)\", \"Figue\", \"Filetta\", \"Fin-de-Siecle\",\n\n            \"Finlandia Swiss\", \"Finn\", \"Fiore Sardo\", \"Fleur du Maquis\", \"Flor de Guia\",\n\n            \"Flower Marie\", \"Folded\", \"Folded cheese with mint\", \"Fondant de Brebis\",\n\n            \"Fontainebleau\", \"Fontal\", \"Fontina Val d'Aosta\", \"Formaggio di capra\", \"Fougerus\",\n\n            \"Four Herb Gouda\", \"Fourme d' Ambert\", \"Fourme de Haute Loire\", \"Fourme de Montbrison\",\n\n            \"Fresh Jack\", \"Fresh Mozzarella\", \"Fresh Ricotta\", \"Fresh Truffles\", \"Fribourgeois\",\n\n            \"Friesekaas\", \"Friesian\", \"Friesla\", \"Frinault\", \"Fromage a Raclette\", \"Fromage Corse\",\n\n            \"Fromage de Montagne de Savoie\", \"Fromage Frais\", \"Fruit Cream Cheese\",\n\n            \"Frying Cheese\", \"Fynbo\", \"Gabriel\", \"Galette du Paludier\", \"Galette Lyonnaise\",\n\n            \"Galloway Goat's Milk Gems\", \"Gammelost\", \"Gaperon a l'Ail\", \"Garrotxa\", \"Gastanberra\",\n\n            \"Geitost\", \"Gippsland Blue\", \"Gjetost\", \"Gloucester\", \"Golden Cross\", \"Gorgonzola\",\n\n            \"Gornyaltajski\", \"Gospel Green\", \"Gouda\", \"Goutu\", \"Gowrie\", \"Grabetto\", \"Graddost\",\n\n            \"Grafton Village Cheddar\", \"Grana\", \"Grana Padano\", \"Grand Vatel\",\n\n            \"Grataron d' Areches\", \"Gratte-Paille\", \"Graviera\", \"Greuilh\", \"Greve\",\n\n            \"Gris de Lille\", \"Gruyere\", \"Gubbeen\", \"Guerbigny\", \"Halloumi\",\n\n            \"Halloumy (Australian)\", \"Haloumi-Style Cheese\", \"Harbourne Blue\", \"Havarti\",\n\n            \"Heidi Gruyere\", \"Hereford Hop\", \"Herrgardsost\", \"Herriot Farmhouse\", \"Herve\",\n\n            \"Hipi Iti\", \"Hubbardston Blue Cow\", \"Hushallsost\", \"Iberico\", \"Idaho Goatster\",\n\n            \"Idiazabal\", \"Il Boschetto al Tartufo\", \"Ile d'Yeu\", \"Isle of Mull\", \"Jarlsberg\",\n\n            \"Jermi Tortes\", \"Jibneh Arabieh\", \"Jindi Brie\", \"Jubilee Blue\", \"Juustoleipa\",\n\n            \"Kadchgall\", \"Kaseri\", \"Kashta\", \"Kefalotyri\", \"Kenafa\", \"Kernhem\", \"Kervella Affine\",\n\n            \"Kikorangi\", \"King Island Cape Wickham Brie\", \"King River Gold\", \"Klosterkaese\",\n\n            \"Knockalara\", \"Kugelkase\", \"L'Aveyronnais\", \"L'Ecir de l'Aubrac\", \"La Taupiniere\",\n\n            \"La Vache Qui Rit\", \"Laguiole\", \"Lairobell\", \"Lajta\", \"Lanark Blue\", \"Lancashire\",\n\n            \"Langres\", \"Lappi\", \"Laruns\", \"Lavistown\", \"Le Brin\", \"Le Fium Orbo\", \"Le Lacandou\",\n\n            \"Le Roule\", \"Leafield\", \"Lebbene\", \"Leerdammer\", \"Leicester\", \"Leyden\", \"Limburger\",\n\n            \"Lincolnshire Poacher\", \"Lingot Saint Bousquet d'Orb\", \"Liptauer\", \"Little Rydings\",\n\n            \"Livarot\", \"Llanboidy\", \"Llanglofan Farmhouse\", \"Loch Arthur Farmhouse\",\n\n            \"Loddiswell Avondale\", \"Longhorn\", \"Lou Palou\", \"Lou Pevre\", \"Lyonnais\", \"Maasdam\",\n\n            \"Macconais\", \"Mahoe Aged Gouda\", \"Mahon\", \"Malvern\", \"Mamirolle\", \"Manchego\",\n\n            \"Manouri\", \"Manur\", \"Marble Cheddar\", \"Marbled Cheeses\", \"Maredsous\", \"Margotin\",\n\n            \"Maribo\", \"Maroilles\", \"Mascares\", \"Mascarpone\", \"Mascarpone (Australian)\",\n\n            \"Mascarpone Torta\", \"Matocq\", \"Maytag Blue\", \"Meira\", \"Menallack Farmhouse\",\n\n            \"Menonita\", \"Meredith Blue\", \"Mesost\", \"Metton (Cancoillotte)\", \"Meyer Vintage Gouda\",\n\n            \"Mihalic Peynir\", \"Milleens\", \"Mimolette\", \"Mine-Gabhar\", \"Mini Baby Bells\", \"Mixte\",\n\n            \"Molbo\", \"Monastery Cheeses\", \"Mondseer\", \"Mont D'or Lyonnais\", \"Montasio\",\n\n            \"Monterey Jack\", \"Monterey Jack Dry\", \"Morbier\", \"Morbier Cru de Montagne\",\n\n            \"Mothais a la Feuille\", \"Mozzarella\", \"Mozzarella (Australian)\",\n\n            \"Mozzarella di Bufala\", \"Mozzarella Fresh, in water\", \"Mozzarella Rolls\", \"Munster\",\n\n            \"Murol\", \"Mycella\", \"Myzithra\", \"Naboulsi\", \"Nantais\", \"Neufchatel\",\n\n            \"Neufchatel (Australian)\", \"Niolo\", \"Nokkelost\", \"Northumberland\", \"Oaxaca\",\n\n            \"Olde York\", \"Olivet au Foin\", \"Olivet Bleu\", \"Olivet Cendre\",\n\n            \"Orkney Extra Mature Cheddar\", \"Orla\", \"Oschtjepka\", \"Ossau Fermier\", \"Ossau-Iraty\",\n\n            \"Oszczypek\", \"Oxford Blue\", \"P'tit Berrichon\", \"Palet de Babligny\", \"Paneer\", \"Panela\",\n\n            \"Pannerone\", \"Pant ys Gawn\", \"Parmesan (Parmigiano)\", \"Parmigiano Reggiano\",\n\n            \"Pas de l'Escalette\", \"Passendale\", \"Pasteurized Processed\", \"Pate de Fromage\",\n\n            \"Patefine Fort\", \"Pave d'Affinois\", \"Pave d'Auge\", \"Pave de Chirac\", \"Pave du Berry\",\n\n            \"Pecorino\", \"Pecorino in Walnut Leaves\", \"Pecorino Romano\", \"Peekskill Pyramid\",\n\n            \"Pelardon des Cevennes\", \"Pelardon des Corbieres\", \"Penamellera\", \"Penbryn\",\n\n            \"Pencarreg\", \"Perail de Brebis\", \"Petit Morin\", \"Petit Pardou\", \"Petit-Suisse\",\n\n            \"Picodon de Chevre\", \"Picos de Europa\", \"Piora\", \"Pithtviers au Foin\",\n\n            \"Plateau de Herve\", \"Plymouth Cheese\", \"Podhalanski\", \"Poivre d'Ane\", \"Polkolbin\",\n\n            \"Pont l'Eveque\", \"Port Nicholson\", \"Port-Salut\", \"Postel\", \"Pouligny-Saint-Pierre\",\n\n            \"Pourly\", \"Prastost\", \"Pressato\", \"Prince-Jean\", \"Processed Cheddar\", \"Provolone\",\n\n            \"Provolone (Australian)\", \"Pyengana Cheddar\", \"Pyramide\", \"Quark\",\n\n            \"Quark (Australian)\", \"Quartirolo Lombardo\", \"Quatre-Vents\", \"Quercy Petit\",\n\n            \"Queso Blanco\", \"Queso Blanco con Frutas --Pina y Mango\", \"Queso de Murcia\",\n\n            \"Queso del Montsec\", \"Queso del Tietar\", \"Queso Fresco\", \"Queso Fresco (Adobera)\",\n\n            \"Queso Iberico\", \"Queso Jalapeno\", \"Queso Majorero\", \"Queso Media Luna\",\n\n            \"Queso Para Frier\", \"Queso Quesadilla\", \"Rabacal\", \"Raclette\", \"Ragusano\", \"Raschera\",\n\n            \"Reblochon\", \"Red Leicester\", \"Regal de la Dombes\", \"Reggianito\", \"Remedou\",\n\n            \"Requeson\", \"Richelieu\", \"Ricotta\", \"Ricotta (Australian)\", \"Ricotta Salata\", \"Ridder\",\n\n            \"Rigotte\", \"Rocamadour\", \"Rollot\", \"Romano\", \"Romans Part Dieu\", \"Roncal\", \"Roquefort\",\n\n            \"Roule\", \"Rouleau De Beaulieu\", \"Royalp Tilsit\", \"Rubens\", \"Rustinu\", \"Saaland Pfarr\",\n\n            \"Saanenkaese\", \"Saga\", \"Sage Derby\", \"Sainte Maure\", \"Saint-Marcellin\",\n\n            \"Saint-Nectaire\", \"Saint-Paulin\", \"Salers\", \"Samso\", \"San Simon\", \"Sancerre\",\n\n            \"Sap Sago\", \"Sardo\", \"Sardo Egyptian\", \"Sbrinz\", \"Scamorza\", \"Schabzieger\", \"Schloss\",\n\n            \"Selles sur Cher\", \"Selva\", \"Serat\", \"Seriously Strong Cheddar\", \"Serra da Estrela\",\n\n            \"Sharpam\", \"Shelburne Cheddar\", \"Shropshire Blue\", \"Siraz\", \"Sirene\", \"Smoked Gouda\",\n\n            \"Somerset Brie\", \"Sonoma Jack\", \"Sottocenare al Tartufo\", \"Soumaintrain\",\n\n            \"Sourire Lozerien\", \"Spenwood\", \"Sraffordshire Organic\", \"St. Agur Blue Cheese\",\n\n            \"Stilton\", \"Stinking Bishop\", \"String\", \"Sussex Slipcote\", \"Sveciaost\", \"Swaledale\",\n\n            \"Sweet Style Swiss\", \"Swiss\", \"Syrian (Armenian String)\", \"Tala\", \"Taleggio\", \"Tamie\",\n\n            \"Tasmania Highland Chevre Log\", \"Taupiniere\", \"Teifi\", \"Telemea\", \"Testouri\",\n\n            \"Tete de Moine\", \"Tetilla\", \"Texas Goat Cheese\", \"Tibet\", \"Tillamook Cheddar\",\n\n            \"Tilsit\", \"Timboon Brie\", \"Toma\", \"Tomme Brulee\", \"Tomme d'Abondance\",\n\n            \"Tomme de Chevre\", \"Tomme de Romans\", \"Tomme de Savoie\", \"Tomme des Chouans\", \"Tommes\",\n\n            \"Torta del Casar\", \"Toscanello\", \"Touree de L'Aubier\", \"Tourmalet\",\n\n            \"Trappe (Veritable)\", \"Trois Cornes De Vendee\", \"Tronchon\", \"Trou du Cru\", \"Truffe\",\n\n            \"Tupi\", \"Turunmaa\", \"Tymsboro\", \"Tyn Grug\", \"Tyning\", \"Ubriaco\", \"Ulloa\",\n\n            \"Vacherin-Fribourgeois\", \"Valencay\", \"Vasterbottenost\", \"Venaco\", \"Vendomois\",\n\n            \"Vieux Corse\", \"Vignotte\", \"Vulscombe\", \"Waimata Farmhouse Blue\",\n\n            \"Washed Rind Cheese (Australian)\", \"Waterloo\", \"Weichkaese\", \"Wellington\",\n\n            \"Wensleydale\", \"White Stilton\", \"Whitestone Farmhouse\", \"Wigmore\", \"Woodside Cabecou\",\n\n            \"Xanadu\", \"Xynotyro\", \"Yarg Cornish\", \"Yarra Valley Pyramid\", \"Yorkshire Blue\",\n\n            \"Zamorano\", \"Zanetti Grana Padano\", \"Zanetti Parmigiano Reggiano\"\n\n    };\n\n \n\n    public static ArrayList<String> asList() {\n\n        ArrayList<String> items = new ArrayList<String>();\n\n        for (int i = 0, z = CHEESES.length ; i < z ; i++) {\n\n            items.add(CHEESES[i]);\n\n        }\n\n        return items;\n\n    }\n\n \n\n    /**\n\n     * Return a list of random cheeses.\n\n     *\n\n     * @param count the amount of cheeses to return.\n\n     */\n\n    public static ArrayList<String> randomList(int count) {\n\n        Random random = new Random();\n\n        HashSet<String> items = new HashSet<String>();\n\n \n\n        // Make sure that don't infinity loop\n\n        count = Math.min(count, CHEESES.length);\n\n \n\n        while (items.size() < count) {\n\n            items.add(CHEESES[random.nextInt(CHEESES.length)]);\n\n        }\n\n \n\n        return new ArrayList<String>(items);\n\n    }\n\n}\n  "},"logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "},"view":{"SlidingTabLayout.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.view;\n\n \n\nimport android.content.Context;\n\nimport android.graphics.Typeface;\n\nimport android.os.Build;\n\nimport android.support.v4.view.PagerAdapter;\n\nimport android.support.v4.view.ViewPager;\n\nimport android.util.AttributeSet;\n\nimport android.util.TypedValue;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.widget.HorizontalScrollView;\n\nimport android.widget.TextView;\n\n \n\n/**\n\n * To be used with ViewPager to provide a tab indicator component which give constant feedback as to\n\n * the user's scroll progress.\n\n * <p>\n\n * To use the component, simply add it to your view hierarchy. Then in your\n\n * {@link android.app.Activity} or {@link android.support.v4.app.Fragment} call\n\n * {@link #setViewPager(ViewPager)} providing it the ViewPager this layout is being used for.\n\n * <p>\n\n * The colors can be customized in two ways. The first and simplest is to provide an array of colors\n\n * via {@link #setSelectedIndicatorColors(int...)} and {@link #setDividerColors(int...)}. The\n\n * alternative is via the {@link TabColorizer} interface which provides you complete control over\n\n * which color is used for any individual position.\n\n * <p>\n\n * The views used as tabs can be customized by calling {@link #setCustomTabView(int, int)},\n\n * providing the layout ID of your custom layout.\n\n */\n\npublic class SlidingTabLayout extends HorizontalScrollView {\n\n \n\n    /**\n\n     * Allows complete control over the colors drawn in the tab layout. Set with\n\n     * {@link #setCustomTabColorizer(TabColorizer)}.\n\n     */\n\n    public interface TabColorizer {\n\n \n\n        /**\n\n         * @return return the color of the indicator used when {@code position} is selected.\n\n         */\n\n        int getIndicatorColor(int position);\n\n \n\n        /**\n\n         * @return return the color of the divider drawn to the right of {@code position}.\n\n         */\n\n        int getDividerColor(int position);\n\n \n\n    }\n\n \n\n    private static final int TITLE_OFFSET_DIPS = 24;\n\n    private static final int TAB_VIEW_PADDING_DIPS = 16;\n\n    private static final int TAB_VIEW_TEXT_SIZE_SP = 12;\n\n \n\n    private int mTitleOffset;\n\n \n\n    private int mTabViewLayoutId;\n\n    private int mTabViewTextViewId;\n\n \n\n    private ViewPager mViewPager;\n\n    private ViewPager.OnPageChangeListener mViewPagerPageChangeListener;\n\n \n\n    private final SlidingTabStrip mTabStrip;\n\n \n\n    public SlidingTabLayout(Context context) {\n\n        this(context, null);\n\n    }\n\n \n\n    public SlidingTabLayout(Context context, AttributeSet attrs) {\n\n        this(context, attrs, 0);\n\n    }\n\n \n\n    public SlidingTabLayout(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n \n\n        // Disable the Scroll Bar\n\n        setHorizontalScrollBarEnabled(false);\n\n        // Make sure that the Tab Strips fills this View\n\n        setFillViewport(true);\n\n \n\n        mTitleOffset = (int) (TITLE_OFFSET_DIPS * getResources().getDisplayMetrics().density);\n\n \n\n        mTabStrip = new SlidingTabStrip(context);\n\n        addView(mTabStrip, LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);\n\n    }\n\n \n\n    /**\n\n     * Set the custom {@link TabColorizer} to be used.\n\n     *\n\n     * If you only require simple custmisation then you can use\n\n     * {@link #setSelectedIndicatorColors(int...)} and {@link #setDividerColors(int...)} to achieve\n\n     * similar effects.\n\n     */\n\n    public void setCustomTabColorizer(TabColorizer tabColorizer) {\n\n        mTabStrip.setCustomTabColorizer(tabColorizer);\n\n    }\n\n \n\n    /**\n\n     * Sets the colors to be used for indicating the selected tab. These colors are treated as a\n\n     * circular array. Providing one color will mean that all tabs are indicated with the same color.\n\n     */\n\n    public void setSelectedIndicatorColors(int... colors) {\n\n        mTabStrip.setSelectedIndicatorColors(colors);\n\n    }\n\n \n\n    /**\n\n     * Sets the colors to be used for tab dividers. These colors are treated as a circular array.\n\n     * Providing one color will mean that all tabs are indicated with the same color.\n\n     */\n\n    public void setDividerColors(int... colors) {\n\n        mTabStrip.setDividerColors(colors);\n\n    }\n\n \n\n    /**\n\n     * Set the {@link ViewPager.OnPageChangeListener}. When using {@link SlidingTabLayout} you are\n\n     * required to set any {@link ViewPager.OnPageChangeListener} through this method. This is so\n\n     * that the layout can update it's scroll position correctly.\n\n     *\n\n     * @see ViewPager#setOnPageChangeListener(ViewPager.OnPageChangeListener)\n\n     */\n\n    public void setOnPageChangeListener(ViewPager.OnPageChangeListener listener) {\n\n        mViewPagerPageChangeListener = listener;\n\n    }\n\n \n\n    /**\n\n     * Set the custom layout to be inflated for the tab views.\n\n     *\n\n     * @param layoutResId Layout id to be inflated\n\n     * @param textViewId id of the {@link TextView} in the inflated view\n\n     */\n\n    public void setCustomTabView(int layoutResId, int textViewId) {\n\n        mTabViewLayoutId = layoutResId;\n\n        mTabViewTextViewId = textViewId;\n\n    }\n\n \n\n    /**\n\n     * Sets the associated view pager. Note that the assumption here is that the pager content\n\n     * (number of tabs and tab titles) does not change after this call has been made.\n\n     */\n\n    public void setViewPager(ViewPager viewPager) {\n\n        mTabStrip.removeAllViews();\n\n \n\n        mViewPager = viewPager;\n\n        if (viewPager != null) {\n\n            viewPager.setOnPageChangeListener(new InternalViewPagerListener());\n\n            populateTabStrip();\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Create a default view to be used for tabs. This is called if a custom tab view is not set via\n\n     * {@link #setCustomTabView(int, int)}.\n\n     */\n\n    protected TextView createDefaultTabView(Context context) {\n\n        TextView textView = new TextView(context);\n\n        textView.setGravity(Gravity.CENTER);\n\n        textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, TAB_VIEW_TEXT_SIZE_SP);\n\n        textView.setTypeface(Typeface.DEFAULT_BOLD);\n\n \n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {\n\n            // If we're running on Honeycomb or newer, then we can use the Theme's\n\n            // selectableItemBackground to ensure that the View has a pressed state\n\n            TypedValue outValue = new TypedValue();\n\n            getContext().getTheme().resolveAttribute(android.R.attr.selectableItemBackground,\n\n                    outValue, true);\n\n            textView.setBackgroundResource(outValue.resourceId);\n\n        }\n\n \n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {\n\n            // If we're running on ICS or newer, enable all-caps to match the Action Bar tab style\n\n            textView.setAllCaps(true);\n\n        }\n\n \n\n        int padding = (int) (TAB_VIEW_PADDING_DIPS * getResources().getDisplayMetrics().density);\n\n        textView.setPadding(padding, padding, padding, padding);\n\n \n\n        return textView;\n\n    }\n\n \n\n    private void populateTabStrip() {\n\n        final PagerAdapter adapter = mViewPager.getAdapter();\n\n        final View.OnClickListener tabClickListener = new TabClickListener();\n\n \n\n        for (int i = 0; i < adapter.getCount(); i++) {\n\n            View tabView = null;\n\n            TextView tabTitleView = null;\n\n \n\n            if (mTabViewLayoutId != 0) {\n\n                // If there is a custom tab view layout id set, try and inflate it\n\n                tabView = LayoutInflater.from(getContext()).inflate(mTabViewLayoutId, mTabStrip,\n\n                        false);\n\n                tabTitleView = (TextView) tabView.findViewById(mTabViewTextViewId);\n\n            }\n\n \n\n            if (tabView == null) {\n\n                tabView = createDefaultTabView(getContext());\n\n            }\n\n \n\n            if (tabTitleView == null && TextView.class.isInstance(tabView)) {\n\n                tabTitleView = (TextView) tabView;\n\n            }\n\n \n\n            tabTitleView.setText(adapter.getPageTitle(i));\n\n            tabView.setOnClickListener(tabClickListener);\n\n \n\n            mTabStrip.addView(tabView);\n\n        }\n\n    }\n\n \n\n    @Override\n\n    protected void onAttachedToWindow() {\n\n        super.onAttachedToWindow();\n\n \n\n        if (mViewPager != null) {\n\n            scrollToTab(mViewPager.getCurrentItem(), 0);\n\n        }\n\n    }\n\n \n\n    private void scrollToTab(int tabIndex, int positionOffset) {\n\n        final int tabStripChildCount = mTabStrip.getChildCount();\n\n        if (tabStripChildCount == 0 || tabIndex < 0 || tabIndex >= tabStripChildCount) {\n\n            return;\n\n        }\n\n \n\n        View selectedChild = mTabStrip.getChildAt(tabIndex);\n\n        if (selectedChild != null) {\n\n            int targetScrollX = selectedChild.getLeft() + positionOffset;\n\n \n\n            if (tabIndex > 0 || positionOffset > 0) {\n\n                // If we're not at the first child and are mid-scroll, make sure we obey the offset\n\n                targetScrollX -= mTitleOffset;\n\n            }\n\n \n\n            scrollTo(targetScrollX, 0);\n\n        }\n\n    }\n\n \n\n    private class InternalViewPagerListener implements ViewPager.OnPageChangeListener {\n\n        private int mScrollState;\n\n \n\n        @Override\n\n        public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\n\n            int tabStripChildCount = mTabStrip.getChildCount();\n\n            if ((tabStripChildCount == 0) || (position < 0) || (position >= tabStripChildCount)) {\n\n                return;\n\n            }\n\n \n\n            mTabStrip.onViewPagerPageChanged(position, positionOffset);\n\n \n\n            View selectedTitle = mTabStrip.getChildAt(position);\n\n            int extraOffset = (selectedTitle != null)\n\n                    ? (int) (positionOffset * selectedTitle.getWidth())\n\n                    : 0;\n\n            scrollToTab(position, extraOffset);\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageScrolled(position, positionOffset,\n\n                        positionOffsetPixels);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void onPageScrollStateChanged(int state) {\n\n            mScrollState = state;\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageScrollStateChanged(state);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void onPageSelected(int position) {\n\n            if (mScrollState == ViewPager.SCROLL_STATE_IDLE) {\n\n                mTabStrip.onViewPagerPageChanged(position, 0f);\n\n                scrollToTab(position, 0);\n\n            }\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageSelected(position);\n\n            }\n\n        }\n\n \n\n    }\n\n \n\n    private class TabClickListener implements View.OnClickListener {\n\n        @Override\n\n        public void onClick(View v) {\n\n            for (int i = 0; i < mTabStrip.getChildCount(); i++) {\n\n                if (v == mTabStrip.getChildAt(i)) {\n\n                    mViewPager.setCurrentItem(i);\n\n                    return;\n\n                }\n\n            }\n\n        }\n\n    }\n\n \n\n}\n  ","SlidingTabStrip.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.view;\n\n \n\nimport android.R;\n\nimport android.content.Context;\n\nimport android.graphics.Canvas;\n\nimport android.graphics.Color;\n\nimport android.graphics.Paint;\n\nimport android.util.AttributeSet;\n\nimport android.util.TypedValue;\n\nimport android.view.View;\n\nimport android.widget.LinearLayout;\n\n \n\nclass SlidingTabStrip extends LinearLayout {\n\n \n\n    private static final int DEFAULT_BOTTOM_BORDER_THICKNESS_DIPS = 2;\n\n    private static final byte DEFAULT_BOTTOM_BORDER_COLOR_ALPHA = 0x26;\n\n    private static final int SELECTED_INDICATOR_THICKNESS_DIPS = 8;\n\n    private static final int DEFAULT_SELECTED_INDICATOR_COLOR = 0xFF33B5E5;\n\n \n\n    private static final int DEFAULT_DIVIDER_THICKNESS_DIPS = 1;\n\n    private static final byte DEFAULT_DIVIDER_COLOR_ALPHA = 0x20;\n\n    private static final float DEFAULT_DIVIDER_HEIGHT = 0.5f;\n\n \n\n    private final int mBottomBorderThickness;\n\n    private final Paint mBottomBorderPaint;\n\n \n\n    private final int mSelectedIndicatorThickness;\n\n    private final Paint mSelectedIndicatorPaint;\n\n \n\n    private final int mDefaultBottomBorderColor;\n\n \n\n    private final Paint mDividerPaint;\n\n    private final float mDividerHeight;\n\n \n\n    private int mSelectedPosition;\n\n    private float mSelectionOffset;\n\n \n\n    private SlidingTabLayout.TabColorizer mCustomTabColorizer;\n\n    private final SimpleTabColorizer mDefaultTabColorizer;\n\n \n\n    SlidingTabStrip(Context context) {\n\n        this(context, null);\n\n    }\n\n \n\n    SlidingTabStrip(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n        setWillNotDraw(false);\n\n \n\n        final float density = getResources().getDisplayMetrics().density;\n\n \n\n        TypedValue outValue = new TypedValue();\n\n        context.getTheme().resolveAttribute(R.attr.colorForeground, outValue, true);\n\n        final int themeForegroundColor =  outValue.data;\n\n \n\n        mDefaultBottomBorderColor = setColorAlpha(themeForegroundColor,\n\n                DEFAULT_BOTTOM_BORDER_COLOR_ALPHA);\n\n \n\n        mDefaultTabColorizer = new SimpleTabColorizer();\n\n        mDefaultTabColorizer.setIndicatorColors(DEFAULT_SELECTED_INDICATOR_COLOR);\n\n        mDefaultTabColorizer.setDividerColors(setColorAlpha(themeForegroundColor,\n\n                DEFAULT_DIVIDER_COLOR_ALPHA));\n\n \n\n        mBottomBorderThickness = (int) (DEFAULT_BOTTOM_BORDER_THICKNESS_DIPS * density);\n\n        mBottomBorderPaint = new Paint();\n\n        mBottomBorderPaint.setColor(mDefaultBottomBorderColor);\n\n \n\n        mSelectedIndicatorThickness = (int) (SELECTED_INDICATOR_THICKNESS_DIPS * density);\n\n        mSelectedIndicatorPaint = new Paint();\n\n \n\n        mDividerHeight = DEFAULT_DIVIDER_HEIGHT;\n\n        mDividerPaint = new Paint();\n\n        mDividerPaint.setStrokeWidth((int) (DEFAULT_DIVIDER_THICKNESS_DIPS * density));\n\n    }\n\n \n\n    void setCustomTabColorizer(SlidingTabLayout.TabColorizer customTabColorizer) {\n\n        mCustomTabColorizer = customTabColorizer;\n\n        invalidate();\n\n    }\n\n \n\n    void setSelectedIndicatorColors(int... colors) {\n\n        // Make sure that the custom colorizer is removed\n\n        mCustomTabColorizer = null;\n\n        mDefaultTabColorizer.setIndicatorColors(colors);\n\n        invalidate();\n\n    }\n\n \n\n    void setDividerColors(int... colors) {\n\n        // Make sure that the custom colorizer is removed\n\n        mCustomTabColorizer = null;\n\n        mDefaultTabColorizer.setDividerColors(colors);\n\n        invalidate();\n\n    }\n\n \n\n    void onViewPagerPageChanged(int position, float positionOffset) {\n\n        mSelectedPosition = position;\n\n        mSelectionOffset = positionOffset;\n\n        invalidate();\n\n    }\n\n \n\n    @Override\n\n    protected void onDraw(Canvas canvas) {\n\n        final int height = getHeight();\n\n        final int childCount = getChildCount();\n\n        final int dividerHeightPx = (int) (Math.min(Math.max(0f, mDividerHeight), 1f) * height);\n\n        final SlidingTabLayout.TabColorizer tabColorizer = mCustomTabColorizer != null\n\n                ? mCustomTabColorizer\n\n                : mDefaultTabColorizer;\n\n \n\n        // Thick colored underline below the current selection\n\n        if (childCount > 0) {\n\n            View selectedTitle = getChildAt(mSelectedPosition);\n\n            int left = selectedTitle.getLeft();\n\n            int right = selectedTitle.getRight();\n\n            int color = tabColorizer.getIndicatorColor(mSelectedPosition);\n\n \n\n            if (mSelectionOffset > 0f && mSelectedPosition < (getChildCount() - 1)) {\n\n                int nextColor = tabColorizer.getIndicatorColor(mSelectedPosition + 1);\n\n                if (color != nextColor) {\n\n                    color = blendColors(nextColor, color, mSelectionOffset);\n\n                }\n\n \n\n                // Draw the selection partway between the tabs\n\n                View nextTitle = getChildAt(mSelectedPosition + 1);\n\n                left = (int) (mSelectionOffset * nextTitle.getLeft() +\n\n                        (1.0f - mSelectionOffset) * left);\n\n                right = (int) (mSelectionOffset * nextTitle.getRight() +\n\n                        (1.0f - mSelectionOffset) * right);\n\n            }\n\n \n\n            mSelectedIndicatorPaint.setColor(color);\n\n \n\n            canvas.drawRect(left, height - mSelectedIndicatorThickness, right,\n\n                    height, mSelectedIndicatorPaint);\n\n        }\n\n \n\n        // Thin underline along the entire bottom edge\n\n        canvas.drawRect(0, height - mBottomBorderThickness, getWidth(), height, mBottomBorderPaint);\n\n \n\n        // Vertical separators between the titles\n\n        int separatorTop = (height - dividerHeightPx) / 2;\n\n        for (int i = 0; i < childCount - 1; i++) {\n\n            View child = getChildAt(i);\n\n            mDividerPaint.setColor(tabColorizer.getDividerColor(i));\n\n            canvas.drawLine(child.getRight(), separatorTop, child.getRight(),\n\n                    separatorTop + dividerHeightPx, mDividerPaint);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Set the alpha value of the {@code color} to be the given {@code alpha} value.\n\n     */\n\n    private static int setColorAlpha(int color, byte alpha) {\n\n        return Color.argb(alpha, Color.red(color), Color.green(color), Color.blue(color));\n\n    }\n\n \n\n    /**\n\n     * Blend {@code color1} and {@code color2} using the given ratio.\n\n     *\n\n     * @param ratio of which to blend. 1.0 will return {@code color1}, 0.5 will give an even blend,\n\n     *              0.0 will return {@code color2}.\n\n     */\n\n    private static int blendColors(int color1, int color2, float ratio) {\n\n        final float inverseRation = 1f - ratio;\n\n        float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRation);\n\n        float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRation);\n\n        float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRation);\n\n        return Color.rgb((int) r, (int) g, (int) b);\n\n    }\n\n \n\n    private static class SimpleTabColorizer implements SlidingTabLayout.TabColorizer {\n\n        private int[] mIndicatorColors;\n\n        private int[] mDividerColors;\n\n \n\n        @Override\n\n        public final int getIndicatorColor(int position) {\n\n            return mIndicatorColors[position % mIndicatorColors.length];\n\n        }\n\n \n\n        @Override\n\n        public final int getDividerColor(int position) {\n\n            return mDividerColors[position % mDividerColors.length];\n\n        }\n\n \n\n        void setIndicatorColors(int... colors) {\n\n            mIndicatorColors = colors;\n\n        }\n\n \n\n        void setDividerColors(int... colors) {\n\n            mDividerColors = colors;\n\n        }\n\n    }\n\n}\n  "}},"com.example.android.swiperefreshlayoutbasic":{"MainActivity.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.swiperefreshlayoutbasic;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentTransaction;\n\nimport android.view.Menu;\n\nimport android.view.MenuItem;\n\nimport android.widget.ViewAnimator;\n\n \n\nimport com.example.android.common.activities.SampleActivityBase;\n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogFragment;\n\nimport com.example.android.common.logger.LogWrapper;\n\nimport com.example.android.common.logger.MessageOnlyLogFilter;\n\n \n\n/**\n\n * A simple launcher activity containing a summary sample description, sample log and a custom\n\n * {@link android.support.v4.app.Fragment} which can display a view.\n\n * <p>\n\n * For devices with displays with a width of 720dp or greater, the sample log is always visible,\n\n * on other devices it's visibility is controlled by an item on the Action Bar.\n\n */\n\npublic class MainActivity extends SampleActivityBase {\n\n \n\n    public static final String TAG = \"MainActivity\";\n\n \n\n    // Whether the Log Fragment is currently shown\n\n    private boolean mLogShown;\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_main);\n\n \n\n        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n\n        SwipeRefreshLayoutBasicFragment fragment = new SwipeRefreshLayoutBasicFragment();\n\n        transaction.replace(R.id.sample_content_fragment, fragment);\n\n        transaction.commit();\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        getMenuInflater().inflate(R.menu.main, menu);\n\n        return true;\n\n    }\n\n \n\n    @Override\n\n    public boolean onPrepareOptionsMenu(Menu menu) {\n\n        MenuItem logToggle = menu.findItem(R.id.menu_toggle_log);\n\n        logToggle.setVisible(findViewById(R.id.sample_output) instanceof ViewAnimator);\n\n        logToggle.setTitle(mLogShown ? R.string.sample_hide_log : R.string.sample_show_log);\n\n \n\n        return super.onPrepareOptionsMenu(menu);\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch(item.getItemId()) {\n\n            case R.id.menu_toggle_log:\n\n                mLogShown = !mLogShown;\n\n                ViewAnimator output = (ViewAnimator) findViewById(R.id.sample_output);\n\n                if (mLogShown) {\n\n                    output.setDisplayedChild(1);\n\n                } else {\n\n                    output.setDisplayedChild(0);\n\n                }\n\n                supportInvalidateOptionsMenu();\n\n                return true;\n\n        }\n\n        return super.onOptionsItemSelected(item);\n\n    }\n\n \n\n    /** Create a chain of targets that will receive log data */\n\n    @Override\n\n    public void initializeLogging() {\n\n        // Wraps Android's native log framework.\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        Log.setLogNode(logWrapper);\n\n \n\n        // Filter strips out everything except the message text.\n\n        MessageOnlyLogFilter msgFilter = new MessageOnlyLogFilter();\n\n        logWrapper.setNext(msgFilter);\n\n \n\n        // On screen logging via a fragment with a TextView.\n\n        LogFragment logFragment = (LogFragment) getSupportFragmentManager()\n\n                .findFragmentById(R.id.log_fragment);\n\n        msgFilter.setNext(logFragment.getLogView());\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  ","SwipeRefreshLayoutBasicFragment.java":"\n    \n\n/*\n\n * Copyright 2014 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *       http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.swiperefreshlayoutbasic;\n\n \n\nimport com.example.android.common.dummydata.Cheeses;\n\nimport com.example.android.common.logger.Log;\n\n \n\nimport android.os.AsyncTask;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.support.v4.widget.SwipeRefreshLayout;\n\nimport android.view.LayoutInflater;\n\nimport android.view.Menu;\n\nimport android.view.MenuInflater;\n\nimport android.view.MenuItem;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ArrayAdapter;\n\nimport android.widget.ListView;\n\n \n\nimport java.util.List;\n\n \n\n/**\n\n * A basic sample that shows how to use {@link android.support.v4.widget.SwipeRefreshLayout} to add\n\n * the 'swipe-to-refresh' gesture to a layout. In this sample, SwipeRefreshLayout contains a\n\n * scrollable {@link android.widget.ListView} as its only child.\n\n *\n\n * <p>To provide an accessible way to trigger the refresh, this app also provides a refresh\n\n * action item.\n\n *\n\n * <p>In this sample app, the refresh updates the ListView with a random set of new items.\n\n */\n\npublic class SwipeRefreshLayoutBasicFragment extends Fragment {\n\n \n\n    private static final String LOG_TAG = SwipeRefreshLayoutBasicFragment.class.getSimpleName();\n\n \n\n    private static final int LIST_ITEM_COUNT = 20;\n\n \n\n    /**\n\n     * The {@link android.support.v4.widget.SwipeRefreshLayout} that detects swipe gestures and\n\n     * triggers callbacks in the app.\n\n     */\n\n    private SwipeRefreshLayout mSwipeRefreshLayout;\n\n \n\n    /**\n\n     * The {@link android.widget.ListView} that displays the content that should be refreshed.\n\n     */\n\n    private ListView mListView;\n\n \n\n    /**\n\n     * The {@link android.widget.ListAdapter} used to populate the {@link android.widget.ListView}\n\n     * defined in the previous statement.\n\n     */\n\n    private ArrayAdapter<String> mListAdapter;\n\n \n\n    @Override\n\n    public void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n \n\n        // Notify the system to allow an options menu for this fragment.\n\n        setHasOptionsMenu(true);\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n            Bundle savedInstanceState) {\n\n        View view = inflater.inflate(R.layout.fragment_sample, container, false);\n\n \n\n        // Retrieve the SwipeRefreshLayout and ListView instances\n\n        mSwipeRefreshLayout = (SwipeRefreshLayout) view.findViewById(R.id.swiperefresh);\n\n \n\n        // Set the color scheme of the SwipeRefreshLayout by providing 4 color resource ids\n\n        mSwipeRefreshLayout.setColorScheme(\n\n                R.color.swipe_color_1, R.color.swipe_color_2,\n\n                R.color.swipe_color_3, R.color.swipe_color_4);\n\n \n\n        // Retrieve the ListView\n\n        mListView = (ListView) view.findViewById(android.R.id.list);\n\n \n\n        return view;\n\n    }\n\n \n\n    @Override\n\n    public void onViewCreated(View view, Bundle savedInstanceState) {\n\n        super.onViewCreated(view, savedInstanceState);\n\n \n\n        /**\n\n         * Create an ArrayAdapter to contain the data for the ListView. Each item in the ListView\n\n         * uses the system-defined simple_list_item_1 layout that contains one TextView.\n\n         */\n\n        mListAdapter = new ArrayAdapter<String>(\n\n                getActivity(),\n\n                android.R.layout.simple_list_item_1,\n\n                android.R.id.text1,\n\n                Cheeses.randomList(LIST_ITEM_COUNT));\n\n \n\n        // Set the adapter between the ListView and its backing data.\n\n        mListView.setAdapter(mListAdapter);\n\n \n\n        /**\n\n         * Implement {@link SwipeRefreshLayout.OnRefreshListener}. When users do the \"swipe to\n\n         * refresh\" gesture, SwipeRefreshLayout invokes\n\n         * {@link SwipeRefreshLayout.OnRefreshListener#onRefresh onRefresh()}. In\n\n         * {@link SwipeRefreshLayout.OnRefreshListener#onRefresh onRefresh()}, call a method that\n\n         * refreshes the content. Call the same method in response to the Refresh action from the\n\n         * action bar.\n\n         */\n\n        mSwipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\n\n            @Override\n\n            public void onRefresh() {\n\n                Log.i(LOG_TAG, \"onRefresh called from SwipeRefreshLayout\");\n\n \n\n                initiateRefresh();\n\n            }\n\n        });\n\n    }\n\n \n\n    @Override\n\n    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {\n\n        inflater.inflate(R.menu.main_menu, menu);\n\n    }\n\n \n\n    /**\n\n     * Respond to the user's selection of the Refresh action item. Start the SwipeRefreshLayout\n\n     * progress bar, then initiate the background task that refreshes the content.\n\n     */\n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch (item.getItemId()) {\n\n            case R.id.menu_refresh:\n\n                Log.i(LOG_TAG, \"Refresh menu item selected\");\n\n \n\n                // We make sure that the SwipeRefreshLayout is displaying it's refreshing indicator\n\n                if (!mSwipeRefreshLayout.isRefreshing()) {\n\n                    mSwipeRefreshLayout.setRefreshing(true);\n\n                }\n\n \n\n                // Start our refresh background task\n\n                initiateRefresh();\n\n \n\n                return true;\n\n        }\n\n \n\n        return super.onOptionsItemSelected(item);\n\n    }\n\n \n\n    /**\n\n     * By abstracting the refresh process to a single method, the app allows both the\n\n     * SwipeGestureLayout onRefresh() method and the Refresh action item to refresh the content.\n\n     */\n\n    private void initiateRefresh() {\n\n        Log.i(LOG_TAG, \"initiateRefresh\");\n\n \n\n        /**\n\n         * Execute the background task, which uses {@link android.os.AsyncTask} to load the data.\n\n         */\n\n        new DummyBackgroundTask().execute();\n\n    }\n\n \n\n    /**\n\n     * When the AsyncTask finishes, it calls onRefreshComplete(), which updates the data in the\n\n     * ListAdapter and turns off the progress bar.\n\n     */\n\n    private void onRefreshComplete(List<String> result) {\n\n        Log.i(LOG_TAG, \"onRefreshComplete\");\n\n \n\n        // Remove all items from the ListAdapter, and then replace them with the new items\n\n        mListAdapter.clear();\n\n        for (String cheese : result) {\n\n            mListAdapter.add(cheese);\n\n        }\n\n \n\n        // Stop the refreshing indicator\n\n        mSwipeRefreshLayout.setRefreshing(false);\n\n    }\n\n \n\n    /**\n\n     * Dummy {@link AsyncTask} which simulates a long running task to fetch new cheeses.\n\n     */\n\n    private class DummyBackgroundTask extends AsyncTask<Void, Void, List<String>> {\n\n \n\n        static final int TASK_DURATION = 3 * 1000; // 3 seconds\n\n \n\n        @Override\n\n        protected List<String> doInBackground(Void... params) {\n\n            // Sleep for a small amount of time to simulate a background-task\n\n            try {\n\n                Thread.sleep(TASK_DURATION);\n\n            } catch (InterruptedException e) {\n\n                e.printStackTrace();\n\n            }\n\n \n\n            // Return a new random list of cheeses\n\n            return Cheeses.randomList(LIST_ITEM_COUNT);\n\n        }\n\n \n\n        @Override\n\n        protected void onPostExecute(List<String> result) {\n\n            super.onPostExecute(result);\n\n \n\n            // Tell the Fragment that the refresh has completed\n\n            onRefreshComplete(result);\n\n        }\n\n \n\n    }\n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.swiperefreshlayoutbasic\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk android:minSdkVersion=\"10\" android:targetSdkVersion=\"17\" />\n\n \n\n    <application android:allowBackup=\"true\"\n\n        android:label=\"@string/app_name\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:theme=\"@style/AppTheme\">\n\n \n\n        <activity android:name=\".MainActivity\"\n\n                  android:label=\"@string/app_name\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n \n\n</manifest>\n  "},"SwipeRefreshListFragment":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com//samples/SwipeRefreshListFragment/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com//samples/SwipeRefreshListFragment/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com//samples/SwipeRefreshListFragment/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com//samples/SwipeRefreshListFragment/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com//samples/SwipeRefreshListFragment/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"vertical\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <ViewAnimator\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\"\n\n          android:layout_weight=\"1\">\n\n \n\n        <ScrollView\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingRight=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingTop=\"@dimen/vertical_page_margin\"\n\n                  android:paddingBottom=\"@dimen/vertical_page_margin\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </ScrollView>\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\" />\n\n \n\n    </ViewAnimator>\n\n \n\n    <View\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"1dp\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\" />\n\n \n\n</LinearLayout>\n\n \n  "},"layout-w720dp":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"horizontal\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <LinearLayout\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\"\n\n          android:layout_weight=\"1\"\n\n          android:orientation=\"vertical\">\n\n \n\n        <FrameLayout\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"wrap_content\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/margin_medium\"\n\n                  android:paddingRight=\"@dimen/margin_medium\"\n\n                  android:paddingTop=\"@dimen/margin_large\"\n\n                  android:paddingBottom=\"@dimen/margin_large\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </FrameLayout>\n\n \n\n        <View\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"1dp\"\n\n              android:background=\"@android:color/darker_gray\" />\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"0px\"\n\n              android:layout_weight=\"1\" />\n\n \n\n    </LinearLayout>\n\n \n\n    <View\n\n          android:layout_width=\"1dp\"\n\n          android:layout_height=\"match_parent\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\" />\n\n \n\n</LinearLayout>\n\n \n\n \n  "},"menu":{"main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:id=\"@+id/menu_toggle_log\"\n\n          android:showAsAction=\"always\"\n\n          android:title=\"@string/sample_show_log\" />\n\n</menu>\n  ","main_menu.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n \n\n    <!--\n\n        A color scheme menu item used for demonstrating the use of SwipeRefreshLayout's color\n\n        scheme functionality. This kind of menu item should not be incorporated into your app,\n\n        it just to demonstrate the use of color. Instead you should choose a color scheme based\n\n        off of your application's branding.\n\n    -->\n\n    <item\n\n          android:id=\"@+id/menu_color_scheme\"\n\n          android:title=\"@string/menu_color_scheme\"\n\n          android:showAsAction=\"ifRoom\">\n\n        <menu>\n\n            <group android:checkableBehavior=\"single\">\n\n \n\n                <item\n\n                      android:id=\"@+id/menu_color_scheme_1\"\n\n                      android:title=\"@string/menu_color_scheme_1\" />\n\n \n\n                <item\n\n                      android:id=\"@+id/menu_color_scheme_2\"\n\n                      android:title=\"@string/menu_color_scheme_2\" />\n\n \n\n                <item\n\n                      android:id=\"@+id/menu_color_scheme_3\"\n\n                      android:title=\"@string/menu_color_scheme_3\" />\n\n \n\n            </group>\n\n        </menu>\n\n    </item>\n\n \n\n    <!--\n\n        Refresh action item which should be presented in the Action Bar's overflow area\n\n        by setting showAsAction='never'. This is so that users which are not using touch input\n\n        can still perform a refresh.\n\n    -->\n\n    <item\n\n          android:id=\"@+id/menu_refresh\"\n\n          android:title=\"@string/menu_refresh\"\n\n          android:showAsAction=\"never\" />\n\n \n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">SwipeRefreshListFragment</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            A sample which shows how to use SwipeRefreshLayout within a ListFragment to add the\n\n            \\'swipe-to-refresh\\' gesture to a ListView, enabling the ability to trigger a refresh\n\n            from swiping down on that view. This is provided through the re-usable\n\n            SwipeRefreshListFragment class.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","colors.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <!--\n\n        These are the different color schemes to be displayed by the SwipeRefreshLayout's loading\n\n        indicator. It expects exactly four colors.\n\n \n\n        Color scheme #1: a selection of holo colors.\n\n        Color scheme #2: a graduation of holo blue.\n\n        Color scheme #3: a graduation of holo green.\n\n    -->\n\n \n\n    <color name=\"color_scheme_1_1\">#33B5E5</color>\n\n    <color name=\"color_scheme_1_2\">#99CC00</color>\n\n    <color name=\"color_scheme_1_3\">#FFBB33</color>\n\n    <color name=\"color_scheme_1_4\">#FF4444</color>\n\n \n\n    <color name=\"color_scheme_2_1\">#6DCAEC</color>\n\n    <color name=\"color_scheme_2_2\">#33B5E5</color>\n\n    <color name=\"color_scheme_2_3\">#24ADDE</color>\n\n    <color name=\"color_scheme_2_4\">#16A5D7</color>\n\n \n\n    <color name=\"color_scheme_3_1\">#B6DB49</color>\n\n    <color name=\"color_scheme_3_2\">#99CC00</color>\n\n    <color name=\"color_scheme_3_3\">#8ABD00</color>\n\n    <color name=\"color_scheme_3_4\">#7CAF00</color>\n\n \n\n</resources>\n  ","strings.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<resources>\n\n    <string name=\"sample_show_log\">Show Log</string>\n\n    <string name=\"sample_hide_log\">Hide Log</string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.common":{"activities":{"SampleActivityBase.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\npackage com.example.android.common.activities;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentActivity;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogWrapper;\n\n \n\n/**\n\n * Base launcher activity, to handle most of the common plumbing for samples.\n\n */\n\npublic class SampleActivityBase extends FragmentActivity {\n\n \n\n    public static final String TAG = \"SampleActivityBase\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n    }\n\n \n\n    @Override\n\n    protected  void onStart() {\n\n        super.onStart();\n\n        initializeLogging();\n\n    }\n\n \n\n    /** Set up targets to receive log data */\n\n    public void initializeLogging() {\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        // Wraps Android's native log framework\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        Log.setLogNode(logWrapper);\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "},"dummydata":{"Cheeses.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.dummydata;\n\n \n\nimport java.util.ArrayList;\n\nimport java.util.HashSet;\n\nimport java.util.Random;\n\n \n\n/**\n\n * Dummy data.\n\n */\n\npublic class Cheeses {\n\n    static final String[] CHEESES = {\n\n            \"Abbaye de Belloc\", \"Abbaye du Mont des Cats\", \"Abertam\", \"Abondance\", \"Ackawi\",\n\n            \"Acorn\", \"Adelost\", \"Affidelice au Chablis\", \"Afuega'l Pitu\", \"Airag\", \"Airedale\",\n\n            \"Aisy Cendre\", \"Allgauer Emmentaler\", \"Alverca\", \"Ambert\", \"American Cheese\",\n\n            \"Ami du Chambertin\", \"Anejo Enchilado\", \"Anneau du Vic-Bilh\", \"Anthoriro\", \"Appenzell\",\n\n            \"Aragon\", \"Ardi Gasna\", \"Ardrahan\", \"Armenian String\", \"Aromes au Gene de Marc\",\n\n            \"Asadero\", \"Asiago\", \"Aubisque Pyrenees\", \"Autun\", \"Avaxtskyr\", \"Baby Swiss\",\n\n            \"Babybel\", \"Baguette Laonnaise\", \"Bakers\", \"Baladi\", \"Balaton\", \"Bandal\", \"Banon\",\n\n            \"Barry's Bay Cheddar\", \"Basing\", \"Basket Cheese\", \"Bath Cheese\", \"Bavarian Bergkase\",\n\n            \"Baylough\", \"Beaufort\", \"Beauvoorde\", \"Beenleigh Blue\", \"Beer Cheese\", \"Bel Paese\",\n\n            \"Bergader\", \"Bergere Bleue\", \"Berkswell\", \"Beyaz Peynir\", \"Bierkase\", \"Bishop Kennedy\",\n\n            \"Blarney\", \"Bleu d'Auvergne\", \"Bleu de Gex\", \"Bleu de Laqueuille\",\n\n            \"Bleu de Septmoncel\", \"Bleu Des Causses\", \"Blue\", \"Blue Castello\", \"Blue Rathgore\",\n\n            \"Blue Vein (Australian)\", \"Blue Vein Cheeses\", \"Bocconcini\", \"Bocconcini (Australian)\",\n\n            \"Boeren Leidenkaas\", \"Bonchester\", \"Bosworth\", \"Bougon\", \"Boule Du Roves\",\n\n            \"Boulette d'Avesnes\", \"Boursault\", \"Boursin\", \"Bouyssou\", \"Bra\", \"Braudostur\",\n\n            \"Breakfast Cheese\", \"Brebis du Lavort\", \"Brebis du Lochois\", \"Brebis du Puyfaucon\",\n\n            \"Bresse Bleu\", \"Brick\", \"Brie\", \"Brie de Meaux\", \"Brie de Melun\", \"Brillat-Savarin\",\n\n            \"Brin\", \"Brin d' Amour\", \"Brin d'Amour\", \"Brinza (Burduf Brinza)\",\n\n            \"Briquette de Brebis\", \"Briquette du Forez\", \"Broccio\", \"Broccio Demi-Affine\",\n\n            \"Brousse du Rove\", \"Bruder Basil\", \"Brusselae Kaas (Fromage de Bruxelles)\", \"Bryndza\",\n\n            \"Buchette d'Anjou\", \"Buffalo\", \"Burgos\", \"Butte\", \"Butterkase\", \"Button (Innes)\",\n\n            \"Buxton Blue\", \"Cabecou\", \"Caboc\", \"Cabrales\", \"Cachaille\", \"Caciocavallo\", \"Caciotta\",\n\n            \"Caerphilly\", \"Cairnsmore\", \"Calenzana\", \"Cambazola\", \"Camembert de Normandie\",\n\n            \"Canadian Cheddar\", \"Canestrato\", \"Cantal\", \"Caprice des Dieux\", \"Capricorn Goat\",\n\n            \"Capriole Banon\", \"Carre de l'Est\", \"Casciotta di Urbino\", \"Cashel Blue\", \"Castellano\",\n\n            \"Castelleno\", \"Castelmagno\", \"Castelo Branco\", \"Castigliano\", \"Cathelain\",\n\n            \"Celtic Promise\", \"Cendre d'Olivet\", \"Cerney\", \"Chabichou\", \"Chabichou du Poitou\",\n\n            \"Chabis de Gatine\", \"Chaource\", \"Charolais\", \"Chaumes\", \"Cheddar\",\n\n            \"Cheddar Clothbound\", \"Cheshire\", \"Chevres\", \"Chevrotin des Aravis\", \"Chontaleno\",\n\n            \"Civray\", \"Coeur de Camembert au Calvados\", \"Coeur de Chevre\", \"Colby\", \"Cold Pack\",\n\n            \"Comte\", \"Coolea\", \"Cooleney\", \"Coquetdale\", \"Corleggy\", \"Cornish Pepper\",\n\n            \"Cotherstone\", \"Cotija\", \"Cottage Cheese\", \"Cottage Cheese (Australian)\",\n\n            \"Cougar Gold\", \"Coulommiers\", \"Coverdale\", \"Crayeux de Roncq\", \"Cream Cheese\",\n\n            \"Cream Havarti\", \"Crema Agria\", \"Crema Mexicana\", \"Creme Fraiche\", \"Crescenza\",\n\n            \"Croghan\", \"Crottin de Chavignol\", \"Crottin du Chavignol\", \"Crowdie\", \"Crowley\",\n\n            \"Cuajada\", \"Curd\", \"Cure Nantais\", \"Curworthy\", \"Cwmtawe Pecorino\",\n\n            \"Cypress Grove Chevre\", \"Danablu (Danish Blue)\", \"Danbo\", \"Danish Fontina\",\n\n            \"Daralagjazsky\", \"Dauphin\", \"Delice des Fiouves\", \"Denhany Dorset Drum\", \"Derby\",\n\n            \"Dessertnyj Belyj\", \"Devon Blue\", \"Devon Garland\", \"Dolcelatte\", \"Doolin\",\n\n            \"Doppelrhamstufel\", \"Dorset Blue Vinney\", \"Double Gloucester\", \"Double Worcester\",\n\n            \"Dreux a la Feuille\", \"Dry Jack\", \"Duddleswell\", \"Dunbarra\", \"Dunlop\", \"Dunsyre Blue\",\n\n            \"Duroblando\", \"Durrus\", \"Dutch Mimolette (Commissiekaas)\", \"Edam\", \"Edelpilz\",\n\n            \"Emental Grand Cru\", \"Emlett\", \"Emmental\", \"Epoisses de Bourgogne\", \"Esbareich\",\n\n            \"Esrom\", \"Etorki\", \"Evansdale Farmhouse Brie\", \"Evora De L'Alentejo\", \"Exmoor Blue\",\n\n            \"Explorateur\", \"Feta\", \"Feta (Australian)\", \"Figue\", \"Filetta\", \"Fin-de-Siecle\",\n\n            \"Finlandia Swiss\", \"Finn\", \"Fiore Sardo\", \"Fleur du Maquis\", \"Flor de Guia\",\n\n            \"Flower Marie\", \"Folded\", \"Folded cheese with mint\", \"Fondant de Brebis\",\n\n            \"Fontainebleau\", \"Fontal\", \"Fontina Val d'Aosta\", \"Formaggio di capra\", \"Fougerus\",\n\n            \"Four Herb Gouda\", \"Fourme d' Ambert\", \"Fourme de Haute Loire\", \"Fourme de Montbrison\",\n\n            \"Fresh Jack\", \"Fresh Mozzarella\", \"Fresh Ricotta\", \"Fresh Truffles\", \"Fribourgeois\",\n\n            \"Friesekaas\", \"Friesian\", \"Friesla\", \"Frinault\", \"Fromage a Raclette\", \"Fromage Corse\",\n\n            \"Fromage de Montagne de Savoie\", \"Fromage Frais\", \"Fruit Cream Cheese\",\n\n            \"Frying Cheese\", \"Fynbo\", \"Gabriel\", \"Galette du Paludier\", \"Galette Lyonnaise\",\n\n            \"Galloway Goat's Milk Gems\", \"Gammelost\", \"Gaperon a l'Ail\", \"Garrotxa\", \"Gastanberra\",\n\n            \"Geitost\", \"Gippsland Blue\", \"Gjetost\", \"Gloucester\", \"Golden Cross\", \"Gorgonzola\",\n\n            \"Gornyaltajski\", \"Gospel Green\", \"Gouda\", \"Goutu\", \"Gowrie\", \"Grabetto\", \"Graddost\",\n\n            \"Grafton Village Cheddar\", \"Grana\", \"Grana Padano\", \"Grand Vatel\",\n\n            \"Grataron d' Areches\", \"Gratte-Paille\", \"Graviera\", \"Greuilh\", \"Greve\",\n\n            \"Gris de Lille\", \"Gruyere\", \"Gubbeen\", \"Guerbigny\", \"Halloumi\",\n\n            \"Halloumy (Australian)\", \"Haloumi-Style Cheese\", \"Harbourne Blue\", \"Havarti\",\n\n            \"Heidi Gruyere\", \"Hereford Hop\", \"Herrgardsost\", \"Herriot Farmhouse\", \"Herve\",\n\n            \"Hipi Iti\", \"Hubbardston Blue Cow\", \"Hushallsost\", \"Iberico\", \"Idaho Goatster\",\n\n            \"Idiazabal\", \"Il Boschetto al Tartufo\", \"Ile d'Yeu\", \"Isle of Mull\", \"Jarlsberg\",\n\n            \"Jermi Tortes\", \"Jibneh Arabieh\", \"Jindi Brie\", \"Jubilee Blue\", \"Juustoleipa\",\n\n            \"Kadchgall\", \"Kaseri\", \"Kashta\", \"Kefalotyri\", \"Kenafa\", \"Kernhem\", \"Kervella Affine\",\n\n            \"Kikorangi\", \"King Island Cape Wickham Brie\", \"King River Gold\", \"Klosterkaese\",\n\n            \"Knockalara\", \"Kugelkase\", \"L'Aveyronnais\", \"L'Ecir de l'Aubrac\", \"La Taupiniere\",\n\n            \"La Vache Qui Rit\", \"Laguiole\", \"Lairobell\", \"Lajta\", \"Lanark Blue\", \"Lancashire\",\n\n            \"Langres\", \"Lappi\", \"Laruns\", \"Lavistown\", \"Le Brin\", \"Le Fium Orbo\", \"Le Lacandou\",\n\n            \"Le Roule\", \"Leafield\", \"Lebbene\", \"Leerdammer\", \"Leicester\", \"Leyden\", \"Limburger\",\n\n            \"Lincolnshire Poacher\", \"Lingot Saint Bousquet d'Orb\", \"Liptauer\", \"Little Rydings\",\n\n            \"Livarot\", \"Llanboidy\", \"Llanglofan Farmhouse\", \"Loch Arthur Farmhouse\",\n\n            \"Loddiswell Avondale\", \"Longhorn\", \"Lou Palou\", \"Lou Pevre\", \"Lyonnais\", \"Maasdam\",\n\n            \"Macconais\", \"Mahoe Aged Gouda\", \"Mahon\", \"Malvern\", \"Mamirolle\", \"Manchego\",\n\n            \"Manouri\", \"Manur\", \"Marble Cheddar\", \"Marbled Cheeses\", \"Maredsous\", \"Margotin\",\n\n            \"Maribo\", \"Maroilles\", \"Mascares\", \"Mascarpone\", \"Mascarpone (Australian)\",\n\n            \"Mascarpone Torta\", \"Matocq\", \"Maytag Blue\", \"Meira\", \"Menallack Farmhouse\",\n\n            \"Menonita\", \"Meredith Blue\", \"Mesost\", \"Metton (Cancoillotte)\", \"Meyer Vintage Gouda\",\n\n            \"Mihalic Peynir\", \"Milleens\", \"Mimolette\", \"Mine-Gabhar\", \"Mini Baby Bells\", \"Mixte\",\n\n            \"Molbo\", \"Monastery Cheeses\", \"Mondseer\", \"Mont D'or Lyonnais\", \"Montasio\",\n\n            \"Monterey Jack\", \"Monterey Jack Dry\", \"Morbier\", \"Morbier Cru de Montagne\",\n\n            \"Mothais a la Feuille\", \"Mozzarella\", \"Mozzarella (Australian)\",\n\n            \"Mozzarella di Bufala\", \"Mozzarella Fresh, in water\", \"Mozzarella Rolls\", \"Munster\",\n\n            \"Murol\", \"Mycella\", \"Myzithra\", \"Naboulsi\", \"Nantais\", \"Neufchatel\",\n\n            \"Neufchatel (Australian)\", \"Niolo\", \"Nokkelost\", \"Northumberland\", \"Oaxaca\",\n\n            \"Olde York\", \"Olivet au Foin\", \"Olivet Bleu\", \"Olivet Cendre\",\n\n            \"Orkney Extra Mature Cheddar\", \"Orla\", \"Oschtjepka\", \"Ossau Fermier\", \"Ossau-Iraty\",\n\n            \"Oszczypek\", \"Oxford Blue\", \"P'tit Berrichon\", \"Palet de Babligny\", \"Paneer\", \"Panela\",\n\n            \"Pannerone\", \"Pant ys Gawn\", \"Parmesan (Parmigiano)\", \"Parmigiano Reggiano\",\n\n            \"Pas de l'Escalette\", \"Passendale\", \"Pasteurized Processed\", \"Pate de Fromage\",\n\n            \"Patefine Fort\", \"Pave d'Affinois\", \"Pave d'Auge\", \"Pave de Chirac\", \"Pave du Berry\",\n\n            \"Pecorino\", \"Pecorino in Walnut Leaves\", \"Pecorino Romano\", \"Peekskill Pyramid\",\n\n            \"Pelardon des Cevennes\", \"Pelardon des Corbieres\", \"Penamellera\", \"Penbryn\",\n\n            \"Pencarreg\", \"Perail de Brebis\", \"Petit Morin\", \"Petit Pardou\", \"Petit-Suisse\",\n\n            \"Picodon de Chevre\", \"Picos de Europa\", \"Piora\", \"Pithtviers au Foin\",\n\n            \"Plateau de Herve\", \"Plymouth Cheese\", \"Podhalanski\", \"Poivre d'Ane\", \"Polkolbin\",\n\n            \"Pont l'Eveque\", \"Port Nicholson\", \"Port-Salut\", \"Postel\", \"Pouligny-Saint-Pierre\",\n\n            \"Pourly\", \"Prastost\", \"Pressato\", \"Prince-Jean\", \"Processed Cheddar\", \"Provolone\",\n\n            \"Provolone (Australian)\", \"Pyengana Cheddar\", \"Pyramide\", \"Quark\",\n\n            \"Quark (Australian)\", \"Quartirolo Lombardo\", \"Quatre-Vents\", \"Quercy Petit\",\n\n            \"Queso Blanco\", \"Queso Blanco con Frutas --Pina y Mango\", \"Queso de Murcia\",\n\n            \"Queso del Montsec\", \"Queso del Tietar\", \"Queso Fresco\", \"Queso Fresco (Adobera)\",\n\n            \"Queso Iberico\", \"Queso Jalapeno\", \"Queso Majorero\", \"Queso Media Luna\",\n\n            \"Queso Para Frier\", \"Queso Quesadilla\", \"Rabacal\", \"Raclette\", \"Ragusano\", \"Raschera\",\n\n            \"Reblochon\", \"Red Leicester\", \"Regal de la Dombes\", \"Reggianito\", \"Remedou\",\n\n            \"Requeson\", \"Richelieu\", \"Ricotta\", \"Ricotta (Australian)\", \"Ricotta Salata\", \"Ridder\",\n\n            \"Rigotte\", \"Rocamadour\", \"Rollot\", \"Romano\", \"Romans Part Dieu\", \"Roncal\", \"Roquefort\",\n\n            \"Roule\", \"Rouleau De Beaulieu\", \"Royalp Tilsit\", \"Rubens\", \"Rustinu\", \"Saaland Pfarr\",\n\n            \"Saanenkaese\", \"Saga\", \"Sage Derby\", \"Sainte Maure\", \"Saint-Marcellin\",\n\n            \"Saint-Nectaire\", \"Saint-Paulin\", \"Salers\", \"Samso\", \"San Simon\", \"Sancerre\",\n\n            \"Sap Sago\", \"Sardo\", \"Sardo Egyptian\", \"Sbrinz\", \"Scamorza\", \"Schabzieger\", \"Schloss\",\n\n            \"Selles sur Cher\", \"Selva\", \"Serat\", \"Seriously Strong Cheddar\", \"Serra da Estrela\",\n\n            \"Sharpam\", \"Shelburne Cheddar\", \"Shropshire Blue\", \"Siraz\", \"Sirene\", \"Smoked Gouda\",\n\n            \"Somerset Brie\", \"Sonoma Jack\", \"Sottocenare al Tartufo\", \"Soumaintrain\",\n\n            \"Sourire Lozerien\", \"Spenwood\", \"Sraffordshire Organic\", \"St. Agur Blue Cheese\",\n\n            \"Stilton\", \"Stinking Bishop\", \"String\", \"Sussex Slipcote\", \"Sveciaost\", \"Swaledale\",\n\n            \"Sweet Style Swiss\", \"Swiss\", \"Syrian (Armenian String)\", \"Tala\", \"Taleggio\", \"Tamie\",\n\n            \"Tasmania Highland Chevre Log\", \"Taupiniere\", \"Teifi\", \"Telemea\", \"Testouri\",\n\n            \"Tete de Moine\", \"Tetilla\", \"Texas Goat Cheese\", \"Tibet\", \"Tillamook Cheddar\",\n\n            \"Tilsit\", \"Timboon Brie\", \"Toma\", \"Tomme Brulee\", \"Tomme d'Abondance\",\n\n            \"Tomme de Chevre\", \"Tomme de Romans\", \"Tomme de Savoie\", \"Tomme des Chouans\", \"Tommes\",\n\n            \"Torta del Casar\", \"Toscanello\", \"Touree de L'Aubier\", \"Tourmalet\",\n\n            \"Trappe (Veritable)\", \"Trois Cornes De Vendee\", \"Tronchon\", \"Trou du Cru\", \"Truffe\",\n\n            \"Tupi\", \"Turunmaa\", \"Tymsboro\", \"Tyn Grug\", \"Tyning\", \"Ubriaco\", \"Ulloa\",\n\n            \"Vacherin-Fribourgeois\", \"Valencay\", \"Vasterbottenost\", \"Venaco\", \"Vendomois\",\n\n            \"Vieux Corse\", \"Vignotte\", \"Vulscombe\", \"Waimata Farmhouse Blue\",\n\n            \"Washed Rind Cheese (Australian)\", \"Waterloo\", \"Weichkaese\", \"Wellington\",\n\n            \"Wensleydale\", \"White Stilton\", \"Whitestone Farmhouse\", \"Wigmore\", \"Woodside Cabecou\",\n\n            \"Xanadu\", \"Xynotyro\", \"Yarg Cornish\", \"Yarra Valley Pyramid\", \"Yorkshire Blue\",\n\n            \"Zamorano\", \"Zanetti Grana Padano\", \"Zanetti Parmigiano Reggiano\"\n\n    };\n\n \n\n    public static ArrayList<String> asList() {\n\n        ArrayList<String> items = new ArrayList<String>();\n\n        for (int i = 0, z = CHEESES.length ; i < z ; i++) {\n\n            items.add(CHEESES[i]);\n\n        }\n\n        return items;\n\n    }\n\n \n\n    /**\n\n     * Return a list of random cheeses.\n\n     *\n\n     * @param count the amount of cheeses to return.\n\n     */\n\n    public static ArrayList<String> randomList(int count) {\n\n        Random random = new Random();\n\n        HashSet<String> items = new HashSet<String>();\n\n \n\n        // Make sure that don't infinity loop\n\n        count = Math.min(count, CHEESES.length);\n\n \n\n        while (items.size() < count) {\n\n            items.add(CHEESES[random.nextInt(CHEESES.length)]);\n\n        }\n\n \n\n        return new ArrayList<String>(items);\n\n    }\n\n}\n  "},"logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "},"view":{"SlidingTabLayout.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.view;\n\n \n\nimport android.content.Context;\n\nimport android.graphics.Typeface;\n\nimport android.os.Build;\n\nimport android.support.v4.view.PagerAdapter;\n\nimport android.support.v4.view.ViewPager;\n\nimport android.util.AttributeSet;\n\nimport android.util.TypedValue;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.widget.HorizontalScrollView;\n\nimport android.widget.TextView;\n\n \n\n/**\n\n * To be used with ViewPager to provide a tab indicator component which give constant feedback as to\n\n * the user's scroll progress.\n\n * <p>\n\n * To use the component, simply add it to your view hierarchy. Then in your\n\n * {@link android.app.Activity} or {@link android.support.v4.app.Fragment} call\n\n * {@link #setViewPager(ViewPager)} providing it the ViewPager this layout is being used for.\n\n * <p>\n\n * The colors can be customized in two ways. The first and simplest is to provide an array of colors\n\n * via {@link #setSelectedIndicatorColors(int...)} and {@link #setDividerColors(int...)}. The\n\n * alternative is via the {@link TabColorizer} interface which provides you complete control over\n\n * which color is used for any individual position.\n\n * <p>\n\n * The views used as tabs can be customized by calling {@link #setCustomTabView(int, int)},\n\n * providing the layout ID of your custom layout.\n\n */\n\npublic class SlidingTabLayout extends HorizontalScrollView {\n\n \n\n    /**\n\n     * Allows complete control over the colors drawn in the tab layout. Set with\n\n     * {@link #setCustomTabColorizer(TabColorizer)}.\n\n     */\n\n    public interface TabColorizer {\n\n \n\n        /**\n\n         * @return return the color of the indicator used when {@code position} is selected.\n\n         */\n\n        int getIndicatorColor(int position);\n\n \n\n        /**\n\n         * @return return the color of the divider drawn to the right of {@code position}.\n\n         */\n\n        int getDividerColor(int position);\n\n \n\n    }\n\n \n\n    private static final int TITLE_OFFSET_DIPS = 24;\n\n    private static final int TAB_VIEW_PADDING_DIPS = 16;\n\n    private static final int TAB_VIEW_TEXT_SIZE_SP = 12;\n\n \n\n    private int mTitleOffset;\n\n \n\n    private int mTabViewLayoutId;\n\n    private int mTabViewTextViewId;\n\n \n\n    private ViewPager mViewPager;\n\n    private ViewPager.OnPageChangeListener mViewPagerPageChangeListener;\n\n \n\n    private final SlidingTabStrip mTabStrip;\n\n \n\n    public SlidingTabLayout(Context context) {\n\n        this(context, null);\n\n    }\n\n \n\n    public SlidingTabLayout(Context context, AttributeSet attrs) {\n\n        this(context, attrs, 0);\n\n    }\n\n \n\n    public SlidingTabLayout(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n \n\n        // Disable the Scroll Bar\n\n        setHorizontalScrollBarEnabled(false);\n\n        // Make sure that the Tab Strips fills this View\n\n        setFillViewport(true);\n\n \n\n        mTitleOffset = (int) (TITLE_OFFSET_DIPS * getResources().getDisplayMetrics().density);\n\n \n\n        mTabStrip = new SlidingTabStrip(context);\n\n        addView(mTabStrip, LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);\n\n    }\n\n \n\n    /**\n\n     * Set the custom {@link TabColorizer} to be used.\n\n     *\n\n     * If you only require simple custmisation then you can use\n\n     * {@link #setSelectedIndicatorColors(int...)} and {@link #setDividerColors(int...)} to achieve\n\n     * similar effects.\n\n     */\n\n    public void setCustomTabColorizer(TabColorizer tabColorizer) {\n\n        mTabStrip.setCustomTabColorizer(tabColorizer);\n\n    }\n\n \n\n    /**\n\n     * Sets the colors to be used for indicating the selected tab. These colors are treated as a\n\n     * circular array. Providing one color will mean that all tabs are indicated with the same color.\n\n     */\n\n    public void setSelectedIndicatorColors(int... colors) {\n\n        mTabStrip.setSelectedIndicatorColors(colors);\n\n    }\n\n \n\n    /**\n\n     * Sets the colors to be used for tab dividers. These colors are treated as a circular array.\n\n     * Providing one color will mean that all tabs are indicated with the same color.\n\n     */\n\n    public void setDividerColors(int... colors) {\n\n        mTabStrip.setDividerColors(colors);\n\n    }\n\n \n\n    /**\n\n     * Set the {@link ViewPager.OnPageChangeListener}. When using {@link SlidingTabLayout} you are\n\n     * required to set any {@link ViewPager.OnPageChangeListener} through this method. This is so\n\n     * that the layout can update it's scroll position correctly.\n\n     *\n\n     * @see ViewPager#setOnPageChangeListener(ViewPager.OnPageChangeListener)\n\n     */\n\n    public void setOnPageChangeListener(ViewPager.OnPageChangeListener listener) {\n\n        mViewPagerPageChangeListener = listener;\n\n    }\n\n \n\n    /**\n\n     * Set the custom layout to be inflated for the tab views.\n\n     *\n\n     * @param layoutResId Layout id to be inflated\n\n     * @param textViewId id of the {@link TextView} in the inflated view\n\n     */\n\n    public void setCustomTabView(int layoutResId, int textViewId) {\n\n        mTabViewLayoutId = layoutResId;\n\n        mTabViewTextViewId = textViewId;\n\n    }\n\n \n\n    /**\n\n     * Sets the associated view pager. Note that the assumption here is that the pager content\n\n     * (number of tabs and tab titles) does not change after this call has been made.\n\n     */\n\n    public void setViewPager(ViewPager viewPager) {\n\n        mTabStrip.removeAllViews();\n\n \n\n        mViewPager = viewPager;\n\n        if (viewPager != null) {\n\n            viewPager.setOnPageChangeListener(new InternalViewPagerListener());\n\n            populateTabStrip();\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Create a default view to be used for tabs. This is called if a custom tab view is not set via\n\n     * {@link #setCustomTabView(int, int)}.\n\n     */\n\n    protected TextView createDefaultTabView(Context context) {\n\n        TextView textView = new TextView(context);\n\n        textView.setGravity(Gravity.CENTER);\n\n        textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, TAB_VIEW_TEXT_SIZE_SP);\n\n        textView.setTypeface(Typeface.DEFAULT_BOLD);\n\n \n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {\n\n            // If we're running on Honeycomb or newer, then we can use the Theme's\n\n            // selectableItemBackground to ensure that the View has a pressed state\n\n            TypedValue outValue = new TypedValue();\n\n            getContext().getTheme().resolveAttribute(android.R.attr.selectableItemBackground,\n\n                    outValue, true);\n\n            textView.setBackgroundResource(outValue.resourceId);\n\n        }\n\n \n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {\n\n            // If we're running on ICS or newer, enable all-caps to match the Action Bar tab style\n\n            textView.setAllCaps(true);\n\n        }\n\n \n\n        int padding = (int) (TAB_VIEW_PADDING_DIPS * getResources().getDisplayMetrics().density);\n\n        textView.setPadding(padding, padding, padding, padding);\n\n \n\n        return textView;\n\n    }\n\n \n\n    private void populateTabStrip() {\n\n        final PagerAdapter adapter = mViewPager.getAdapter();\n\n        final View.OnClickListener tabClickListener = new TabClickListener();\n\n \n\n        for (int i = 0; i < adapter.getCount(); i++) {\n\n            View tabView = null;\n\n            TextView tabTitleView = null;\n\n \n\n            if (mTabViewLayoutId != 0) {\n\n                // If there is a custom tab view layout id set, try and inflate it\n\n                tabView = LayoutInflater.from(getContext()).inflate(mTabViewLayoutId, mTabStrip,\n\n                        false);\n\n                tabTitleView = (TextView) tabView.findViewById(mTabViewTextViewId);\n\n            }\n\n \n\n            if (tabView == null) {\n\n                tabView = createDefaultTabView(getContext());\n\n            }\n\n \n\n            if (tabTitleView == null && TextView.class.isInstance(tabView)) {\n\n                tabTitleView = (TextView) tabView;\n\n            }\n\n \n\n            tabTitleView.setText(adapter.getPageTitle(i));\n\n            tabView.setOnClickListener(tabClickListener);\n\n \n\n            mTabStrip.addView(tabView);\n\n        }\n\n    }\n\n \n\n    @Override\n\n    protected void onAttachedToWindow() {\n\n        super.onAttachedToWindow();\n\n \n\n        if (mViewPager != null) {\n\n            scrollToTab(mViewPager.getCurrentItem(), 0);\n\n        }\n\n    }\n\n \n\n    private void scrollToTab(int tabIndex, int positionOffset) {\n\n        final int tabStripChildCount = mTabStrip.getChildCount();\n\n        if (tabStripChildCount == 0 || tabIndex < 0 || tabIndex >= tabStripChildCount) {\n\n            return;\n\n        }\n\n \n\n        View selectedChild = mTabStrip.getChildAt(tabIndex);\n\n        if (selectedChild != null) {\n\n            int targetScrollX = selectedChild.getLeft() + positionOffset;\n\n \n\n            if (tabIndex > 0 || positionOffset > 0) {\n\n                // If we're not at the first child and are mid-scroll, make sure we obey the offset\n\n                targetScrollX -= mTitleOffset;\n\n            }\n\n \n\n            scrollTo(targetScrollX, 0);\n\n        }\n\n    }\n\n \n\n    private class InternalViewPagerListener implements ViewPager.OnPageChangeListener {\n\n        private int mScrollState;\n\n \n\n        @Override\n\n        public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\n\n            int tabStripChildCount = mTabStrip.getChildCount();\n\n            if ((tabStripChildCount == 0) || (position < 0) || (position >= tabStripChildCount)) {\n\n                return;\n\n            }\n\n \n\n            mTabStrip.onViewPagerPageChanged(position, positionOffset);\n\n \n\n            View selectedTitle = mTabStrip.getChildAt(position);\n\n            int extraOffset = (selectedTitle != null)\n\n                    ? (int) (positionOffset * selectedTitle.getWidth())\n\n                    : 0;\n\n            scrollToTab(position, extraOffset);\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageScrolled(position, positionOffset,\n\n                        positionOffsetPixels);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void onPageScrollStateChanged(int state) {\n\n            mScrollState = state;\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageScrollStateChanged(state);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void onPageSelected(int position) {\n\n            if (mScrollState == ViewPager.SCROLL_STATE_IDLE) {\n\n                mTabStrip.onViewPagerPageChanged(position, 0f);\n\n                scrollToTab(position, 0);\n\n            }\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageSelected(position);\n\n            }\n\n        }\n\n \n\n    }\n\n \n\n    private class TabClickListener implements View.OnClickListener {\n\n        @Override\n\n        public void onClick(View v) {\n\n            for (int i = 0; i < mTabStrip.getChildCount(); i++) {\n\n                if (v == mTabStrip.getChildAt(i)) {\n\n                    mViewPager.setCurrentItem(i);\n\n                    return;\n\n                }\n\n            }\n\n        }\n\n    }\n\n \n\n}\n  ","SlidingTabStrip.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.view;\n\n \n\nimport android.R;\n\nimport android.content.Context;\n\nimport android.graphics.Canvas;\n\nimport android.graphics.Color;\n\nimport android.graphics.Paint;\n\nimport android.util.AttributeSet;\n\nimport android.util.TypedValue;\n\nimport android.view.View;\n\nimport android.widget.LinearLayout;\n\n \n\nclass SlidingTabStrip extends LinearLayout {\n\n \n\n    private static final int DEFAULT_BOTTOM_BORDER_THICKNESS_DIPS = 2;\n\n    private static final byte DEFAULT_BOTTOM_BORDER_COLOR_ALPHA = 0x26;\n\n    private static final int SELECTED_INDICATOR_THICKNESS_DIPS = 8;\n\n    private static final int DEFAULT_SELECTED_INDICATOR_COLOR = 0xFF33B5E5;\n\n \n\n    private static final int DEFAULT_DIVIDER_THICKNESS_DIPS = 1;\n\n    private static final byte DEFAULT_DIVIDER_COLOR_ALPHA = 0x20;\n\n    private static final float DEFAULT_DIVIDER_HEIGHT = 0.5f;\n\n \n\n    private final int mBottomBorderThickness;\n\n    private final Paint mBottomBorderPaint;\n\n \n\n    private final int mSelectedIndicatorThickness;\n\n    private final Paint mSelectedIndicatorPaint;\n\n \n\n    private final int mDefaultBottomBorderColor;\n\n \n\n    private final Paint mDividerPaint;\n\n    private final float mDividerHeight;\n\n \n\n    private int mSelectedPosition;\n\n    private float mSelectionOffset;\n\n \n\n    private SlidingTabLayout.TabColorizer mCustomTabColorizer;\n\n    private final SimpleTabColorizer mDefaultTabColorizer;\n\n \n\n    SlidingTabStrip(Context context) {\n\n        this(context, null);\n\n    }\n\n \n\n    SlidingTabStrip(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n        setWillNotDraw(false);\n\n \n\n        final float density = getResources().getDisplayMetrics().density;\n\n \n\n        TypedValue outValue = new TypedValue();\n\n        context.getTheme().resolveAttribute(R.attr.colorForeground, outValue, true);\n\n        final int themeForegroundColor =  outValue.data;\n\n \n\n        mDefaultBottomBorderColor = setColorAlpha(themeForegroundColor,\n\n                DEFAULT_BOTTOM_BORDER_COLOR_ALPHA);\n\n \n\n        mDefaultTabColorizer = new SimpleTabColorizer();\n\n        mDefaultTabColorizer.setIndicatorColors(DEFAULT_SELECTED_INDICATOR_COLOR);\n\n        mDefaultTabColorizer.setDividerColors(setColorAlpha(themeForegroundColor,\n\n                DEFAULT_DIVIDER_COLOR_ALPHA));\n\n \n\n        mBottomBorderThickness = (int) (DEFAULT_BOTTOM_BORDER_THICKNESS_DIPS * density);\n\n        mBottomBorderPaint = new Paint();\n\n        mBottomBorderPaint.setColor(mDefaultBottomBorderColor);\n\n \n\n        mSelectedIndicatorThickness = (int) (SELECTED_INDICATOR_THICKNESS_DIPS * density);\n\n        mSelectedIndicatorPaint = new Paint();\n\n \n\n        mDividerHeight = DEFAULT_DIVIDER_HEIGHT;\n\n        mDividerPaint = new Paint();\n\n        mDividerPaint.setStrokeWidth((int) (DEFAULT_DIVIDER_THICKNESS_DIPS * density));\n\n    }\n\n \n\n    void setCustomTabColorizer(SlidingTabLayout.TabColorizer customTabColorizer) {\n\n        mCustomTabColorizer = customTabColorizer;\n\n        invalidate();\n\n    }\n\n \n\n    void setSelectedIndicatorColors(int... colors) {\n\n        // Make sure that the custom colorizer is removed\n\n        mCustomTabColorizer = null;\n\n        mDefaultTabColorizer.setIndicatorColors(colors);\n\n        invalidate();\n\n    }\n\n \n\n    void setDividerColors(int... colors) {\n\n        // Make sure that the custom colorizer is removed\n\n        mCustomTabColorizer = null;\n\n        mDefaultTabColorizer.setDividerColors(colors);\n\n        invalidate();\n\n    }\n\n \n\n    void onViewPagerPageChanged(int position, float positionOffset) {\n\n        mSelectedPosition = position;\n\n        mSelectionOffset = positionOffset;\n\n        invalidate();\n\n    }\n\n \n\n    @Override\n\n    protected void onDraw(Canvas canvas) {\n\n        final int height = getHeight();\n\n        final int childCount = getChildCount();\n\n        final int dividerHeightPx = (int) (Math.min(Math.max(0f, mDividerHeight), 1f) * height);\n\n        final SlidingTabLayout.TabColorizer tabColorizer = mCustomTabColorizer != null\n\n                ? mCustomTabColorizer\n\n                : mDefaultTabColorizer;\n\n \n\n        // Thick colored underline below the current selection\n\n        if (childCount > 0) {\n\n            View selectedTitle = getChildAt(mSelectedPosition);\n\n            int left = selectedTitle.getLeft();\n\n            int right = selectedTitle.getRight();\n\n            int color = tabColorizer.getIndicatorColor(mSelectedPosition);\n\n \n\n            if (mSelectionOffset > 0f && mSelectedPosition < (getChildCount() - 1)) {\n\n                int nextColor = tabColorizer.getIndicatorColor(mSelectedPosition + 1);\n\n                if (color != nextColor) {\n\n                    color = blendColors(nextColor, color, mSelectionOffset);\n\n                }\n\n \n\n                // Draw the selection partway between the tabs\n\n                View nextTitle = getChildAt(mSelectedPosition + 1);\n\n                left = (int) (mSelectionOffset * nextTitle.getLeft() +\n\n                        (1.0f - mSelectionOffset) * left);\n\n                right = (int) (mSelectionOffset * nextTitle.getRight() +\n\n                        (1.0f - mSelectionOffset) * right);\n\n            }\n\n \n\n            mSelectedIndicatorPaint.setColor(color);\n\n \n\n            canvas.drawRect(left, height - mSelectedIndicatorThickness, right,\n\n                    height, mSelectedIndicatorPaint);\n\n        }\n\n \n\n        // Thin underline along the entire bottom edge\n\n        canvas.drawRect(0, height - mBottomBorderThickness, getWidth(), height, mBottomBorderPaint);\n\n \n\n        // Vertical separators between the titles\n\n        int separatorTop = (height - dividerHeightPx) / 2;\n\n        for (int i = 0; i < childCount - 1; i++) {\n\n            View child = getChildAt(i);\n\n            mDividerPaint.setColor(tabColorizer.getDividerColor(i));\n\n            canvas.drawLine(child.getRight(), separatorTop, child.getRight(),\n\n                    separatorTop + dividerHeightPx, mDividerPaint);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Set the alpha value of the {@code color} to be the given {@code alpha} value.\n\n     */\n\n    private static int setColorAlpha(int color, byte alpha) {\n\n        return Color.argb(alpha, Color.red(color), Color.green(color), Color.blue(color));\n\n    }\n\n \n\n    /**\n\n     * Blend {@code color1} and {@code color2} using the given ratio.\n\n     *\n\n     * @param ratio of which to blend. 1.0 will return {@code color1}, 0.5 will give an even blend,\n\n     *              0.0 will return {@code color2}.\n\n     */\n\n    private static int blendColors(int color1, int color2, float ratio) {\n\n        final float inverseRation = 1f - ratio;\n\n        float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRation);\n\n        float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRation);\n\n        float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRation);\n\n        return Color.rgb((int) r, (int) g, (int) b);\n\n    }\n\n \n\n    private static class SimpleTabColorizer implements SlidingTabLayout.TabColorizer {\n\n        private int[] mIndicatorColors;\n\n        private int[] mDividerColors;\n\n \n\n        @Override\n\n        public final int getIndicatorColor(int position) {\n\n            return mIndicatorColors[position % mIndicatorColors.length];\n\n        }\n\n \n\n        @Override\n\n        public final int getDividerColor(int position) {\n\n            return mDividerColors[position % mDividerColors.length];\n\n        }\n\n \n\n        void setIndicatorColors(int... colors) {\n\n            mIndicatorColors = colors;\n\n        }\n\n \n\n        void setDividerColors(int... colors) {\n\n            mDividerColors = colors;\n\n        }\n\n    }\n\n}\n  "}},"com.example.android.swiperefreshlistfragment":{"MainActivity.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.swiperefreshlistfragment;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentTransaction;\n\nimport android.view.Menu;\n\nimport android.view.MenuItem;\n\nimport android.widget.ViewAnimator;\n\n \n\nimport com.example.android.common.activities.SampleActivityBase;\n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogFragment;\n\nimport com.example.android.common.logger.LogWrapper;\n\nimport com.example.android.common.logger.MessageOnlyLogFilter;\n\n \n\n/**\n\n * A simple launcher activity containing a summary sample description, sample log and a custom\n\n * {@link android.support.v4.app.Fragment} which can display a view.\n\n * <p>\n\n * For devices with displays with a width of 720dp or greater, the sample log is always visible,\n\n * on other devices it's visibility is controlled by an item on the Action Bar.\n\n */\n\npublic class MainActivity extends SampleActivityBase {\n\n \n\n    public static final String TAG = \"MainActivity\";\n\n \n\n    // Whether the Log Fragment is currently shown\n\n    private boolean mLogShown;\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_main);\n\n \n\n        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n\n        SwipeRefreshListFragmentFragment fragment = new SwipeRefreshListFragmentFragment();\n\n        transaction.replace(R.id.sample_content_fragment, fragment);\n\n        transaction.commit();\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        getMenuInflater().inflate(R.menu.main, menu);\n\n        return true;\n\n    }\n\n \n\n    @Override\n\n    public boolean onPrepareOptionsMenu(Menu menu) {\n\n        MenuItem logToggle = menu.findItem(R.id.menu_toggle_log);\n\n        logToggle.setVisible(findViewById(R.id.sample_output) instanceof ViewAnimator);\n\n        logToggle.setTitle(mLogShown ? R.string.sample_hide_log : R.string.sample_show_log);\n\n \n\n        return super.onPrepareOptionsMenu(menu);\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch(item.getItemId()) {\n\n            case R.id.menu_toggle_log:\n\n                mLogShown = !mLogShown;\n\n                ViewAnimator output = (ViewAnimator) findViewById(R.id.sample_output);\n\n                if (mLogShown) {\n\n                    output.setDisplayedChild(1);\n\n                } else {\n\n                    output.setDisplayedChild(0);\n\n                }\n\n                supportInvalidateOptionsMenu();\n\n                return true;\n\n        }\n\n        return super.onOptionsItemSelected(item);\n\n    }\n\n \n\n    /** Create a chain of targets that will receive log data */\n\n    @Override\n\n    public void initializeLogging() {\n\n        // Wraps Android's native log framework.\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        Log.setLogNode(logWrapper);\n\n \n\n        // Filter strips out everything except the message text.\n\n        MessageOnlyLogFilter msgFilter = new MessageOnlyLogFilter();\n\n        logWrapper.setNext(msgFilter);\n\n \n\n        // On screen logging via a fragment with a TextView.\n\n        LogFragment logFragment = (LogFragment) getSupportFragmentManager()\n\n                .findFragmentById(R.id.log_fragment);\n\n        msgFilter.setNext(logFragment.getLogView());\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  ","SwipeRefreshListFragment.java":"\n    \n\n/*\n\n * Copyright 2014 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *       http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.swiperefreshlistfragment;\n\n \n\nimport android.content.Context;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.ListFragment;\n\nimport android.support.v4.view.ViewCompat;\n\nimport android.support.v4.widget.SwipeRefreshLayout;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ListView;\n\n \n\n/**\n\n * Subclass of {@link android.support.v4.app.ListFragment} which provides automatic support for\n\n * providing the 'swipe-to-refresh' UX gesture by wrapping the the content view in a\n\n * {@link android.support.v4.widget.SwipeRefreshLayout}.\n\n */\n\npublic class SwipeRefreshListFragment extends ListFragment {\n\n \n\n    private SwipeRefreshLayout mSwipeRefreshLayout;\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n            Bundle savedInstanceState) {\n\n \n\n        // Create the list fragment's content view by calling the super method\n\n        final View listFragmentView = super.onCreateView(inflater, container, savedInstanceState);\n\n \n\n        // Now create a SwipeRefreshLayout to wrap the fragment's content view\n\n        mSwipeRefreshLayout = new ListFragmentSwipeRefreshLayout(container.getContext());\n\n \n\n        // Add the list fragment's content view to the SwipeRefreshLayout, making sure that it fills\n\n        // the SwipeRefreshLayout\n\n        mSwipeRefreshLayout.addView(listFragmentView,\n\n                ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\n\n \n\n        // Make sure that the SwipeRefreshLayout will fill the fragment\n\n        mSwipeRefreshLayout.setLayoutParams(\n\n                new ViewGroup.LayoutParams(\n\n                        ViewGroup.LayoutParams.MATCH_PARENT,\n\n                        ViewGroup.LayoutParams.MATCH_PARENT));\n\n \n\n        // Now return the SwipeRefreshLayout as this fragment's content view\n\n        return mSwipeRefreshLayout;\n\n    }\n\n \n\n    /**\n\n     * Set the {@link android.support.v4.widget.SwipeRefreshLayout.OnRefreshListener} to listen for\n\n     * initiated refreshes.\n\n     *\n\n     * @see android.support.v4.widget.SwipeRefreshLayout#setOnRefreshListener(android.support.v4.widget.SwipeRefreshLayout.OnRefreshListener)\n\n     */\n\n    public void setOnRefreshListener(SwipeRefreshLayout.OnRefreshListener listener) {\n\n        mSwipeRefreshLayout.setOnRefreshListener(listener);\n\n    }\n\n \n\n    /**\n\n     * Returns whether the {@link android.support.v4.widget.SwipeRefreshLayout} is currently\n\n     * refreshing or not.\n\n     *\n\n     * @see android.support.v4.widget.SwipeRefreshLayout#isRefreshing()\n\n     */\n\n    public boolean isRefreshing() {\n\n        return mSwipeRefreshLayout.isRefreshing();\n\n    }\n\n \n\n    /**\n\n     * Set whether the {@link android.support.v4.widget.SwipeRefreshLayout} should be displaying\n\n     * that it is refreshing or not.\n\n     *\n\n     * @see android.support.v4.widget.SwipeRefreshLayout#setRefreshing(boolean)\n\n     */\n\n    public void setRefreshing(boolean refreshing) {\n\n        mSwipeRefreshLayout.setRefreshing(refreshing);\n\n    }\n\n \n\n    /**\n\n     * Set the color scheme for the {@link android.support.v4.widget.SwipeRefreshLayout}.\n\n     *\n\n     * @see android.support.v4.widget.SwipeRefreshLayout#setColorScheme(int, int, int, int)\n\n     */\n\n    public void setColorScheme(int colorRes1, int colorRes2, int colorRes3, int colorRes4) {\n\n        mSwipeRefreshLayout.setColorScheme(colorRes1, colorRes2, colorRes3, colorRes4);\n\n    }\n\n \n\n    /**\n\n     * @return the fragment's {@link android.support.v4.widget.SwipeRefreshLayout} widget.\n\n     */\n\n    public SwipeRefreshLayout getSwipeRefreshLayout() {\n\n        return mSwipeRefreshLayout;\n\n    }\n\n \n\n    /**\n\n     * Sub-class of {@link android.support.v4.widget.SwipeRefreshLayout} for use in this\n\n     * {@link android.support.v4.app.ListFragment}. The reason that this is needed is because\n\n     * {@link android.support.v4.widget.SwipeRefreshLayout} only supports a single child, which it\n\n     * expects to be the one which triggers refreshes. In our case the layout's child is the content\n\n     * view returned from\n\n     * {@link android.support.v4.app.ListFragment#onCreateView(android.view.LayoutInflater, android.view.ViewGroup, android.os.Bundle)}\n\n     * which is a {@link android.view.ViewGroup}.\n\n     *\n\n     * <p>To enable 'swipe-to-refresh' support via the {@link android.widget.ListView} we need to\n\n     * override the default behavior and properly signal when a gesture is possible. This is done by\n\n     * overriding {@link #canChildScrollUp()}.\n\n     */\n\n    private class ListFragmentSwipeRefreshLayout extends SwipeRefreshLayout {\n\n \n\n        public ListFragmentSwipeRefreshLayout(Context context) {\n\n            super(context);\n\n        }\n\n \n\n        /**\n\n         * As mentioned above, we need to override this method to properly signal when a\n\n         * 'swipe-to-refresh' is possible.\n\n         *\n\n         * @return true if the {@link android.widget.ListView} is visible and can scroll up.\n\n         */\n\n        @Override\n\n        public boolean canChildScrollUp() {\n\n            final ListView listView = getListView();\n\n            if (listView.getVisibility() == View.VISIBLE) {\n\n                return canListViewScrollUp(listView);\n\n            } else {\n\n                return false;\n\n            }\n\n        }\n\n \n\n    }\n\n \n\n    /**\n\n     * Utility method to check whether a {@link ListView} can scroll up from it's current position.\n\n     * Handles platform version differences, providing backwards compatible functionality where\n\n     * needed.\n\n     */\n\n    private static boolean canListViewScrollUp(ListView listView) {\n\n        if (android.os.Build.VERSION.SDK_INT >= 14) {\n\n            // For ICS and above we can call canScrollVertically() to determine this\n\n            return ViewCompat.canScrollVertically(listView, -1);\n\n        } else {\n\n            // Pre-ICS we need to manually check the first visible item and the child view's top\n\n            // value\n\n            return listView.getChildCount() > 0 &&\n\n                    (listView.getFirstVisiblePosition() > 0\n\n                            || listView.getChildAt(0).getTop() < listView.getPaddingTop());\n\n        }\n\n    }\n\n \n\n}\n  ","SwipeRefreshListFragmentFragment.java":"\n    \n\n/*\n\n * Copyright 2014 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *       http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.swiperefreshlistfragment;\n\n \n\nimport com.example.android.common.dummydata.Cheeses;\n\nimport com.example.android.common.logger.Log;\n\n \n\nimport android.os.AsyncTask;\n\nimport android.os.Bundle;\n\nimport android.support.v4.widget.SwipeRefreshLayout;\n\nimport android.view.Menu;\n\nimport android.view.MenuInflater;\n\nimport android.view.MenuItem;\n\nimport android.view.View;\n\nimport android.widget.ArrayAdapter;\n\nimport android.widget.ListAdapter;\n\n \n\nimport java.util.List;\n\n \n\n/**\n\n * A sample which shows how to use {@link android.support.v4.widget.SwipeRefreshLayout} within a\n\n * {@link android.support.v4.app.ListFragment} to add the 'swipe-to-refresh' gesture to a\n\n * {@link android.widget.ListView}. This is provided through the provided re-usable\n\n * {@link SwipeRefreshListFragment} class.\n\n *\n\n * <p>To provide an accessible way to trigger the refresh, this app also provides a refresh\n\n * action item. This item should be displayed in the Action Bar's overflow item.\n\n *\n\n * <p>In this sample app, the refresh updates the ListView with a random set of new items.\n\n *\n\n * <p>This sample also provides the functionality to change the colors displayed in the\n\n * {@link android.support.v4.widget.SwipeRefreshLayout} through the options menu. This is meant to\n\n * showcase the use of color rather than being something that should be integrated into apps.\n\n */\n\npublic class SwipeRefreshListFragmentFragment extends SwipeRefreshListFragment {\n\n \n\n    private static final String LOG_TAG = SwipeRefreshListFragmentFragment.class.getSimpleName();\n\n \n\n    private static final int LIST_ITEM_COUNT = 20;\n\n \n\n    @Override\n\n    public void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n \n\n        // Notify the system to allow an options menu for this fragment.\n\n        setHasOptionsMenu(true);\n\n    }\n\n \n\n    @Override\n\n    public void onViewCreated(View view, Bundle savedInstanceState) {\n\n        super.onViewCreated(view, savedInstanceState);\n\n \n\n        /**\n\n         * Create an ArrayAdapter to contain the data for the ListView. Each item in the ListView\n\n         * uses the system-defined simple_list_item_1 layout that contains one TextView.\n\n         */\n\n        ListAdapter adapter = new ArrayAdapter<String>(\n\n                getActivity(),\n\n                android.R.layout.simple_list_item_1,\n\n                android.R.id.text1,\n\n                Cheeses.randomList(LIST_ITEM_COUNT));\n\n \n\n        // Set the adapter between the ListView and its backing data.\n\n        setListAdapter(adapter);\n\n \n\n        /**\n\n         * Implement {@link SwipeRefreshLayout.OnRefreshListener}. When users do the \"swipe to\n\n         * refresh\" gesture, SwipeRefreshLayout invokes\n\n         * {@link SwipeRefreshLayout.OnRefreshListener#onRefresh onRefresh()}. In\n\n         * {@link SwipeRefreshLayout.OnRefreshListener#onRefresh onRefresh()}, call a method that\n\n         * refreshes the content. Call the same method in response to the Refresh action from the\n\n         * action bar.\n\n         */\n\n        setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\n\n            @Override\n\n            public void onRefresh() {\n\n                Log.i(LOG_TAG, \"onRefresh called from SwipeRefreshLayout\");\n\n \n\n                initiateRefresh();\n\n            }\n\n        });\n\n    }\n\n \n\n    @Override\n\n    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {\n\n        inflater.inflate(R.menu.main_menu, menu);\n\n    }\n\n \n\n    /**\n\n     * Respond to the user's selection of the Refresh action item. Start the SwipeRefreshLayout\n\n     * progress bar, then initiate the background task that refreshes the content.\n\n     *\n\n     * <p>A color scheme menu item used for demonstrating the use of SwipeRefreshLayout's color\n\n     * scheme functionality. This kind of menu item should not be incorporated into your app,\n\n     * it just to demonstrate the use of color. Instead you should choose a color scheme based\n\n     * off of your application's branding.\n\n     */\n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch (item.getItemId()) {\n\n            case R.id.menu_refresh:\n\n                Log.i(LOG_TAG, \"Refresh menu item selected\");\n\n \n\n                // We make sure that the SwipeRefreshLayout is displaying it's refreshing indicator\n\n                if (!isRefreshing()) {\n\n                    setRefreshing(true);\n\n                }\n\n \n\n                // Start our refresh background task\n\n                initiateRefresh();\n\n                return true;\n\n \n\n            case R.id.menu_color_scheme_1:\n\n                Log.i(LOG_TAG, \"setColorScheme #1\");\n\n                item.setChecked(true);\n\n \n\n                // Change the colors displayed by the SwipeRefreshLayout by providing it with 4\n\n                // color resource ids\n\n                setColorScheme(R.color.color_scheme_1_1, R.color.color_scheme_1_2,\n\n                        R.color.color_scheme_1_3, R.color.color_scheme_1_4);\n\n                return true;\n\n \n\n            case R.id.menu_color_scheme_2:\n\n                Log.i(LOG_TAG, \"setColorScheme #2\");\n\n                item.setChecked(true);\n\n \n\n                // Change the colors displayed by the SwipeRefreshLayout by providing it with 4\n\n                // color resource ids\n\n                setColorScheme(R.color.color_scheme_2_1, R.color.color_scheme_2_2,\n\n                        R.color.color_scheme_2_3, R.color.color_scheme_2_4);\n\n                return true;\n\n \n\n            case R.id.menu_color_scheme_3:\n\n                Log.i(LOG_TAG, \"setColorScheme #3\");\n\n                item.setChecked(true);\n\n \n\n                // Change the colors displayed by the SwipeRefreshLayout by providing it with 4\n\n                // color resource ids\n\n                setColorScheme(R.color.color_scheme_3_1, R.color.color_scheme_3_2,\n\n                        R.color.color_scheme_3_3, R.color.color_scheme_3_4);\n\n                return true;\n\n        }\n\n \n\n        return super.onOptionsItemSelected(item);\n\n    }\n\n \n\n    /**\n\n     * By abstracting the refresh process to a single method, the app allows both the\n\n     * SwipeGestureLayout onRefresh() method and the Refresh action item to refresh the content.\n\n     */\n\n    private void initiateRefresh() {\n\n        Log.i(LOG_TAG, \"initiateRefresh\");\n\n \n\n        /**\n\n         * Execute the background task, which uses {@link android.os.AsyncTask} to load the data.\n\n         */\n\n        new DummyBackgroundTask().execute();\n\n    }\n\n \n\n    /**\n\n     * When the AsyncTask finishes, it calls onRefreshComplete(), which updates the data in the\n\n     * ListAdapter and turns off the progress bar.\n\n     */\n\n    private void onRefreshComplete(List<String> result) {\n\n        Log.i(LOG_TAG, \"onRefreshComplete\");\n\n \n\n        // Remove all items from the ListAdapter, and then replace them with the new items\n\n        ArrayAdapter<String> adapter = (ArrayAdapter<String>) getListAdapter();\n\n        adapter.clear();\n\n        for (String cheese : result) {\n\n            adapter.add(cheese);\n\n        }\n\n \n\n        // Stop the refreshing indicator\n\n        setRefreshing(false);\n\n    }\n\n \n\n    /**\n\n     * Dummy {@link AsyncTask} which simulates a long running task to fetch new cheeses.\n\n     */\n\n    private class DummyBackgroundTask extends AsyncTask<Void, Void, List<String>> {\n\n \n\n        static final int TASK_DURATION = 3 * 1000; // 3 seconds\n\n \n\n        @Override\n\n        protected List<String> doInBackground(Void... params) {\n\n            // Sleep for a small amount of time to simulate a background-task\n\n            try {\n\n                Thread.sleep(TASK_DURATION);\n\n            } catch (InterruptedException e) {\n\n                e.printStackTrace();\n\n            }\n\n \n\n            // Return a new random list of cheeses\n\n            return Cheeses.randomList(LIST_ITEM_COUNT);\n\n        }\n\n \n\n        @Override\n\n        protected void onPostExecute(List<String> result) {\n\n            super.onPostExecute(result);\n\n \n\n            // Tell the Fragment that the refresh has completed\n\n            onRefreshComplete(result);\n\n        }\n\n \n\n    }\n\n \n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.swiperefreshlistfragment\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk android:minSdkVersion=\"10\" android:targetSdkVersion=\"19\" />\n\n \n\n    <application android:allowBackup=\"true\"\n\n        android:label=\"@string/app_name\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:theme=\"@style/AppTheme\">\n\n \n\n        <activity android:name=\".MainActivity\"\n\n                  android:label=\"@string/app_name\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n \n\n</manifest>\n  "},"SwipeRefreshMultipleViews":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com//samples/SwipeRefreshMultipleViews/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com//samples/SwipeRefreshMultipleViews/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com//samples/SwipeRefreshMultipleViews/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com//samples/SwipeRefreshMultipleViews/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com//samples/SwipeRefreshMultipleViews/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"vertical\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <ViewAnimator\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\"\n\n          android:layout_weight=\"1\">\n\n \n\n        <ScrollView\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingRight=\"@dimen/horizontal_page_margin\"\n\n                  android:paddingTop=\"@dimen/vertical_page_margin\"\n\n                  android:paddingBottom=\"@dimen/vertical_page_margin\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </ScrollView>\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\" />\n\n \n\n    </ViewAnimator>\n\n \n\n    <View\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"1dp\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"0px\" />\n\n \n\n</LinearLayout>\n\n \n  ","fragment_sample.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n<com.example.android.swiperefreshmultipleviews.MultiSwipeRefreshLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:id=\"@+id/swiperefresh\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\">\n\n \n\n    <FrameLayout\n\n          android:layout_width=\"match_parent\"\n\n          android:layout_height=\"match_parent\">\n\n \n\n        <GridView\n\n              android:id=\"@android:id/list\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"match_parent\"\n\n              android:numColumns=\"2\" />\n\n \n\n        <TextView\n\n              android:id=\"@android:id/empty\"\n\n              android:layout_width=\"wrap_content\"\n\n              android:layout_height=\"wrap_content\"\n\n              android:text=\"@string/empty_text\"\n\n              android:layout_gravity=\"center\"/>\n\n \n\n    </FrameLayout>\n\n \n\n</com.example.android.swiperefreshmultipleviews.MultiSwipeRefreshLayout>\n  "},"layout-w720dp":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n<LinearLayout\n\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n      android:orientation=\"horizontal\"\n\n      android:layout_width=\"match_parent\"\n\n      android:layout_height=\"match_parent\"\n\n      android:id=\"@+id/sample_main_layout\">\n\n \n\n    <LinearLayout\n\n          android:id=\"@+id/sample_output\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\"\n\n          android:layout_weight=\"1\"\n\n          android:orientation=\"vertical\">\n\n \n\n        <FrameLayout\n\n              style=\"@style/Widget.SampleMessageTile\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"wrap_content\">\n\n \n\n            <TextView\n\n                  style=\"@style/Widget.SampleMessage\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:paddingLeft=\"@dimen/margin_medium\"\n\n                  android:paddingRight=\"@dimen/margin_medium\"\n\n                  android:paddingTop=\"@dimen/margin_large\"\n\n                  android:paddingBottom=\"@dimen/margin_large\"\n\n                  android:text=\"@string/intro_message\" />\n\n        </FrameLayout>\n\n \n\n        <View\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"1dp\"\n\n              android:background=\"@android:color/darker_gray\" />\n\n \n\n        <fragment\n\n              android:name=\"com.example.android.common.logger.LogFragment\"\n\n              android:id=\"@+id/log_fragment\"\n\n              android:layout_width=\"match_parent\"\n\n              android:layout_height=\"0px\"\n\n              android:layout_weight=\"1\" />\n\n \n\n    </LinearLayout>\n\n \n\n    <View\n\n          android:layout_width=\"1dp\"\n\n          android:layout_height=\"match_parent\"\n\n          android:background=\"@android:color/darker_gray\" />\n\n \n\n    <FrameLayout\n\n          android:id=\"@+id/sample_content_fragment\"\n\n          android:layout_weight=\"2\"\n\n          android:layout_width=\"0px\"\n\n          android:layout_height=\"match_parent\" />\n\n \n\n</LinearLayout>\n\n \n\n \n  "},"menu":{"main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <item android:id=\"@+id/menu_toggle_log\"\n\n          android:showAsAction=\"always\"\n\n          android:title=\"@string/sample_show_log\" />\n\n</menu>\n  ","main_menu.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n \n\n    <item\n\n          android:id=\"@+id/menu_clear\"\n\n          android:title=\"@string/menu_clear\"\n\n          android:showAsAction=\"never\" />\n\n \n\n    <item\n\n          android:id=\"@+id/menu_refresh\"\n\n          android:title=\"@string/menu_refresh\"\n\n          android:showAsAction=\"never\" />\n\n \n\n</menu>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">SwipeRefreshMultipleViews</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            A sample which shows how to use SwipeRefreshLayout to add the \\'swipe-to-refresh\\'\n\n            gesture to a layout with multiple children, enabling the ability to trigger a\n\n            refresh from swiping down on the visible view. In this sample, SwipeRefreshLayout\n\n            contains a scrollable GridView, along with a TextView empty view.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","color.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n Copyright 2014 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <color name=\"swipe_color_1\">#B6DB49</color>\n\n    <color name=\"swipe_color_2\">#99CC00</color>\n\n    <color name=\"swipe_color_3\">#8ABD00</color>\n\n    <color name=\"swipe_color_4\">#7CAF00</color>\n\n \n\n</resources>\n  ","strings.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n<resources>\n\n    <string name=\"sample_show_log\">Show Log</string>\n\n    <string name=\"sample_hide_log\">Hide Log</string>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.common":{"activities":{"SampleActivityBase.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\npackage com.example.android.common.activities;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentActivity;\n\n \n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogWrapper;\n\n \n\n/**\n\n * Base launcher activity, to handle most of the common plumbing for samples.\n\n */\n\npublic class SampleActivityBase extends FragmentActivity {\n\n \n\n    public static final String TAG = \"SampleActivityBase\";\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n    }\n\n \n\n    @Override\n\n    protected  void onStart() {\n\n        super.onStart();\n\n        initializeLogging();\n\n    }\n\n \n\n    /** Set up targets to receive log data */\n\n    public void initializeLogging() {\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        // Wraps Android's native log framework\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        Log.setLogNode(logWrapper);\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  "},"dummydata":{"Cheeses.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.dummydata;\n\n \n\nimport java.util.ArrayList;\n\nimport java.util.HashSet;\n\nimport java.util.Random;\n\n \n\n/**\n\n * Dummy data.\n\n */\n\npublic class Cheeses {\n\n    static final String[] CHEESES = {\n\n            \"Abbaye de Belloc\", \"Abbaye du Mont des Cats\", \"Abertam\", \"Abondance\", \"Ackawi\",\n\n            \"Acorn\", \"Adelost\", \"Affidelice au Chablis\", \"Afuega'l Pitu\", \"Airag\", \"Airedale\",\n\n            \"Aisy Cendre\", \"Allgauer Emmentaler\", \"Alverca\", \"Ambert\", \"American Cheese\",\n\n            \"Ami du Chambertin\", \"Anejo Enchilado\", \"Anneau du Vic-Bilh\", \"Anthoriro\", \"Appenzell\",\n\n            \"Aragon\", \"Ardi Gasna\", \"Ardrahan\", \"Armenian String\", \"Aromes au Gene de Marc\",\n\n            \"Asadero\", \"Asiago\", \"Aubisque Pyrenees\", \"Autun\", \"Avaxtskyr\", \"Baby Swiss\",\n\n            \"Babybel\", \"Baguette Laonnaise\", \"Bakers\", \"Baladi\", \"Balaton\", \"Bandal\", \"Banon\",\n\n            \"Barry's Bay Cheddar\", \"Basing\", \"Basket Cheese\", \"Bath Cheese\", \"Bavarian Bergkase\",\n\n            \"Baylough\", \"Beaufort\", \"Beauvoorde\", \"Beenleigh Blue\", \"Beer Cheese\", \"Bel Paese\",\n\n            \"Bergader\", \"Bergere Bleue\", \"Berkswell\", \"Beyaz Peynir\", \"Bierkase\", \"Bishop Kennedy\",\n\n            \"Blarney\", \"Bleu d'Auvergne\", \"Bleu de Gex\", \"Bleu de Laqueuille\",\n\n            \"Bleu de Septmoncel\", \"Bleu Des Causses\", \"Blue\", \"Blue Castello\", \"Blue Rathgore\",\n\n            \"Blue Vein (Australian)\", \"Blue Vein Cheeses\", \"Bocconcini\", \"Bocconcini (Australian)\",\n\n            \"Boeren Leidenkaas\", \"Bonchester\", \"Bosworth\", \"Bougon\", \"Boule Du Roves\",\n\n            \"Boulette d'Avesnes\", \"Boursault\", \"Boursin\", \"Bouyssou\", \"Bra\", \"Braudostur\",\n\n            \"Breakfast Cheese\", \"Brebis du Lavort\", \"Brebis du Lochois\", \"Brebis du Puyfaucon\",\n\n            \"Bresse Bleu\", \"Brick\", \"Brie\", \"Brie de Meaux\", \"Brie de Melun\", \"Brillat-Savarin\",\n\n            \"Brin\", \"Brin d' Amour\", \"Brin d'Amour\", \"Brinza (Burduf Brinza)\",\n\n            \"Briquette de Brebis\", \"Briquette du Forez\", \"Broccio\", \"Broccio Demi-Affine\",\n\n            \"Brousse du Rove\", \"Bruder Basil\", \"Brusselae Kaas (Fromage de Bruxelles)\", \"Bryndza\",\n\n            \"Buchette d'Anjou\", \"Buffalo\", \"Burgos\", \"Butte\", \"Butterkase\", \"Button (Innes)\",\n\n            \"Buxton Blue\", \"Cabecou\", \"Caboc\", \"Cabrales\", \"Cachaille\", \"Caciocavallo\", \"Caciotta\",\n\n            \"Caerphilly\", \"Cairnsmore\", \"Calenzana\", \"Cambazola\", \"Camembert de Normandie\",\n\n            \"Canadian Cheddar\", \"Canestrato\", \"Cantal\", \"Caprice des Dieux\", \"Capricorn Goat\",\n\n            \"Capriole Banon\", \"Carre de l'Est\", \"Casciotta di Urbino\", \"Cashel Blue\", \"Castellano\",\n\n            \"Castelleno\", \"Castelmagno\", \"Castelo Branco\", \"Castigliano\", \"Cathelain\",\n\n            \"Celtic Promise\", \"Cendre d'Olivet\", \"Cerney\", \"Chabichou\", \"Chabichou du Poitou\",\n\n            \"Chabis de Gatine\", \"Chaource\", \"Charolais\", \"Chaumes\", \"Cheddar\",\n\n            \"Cheddar Clothbound\", \"Cheshire\", \"Chevres\", \"Chevrotin des Aravis\", \"Chontaleno\",\n\n            \"Civray\", \"Coeur de Camembert au Calvados\", \"Coeur de Chevre\", \"Colby\", \"Cold Pack\",\n\n            \"Comte\", \"Coolea\", \"Cooleney\", \"Coquetdale\", \"Corleggy\", \"Cornish Pepper\",\n\n            \"Cotherstone\", \"Cotija\", \"Cottage Cheese\", \"Cottage Cheese (Australian)\",\n\n            \"Cougar Gold\", \"Coulommiers\", \"Coverdale\", \"Crayeux de Roncq\", \"Cream Cheese\",\n\n            \"Cream Havarti\", \"Crema Agria\", \"Crema Mexicana\", \"Creme Fraiche\", \"Crescenza\",\n\n            \"Croghan\", \"Crottin de Chavignol\", \"Crottin du Chavignol\", \"Crowdie\", \"Crowley\",\n\n            \"Cuajada\", \"Curd\", \"Cure Nantais\", \"Curworthy\", \"Cwmtawe Pecorino\",\n\n            \"Cypress Grove Chevre\", \"Danablu (Danish Blue)\", \"Danbo\", \"Danish Fontina\",\n\n            \"Daralagjazsky\", \"Dauphin\", \"Delice des Fiouves\", \"Denhany Dorset Drum\", \"Derby\",\n\n            \"Dessertnyj Belyj\", \"Devon Blue\", \"Devon Garland\", \"Dolcelatte\", \"Doolin\",\n\n            \"Doppelrhamstufel\", \"Dorset Blue Vinney\", \"Double Gloucester\", \"Double Worcester\",\n\n            \"Dreux a la Feuille\", \"Dry Jack\", \"Duddleswell\", \"Dunbarra\", \"Dunlop\", \"Dunsyre Blue\",\n\n            \"Duroblando\", \"Durrus\", \"Dutch Mimolette (Commissiekaas)\", \"Edam\", \"Edelpilz\",\n\n            \"Emental Grand Cru\", \"Emlett\", \"Emmental\", \"Epoisses de Bourgogne\", \"Esbareich\",\n\n            \"Esrom\", \"Etorki\", \"Evansdale Farmhouse Brie\", \"Evora De L'Alentejo\", \"Exmoor Blue\",\n\n            \"Explorateur\", \"Feta\", \"Feta (Australian)\", \"Figue\", \"Filetta\", \"Fin-de-Siecle\",\n\n            \"Finlandia Swiss\", \"Finn\", \"Fiore Sardo\", \"Fleur du Maquis\", \"Flor de Guia\",\n\n            \"Flower Marie\", \"Folded\", \"Folded cheese with mint\", \"Fondant de Brebis\",\n\n            \"Fontainebleau\", \"Fontal\", \"Fontina Val d'Aosta\", \"Formaggio di capra\", \"Fougerus\",\n\n            \"Four Herb Gouda\", \"Fourme d' Ambert\", \"Fourme de Haute Loire\", \"Fourme de Montbrison\",\n\n            \"Fresh Jack\", \"Fresh Mozzarella\", \"Fresh Ricotta\", \"Fresh Truffles\", \"Fribourgeois\",\n\n            \"Friesekaas\", \"Friesian\", \"Friesla\", \"Frinault\", \"Fromage a Raclette\", \"Fromage Corse\",\n\n            \"Fromage de Montagne de Savoie\", \"Fromage Frais\", \"Fruit Cream Cheese\",\n\n            \"Frying Cheese\", \"Fynbo\", \"Gabriel\", \"Galette du Paludier\", \"Galette Lyonnaise\",\n\n            \"Galloway Goat's Milk Gems\", \"Gammelost\", \"Gaperon a l'Ail\", \"Garrotxa\", \"Gastanberra\",\n\n            \"Geitost\", \"Gippsland Blue\", \"Gjetost\", \"Gloucester\", \"Golden Cross\", \"Gorgonzola\",\n\n            \"Gornyaltajski\", \"Gospel Green\", \"Gouda\", \"Goutu\", \"Gowrie\", \"Grabetto\", \"Graddost\",\n\n            \"Grafton Village Cheddar\", \"Grana\", \"Grana Padano\", \"Grand Vatel\",\n\n            \"Grataron d' Areches\", \"Gratte-Paille\", \"Graviera\", \"Greuilh\", \"Greve\",\n\n            \"Gris de Lille\", \"Gruyere\", \"Gubbeen\", \"Guerbigny\", \"Halloumi\",\n\n            \"Halloumy (Australian)\", \"Haloumi-Style Cheese\", \"Harbourne Blue\", \"Havarti\",\n\n            \"Heidi Gruyere\", \"Hereford Hop\", \"Herrgardsost\", \"Herriot Farmhouse\", \"Herve\",\n\n            \"Hipi Iti\", \"Hubbardston Blue Cow\", \"Hushallsost\", \"Iberico\", \"Idaho Goatster\",\n\n            \"Idiazabal\", \"Il Boschetto al Tartufo\", \"Ile d'Yeu\", \"Isle of Mull\", \"Jarlsberg\",\n\n            \"Jermi Tortes\", \"Jibneh Arabieh\", \"Jindi Brie\", \"Jubilee Blue\", \"Juustoleipa\",\n\n            \"Kadchgall\", \"Kaseri\", \"Kashta\", \"Kefalotyri\", \"Kenafa\", \"Kernhem\", \"Kervella Affine\",\n\n            \"Kikorangi\", \"King Island Cape Wickham Brie\", \"King River Gold\", \"Klosterkaese\",\n\n            \"Knockalara\", \"Kugelkase\", \"L'Aveyronnais\", \"L'Ecir de l'Aubrac\", \"La Taupiniere\",\n\n            \"La Vache Qui Rit\", \"Laguiole\", \"Lairobell\", \"Lajta\", \"Lanark Blue\", \"Lancashire\",\n\n            \"Langres\", \"Lappi\", \"Laruns\", \"Lavistown\", \"Le Brin\", \"Le Fium Orbo\", \"Le Lacandou\",\n\n            \"Le Roule\", \"Leafield\", \"Lebbene\", \"Leerdammer\", \"Leicester\", \"Leyden\", \"Limburger\",\n\n            \"Lincolnshire Poacher\", \"Lingot Saint Bousquet d'Orb\", \"Liptauer\", \"Little Rydings\",\n\n            \"Livarot\", \"Llanboidy\", \"Llanglofan Farmhouse\", \"Loch Arthur Farmhouse\",\n\n            \"Loddiswell Avondale\", \"Longhorn\", \"Lou Palou\", \"Lou Pevre\", \"Lyonnais\", \"Maasdam\",\n\n            \"Macconais\", \"Mahoe Aged Gouda\", \"Mahon\", \"Malvern\", \"Mamirolle\", \"Manchego\",\n\n            \"Manouri\", \"Manur\", \"Marble Cheddar\", \"Marbled Cheeses\", \"Maredsous\", \"Margotin\",\n\n            \"Maribo\", \"Maroilles\", \"Mascares\", \"Mascarpone\", \"Mascarpone (Australian)\",\n\n            \"Mascarpone Torta\", \"Matocq\", \"Maytag Blue\", \"Meira\", \"Menallack Farmhouse\",\n\n            \"Menonita\", \"Meredith Blue\", \"Mesost\", \"Metton (Cancoillotte)\", \"Meyer Vintage Gouda\",\n\n            \"Mihalic Peynir\", \"Milleens\", \"Mimolette\", \"Mine-Gabhar\", \"Mini Baby Bells\", \"Mixte\",\n\n            \"Molbo\", \"Monastery Cheeses\", \"Mondseer\", \"Mont D'or Lyonnais\", \"Montasio\",\n\n            \"Monterey Jack\", \"Monterey Jack Dry\", \"Morbier\", \"Morbier Cru de Montagne\",\n\n            \"Mothais a la Feuille\", \"Mozzarella\", \"Mozzarella (Australian)\",\n\n            \"Mozzarella di Bufala\", \"Mozzarella Fresh, in water\", \"Mozzarella Rolls\", \"Munster\",\n\n            \"Murol\", \"Mycella\", \"Myzithra\", \"Naboulsi\", \"Nantais\", \"Neufchatel\",\n\n            \"Neufchatel (Australian)\", \"Niolo\", \"Nokkelost\", \"Northumberland\", \"Oaxaca\",\n\n            \"Olde York\", \"Olivet au Foin\", \"Olivet Bleu\", \"Olivet Cendre\",\n\n            \"Orkney Extra Mature Cheddar\", \"Orla\", \"Oschtjepka\", \"Ossau Fermier\", \"Ossau-Iraty\",\n\n            \"Oszczypek\", \"Oxford Blue\", \"P'tit Berrichon\", \"Palet de Babligny\", \"Paneer\", \"Panela\",\n\n            \"Pannerone\", \"Pant ys Gawn\", \"Parmesan (Parmigiano)\", \"Parmigiano Reggiano\",\n\n            \"Pas de l'Escalette\", \"Passendale\", \"Pasteurized Processed\", \"Pate de Fromage\",\n\n            \"Patefine Fort\", \"Pave d'Affinois\", \"Pave d'Auge\", \"Pave de Chirac\", \"Pave du Berry\",\n\n            \"Pecorino\", \"Pecorino in Walnut Leaves\", \"Pecorino Romano\", \"Peekskill Pyramid\",\n\n            \"Pelardon des Cevennes\", \"Pelardon des Corbieres\", \"Penamellera\", \"Penbryn\",\n\n            \"Pencarreg\", \"Perail de Brebis\", \"Petit Morin\", \"Petit Pardou\", \"Petit-Suisse\",\n\n            \"Picodon de Chevre\", \"Picos de Europa\", \"Piora\", \"Pithtviers au Foin\",\n\n            \"Plateau de Herve\", \"Plymouth Cheese\", \"Podhalanski\", \"Poivre d'Ane\", \"Polkolbin\",\n\n            \"Pont l'Eveque\", \"Port Nicholson\", \"Port-Salut\", \"Postel\", \"Pouligny-Saint-Pierre\",\n\n            \"Pourly\", \"Prastost\", \"Pressato\", \"Prince-Jean\", \"Processed Cheddar\", \"Provolone\",\n\n            \"Provolone (Australian)\", \"Pyengana Cheddar\", \"Pyramide\", \"Quark\",\n\n            \"Quark (Australian)\", \"Quartirolo Lombardo\", \"Quatre-Vents\", \"Quercy Petit\",\n\n            \"Queso Blanco\", \"Queso Blanco con Frutas --Pina y Mango\", \"Queso de Murcia\",\n\n            \"Queso del Montsec\", \"Queso del Tietar\", \"Queso Fresco\", \"Queso Fresco (Adobera)\",\n\n            \"Queso Iberico\", \"Queso Jalapeno\", \"Queso Majorero\", \"Queso Media Luna\",\n\n            \"Queso Para Frier\", \"Queso Quesadilla\", \"Rabacal\", \"Raclette\", \"Ragusano\", \"Raschera\",\n\n            \"Reblochon\", \"Red Leicester\", \"Regal de la Dombes\", \"Reggianito\", \"Remedou\",\n\n            \"Requeson\", \"Richelieu\", \"Ricotta\", \"Ricotta (Australian)\", \"Ricotta Salata\", \"Ridder\",\n\n            \"Rigotte\", \"Rocamadour\", \"Rollot\", \"Romano\", \"Romans Part Dieu\", \"Roncal\", \"Roquefort\",\n\n            \"Roule\", \"Rouleau De Beaulieu\", \"Royalp Tilsit\", \"Rubens\", \"Rustinu\", \"Saaland Pfarr\",\n\n            \"Saanenkaese\", \"Saga\", \"Sage Derby\", \"Sainte Maure\", \"Saint-Marcellin\",\n\n            \"Saint-Nectaire\", \"Saint-Paulin\", \"Salers\", \"Samso\", \"San Simon\", \"Sancerre\",\n\n            \"Sap Sago\", \"Sardo\", \"Sardo Egyptian\", \"Sbrinz\", \"Scamorza\", \"Schabzieger\", \"Schloss\",\n\n            \"Selles sur Cher\", \"Selva\", \"Serat\", \"Seriously Strong Cheddar\", \"Serra da Estrela\",\n\n            \"Sharpam\", \"Shelburne Cheddar\", \"Shropshire Blue\", \"Siraz\", \"Sirene\", \"Smoked Gouda\",\n\n            \"Somerset Brie\", \"Sonoma Jack\", \"Sottocenare al Tartufo\", \"Soumaintrain\",\n\n            \"Sourire Lozerien\", \"Spenwood\", \"Sraffordshire Organic\", \"St. Agur Blue Cheese\",\n\n            \"Stilton\", \"Stinking Bishop\", \"String\", \"Sussex Slipcote\", \"Sveciaost\", \"Swaledale\",\n\n            \"Sweet Style Swiss\", \"Swiss\", \"Syrian (Armenian String)\", \"Tala\", \"Taleggio\", \"Tamie\",\n\n            \"Tasmania Highland Chevre Log\", \"Taupiniere\", \"Teifi\", \"Telemea\", \"Testouri\",\n\n            \"Tete de Moine\", \"Tetilla\", \"Texas Goat Cheese\", \"Tibet\", \"Tillamook Cheddar\",\n\n            \"Tilsit\", \"Timboon Brie\", \"Toma\", \"Tomme Brulee\", \"Tomme d'Abondance\",\n\n            \"Tomme de Chevre\", \"Tomme de Romans\", \"Tomme de Savoie\", \"Tomme des Chouans\", \"Tommes\",\n\n            \"Torta del Casar\", \"Toscanello\", \"Touree de L'Aubier\", \"Tourmalet\",\n\n            \"Trappe (Veritable)\", \"Trois Cornes De Vendee\", \"Tronchon\", \"Trou du Cru\", \"Truffe\",\n\n            \"Tupi\", \"Turunmaa\", \"Tymsboro\", \"Tyn Grug\", \"Tyning\", \"Ubriaco\", \"Ulloa\",\n\n            \"Vacherin-Fribourgeois\", \"Valencay\", \"Vasterbottenost\", \"Venaco\", \"Vendomois\",\n\n            \"Vieux Corse\", \"Vignotte\", \"Vulscombe\", \"Waimata Farmhouse Blue\",\n\n            \"Washed Rind Cheese (Australian)\", \"Waterloo\", \"Weichkaese\", \"Wellington\",\n\n            \"Wensleydale\", \"White Stilton\", \"Whitestone Farmhouse\", \"Wigmore\", \"Woodside Cabecou\",\n\n            \"Xanadu\", \"Xynotyro\", \"Yarg Cornish\", \"Yarra Valley Pyramid\", \"Yorkshire Blue\",\n\n            \"Zamorano\", \"Zanetti Grana Padano\", \"Zanetti Parmigiano Reggiano\"\n\n    };\n\n \n\n    public static ArrayList<String> asList() {\n\n        ArrayList<String> items = new ArrayList<String>();\n\n        for (int i = 0, z = CHEESES.length ; i < z ; i++) {\n\n            items.add(CHEESES[i]);\n\n        }\n\n        return items;\n\n    }\n\n \n\n    /**\n\n     * Return a list of random cheeses.\n\n     *\n\n     * @param count the amount of cheeses to return.\n\n     */\n\n    public static ArrayList<String> randomList(int count) {\n\n        Random random = new Random();\n\n        HashSet<String> items = new HashSet<String>();\n\n \n\n        // Make sure that don't infinity loop\n\n        count = Math.min(count, CHEESES.length);\n\n \n\n        while (items.size() < count) {\n\n            items.add(CHEESES[random.nextInt(CHEESES.length)]);\n\n        }\n\n \n\n        return new ArrayList<String>(items);\n\n    }\n\n}\n  "},"logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "},"view":{"SlidingTabLayout.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.view;\n\n \n\nimport android.content.Context;\n\nimport android.graphics.Typeface;\n\nimport android.os.Build;\n\nimport android.support.v4.view.PagerAdapter;\n\nimport android.support.v4.view.ViewPager;\n\nimport android.util.AttributeSet;\n\nimport android.util.TypedValue;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.widget.HorizontalScrollView;\n\nimport android.widget.TextView;\n\n \n\n/**\n\n * To be used with ViewPager to provide a tab indicator component which give constant feedback as to\n\n * the user's scroll progress.\n\n * <p>\n\n * To use the component, simply add it to your view hierarchy. Then in your\n\n * {@link android.app.Activity} or {@link android.support.v4.app.Fragment} call\n\n * {@link #setViewPager(ViewPager)} providing it the ViewPager this layout is being used for.\n\n * <p>\n\n * The colors can be customized in two ways. The first and simplest is to provide an array of colors\n\n * via {@link #setSelectedIndicatorColors(int...)} and {@link #setDividerColors(int...)}. The\n\n * alternative is via the {@link TabColorizer} interface which provides you complete control over\n\n * which color is used for any individual position.\n\n * <p>\n\n * The views used as tabs can be customized by calling {@link #setCustomTabView(int, int)},\n\n * providing the layout ID of your custom layout.\n\n */\n\npublic class SlidingTabLayout extends HorizontalScrollView {\n\n \n\n    /**\n\n     * Allows complete control over the colors drawn in the tab layout. Set with\n\n     * {@link #setCustomTabColorizer(TabColorizer)}.\n\n     */\n\n    public interface TabColorizer {\n\n \n\n        /**\n\n         * @return return the color of the indicator used when {@code position} is selected.\n\n         */\n\n        int getIndicatorColor(int position);\n\n \n\n        /**\n\n         * @return return the color of the divider drawn to the right of {@code position}.\n\n         */\n\n        int getDividerColor(int position);\n\n \n\n    }\n\n \n\n    private static final int TITLE_OFFSET_DIPS = 24;\n\n    private static final int TAB_VIEW_PADDING_DIPS = 16;\n\n    private static final int TAB_VIEW_TEXT_SIZE_SP = 12;\n\n \n\n    private int mTitleOffset;\n\n \n\n    private int mTabViewLayoutId;\n\n    private int mTabViewTextViewId;\n\n \n\n    private ViewPager mViewPager;\n\n    private ViewPager.OnPageChangeListener mViewPagerPageChangeListener;\n\n \n\n    private final SlidingTabStrip mTabStrip;\n\n \n\n    public SlidingTabLayout(Context context) {\n\n        this(context, null);\n\n    }\n\n \n\n    public SlidingTabLayout(Context context, AttributeSet attrs) {\n\n        this(context, attrs, 0);\n\n    }\n\n \n\n    public SlidingTabLayout(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n \n\n        // Disable the Scroll Bar\n\n        setHorizontalScrollBarEnabled(false);\n\n        // Make sure that the Tab Strips fills this View\n\n        setFillViewport(true);\n\n \n\n        mTitleOffset = (int) (TITLE_OFFSET_DIPS * getResources().getDisplayMetrics().density);\n\n \n\n        mTabStrip = new SlidingTabStrip(context);\n\n        addView(mTabStrip, LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);\n\n    }\n\n \n\n    /**\n\n     * Set the custom {@link TabColorizer} to be used.\n\n     *\n\n     * If you only require simple custmisation then you can use\n\n     * {@link #setSelectedIndicatorColors(int...)} and {@link #setDividerColors(int...)} to achieve\n\n     * similar effects.\n\n     */\n\n    public void setCustomTabColorizer(TabColorizer tabColorizer) {\n\n        mTabStrip.setCustomTabColorizer(tabColorizer);\n\n    }\n\n \n\n    /**\n\n     * Sets the colors to be used for indicating the selected tab. These colors are treated as a\n\n     * circular array. Providing one color will mean that all tabs are indicated with the same color.\n\n     */\n\n    public void setSelectedIndicatorColors(int... colors) {\n\n        mTabStrip.setSelectedIndicatorColors(colors);\n\n    }\n\n \n\n    /**\n\n     * Sets the colors to be used for tab dividers. These colors are treated as a circular array.\n\n     * Providing one color will mean that all tabs are indicated with the same color.\n\n     */\n\n    public void setDividerColors(int... colors) {\n\n        mTabStrip.setDividerColors(colors);\n\n    }\n\n \n\n    /**\n\n     * Set the {@link ViewPager.OnPageChangeListener}. When using {@link SlidingTabLayout} you are\n\n     * required to set any {@link ViewPager.OnPageChangeListener} through this method. This is so\n\n     * that the layout can update it's scroll position correctly.\n\n     *\n\n     * @see ViewPager#setOnPageChangeListener(ViewPager.OnPageChangeListener)\n\n     */\n\n    public void setOnPageChangeListener(ViewPager.OnPageChangeListener listener) {\n\n        mViewPagerPageChangeListener = listener;\n\n    }\n\n \n\n    /**\n\n     * Set the custom layout to be inflated for the tab views.\n\n     *\n\n     * @param layoutResId Layout id to be inflated\n\n     * @param textViewId id of the {@link TextView} in the inflated view\n\n     */\n\n    public void setCustomTabView(int layoutResId, int textViewId) {\n\n        mTabViewLayoutId = layoutResId;\n\n        mTabViewTextViewId = textViewId;\n\n    }\n\n \n\n    /**\n\n     * Sets the associated view pager. Note that the assumption here is that the pager content\n\n     * (number of tabs and tab titles) does not change after this call has been made.\n\n     */\n\n    public void setViewPager(ViewPager viewPager) {\n\n        mTabStrip.removeAllViews();\n\n \n\n        mViewPager = viewPager;\n\n        if (viewPager != null) {\n\n            viewPager.setOnPageChangeListener(new InternalViewPagerListener());\n\n            populateTabStrip();\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Create a default view to be used for tabs. This is called if a custom tab view is not set via\n\n     * {@link #setCustomTabView(int, int)}.\n\n     */\n\n    protected TextView createDefaultTabView(Context context) {\n\n        TextView textView = new TextView(context);\n\n        textView.setGravity(Gravity.CENTER);\n\n        textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, TAB_VIEW_TEXT_SIZE_SP);\n\n        textView.setTypeface(Typeface.DEFAULT_BOLD);\n\n \n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {\n\n            // If we're running on Honeycomb or newer, then we can use the Theme's\n\n            // selectableItemBackground to ensure that the View has a pressed state\n\n            TypedValue outValue = new TypedValue();\n\n            getContext().getTheme().resolveAttribute(android.R.attr.selectableItemBackground,\n\n                    outValue, true);\n\n            textView.setBackgroundResource(outValue.resourceId);\n\n        }\n\n \n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {\n\n            // If we're running on ICS or newer, enable all-caps to match the Action Bar tab style\n\n            textView.setAllCaps(true);\n\n        }\n\n \n\n        int padding = (int) (TAB_VIEW_PADDING_DIPS * getResources().getDisplayMetrics().density);\n\n        textView.setPadding(padding, padding, padding, padding);\n\n \n\n        return textView;\n\n    }\n\n \n\n    private void populateTabStrip() {\n\n        final PagerAdapter adapter = mViewPager.getAdapter();\n\n        final View.OnClickListener tabClickListener = new TabClickListener();\n\n \n\n        for (int i = 0; i < adapter.getCount(); i++) {\n\n            View tabView = null;\n\n            TextView tabTitleView = null;\n\n \n\n            if (mTabViewLayoutId != 0) {\n\n                // If there is a custom tab view layout id set, try and inflate it\n\n                tabView = LayoutInflater.from(getContext()).inflate(mTabViewLayoutId, mTabStrip,\n\n                        false);\n\n                tabTitleView = (TextView) tabView.findViewById(mTabViewTextViewId);\n\n            }\n\n \n\n            if (tabView == null) {\n\n                tabView = createDefaultTabView(getContext());\n\n            }\n\n \n\n            if (tabTitleView == null && TextView.class.isInstance(tabView)) {\n\n                tabTitleView = (TextView) tabView;\n\n            }\n\n \n\n            tabTitleView.setText(adapter.getPageTitle(i));\n\n            tabView.setOnClickListener(tabClickListener);\n\n \n\n            mTabStrip.addView(tabView);\n\n        }\n\n    }\n\n \n\n    @Override\n\n    protected void onAttachedToWindow() {\n\n        super.onAttachedToWindow();\n\n \n\n        if (mViewPager != null) {\n\n            scrollToTab(mViewPager.getCurrentItem(), 0);\n\n        }\n\n    }\n\n \n\n    private void scrollToTab(int tabIndex, int positionOffset) {\n\n        final int tabStripChildCount = mTabStrip.getChildCount();\n\n        if (tabStripChildCount == 0 || tabIndex < 0 || tabIndex >= tabStripChildCount) {\n\n            return;\n\n        }\n\n \n\n        View selectedChild = mTabStrip.getChildAt(tabIndex);\n\n        if (selectedChild != null) {\n\n            int targetScrollX = selectedChild.getLeft() + positionOffset;\n\n \n\n            if (tabIndex > 0 || positionOffset > 0) {\n\n                // If we're not at the first child and are mid-scroll, make sure we obey the offset\n\n                targetScrollX -= mTitleOffset;\n\n            }\n\n \n\n            scrollTo(targetScrollX, 0);\n\n        }\n\n    }\n\n \n\n    private class InternalViewPagerListener implements ViewPager.OnPageChangeListener {\n\n        private int mScrollState;\n\n \n\n        @Override\n\n        public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\n\n            int tabStripChildCount = mTabStrip.getChildCount();\n\n            if ((tabStripChildCount == 0) || (position < 0) || (position >= tabStripChildCount)) {\n\n                return;\n\n            }\n\n \n\n            mTabStrip.onViewPagerPageChanged(position, positionOffset);\n\n \n\n            View selectedTitle = mTabStrip.getChildAt(position);\n\n            int extraOffset = (selectedTitle != null)\n\n                    ? (int) (positionOffset * selectedTitle.getWidth())\n\n                    : 0;\n\n            scrollToTab(position, extraOffset);\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageScrolled(position, positionOffset,\n\n                        positionOffsetPixels);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void onPageScrollStateChanged(int state) {\n\n            mScrollState = state;\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageScrollStateChanged(state);\n\n            }\n\n        }\n\n \n\n        @Override\n\n        public void onPageSelected(int position) {\n\n            if (mScrollState == ViewPager.SCROLL_STATE_IDLE) {\n\n                mTabStrip.onViewPagerPageChanged(position, 0f);\n\n                scrollToTab(position, 0);\n\n            }\n\n \n\n            if (mViewPagerPageChangeListener != null) {\n\n                mViewPagerPageChangeListener.onPageSelected(position);\n\n            }\n\n        }\n\n \n\n    }\n\n \n\n    private class TabClickListener implements View.OnClickListener {\n\n        @Override\n\n        public void onClick(View v) {\n\n            for (int i = 0; i < mTabStrip.getChildCount(); i++) {\n\n                if (v == mTabStrip.getChildAt(i)) {\n\n                    mViewPager.setCurrentItem(i);\n\n                    return;\n\n                }\n\n            }\n\n        }\n\n    }\n\n \n\n}\n  ","SlidingTabStrip.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.view;\n\n \n\nimport android.R;\n\nimport android.content.Context;\n\nimport android.graphics.Canvas;\n\nimport android.graphics.Color;\n\nimport android.graphics.Paint;\n\nimport android.util.AttributeSet;\n\nimport android.util.TypedValue;\n\nimport android.view.View;\n\nimport android.widget.LinearLayout;\n\n \n\nclass SlidingTabStrip extends LinearLayout {\n\n \n\n    private static final int DEFAULT_BOTTOM_BORDER_THICKNESS_DIPS = 2;\n\n    private static final byte DEFAULT_BOTTOM_BORDER_COLOR_ALPHA = 0x26;\n\n    private static final int SELECTED_INDICATOR_THICKNESS_DIPS = 8;\n\n    private static final int DEFAULT_SELECTED_INDICATOR_COLOR = 0xFF33B5E5;\n\n \n\n    private static final int DEFAULT_DIVIDER_THICKNESS_DIPS = 1;\n\n    private static final byte DEFAULT_DIVIDER_COLOR_ALPHA = 0x20;\n\n    private static final float DEFAULT_DIVIDER_HEIGHT = 0.5f;\n\n \n\n    private final int mBottomBorderThickness;\n\n    private final Paint mBottomBorderPaint;\n\n \n\n    private final int mSelectedIndicatorThickness;\n\n    private final Paint mSelectedIndicatorPaint;\n\n \n\n    private final int mDefaultBottomBorderColor;\n\n \n\n    private final Paint mDividerPaint;\n\n    private final float mDividerHeight;\n\n \n\n    private int mSelectedPosition;\n\n    private float mSelectionOffset;\n\n \n\n    private SlidingTabLayout.TabColorizer mCustomTabColorizer;\n\n    private final SimpleTabColorizer mDefaultTabColorizer;\n\n \n\n    SlidingTabStrip(Context context) {\n\n        this(context, null);\n\n    }\n\n \n\n    SlidingTabStrip(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n        setWillNotDraw(false);\n\n \n\n        final float density = getResources().getDisplayMetrics().density;\n\n \n\n        TypedValue outValue = new TypedValue();\n\n        context.getTheme().resolveAttribute(R.attr.colorForeground, outValue, true);\n\n        final int themeForegroundColor =  outValue.data;\n\n \n\n        mDefaultBottomBorderColor = setColorAlpha(themeForegroundColor,\n\n                DEFAULT_BOTTOM_BORDER_COLOR_ALPHA);\n\n \n\n        mDefaultTabColorizer = new SimpleTabColorizer();\n\n        mDefaultTabColorizer.setIndicatorColors(DEFAULT_SELECTED_INDICATOR_COLOR);\n\n        mDefaultTabColorizer.setDividerColors(setColorAlpha(themeForegroundColor,\n\n                DEFAULT_DIVIDER_COLOR_ALPHA));\n\n \n\n        mBottomBorderThickness = (int) (DEFAULT_BOTTOM_BORDER_THICKNESS_DIPS * density);\n\n        mBottomBorderPaint = new Paint();\n\n        mBottomBorderPaint.setColor(mDefaultBottomBorderColor);\n\n \n\n        mSelectedIndicatorThickness = (int) (SELECTED_INDICATOR_THICKNESS_DIPS * density);\n\n        mSelectedIndicatorPaint = new Paint();\n\n \n\n        mDividerHeight = DEFAULT_DIVIDER_HEIGHT;\n\n        mDividerPaint = new Paint();\n\n        mDividerPaint.setStrokeWidth((int) (DEFAULT_DIVIDER_THICKNESS_DIPS * density));\n\n    }\n\n \n\n    void setCustomTabColorizer(SlidingTabLayout.TabColorizer customTabColorizer) {\n\n        mCustomTabColorizer = customTabColorizer;\n\n        invalidate();\n\n    }\n\n \n\n    void setSelectedIndicatorColors(int... colors) {\n\n        // Make sure that the custom colorizer is removed\n\n        mCustomTabColorizer = null;\n\n        mDefaultTabColorizer.setIndicatorColors(colors);\n\n        invalidate();\n\n    }\n\n \n\n    void setDividerColors(int... colors) {\n\n        // Make sure that the custom colorizer is removed\n\n        mCustomTabColorizer = null;\n\n        mDefaultTabColorizer.setDividerColors(colors);\n\n        invalidate();\n\n    }\n\n \n\n    void onViewPagerPageChanged(int position, float positionOffset) {\n\n        mSelectedPosition = position;\n\n        mSelectionOffset = positionOffset;\n\n        invalidate();\n\n    }\n\n \n\n    @Override\n\n    protected void onDraw(Canvas canvas) {\n\n        final int height = getHeight();\n\n        final int childCount = getChildCount();\n\n        final int dividerHeightPx = (int) (Math.min(Math.max(0f, mDividerHeight), 1f) * height);\n\n        final SlidingTabLayout.TabColorizer tabColorizer = mCustomTabColorizer != null\n\n                ? mCustomTabColorizer\n\n                : mDefaultTabColorizer;\n\n \n\n        // Thick colored underline below the current selection\n\n        if (childCount > 0) {\n\n            View selectedTitle = getChildAt(mSelectedPosition);\n\n            int left = selectedTitle.getLeft();\n\n            int right = selectedTitle.getRight();\n\n            int color = tabColorizer.getIndicatorColor(mSelectedPosition);\n\n \n\n            if (mSelectionOffset > 0f && mSelectedPosition < (getChildCount() - 1)) {\n\n                int nextColor = tabColorizer.getIndicatorColor(mSelectedPosition + 1);\n\n                if (color != nextColor) {\n\n                    color = blendColors(nextColor, color, mSelectionOffset);\n\n                }\n\n \n\n                // Draw the selection partway between the tabs\n\n                View nextTitle = getChildAt(mSelectedPosition + 1);\n\n                left = (int) (mSelectionOffset * nextTitle.getLeft() +\n\n                        (1.0f - mSelectionOffset) * left);\n\n                right = (int) (mSelectionOffset * nextTitle.getRight() +\n\n                        (1.0f - mSelectionOffset) * right);\n\n            }\n\n \n\n            mSelectedIndicatorPaint.setColor(color);\n\n \n\n            canvas.drawRect(left, height - mSelectedIndicatorThickness, right,\n\n                    height, mSelectedIndicatorPaint);\n\n        }\n\n \n\n        // Thin underline along the entire bottom edge\n\n        canvas.drawRect(0, height - mBottomBorderThickness, getWidth(), height, mBottomBorderPaint);\n\n \n\n        // Vertical separators between the titles\n\n        int separatorTop = (height - dividerHeightPx) / 2;\n\n        for (int i = 0; i < childCount - 1; i++) {\n\n            View child = getChildAt(i);\n\n            mDividerPaint.setColor(tabColorizer.getDividerColor(i));\n\n            canvas.drawLine(child.getRight(), separatorTop, child.getRight(),\n\n                    separatorTop + dividerHeightPx, mDividerPaint);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Set the alpha value of the {@code color} to be the given {@code alpha} value.\n\n     */\n\n    private static int setColorAlpha(int color, byte alpha) {\n\n        return Color.argb(alpha, Color.red(color), Color.green(color), Color.blue(color));\n\n    }\n\n \n\n    /**\n\n     * Blend {@code color1} and {@code color2} using the given ratio.\n\n     *\n\n     * @param ratio of which to blend. 1.0 will return {@code color1}, 0.5 will give an even blend,\n\n     *              0.0 will return {@code color2}.\n\n     */\n\n    private static int blendColors(int color1, int color2, float ratio) {\n\n        final float inverseRation = 1f - ratio;\n\n        float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRation);\n\n        float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRation);\n\n        float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRation);\n\n        return Color.rgb((int) r, (int) g, (int) b);\n\n    }\n\n \n\n    private static class SimpleTabColorizer implements SlidingTabLayout.TabColorizer {\n\n        private int[] mIndicatorColors;\n\n        private int[] mDividerColors;\n\n \n\n        @Override\n\n        public final int getIndicatorColor(int position) {\n\n            return mIndicatorColors[position % mIndicatorColors.length];\n\n        }\n\n \n\n        @Override\n\n        public final int getDividerColor(int position) {\n\n            return mDividerColors[position % mDividerColors.length];\n\n        }\n\n \n\n        void setIndicatorColors(int... colors) {\n\n            mIndicatorColors = colors;\n\n        }\n\n \n\n        void setDividerColors(int... colors) {\n\n            mDividerColors = colors;\n\n        }\n\n    }\n\n}\n  "}},"com.example.android.swiperefreshmultipleviews":{"MainActivity.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n \n\n \n\n \n\n \n\npackage com.example.android.swiperefreshmultipleviews;\n\n \n\nimport android.os.Bundle;\n\nimport android.support.v4.app.FragmentTransaction;\n\nimport android.view.Menu;\n\nimport android.view.MenuItem;\n\nimport android.widget.ViewAnimator;\n\n \n\nimport com.example.android.common.activities.SampleActivityBase;\n\nimport com.example.android.common.logger.Log;\n\nimport com.example.android.common.logger.LogFragment;\n\nimport com.example.android.common.logger.LogWrapper;\n\nimport com.example.android.common.logger.MessageOnlyLogFilter;\n\n \n\n/**\n\n * A simple launcher activity containing a summary sample description, sample log and a custom\n\n * {@link android.support.v4.app.Fragment} which can display a view.\n\n * <p>\n\n * For devices with displays with a width of 720dp or greater, the sample log is always visible,\n\n * on other devices it's visibility is controlled by an item on the Action Bar.\n\n */\n\npublic class MainActivity extends SampleActivityBase {\n\n \n\n    public static final String TAG = \"MainActivity\";\n\n \n\n    // Whether the Log Fragment is currently shown\n\n    private boolean mLogShown;\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_main);\n\n \n\n        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();\n\n        SwipeRefreshMultipleViewsFragment fragment = new SwipeRefreshMultipleViewsFragment();\n\n        transaction.replace(R.id.sample_content_fragment, fragment);\n\n        transaction.commit();\n\n    }\n\n \n\n    @Override\n\n    public boolean onCreateOptionsMenu(Menu menu) {\n\n        getMenuInflater().inflate(R.menu.main, menu);\n\n        return true;\n\n    }\n\n \n\n    @Override\n\n    public boolean onPrepareOptionsMenu(Menu menu) {\n\n        MenuItem logToggle = menu.findItem(R.id.menu_toggle_log);\n\n        logToggle.setVisible(findViewById(R.id.sample_output) instanceof ViewAnimator);\n\n        logToggle.setTitle(mLogShown ? R.string.sample_hide_log : R.string.sample_show_log);\n\n \n\n        return super.onPrepareOptionsMenu(menu);\n\n    }\n\n \n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch(item.getItemId()) {\n\n            case R.id.menu_toggle_log:\n\n                mLogShown = !mLogShown;\n\n                ViewAnimator output = (ViewAnimator) findViewById(R.id.sample_output);\n\n                if (mLogShown) {\n\n                    output.setDisplayedChild(1);\n\n                } else {\n\n                    output.setDisplayedChild(0);\n\n                }\n\n                supportInvalidateOptionsMenu();\n\n                return true;\n\n        }\n\n        return super.onOptionsItemSelected(item);\n\n    }\n\n \n\n    /** Create a chain of targets that will receive log data */\n\n    @Override\n\n    public void initializeLogging() {\n\n        // Wraps Android's native log framework.\n\n        LogWrapper logWrapper = new LogWrapper();\n\n        // Using Log, front-end to the logging chain, emulates android.util.log method signatures.\n\n        Log.setLogNode(logWrapper);\n\n \n\n        // Filter strips out everything except the message text.\n\n        MessageOnlyLogFilter msgFilter = new MessageOnlyLogFilter();\n\n        logWrapper.setNext(msgFilter);\n\n \n\n        // On screen logging via a fragment with a TextView.\n\n        LogFragment logFragment = (LogFragment) getSupportFragmentManager()\n\n                .findFragmentById(R.id.log_fragment);\n\n        msgFilter.setNext(logFragment.getLogView());\n\n \n\n        Log.i(TAG, \"Ready\");\n\n    }\n\n}\n  ","MultiSwipeRefreshLayout.java":"\n    \n\n/*\n\n * Copyright 2014 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *       http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.swiperefreshmultipleviews;\n\n \n\nimport android.content.Context;\n\nimport android.support.v4.view.ViewCompat;\n\nimport android.support.v4.widget.SwipeRefreshLayout;\n\nimport android.util.AttributeSet;\n\nimport android.view.View;\n\nimport android.widget.AbsListView;\n\n \n\n/**\n\n * A descendant of {@link android.support.v4.widget.SwipeRefreshLayout} which supports multiple\n\n * child views triggering a refresh gesture. You set the views which can trigger the gesture via\n\n * {@link #setSwipeableChildren(int...)}, providing it the child ids.\n\n */\n\npublic class MultiSwipeRefreshLayout extends SwipeRefreshLayout {\n\n \n\n    private View[] mSwipeableChildren;\n\n \n\n    public MultiSwipeRefreshLayout(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public MultiSwipeRefreshLayout(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    /**\n\n     * Set the children which can trigger a refresh by swiping down when they are visible. These\n\n     * views need to be a descendant of this view.\n\n     */\n\n    public void setSwipeableChildren(final int... ids) {\n\n        assert ids != null;\n\n \n\n        // Iterate through the ids and find the Views\n\n        mSwipeableChildren = new View[ids.length];\n\n        for (int i = 0; i < ids.length; i++) {\n\n            mSwipeableChildren[i] = findViewById(ids[i]);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * This method controls when the swipe-to-refresh gesture is triggered. By returning false here\n\n     * we are signifying that the view is in a state where a refresh gesture can start.\n\n     *\n\n     * <p>As {@link android.support.v4.widget.SwipeRefreshLayout} only supports one direct child by\n\n     * default, we need to manually iterate through our swipeable children to see if any are in a\n\n     * state to trigger the gesture. If so we return false to start the gesture.\n\n     */\n\n    @Override\n\n    public boolean canChildScrollUp() {\n\n        if (mSwipeableChildren != null && mSwipeableChildren.length > 0) {\n\n            // Iterate through the scrollable children and check if any of them can not scroll up\n\n            for (View view : mSwipeableChildren) {\n\n                if (view != null && view.isShown() && !canViewScrollUp(view)) {\n\n                    // If the view is shown, and can not scroll upwards, return false and start the\n\n                    // gesture.\n\n                    return false;\n\n                }\n\n            }\n\n        }\n\n        return true;\n\n    }\n\n \n\n    /**\n\n     * Utility method to check whether a {@link View} can scroll up from it's current position.\n\n     * Handles platform version differences, providing backwards compatible functionality where\n\n     * needed.\n\n     */\n\n    private static boolean canViewScrollUp(View view) {\n\n        if (android.os.Build.VERSION.SDK_INT >= 14) {\n\n            // For ICS and above we can call canScrollVertically() to determine this\n\n            return ViewCompat.canScrollVertically(view, -1);\n\n        } else {\n\n            if (view instanceof AbsListView) {\n\n                // Pre-ICS we need to manually check the first visible item and the child view's top\n\n                // value\n\n                final AbsListView listView = (AbsListView) view;\n\n                return listView.getChildCount() > 0 &&\n\n                        (listView.getFirstVisiblePosition() > 0\n\n                                || listView.getChildAt(0).getTop() < listView.getPaddingTop());\n\n            } else {\n\n                // For all other view types we just check the getScrollY() value\n\n                return view.getScrollY() > 0;\n\n            }\n\n        }\n\n    }\n\n}\n  ","SwipeRefreshMultipleViewsFragment.java":"\n    \n\n/*\n\n * Copyright 2014 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *       http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.swiperefreshmultipleviews;\n\n \n\nimport com.example.android.common.dummydata.Cheeses;\n\nimport com.example.android.common.logger.Log;\n\n \n\nimport android.os.AsyncTask;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.support.v4.widget.SwipeRefreshLayout;\n\nimport android.view.LayoutInflater;\n\nimport android.view.Menu;\n\nimport android.view.MenuInflater;\n\nimport android.view.MenuItem;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ArrayAdapter;\n\nimport android.widget.GridView;\n\n \n\nimport java.util.List;\n\n \n\n/**\n\n * A sample which shows how to use {@link android.support.v4.widget.SwipeRefreshLayout} to add\n\n * the 'swipe-to-refresh' gesture to a layout with multiple children. In this sample,\n\n * SwipeRefreshLayout contains a scrollable {@link android.widget.GridView}, along with a\n\n * {@link android.widget.TextView} empty view.\n\n *\n\n * <p>To provide an accessible way to trigger the refresh, this app also provides a refresh\n\n * action item.\n\n *\n\n * <p>In this sample app, the refresh updates the GridView with a random set of new items.\n\n */\n\npublic class SwipeRefreshMultipleViewsFragment extends Fragment {\n\n \n\n    private static final String LOG_TAG = SwipeRefreshMultipleViewsFragment.class.getSimpleName();\n\n \n\n    private static final int LIST_ITEM_COUNT = 40;\n\n \n\n    /**\n\n     * The {@link MultiSwipeRefreshLayout} that detects swipe gestures and triggers callbacks in\n\n     * the app.\n\n     */\n\n    private MultiSwipeRefreshLayout mSwipeRefreshLayout;\n\n \n\n    /**\n\n     * The {@link android.widget.GridView} that displays the content that should be refreshed.\n\n     */\n\n    private GridView mGridView;\n\n \n\n    /**\n\n     * The {@link android.widget.ListAdapter} used to populate the {@link android.widget.GridView}\n\n     * defined in the previous statement.\n\n     */\n\n    private ArrayAdapter<String> mListAdapter;\n\n \n\n    /**\n\n     * The {@link View} which is displayed when the GridView is empty.\n\n     */\n\n    private View mEmptyView;\n\n \n\n    @Override\n\n    public void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n \n\n        // Notify the system to allow an options menu for this fragment.\n\n        setHasOptionsMenu(true);\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n            Bundle savedInstanceState) {\n\n        View view = inflater.inflate(R.layout.fragment_sample, container, false);\n\n \n\n        // Retrieve the SwipeRefreshLayout and GridView instances\n\n        mSwipeRefreshLayout = (MultiSwipeRefreshLayout) view.findViewById(R.id.swiperefresh);\n\n \n\n        // Set the color scheme of the SwipeRefreshLayout by providing 4 color resource ids\n\n        mSwipeRefreshLayout.setColorScheme(\n\n                R.color.swipe_color_1, R.color.swipe_color_2,\n\n                R.color.swipe_color_3, R.color.swipe_color_4);\n\n \n\n        // Retrieve the GridView\n\n        mGridView = (GridView) view.findViewById(android.R.id.list);\n\n \n\n        // Retrieve the empty view\n\n        mEmptyView = view.findViewById(android.R.id.empty);\n\n \n\n        return view;\n\n    }\n\n \n\n    @Override\n\n    public void onViewCreated(View view, Bundle savedInstanceState) {\n\n        super.onViewCreated(view, savedInstanceState);\n\n \n\n        /**\n\n         * Create an ArrayAdapter to contain the data for the GridView. Each item in the GridView\n\n         * uses the system-defined simple_list_item_1 layout that contains one TextView. Initially\n\n         */\n\n        mListAdapter = new ArrayAdapter<String>(\n\n                getActivity(),\n\n                android.R.layout.simple_list_item_1,\n\n                android.R.id.text1);\n\n \n\n        // Set the adapter between the GridView and its backing data.\n\n        mGridView.setAdapter(mListAdapter);\n\n \n\n        // Set the empty view so that it is displayed as needed\n\n        mGridView.setEmptyView(mEmptyView);\n\n \n\n        // Tell the MultiSwipeRefreshLayout which views are swipeable. In this case, the GridView\n\n        // and empty view.\n\n        mSwipeRefreshLayout.setSwipeableChildren(android.R.id.list, android.R.id.empty);\n\n \n\n        /**\n\n         * Implement {@link SwipeRefreshLayout.OnRefreshListener}. When users do the \"swipe to\n\n         * refresh\" gesture, SwipeRefreshLayout invokes\n\n         * {@link SwipeRefreshLayout.OnRefreshListener#onRefresh onRefresh()}. In\n\n         * {@link SwipeRefreshLayout.OnRefreshListener#onRefresh onRefresh()}, call a method that\n\n         * refreshes the content. Call the same method in response to the Refresh action from the\n\n         * action bar.\n\n         */\n\n        mSwipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\n\n            @Override\n\n            public void onRefresh() {\n\n                Log.i(LOG_TAG, \"onRefresh called from SwipeRefreshLayout\");\n\n \n\n                initiateRefresh();\n\n            }\n\n        });\n\n    }\n\n \n\n    @Override\n\n    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {\n\n        inflater.inflate(R.menu.main_menu, menu);\n\n    }\n\n \n\n    /**\n\n     * Respond to the user's selection of the Refresh action item. Start the SwipeRefreshLayout\n\n     * progress bar, then initiate the background task that refreshes the content.\n\n     */\n\n    @Override\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch (item.getItemId()) {\n\n            case R.id.menu_clear:\n\n                Log.i(LOG_TAG, \"Clear menu item selected\");\n\n                mListAdapter.clear();\n\n                return true;\n\n \n\n            case R.id.menu_refresh:\n\n                Log.i(LOG_TAG, \"Refresh menu item selected\");\n\n \n\n                // We make sure that the SwipeRefreshLayout is displaying it's refreshing indicator\n\n                if (!mSwipeRefreshLayout.isRefreshing()) {\n\n                    mSwipeRefreshLayout.setRefreshing(true);\n\n                }\n\n \n\n                // Start our refresh background task\n\n                initiateRefresh();\n\n \n\n                return true;\n\n        }\n\n \n\n        return super.onOptionsItemSelected(item);\n\n    }\n\n \n\n    /**\n\n     * By abstracting the refresh process to a single method, the app allows both the\n\n     * SwipeGestureLayout onRefresh() method and the Refresh action item to refresh the content.\n\n     */\n\n    private void initiateRefresh() {\n\n        Log.i(LOG_TAG, \"initiateRefresh\");\n\n \n\n        /**\n\n         * Execute the background task, which uses {@link android.os.AsyncTask} to load the data.\n\n         */\n\n        new DummyBackgroundTask().execute();\n\n    }\n\n \n\n    /**\n\n     * When the AsyncTask finishes, it calls onRefreshComplete(), which updates the data in the\n\n     * ListAdapter and turns off the progress bar.\n\n     */\n\n    private void onRefreshComplete(List<String> result) {\n\n        Log.i(LOG_TAG, \"onRefreshComplete\");\n\n \n\n        // Remove all items from the ListAdapter, and then replace them with the new items\n\n        mListAdapter.clear();\n\n        for (String cheese : result) {\n\n            mListAdapter.add(cheese);\n\n        }\n\n \n\n        // Stop the refreshing indicator\n\n        mSwipeRefreshLayout.setRefreshing(false);\n\n    }\n\n \n\n    /**\n\n     * Dummy {@link AsyncTask} which simulates a long running task to fetch new cheeses.\n\n     */\n\n    private class DummyBackgroundTask extends AsyncTask<Void, Void, List<String>> {\n\n \n\n        static final int TASK_DURATION = 3 * 1000; // 3 seconds\n\n \n\n        @Override\n\n        protected List<String> doInBackground(Void... params) {\n\n            // Sleep for a small amount of time to simulate a background-task\n\n            try {\n\n                Thread.sleep(TASK_DURATION);\n\n            } catch (InterruptedException e) {\n\n                e.printStackTrace();\n\n            }\n\n \n\n            // Return a new random list of cheeses\n\n            return Cheeses.randomList(LIST_ITEM_COUNT);\n\n        }\n\n \n\n        @Override\n\n        protected void onPostExecute(List<String> result) {\n\n            super.onPostExecute(result);\n\n \n\n            // Tell the Fragment that the refresh has completed\n\n            onRefreshComplete(result);\n\n        }\n\n \n\n    }\n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.swiperefreshmultipleviews\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk android:minSdkVersion=\"10\" android:targetSdkVersion=\"17\" />\n\n \n\n    <application android:allowBackup=\"true\"\n\n        android:label=\"@string/app_name\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:theme=\"@style/AppTheme\">\n\n \n\n        <activity android:name=\".MainActivity\"\n\n                  android:label=\"@string/app_name\">\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n \n\n</manifest>\n  "},"TextSwitcher":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com//samples/TextSwitcher/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com//samples/TextSwitcher/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com//samples/TextSwitcher/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com//samples/TextSwitcher/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com//samples/TextSwitcher/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleMessageTile\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n            android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n            android:text=\"@string/intro_message\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n  ","sample_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    xmlns:tools=\"http://schemas.android.com/tools\"\n\n    android:id=\"@+id/LinearLayout1\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:layout_gravity=\"top|center_horizontal\"\n\n    android:gravity=\"center_horizontal\"\n\n    android:orientation=\"vertical\"\n\n    android:paddingBottom=\"@dimen/activity_vertical_margin\"\n\n    android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n\n    android:paddingRight=\"@dimen/activity_horizontal_margin\"\n\n    android:paddingTop=\"@dimen/activity_vertical_margin\"\n\n    tools:context=\".MainActivity\" >\n\n \n\n    <TextView\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:text=\"@string/intro\" />\n\n \n\n    <Button\n\n        android:id=\"@+id/button\"\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        android:text=\"@string/next\" />\n\n \n\n    <TextSwitcher\n\n        android:id=\"@+id/switcher\"\n\n        android:layout_width=\"match_parent\"\n\n        android:layout_height=\"wrap_content\"/>\n\n \n\n</LinearLayout>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">TextSwitcher</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n                This sample illustrates the use of a TextSwitcher to display text.\n\n                \\n\\nClick the button below to set new text in the TextSwitcher and observe the\n\n                in and out fade animations.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <!-- Default screen margins, per the Android Design guidelines. -->\n\n    <dimen name=\"activity_horizontal_margin\">16dp</dimen>\n\n    <dimen name=\"activity_vertical_margin\">16dp</dimen>\n\n \n\n</resources>\n  ","strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <string name=\"intro\">This sample illustrates the use of a <b>TextSwitcher</b> to display text.\n\n\\n\\n<b>Click the button</b> below to set new text in the TextSwitcher and observe the in and out\n\n fade animations.</string>\n\n    <string name=\"next\">Next</string>\n\n \n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <!--\n\n         Customize dimensions originally defined in res/values/dimens.xml (such as\n\n         screen margins) for sw600dp devices (e.g. 7\" tablets) here.\n\n    -->\n\n \n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw720dp-land":{"dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <!--\n\n         Customize dimensions originally defined in res/values/dimens.xml (such as\n\n         screen margins) for sw720dp devices (e.g. 10\" tablets) in landscape here.\n\n    -->\n\n    <dimen name=\"activity_horizontal_margin\">128dp</dimen>\n\n \n\n</resources>\n  "},"values-v11":{"styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <!--\n\n        Base application theme for API 11+. This theme completely replaces\n\n        AppBaseTheme from res/values/styles.xml on API 11+ devices.\n\n    -->\n\n    <style name=\"AppBaseTheme\" parent=\"android:Theme.Holo.Light\">\n\n        <!-- API 11 theme customizations can go here. -->\n\n    </style>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "},"values-v14":{"styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <!--\n\n        Base application theme for API 14+. This theme completely replaces\n\n        AppBaseTheme from BOTH res/values/styles.xml and\n\n        res/values-v11/styles.xml on API 14+ devices.\n\n    -->\n\n    <style name=\"AppBaseTheme\" parent=\"android:Theme.Holo.Light.DarkActionBar\">\n\n        <!-- API 14 theme customizations can go here. -->\n\n    </style>\n\n \n\n</resources>\n  "}},"src":{"com.example.android.common.logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "},"com.example.android.textswitcher":{"MainActivity.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *       http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.textswitcher;\n\n \n\nimport android.app.Activity;\n\nimport android.os.Bundle;\n\nimport android.view.Gravity;\n\nimport android.view.View;\n\nimport android.view.animation.Animation;\n\nimport android.view.animation.AnimationUtils;\n\nimport android.widget.Button;\n\nimport android.widget.TextSwitcher;\n\nimport android.widget.TextView;\n\nimport android.widget.ViewSwitcher.ViewFactory;\n\n \n\n/**\n\n * This sample shows the use of the {@link android.widget.TextSwitcher} View with animations. A\n\n * {@link android.widget.TextSwitcher} is a special type of {@link android.widget.ViewSwitcher} that animates\n\n * the current text out and new text in when\n\n * {@link android.widget.TextSwitcher#setText(CharSequence)} is called.\n\n */\n\npublic class MainActivity extends Activity {\n\n    private TextSwitcher mSwitcher;\n\n    private int mCounter = 0;\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.sample_main);\n\n \n\n        // Get the TextSwitcher view from the layout\n\n        mSwitcher = (TextSwitcher) findViewById(R.id.switcher);\n\n \n\n        // Set the factory used to create TextViews to switch between.\n\n        mSwitcher.setFactory(mFactory);\n\n \n\n        /*\n\n         * Set the in and out animations. Using the fade_in/out animations\n\n         * provided by the framework.\n\n         */\n\n        Animation in = AnimationUtils.loadAnimation(this,\n\n                android.R.anim.fade_in);\n\n        Animation out = AnimationUtils.loadAnimation(this,\n\n                android.R.anim.fade_out);\n\n        mSwitcher.setInAnimation(in);\n\n        mSwitcher.setOutAnimation(out);\n\n \n\n        /*\n\n         * Setup the 'next' button. The counter is incremented when clicked and\n\n         * the new value is displayed in the TextSwitcher. The change of text is\n\n         * automatically animated using the in/out animations set above.\n\n         */\n\n        Button nextButton = (Button) findViewById(R.id.button);\n\n        nextButton.setOnClickListener(new View.OnClickListener() {\n\n \n\n            @Override\n\n            public void onClick(View v) {\n\n                mCounter++;\n\n                mSwitcher.setText(String.valueOf(mCounter));\n\n            }\n\n        });\n\n \n\n        // Set the initial text without an animation\n\n        mSwitcher.setCurrentText(String.valueOf(mCounter));\n\n \n\n    }\n\n \n\n    /**\n\n     * The {@link android.widget.ViewSwitcher.ViewFactory} used to create {@link android.widget.TextView}s that the\n\n     * {@link android.widget.TextSwitcher} will switch between.\n\n     */\n\n    private ViewFactory mFactory = new ViewFactory() {\n\n \n\n        @Override\n\n        public View makeView() {\n\n \n\n            // Create a new TextView\n\n            TextView t = new TextView(MainActivity.this);\n\n            t.setGravity(Gravity.TOP | Gravity.CENTER_HORIZONTAL);\n\n            t.setTextAppearance(MainActivity.this, android.R.style.TextAppearance_Large);\n\n            return t;\n\n        }\n\n    };\n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.textswitcher\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\" >\n\n \n\n    <uses-sdk\n\n        android:minSdkVersion=\"4\"\n\n        android:targetSdkVersion=\"17\" />\n\n \n\n    <application\n\n        android:allowBackup=\"true\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:label=\"@string/app_name\"\n\n        android:theme=\"@style/AppTheme\" >\n\n        <activity\n\n            android:name=\".MainActivity\"\n\n            android:label=\"@string/app_name\" >\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n \n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n</manifest>\n  "}},"Views":{"TextLinkify":{"res":{"drawable-hdpi":{"ic_launcher.png":"http://developer.android.com//samples/TextLinkify/res/drawable-hdpi/ic_launcher.png","tile.9.png":"http://developer.android.com//samples/TextLinkify/res/drawable-hdpi/tile.9.png"},"drawable-mdpi":{"ic_launcher.png":"http://developer.android.com//samples/TextLinkify/res/drawable-mdpi/ic_launcher.png"},"drawable-xhdpi":{"ic_launcher.png":"http://developer.android.com//samples/TextLinkify/res/drawable-xhdpi/ic_launcher.png"},"drawable-xxhdpi":{"ic_launcher.png":"http://developer.android.com//samples/TextLinkify/res/drawable-xxhdpi/ic_launcher.png"},"layout":{"activity_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    android:layout_width=\"match_parent\"\n\n    android:layout_height=\"match_parent\"\n\n    android:orientation=\"vertical\">\n\n \n\n    <LinearLayout style=\"@style/Widget.SampleMessageTile\"\n\n                  android:layout_width=\"match_parent\"\n\n                  android:layout_height=\"wrap_content\"\n\n                  android:orientation=\"vertical\">\n\n \n\n        <TextView style=\"@style/Widget.SampleMessage\"\n\n            android:layout_width=\"match_parent\"\n\n            android:layout_height=\"wrap_content\"\n\n            android:layout_marginLeft=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginRight=\"@dimen/horizontal_page_margin\"\n\n            android:layout_marginTop=\"@dimen/vertical_page_margin\"\n\n            android:layout_marginBottom=\"@dimen/vertical_page_margin\"\n\n            android:text=\"@string/intro_message\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n  ","sample_main.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n    <ScrollView\n\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n        xmlns:tools=\"http://schemas.android.com/tools\"\n\n        android:layout_width=\"wrap_content\"\n\n        android:layout_height=\"wrap_content\"\n\n        tools:context=\".MainActivity\">\n\n \n\n        <LinearLayout\n\n            android:orientation=\"vertical\"\n\n            android:layout_width=\"fill_parent\"\n\n            android:layout_height=\"fill_parent\"\n\n            android:paddingBottom=\"@dimen/activity_vertical_margin\"\n\n            android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n\n            android:paddingRight=\"@dimen/activity_horizontal_margin\"\n\n            android:paddingTop=\"@dimen/activity_vertical_margin\">\n\n \n\n \n\n            <TextView\n\n                android:layout_width=\"wrap_content\"\n\n                android:layout_height=\"wrap_content\"\n\n                android:text=\"@string/intro\" />\n\n \n\n            <!-- text_auto_linkify automatically linkifies things like URLs and phone numbers. -->\n\n            <TextView\n\n                android:id=\"@+id/text_auto_linkify\"\n\n                style=\"@style/LinkText\"\n\n                android:layout_width=\"match_parent\"\n\n                android:layout_height=\"wrap_content\"\n\n                android:autoLink=\"all\"\n\n                android:text=\"@string/link_text_auto\" />\n\n \n\n            <!--\n\n                   text_html_resource uses a string resource containing explicit anchor tags (<a>)\n\n                   to specify links.\n\n            -->\n\n            <TextView\n\n                android:id=\"@+id/text_html_resource\"\n\n                style=\"@style/LinkText\"\n\n                android:layout_width=\"match_parent\"\n\n                android:layout_height=\"wrap_content\"/>\n\n \n\n            <!-- text_html_program builds the text in the Java code using HTML. -->\n\n            <TextView\n\n                android:id=\"@+id/text_html_program\"\n\n                style=\"@style/LinkText\"\n\n                android:layout_width=\"match_parent\"\n\n                android:layout_height=\"wrap_content\" />\n\n \n\n            <!-- text_spannable builds the text in the Java code without using HTML. -->\n\n            <TextView\n\n                android:id=\"@+id/text_spannable\"\n\n                style=\"@style/LinkText\"\n\n                android:layout_width=\"match_parent\"\n\n                android:layout_height=\"wrap_content\" />\n\n        </LinearLayout>\n\n    </ScrollView>\n  "},"values":{"base-strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<resources>\n\n    <string name=\"app_name\">TextLinkify</string>\n\n    <string name=\"intro_message\">\n\n        <![CDATA[\n\n         \n\n             \n\n            This sample illustrates how links can be added to a TextView. This can be done either\n\n            automatically by setting the \"autoLink\" property or explicitly.\n\n             \n\n         \n\n        ]]>\n\n    </string>\n\n</resources>\n  ","dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <!-- Default screen margins, per the Android Design guidelines. -->\n\n    <dimen name=\"activity_horizontal_margin\">16dp</dimen>\n\n    <dimen name=\"activity_vertical_margin\">16dp</dimen>\n\n \n\n</resources>\n  ","strings.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <string name=\"intro\">This sample illustrates how links can be added to a TextView.\n\n    \\nThis can be done either automatically by setting the <i>autoLink</i> property\n\n    or explicitly.</string>\n\n    <string name=\"link_text_auto\"><b>text_auto_linkify: Various kinds\n\n      of data that will be auto-linked.</b>\n\n      In this text are some things that are actionable.  For instance,\n\n      you can click on http://www.google.com and it will launch the\n\n      web browser.  You can click on google.com too.  If you\n\n      click on (415) 555-1212 it should dial the phone.  Or just write\n\n      foobar@example.com for an e-mail link.  If you have a URI like\n\n      http://www.example.com/lala/foobar@example.com you should get the\n\n      full link not the e-mail address.  Or you can put a location\n\n      like 1600 Amphitheatre Parkway, Mountain View, CA 94043.  To summarize:\n\n      https://www.google.com, or 650-253-0000, somebody@example.com,\n\n      or 9606 North MoPac Expressway, Suite 400, Austin, TX 78759.</string>\n\n    <string name=\"link_text_manual\"><![CDATA[<b>text_html_resource:\n\n      Explicit links using &lt;a&gt; markup.</b>\n\n      This has markup for a <a href=\"http://www.google.com\">link</a> specified\n\n      via an &lt;a&gt; tag.  Use a \\\"tel:\\\" URL\n\n      to <a href=\"tel:4155551212\">dial a phone number</a>.]]></string>\n\n \n\n</resources>\n  ","styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <style name=\"LinkText\">\n\n        <item name=\"android:paddingTop\">9dp</item>\n\n        <item name=\"android:paddingBottom\">9dp</item>\n\n    </style>\n\n</resources>\n  ","template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Define standard dimensions to comply with Holo-style grids and rhythm. -->\n\n \n\n    <dimen name=\"margin_tiny\">4dp</dimen>\n\n    <dimen name=\"margin_small\">8dp</dimen>\n\n    <dimen name=\"margin_medium\">16dp</dimen>\n\n    <dimen name=\"margin_large\">32dp</dimen>\n\n    <dimen name=\"margin_huge\">64dp</dimen>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_medium</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n \n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Light\" />\n\n \n\n    <style name=\"Theme.Sample\" parent=\"Theme.Base\" />\n\n \n\n    <style name=\"AppTheme\" parent=\"Theme.Sample\" />\n\n    <!-- Widget styling -->\n\n \n\n    <style name=\"Widget\" />\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceMedium</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.1</item>\n\n    </style>\n\n \n\n    <style name=\"Widget.SampleMessageTile\">\n\n        <item name=\"android:background\">@drawable/tile</item>\n\n        <item name=\"android:shadowColor\">#7F000000</item>\n\n        <item name=\"android:shadowDy\">-3.5</item>\n\n        <item name=\"android:shadowRadius\">2</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw600dp":{"template-dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Semantic definitions -->\n\n \n\n    <dimen name=\"horizontal_page_margin\">@dimen/margin_huge</dimen>\n\n    <dimen name=\"vertical_page_margin\">@dimen/margin_medium</dimen>\n\n \n\n</resources>\n  ","template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <style name=\"Widget.SampleMessage\">\n\n        <item name=\"android:textAppearance\">?android:textAppearanceLarge</item>\n\n        <item name=\"android:lineSpacingMultiplier\">1.2</item>\n\n        <item name=\"android:shadowDy\">-6.5</item>\n\n    </style>\n\n \n\n</resources>\n  "},"values-sw720dp-land":{"dimens.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n-->\n\n \n\n<resources>\n\n \n\n    <!--\n\n         Customize dimensions originally defined in res/values/dimens.xml (such as\n\n         screen margins) for sw720dp devices (e.g. 10\" tablets) in landscape here.\n\n    -->\n\n    <dimen name=\"activity_horizontal_margin\">128dp</dimen>\n\n \n\n</resources>\n  "},"values-v11":{"template-styles.xml":"\n    \n\n<!--\n\n  Copyright 2013 The Android Open Source Project\n\n \n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n\n  you may not use this file except in compliance with the License.\n\n  You may obtain a copy of the License at\n\n \n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n  Unless required by applicable law or agreed to in writing, software\n\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n  See the License for the specific language governing permissions and\n\n  limitations under the License.\n\n  -->\n\n \n\n<resources>\n\n \n\n    <!-- Activity themes -->\n\n    <style name=\"Theme.Base\" parent=\"android:Theme.Holo.Light\" />\n\n \n\n</resources>\n  "}},"src":{"com.example.android.common.logger":{"Log.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Helper class for a list (or tree) of LoggerNodes.\n\n *\n\n * <p>When this is set as the head of the list,\n\n * an instance of it can function as a drop-in replacement for {@link android.util.Log}.\n\n * Most of the methods in this class server only to map a method call in Log to its equivalent\n\n * in LogNode.</p>\n\n */\n\npublic class Log {\n\n    // Grabbing the native values from Android's native logging facilities,\n\n    // to make for easy migration and interop.\n\n    public static final int NONE = -1;\n\n    public static final int VERBOSE = android.util.Log.VERBOSE;\n\n    public static final int DEBUG = android.util.Log.DEBUG;\n\n    public static final int INFO = android.util.Log.INFO;\n\n    public static final int WARN = android.util.Log.WARN;\n\n    public static final int ERROR = android.util.Log.ERROR;\n\n    public static final int ASSERT = android.util.Log.ASSERT;\n\n \n\n    // Stores the beginning of the LogNode topology.\n\n    private static LogNode mLogNode;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public static LogNode getLogNode() {\n\n        return mLogNode;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to.\n\n     */\n\n    public static void setLogNode(LogNode node) {\n\n        mLogNode = node;\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mLogNode != null) {\n\n            mLogNode.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Instructs the LogNode to print the log data provided. Other LogNodes can\n\n     * be chained to the end of the LogNode as desired.\n\n     *\n\n     * @param priority Log level of the data being logged. Verbose, Error, etc.\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     */\n\n    public static void println(int priority, String tag, String msg) {\n\n        println(priority, tag, msg, null);\n\n    }\n\n \n\n   /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void v(String tag, String msg, Throwable tr) {\n\n        println(VERBOSE, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at VERBOSE priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void v(String tag, String msg) {\n\n        v(tag, msg, null);\n\n    }\n\n \n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void d(String tag, String msg, Throwable tr) {\n\n        println(DEBUG, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at DEBUG priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void d(String tag, String msg) {\n\n        d(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void i(String tag, String msg, Throwable tr) {\n\n        println(INFO, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at INFO priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void i(String tag, String msg) {\n\n        i(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, String msg, Throwable tr) {\n\n        println(WARN, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void w(String tag, String msg) {\n\n        w(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at WARN priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void w(String tag, Throwable tr) {\n\n        w(tag, null, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void e(String tag, String msg, Throwable tr) {\n\n        println(ERROR, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ERROR priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void e(String tag, String msg) {\n\n        e(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, String msg, Throwable tr) {\n\n        println(ASSERT, tag, msg, tr);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param msg The actual message to be logged.\n\n     */\n\n    public static void wtf(String tag, String msg) {\n\n        wtf(tag, msg, null);\n\n    }\n\n \n\n    /**\n\n     * Prints a message at ASSERT priority.\n\n     *\n\n     * @param tag Tag for for the log data. Can be used to organize log statements.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public static void wtf(String tag, Throwable tr) {\n\n        wtf(tag, null, tr);\n\n    }\n\n}\n  ","LogFragment.java":"\n    \n\n/*\n\n* Copyright 2013 The Android Open Source Project\n\n*\n\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n\n* you may not use this file except in compliance with the License.\n\n* You may obtain a copy of the License at\n\n*\n\n*     http://www.apache.org/licenses/LICENSE-2.0\n\n*\n\n* Unless required by applicable law or agreed to in writing, software\n\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* See the License for the specific language governing permissions and\n\n* limitations under the License.\n\n*/\n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *     http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.common.logger;\n\n \n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.support.v4.app.Fragment;\n\nimport android.text.Editable;\n\nimport android.text.TextWatcher;\n\nimport android.view.Gravity;\n\nimport android.view.LayoutInflater;\n\nimport android.view.View;\n\nimport android.view.ViewGroup;\n\nimport android.widget.ScrollView;\n\n \n\n/**\n\n * Simple fraggment which contains a LogView and uses is to output log data it receives\n\n * through the LogNode interface.\n\n */\n\npublic class LogFragment extends Fragment {\n\n \n\n    private LogView mLogView;\n\n    private ScrollView mScrollView;\n\n \n\n    public LogFragment() {}\n\n \n\n    public View inflateViews() {\n\n        mScrollView = new ScrollView(getActivity());\n\n        ViewGroup.LayoutParams scrollParams = new ViewGroup.LayoutParams(\n\n                ViewGroup.LayoutParams.MATCH_PARENT,\n\n                ViewGroup.LayoutParams.MATCH_PARENT);\n\n        mScrollView.setLayoutParams(scrollParams);\n\n \n\n        mLogView = new LogView(getActivity());\n\n        ViewGroup.LayoutParams logParams = new ViewGroup.LayoutParams(scrollParams);\n\n        logParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;\n\n        mLogView.setLayoutParams(logParams);\n\n        mLogView.setClickable(true);\n\n        mLogView.setFocusable(true);\n\n        mLogView.setTypeface(Typeface.MONOSPACE);\n\n \n\n        // Want to set padding as 16 dips, setPadding takes pixels.  Hooray math!\n\n        int paddingDips = 16;\n\n        double scale = getResources().getDisplayMetrics().density;\n\n        int paddingPixels = (int) ((paddingDips * (scale)) + .5);\n\n        mLogView.setPadding(paddingPixels, paddingPixels, paddingPixels, paddingPixels);\n\n        mLogView.setCompoundDrawablePadding(paddingPixels);\n\n \n\n        mLogView.setGravity(Gravity.BOTTOM);\n\n        mLogView.setTextAppearance(getActivity(), android.R.style.TextAppearance_Holo_Medium);\n\n \n\n        mScrollView.addView(mLogView);\n\n        return mScrollView;\n\n    }\n\n \n\n    @Override\n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n\n                             Bundle savedInstanceState) {\n\n \n\n        View result = inflateViews();\n\n \n\n        mLogView.addTextChangedListener(new TextWatcher() {\n\n            @Override\n\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n \n\n            @Override\n\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n \n\n            @Override\n\n            public void afterTextChanged(Editable s) {\n\n                mScrollView.fullScroll(ScrollView.FOCUS_DOWN);\n\n            }\n\n        });\n\n        return result;\n\n    }\n\n \n\n    public LogView getLogView() {\n\n        return mLogView;\n\n    }\n\n}\n  ","LogNode.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Basic interface for a logging system that can output to one or more targets.\n\n * Note that in addition to classes that will output these logs in some format,\n\n * one can also implement this interface over a filter and insert that in the chain,\n\n * such that no targets further down see certain data, or see manipulated forms of the data.\n\n * You could, for instance, write a \"ToHtmlLoggerNode\" that just converted all the log data\n\n * it received to HTML and sent it along to the next node in the chain, without printing it\n\n * anywhere.\n\n */\n\npublic interface LogNode {\n\n \n\n    /**\n\n     * Instructs first LogNode in the list to print the log data provided.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    public void println(int priority, String tag, String msg, Throwable tr);\n\n \n\n}\n  ","LogView.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.app.Activity;\n\nimport android.content.Context;\n\nimport android.util.*;\n\nimport android.widget.TextView;\n\n \n\n/** Simple TextView which is used to output log data received through the LogNode interface.\n\n*/\n\npublic class LogView extends TextView implements LogNode {\n\n \n\n    public LogView(Context context) {\n\n        super(context);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs) {\n\n        super(context, attrs);\n\n    }\n\n \n\n    public LogView(Context context, AttributeSet attrs, int defStyle) {\n\n        super(context, attrs, defStyle);\n\n    }\n\n \n\n    /**\n\n     * Formats the log data and prints it out to the LogView.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n \n\n         \n\n        String priorityStr = null;\n\n \n\n        // For the purposes of this View, we want to print the priority as readable text.\n\n        switch(priority) {\n\n            case android.util.Log.VERBOSE:\n\n                priorityStr = \"VERBOSE\";\n\n                break;\n\n            case android.util.Log.DEBUG:\n\n                priorityStr = \"DEBUG\";\n\n                break;\n\n            case android.util.Log.INFO:\n\n                priorityStr = \"INFO\";\n\n                break;\n\n            case android.util.Log.WARN:\n\n                priorityStr = \"WARN\";\n\n                break;\n\n            case android.util.Log.ERROR:\n\n                priorityStr = \"ERROR\";\n\n                break;\n\n            case android.util.Log.ASSERT:\n\n                priorityStr = \"ASSERT\";\n\n                break;\n\n            default:\n\n                break;\n\n        }\n\n \n\n        // Handily, the Log class has a facility for converting a stack trace into a usable string.\n\n        String exceptionStr = null;\n\n        if (tr != null) {\n\n            exceptionStr = android.util.Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // Take the priority, tag, message, and exception, and concatenate as necessary\n\n        // into one usable line of text.\n\n        final StringBuilder outputBuilder = new StringBuilder();\n\n \n\n        String delimiter = \"\\t\";\n\n        appendIfNotNull(outputBuilder, priorityStr, delimiter);\n\n        appendIfNotNull(outputBuilder, tag, delimiter);\n\n        appendIfNotNull(outputBuilder, msg, delimiter);\n\n        appendIfNotNull(outputBuilder, exceptionStr, delimiter);\n\n \n\n        // In case this was originally called from an AsyncTask or some other off-UI thread,\n\n        // make sure the update occurs within the UI thread.\n\n        ((Activity) getContext()).runOnUiThread( (new Thread(new Runnable() {\n\n            @Override\n\n            public void run() {\n\n                // Display the text we just generated within the LogView.\n\n                appendToLog(outputBuilder.toString());\n\n            }\n\n        })));\n\n \n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n \n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /** Takes a string and adds to it, with a separator, if the bit to be added isn't null. Since\n\n     * the logger takes so many arguments that might be null, this method helps cut out some of the\n\n     * agonizing tedium of writing the same 3 lines over and over.\n\n     * @param source StringBuilder containing the text to append to.\n\n     * @param addStr The String to append\n\n     * @param delimiter The String to separate the source and appended strings. A tab or comma,\n\n     *                  for instance.\n\n     * @return The fully concatenated String as a StringBuilder\n\n     */\n\n    private StringBuilder appendIfNotNull(StringBuilder source, String addStr, String delimiter) {\n\n        if (addStr != null) {\n\n            if (addStr.length() == 0) {\n\n                delimiter = \"\";\n\n            }\n\n \n\n            return source.append(addStr).append(delimiter);\n\n        }\n\n        return source;\n\n    }\n\n \n\n    // The next LogNode in the chain.\n\n    LogNode mNext;\n\n \n\n    /** Outputs the string as a new line of log data in the LogView. */\n\n    public void appendToLog(String s) {\n\n        append(\"\\n\" + s);\n\n    }\n\n \n\n \n\n}\n  ","LogWrapper.java":"\n    \n\n/*\n\n * Copyright (C) 2012 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\nimport android.util.Log;\n\n \n\n/**\n\n * Helper class which wraps Android's native Log utility in the Logger interface.  This way\n\n * normal DDMS output can be one of the many targets receiving and outputting logs simultaneously.\n\n */\n\npublic class LogWrapper implements LogNode {\n\n \n\n    // For piping:  The next node to receive Log data after this one has done its work.\n\n    private LogNode mNext;\n\n \n\n    /**\n\n     * Returns the next LogNode in the linked list.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n    /**\n\n     * Prints data out to the console using Android's native log mechanism.\n\n     * @param priority Log level of the data being logged.  Verbose, Error, etc.\n\n     * @param tag Tag for for the log data.  Can be used to organize log statements.\n\n     * @param msg The actual message to be logged. The actual message to be logged.\n\n     * @param tr If an exception was thrown, this can be sent along for the logging facilities\n\n     *           to extract and print useful information.\n\n     */\n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        // There actually are log methods that don't take a msg parameter.  For now,\n\n        // if that's the case, just convert null to the empty string and move on.\n\n        String useMsg = msg;\n\n        if (useMsg == null) {\n\n            useMsg = \"\";\n\n        }\n\n \n\n        // If an exeption was provided, convert that exception to a usable string and attach\n\n        // it to the end of the msg method.\n\n        if (tr != null) {\n\n            msg += \"\\n\" + Log.getStackTraceString(tr);\n\n        }\n\n \n\n        // This is functionally identical to Log.x(tag, useMsg);\n\n        // For instance, if priority were Log.VERBOSE, this would be the same as Log.v(tag, useMsg)\n\n        Log.println(priority, tag, useMsg);\n\n \n\n        // If this isn't the last node in the chain, move things along.\n\n        if (mNext != null) {\n\n            mNext.println(priority, tag, msg, tr);\n\n        }\n\n    }\n\n}\n  ","MessageOnlyLogFilter.java":"\n    \n\n/*\n\n * Copyright (C) 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *      http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\npackage com.example.android.common.logger;\n\n \n\n/**\n\n * Simple {@link LogNode} filter, removes everything except the message.\n\n * Useful for situations like on-screen log output where you don't want a lot of metadata displayed,\n\n * just easy-to-read message updates as they're happening.\n\n */\n\npublic class MessageOnlyLogFilter implements LogNode {\n\n \n\n    LogNode mNext;\n\n \n\n    /**\n\n     * Takes the \"next\" LogNode as a parameter, to simplify chaining.\n\n     *\n\n     * @param next The next LogNode in the pipeline.\n\n     */\n\n    public MessageOnlyLogFilter(LogNode next) {\n\n        mNext = next;\n\n    }\n\n \n\n    public MessageOnlyLogFilter() {\n\n    }\n\n \n\n    @Override\n\n    public void println(int priority, String tag, String msg, Throwable tr) {\n\n        if (mNext != null) {\n\n            getNext().println(Log.NONE, null, msg, null);\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Returns the next LogNode in the chain.\n\n     */\n\n    public LogNode getNext() {\n\n        return mNext;\n\n    }\n\n \n\n    /**\n\n     * Sets the LogNode data will be sent to..\n\n     */\n\n    public void setNext(LogNode node) {\n\n        mNext = node;\n\n    }\n\n \n\n}\n  "},"com.example.android.textlinkify":{"MainActivity.java":"\n    \n\n/*\n\n * Copyright 2013 The Android Open Source Project\n\n *\n\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n\n * you may not use this file except in compliance with the License.\n\n * You may obtain a copy of the License at\n\n *\n\n *       http://www.apache.org/licenses/LICENSE-2.0\n\n *\n\n * Unless required by applicable law or agreed to in writing, software\n\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n\n * limitations under the License.\n\n */\n\n \n\npackage com.example.android.textlinkify;\n\n \n\nimport android.app.Activity;\n\nimport android.graphics.Typeface;\n\nimport android.os.Bundle;\n\nimport android.text.Html;\n\nimport android.text.SpannableString;\n\nimport android.text.Spanned;\n\nimport android.text.method.LinkMovementMethod;\n\nimport android.text.style.StyleSpan;\n\nimport android.text.style.URLSpan;\n\nimport android.widget.TextView;\n\n \n\n/**\n\n * This sample demonstrates how clickable links can be added to a\n\n * {@link android.widget.TextView}.\n\n *\n\n * <p>This can be done in three ways:\n\n * <ul>\n\n * <li><b>Automatically:</b> Text added to a TextView can automatically be linkified by enabling\n\n * autoLinking. In XML, use the android:autoLink property, programatically call\n\n * {@link android.widget.TextView#setAutoLinkMask(int)} using an option from\n\n * {@link android.text.util.Linkify}</li>\n\n *\n\n * <li><b>Parsing a String as HTML:</b> See {@link android.text.Html#fromHtml(String)})</li>\n\n *\n\n * <li><b>Manually by constructing a {@link android.text.SpannableString}:</b> Consisting of\n\n * {@link android.text.style.StyleSpan} and {@link android.text.style.URLSpan} objects that\n\n * are contained within a {@link android.text.SpannableString}</li>\n\n * </ul></p>\n\n *\n\n */\n\npublic class MainActivity extends Activity {\n\n \n\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n \n\n        setContentView(R.layout.sample_main);\n\n \n\n        /*\n\n         *  text_auto_linkify shows the android:autoLink property, which\n\n         *  automatically linkifies things like URLs and phone numbers\n\n         *  found in the text. No java code is needed to make this\n\n         *  work.\n\n         *  This can also be enabled programmatically by calling\n\n         *  .setAutoLinkMask(Linkify.ALL) before the text is set on the TextView.\n\n         *\n\n         *  See android.text.util.Linkify for other options, for example only\n\n         *  auto-linking email addresses or phone numbers\n\n         */\n\n \n\n        /*\n\n         * text_html_resource has links specified by putting anchor tags (<a>) in the string\n\n         * resource. By default these links will appear but not\n\n         * respond to user input. To make them active, you need to\n\n         * call setMovementMethod() on the TextView object.\n\n         */\n\n        TextView textViewResource = (TextView) findViewById(R.id.text_html_resource);\n\n        textViewResource.setText(\n\n                Html.fromHtml(getResources().getString(R.string.link_text_manual)));\n\n        textViewResource.setMovementMethod(LinkMovementMethod.getInstance());\n\n \n\n        /*\n\n         * text_html_program shows creating text with links from HTML in the Java\n\n         * code, rather than from a string resource. Note that for a\n\n         * fixed string, using a (localizable) resource as shown above\n\n         * is usually a better way to go; this example is intended to\n\n         * illustrate how you might display text that came from a\n\n         * dynamic source (eg, the network).\n\n         */\n\n        TextView textViewHtml = (TextView) findViewById(R.id.text_html_program);\n\n        textViewHtml.setText(\n\n                Html.fromHtml(\n\n                        \"<b>text_html_program: Constructed from HTML programmatically.</b>\"\n\n                                + \"  Text with a <a href=\\\"http://www.google.com\\\">link</a> \"\n\n                                + \"created in the Java source code using HTML.\"));\n\n        textViewHtml.setMovementMethod(LinkMovementMethod.getInstance());\n\n \n\n        /*\n\n         * text_spannable illustrates constructing a styled string containing a\n\n         * link without using HTML at all. Again, for a fixed string\n\n         * you should probably be using a string resource, not a\n\n         * hardcoded value.\n\n         */\n\n        SpannableString ss = new SpannableString(\n\n                \"text_spannable: Manually created spans. Click here to dial the phone.\");\n\n \n\n        /*\n\n         * Make the first 38 characters bold by applying a StyleSpan with bold typeface.\n\n         *\n\n         * Characters 45 to 49 (the word \"here\") is made clickable by applying a URLSpan\n\n         * pointing to a telephone number. Clicking it opens the \"tel:\" URL that starts the dialer.\n\n         *\n\n         * The SPAN_EXCLUSIVE_EXCLUSIVE flag defines this span as exclusive, which means\n\n         * that it will not expand to include text inserted on either side of this span.\n\n         */\n\n        ss.setSpan(new StyleSpan(Typeface.BOLD), 0, 39,\n\n                Spanned.SPAN_INCLUSIVE_INCLUSIVE);\n\n        ss.setSpan(new URLSpan(\"tel:4155551212\"), 40 + 6, 40 + 10,\n\n                Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n\n \n\n        TextView textViewSpan = (TextView) findViewById(R.id.text_spannable);\n\n        textViewSpan.setText(ss);\n\n \n\n        /*\n\n         * Set the movement method to move between links in this TextView.\n\n         * This means that the user traverses through links in this TextView, automatically\n\n         * handling appropriate scrolling and key commands.\n\n         */\n\n        textViewSpan.setMovementMethod(LinkMovementMethod.getInstance());\n\n    }\n\n \n\n}\n  "}},"AndroidManifest.xml":"\n    \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n Copyright 2013 The Android Open Source Project\n\n \n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n\n you may not use this file except in compliance with the License.\n\n You may obtain a copy of the License at\n\n \n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n \n\n Unless required by applicable law or agreed to in writing, software\n\n distributed under the License is distributed on an \"AS IS\" BASIS,\n\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n See the License for the specific language governing permissions and\n\n limitations under the License.\n\n-->\n\n \n\n \n\n \n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\n    package=\"com.example.android.textlinkify\"\n\n    android:versionCode=\"1\"\n\n    android:versionName=\"1.0\">\n\n \n\n    <uses-sdk\n\n        android:minSdkVersion=\"4\"\n\n        android:targetSdkVersion=\"17\" />\n\n \n\n    <application\n\n        android:allowBackup=\"true\"\n\n        android:icon=\"@drawable/ic_launcher\"\n\n        android:label=\"@string/app_name\"\n\n        android:theme=\"@style/AppTheme\" >\n\n        <activity\n\n            android:name=\".MainActivity\"\n\n            android:label=\"@string/app_name\" >\n\n            <intent-filter>\n\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n\n            </intent-filter>\n\n        </activity>\n\n    </application>\n\n \n\n</manifest>\n  "}}}